is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,17,ackage org.apache.commons.cli2;
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,19,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,22, An Option that can process values passed on the command line in the form
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,23," ""--file README""."
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,25,ublic interface Argument extends Option {
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,28, Returns the initial separator character or
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,29, '\0' if no character has been set.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,31, @return char the initial separator character
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,33,har getInitialSeparator();
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,36," Processes the ""README"" style element of the argument."
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,38, Values identified should be added to the CommandLine object in
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,39, association with this Argument.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,41," @see WriteableCommandLine#addValue(Option,Object)"
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,43, @param commandLine The CommandLine object to store results in.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,44, @param args The arguments to process.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,45, @param option The option to register value against.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,46, @throws OptionException if any problems occur.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,48,oid processValues(
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,49,"inal WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,50,"inal ListIterator args,"
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,51,inal Option option)
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,52,hrows OptionException;
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,55, Adds defaults to a CommandLine.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,57, @param commandLine
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,58,            The CommandLine object to store defaults in.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,59, @param option
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,60,            The Option to store the defaults against.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,62,"oid defaultValues(final WriteableCommandLine commandLine, final Option option);"
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,65, Performs any necessary validation on the values added to the
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,66, CommandLine.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,68, Validation will typically involve using the
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,69, CommandLine.getValues(option) method to retrieve the values
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,70, and then either checking each value.  Optionally the String
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,71, value can be replaced by another Object such as a Number
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,72, instance or a File instance.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,74, @see CommandLine#getValues(Option)
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,76, @param commandLine The CommandLine object to query.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,77, @param option The option to lookup values with.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,78, @throws OptionException if any problems occur.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,80,"oid validate(final WriteableCommandLine commandLine, final Option option)"
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,81,hrows OptionException;
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,84, Indicates whether argument values must be present for the CommandLine to
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,85, be valid.
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,87, @see #getMinimum()
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,88, @see #getMaximum()
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,89, @return true iff the CommandLine will be invalid without at least one
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,90,         value
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,92,oolean isRequired();
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,95, Retrieves the minimum number of values required for a valid Argument
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,97, @return the minimum number of values
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,99,nt getMinimum();
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,102, Retrieves the maximum number of values acceptable for a valid Argument
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,104, @return the maximum number of values
False,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,106,nt getMaximum();
True,src/java/org/apache/commons/cli2/Argument.java,src/java/org/apache/commons/cli2/Argument.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.ListIterator;/** * An Option that can process values passed on the command line in the form * ""--file README"". */public interface Argument extends Option {    /**     * Returns the initial separator character or     * '\0' if no character has been set.     *     * @return char the initial separator character     */    char getInitialSeparator();    /**     * Processes the ""README"" style element of the argument.     *     * Values identified should be added to the CommandLine object in     * association with this Argument.     *     * @see WriteableCommandLine#addValue(Option,Object)     *     * @param commandLine The CommandLine object to store results in.     * @param args The arguments to process.     * @param option The option to register value against.     * @throws OptionException if any problems occur.     */    void processValues(        final WriteableCommandLine commandLine,        final ListIterator args,        final Option option)            throws OptionException;    /**     * Adds defaults to a CommandLine.     *     * @param commandLine     *            The CommandLine object to store defaults in.     * @param option     *            The Option to store the defaults against.     */    void defaultValues(final WriteableCommandLine commandLine, final Option option);    /**     * Performs any necessary validation on the values added to the     * CommandLine.     *     * Validation will typically involve using the     * CommandLine.getValues(option) method to retrieve the values     * and then either checking each value.  Optionally the String     * value can be replaced by another Object such as a Number     * instance or a File instance.     *     * @see CommandLine#getValues(Option)     *     * @param commandLine The CommandLine object to query.     * @param option The option to lookup values with.     * @throws OptionException if any problems occur.     */    void validate(final WriteableCommandLine commandLine, final Option option)        throws OptionException;    /**     * Indicates whether argument values must be present for the CommandLine to     * be valid.     *     * @see #getMinimum()     * @see #getMaximum()     * @return true iff the CommandLine will be invalid without at least one     *         value     */    boolean isRequired();    /**     * Retrieves the minimum number of values required for a valid Argument     *     * @return the minimum number of values     */    int getMinimum();    /**     * Retrieves the maximum number of values acceptable for a valid Argument     *     * @return the maximum number of values     */    int getMaximum();}"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,17,ackage org.apache.commons.cli2;
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,19,mport java.util.List;
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,20,mport java.util.Set;
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,23, Instances of CommandLine represent a command line that has been processed
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,24, according to the definition supplied to the parser.
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,26,ublic interface CommandLine {
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,29, Detects the presence of an option with the specified trigger in this
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,30, CommandLine.
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,32, @param trigger the trigger to search for
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,33, @return true iff an option with this trigger is present
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,35,oolean hasOption(final String trigger);
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,38, Detects the presence of an option in this CommandLine.
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,40, @param option the Option to search for
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,41, @return true iff the option is present
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,43,oolean hasOption(final Option option);
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,46, Finds the Option with the specified trigger
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,48, @param trigger the name of the option to retrieve
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,49, @return the Option matching the trigger or null if none exists
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,51,ption getOption(final String trigger);
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,54, Retrieves the Argument values associated with the specified Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,56, @param trigger a trigger used to lookup the Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,57, @return a list of values or an empty List if none are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,59,ist getValues(final String trigger);
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,62, Retrieves the Argument values associated with the specified Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,64, @param trigger a trigger used to lookup the Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,65, @param defaultValues the result to return if no values are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,66, @return a list of values or defaultValues if none are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,68,"ist getValues(final String trigger, final List defaultValues);"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,71, Retrieves the Argument values associated with the specified Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,73, @param option the Option associated with the values
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,74, @return a list of values or an empty List if none are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,76,ist getValues(final Option option);
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,79, Retrieves the Argument values associated with the specified Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,81, @param option the Option associated with the values
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,82, @param defaultValues the result to return if no values are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,83, @return a list of values or defaultValues if none are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,85,"ist getValues(final Option option, final List defaultValues);"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,88, Retrieves the single Argument value associated with the specified Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,90, @param trigger a trigger used to lookup the Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,91, @return the matching value or null if none exists
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,92, @throws IllegalStateException if more than one values are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,94,bject getValue(final String trigger) throws IllegalStateException;
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,97, Retrieves the single Argument value associated with the specified Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,99, @param trigger a trigger used to lookup the Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,100, @param defaultValue the result to use if no values are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,101, @return the matching value or defaultValue if none exists
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,102, @throws IllegalStateException if more than one values are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,104,"bject getValue(final String trigger, final Object defaultValue) throws IllegalStateException;"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,107, Retrieves the single Argument value associated with the specified Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,109, @param option the Option associated with the value
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,110, @return the matching value or null if none exists
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,111, @throws IllegalStateException if more than one values are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,113,bject getValue(final Option option) throws IllegalStateException;
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,116, Retrieves the single Argument value associated with the specified Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,118, @param option the Option associated with the value
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,119, @param defaultValue the result to use if no values are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,120, @return the matching value or defaultValue if none exists
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,121, @throws IllegalStateException if more than one values are found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,123,"bject getValue(final Option option, final Object defaultValue) throws IllegalStateException;"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,126, Retrieves the Boolean value associated with the specified Switch
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,128, @param trigger a trigger used to lookup the Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,129, @return the Boolean associated with trigger or null if none exists
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,131,oolean getSwitch(final String trigger);
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,134, Retrieves the Boolean value associated with the specified Switch
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,136, @param trigger a trigger used to lookup the Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,137, @param defaultValue the Boolean to use if none match
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,138, @return the Boolean associated with trigger or defaultValue if none exists
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,140,"oolean getSwitch(final String trigger, final Boolean defaultValue);"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,143, Retrieves the Boolean value associated with the specified Switch
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,145, @param option the Option associated with the value
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,146, @return the Boolean associated with option or null if none exists
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,148,oolean getSwitch(final Option option);
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,151, Retrieves the Boolean value associated with the specified Switch
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,153, @param option the Option associated with the value
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,154, @param defaultValue the Boolean to use if none match
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,155, @return the Boolean associated with option or defaultValue if none exists
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,157,"oolean getSwitch(final Option option, final Boolean defaultValue);"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,161, Retrieves the value associated with the specified property
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,163, @param property the property name to lookup
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,164, @return the value of the property or null
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,166,tring getProperty(final String property);
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,169, Retrieves the value associated with the specified property
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,171, @param property the property name to lookup
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,172, @param defaultValue the value to use if no other is found
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,173, @return the value of the property or defaultValue
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,175,"tring getProperty(final String property, final String defaultValue);"
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,178, Retrieves the set of all property names associated with this CommandLine
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,180, @return a none null set of property names
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,182,et getProperties();
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,185, Retrieves the number of times the specified Option appeared in this
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,186, CommandLine
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,188, @param trigger a trigger used to lookup the Option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,189, @return the number of occurrences of the option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,191,nt getOptionCount(final String trigger);
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,194, Retrieves the number of times the specified Option appeared in this
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,195, CommandLine
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,197, @param option the Option associated to check
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,198, @return the number of occurrences of the option
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,200,nt getOptionCount(final Option option);
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,203, Retrieves a list of all Options found in this CommandLine
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,205, @return a none null list of Options
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,207,ist getOptions();
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,210, Retrieves a list of all Option triggers found in this CommandLine
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,212, @return a none null list of Option triggers
False,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,214,et getOptionTriggers();
True,src/java/org/apache/commons/cli2/CommandLine.java,src/java/org/apache/commons/cli2/CommandLine.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.List;import java.util.Set;/** * Instances of CommandLine represent a command line that has been processed * according to the definition supplied to the parser. */public interface CommandLine {    /**     * Detects the presence of an option with the specified trigger in this     * CommandLine.     *     * @param trigger the trigger to search for     * @return true iff an option with this trigger is present     */    boolean hasOption(final String trigger);    /**     * Detects the presence of an option in this CommandLine.     *     * @param option the Option to search for     * @return true iff the option is present     */    boolean hasOption(final Option option);    /**     * Finds the Option with the specified trigger     *     * @param trigger the name of the option to retrieve     * @return the Option matching the trigger or null if none exists     */    Option getOption(final String trigger);    /**     * Retrieves the Argument values associated with the specified Option     *     * @param trigger a trigger used to lookup the Option     * @return a list of values or an empty List if none are found     */    List getValues(final String trigger);    /**     * Retrieves the Argument values associated with the specified Option     *     * @param trigger a trigger used to lookup the Option     * @param defaultValues the result to return if no values are found     * @return a list of values or defaultValues if none are found     */    List getValues(final String trigger, final List defaultValues);    /**     * Retrieves the Argument values associated with the specified Option     *     * @param option the Option associated with the values     * @return a list of values or an empty List if none are found     */    List getValues(final Option option);    /**     * Retrieves the Argument values associated with the specified Option     *     * @param option the Option associated with the values     * @param defaultValues the result to return if no values are found     * @return a list of values or defaultValues if none are found     */    List getValues(final Option option, final List defaultValues);    /**     * Retrieves the single Argument value associated with the specified Option     *     * @param trigger a trigger used to lookup the Option     * @return the matching value or null if none exists     * @throws IllegalStateException if more than one values are found     */    Object getValue(final String trigger) throws IllegalStateException;    /**     * Retrieves the single Argument value associated with the specified Option     *     * @param trigger a trigger used to lookup the Option     * @param defaultValue the result to use if no values are found     * @return the matching value or defaultValue if none exists     * @throws IllegalStateException if more than one values are found     */    Object getValue(final String trigger, final Object defaultValue) throws IllegalStateException;    /**     * Retrieves the single Argument value associated with the specified Option     *     * @param option the Option associated with the value     * @return the matching value or null if none exists     * @throws IllegalStateException if more than one values are found     */    Object getValue(final Option option) throws IllegalStateException;    /**     * Retrieves the single Argument value associated with the specified Option     *     * @param option the Option associated with the value     * @param defaultValue the result to use if no values are found     * @return the matching value or defaultValue if none exists     * @throws IllegalStateException if more than one values are found     */    Object getValue(final Option option, final Object defaultValue) throws IllegalStateException;    /**     * Retrieves the Boolean value associated with the specified Switch     *     * @param trigger a trigger used to lookup the Option     * @return the Boolean associated with trigger or null if none exists     */    Boolean getSwitch(final String trigger);    /**     * Retrieves the Boolean value associated with the specified Switch     *     * @param trigger a trigger used to lookup the Option     * @param defaultValue the Boolean to use if none match     * @return the Boolean associated with trigger or defaultValue if none exists     */    Boolean getSwitch(final String trigger, final Boolean defaultValue);    /**     * Retrieves the Boolean value associated with the specified Switch     *     * @param option the Option associated with the value     * @return the Boolean associated with option or null if none exists     */    Boolean getSwitch(final Option option);    /**     * Retrieves the Boolean value associated with the specified Switch     *     * @param option the Option associated with the value     * @param defaultValue the Boolean to use if none match     * @return the Boolean associated with option or defaultValue if none exists     */    Boolean getSwitch(final Option option, final Boolean defaultValue);    /**     * Retrieves the value associated with the specified property     *     * @param property the property name to lookup     * @return the value of the property or null     */    String getProperty(final String property);    /**     * Retrieves the value associated with the specified property     *     * @param property the property name to lookup     * @param defaultValue the value to use if no other is found     * @return the value of the property or defaultValue     */    String getProperty(final String property, final String defaultValue);    /**     * Retrieves the set of all property names associated with this CommandLine     *     * @return a none null set of property names     */    Set getProperties();    /**     * Retrieves the number of times the specified Option appeared in this     * CommandLine     *     * @param trigger a trigger used to lookup the Option     * @return the number of occurrences of the option     */    int getOptionCount(final String trigger);    /**     * Retrieves the number of times the specified Option appeared in this     * CommandLine     *     * @param option the Option associated to check     * @return the number of occurrences of the option     */    int getOptionCount(final Option option);    /**     * Retrieves a list of all Options found in this CommandLine     *     * @return a none null list of Options     */    List getOptions();    /**     * Retrieves a list of all Option triggers found in this CommandLine     *     * @return a none null list of Option triggers     */    Set getOptionTriggers();}"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,17,ackage org.apache.commons.cli2;
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,19,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,20,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,21,mport java.util.Set;
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,24, An enum of possible display settings. These settings are used to control the
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,25," presence of various features in the String representations of options,"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,26, CommandLines and usage strings.  Usually a Set of DisplaySetting instances
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,27, will be passed to a method that will lookup the presence of the values.
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,29,ublic class DisplaySetting {
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,31,rivate static final Set all = new HashSet();
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,34, A Set guarenteed to contain all possible DisplaySetting values
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,36,ublic static final Set ALL = Collections.unmodifiableSet(all);
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,39, A Set guarenteed to contain no DisplaySetting values
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,41,ublic static final Set NONE = Collections.EMPTY_SET;
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,44, Indicates that aliases should be included
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,46,ublic static final DisplaySetting DISPLAY_ALIASES =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,47,"ew DisplaySetting(""DISPLAY_ALIASES"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,50, Indicates that optionality should be included
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,52,ublic static final DisplaySetting DISPLAY_OPTIONAL =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,53,"ew DisplaySetting(""DISPLAY_OPTIONAL"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,56, Indicates that property options should be included
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,58,ublic static final DisplaySetting DISPLAY_PROPERTY_OPTION =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,59,"ew DisplaySetting(""DISPLAY_PROPERTY_OPTION"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,62, Indicates that switches should be included enabled
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,64,ublic static final DisplaySetting DISPLAY_SWITCH_ENABLED =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,65,"ew DisplaySetting(""DISPLAY_SWITCH_ENABLED"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,68, Indicates that switches should be included disabled
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,70,ublic static final DisplaySetting DISPLAY_SWITCH_DISABLED =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,71,"ew DisplaySetting(""DISPLAY_SWITCH_DISABLED"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,74, Indicates that group names should be included
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,76,ublic static final DisplaySetting DISPLAY_GROUP_NAME =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,77,"ew DisplaySetting(""DISPLAY_GROUP_NAME"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,80, Indicates that groups should be included expanded
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,82,ublic static final DisplaySetting DISPLAY_GROUP_EXPANDED =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,83,"ew DisplaySetting(""DISPLAY_GROUP_EXPANDED"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,86, Indicates that group arguments should be included
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,88,ublic static final DisplaySetting DISPLAY_GROUP_ARGUMENT =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,89,"ew DisplaySetting(""DISPLAY_GROUP_ARGUMENT"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,92, Indicates that group outer brackets should be included
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,94,ublic static final DisplaySetting DISPLAY_GROUP_OUTER =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,95,"ew DisplaySetting(""DISPLAY_GROUP_OUTER"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,98, Indicates that arguments should be included numbered
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,100,ublic static final DisplaySetting DISPLAY_ARGUMENT_NUMBERED =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,101,"ew DisplaySetting(""DISPLAY_ARGUMENT_NUMBERED"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,104, Indicates that arguments should be included bracketed
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,106,ublic static final DisplaySetting DISPLAY_ARGUMENT_BRACKETED =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,107,"ew DisplaySetting(""DISPLAY_ARGUMENT_BRACKETED"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,110, Indicates that arguments of Parents should be included
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,112,ublic static final DisplaySetting DISPLAY_PARENT_ARGUMENT =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,113,"ew DisplaySetting(""DISPLAY_PARENT_ARGUMENT"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,116, Indicates that children of Parents should be included
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,118,ublic static final DisplaySetting DISPLAY_PARENT_CHILDREN =
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,119,"ew DisplaySetting(""DISPLAY_PARENT_CHILDREN"");"
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,122, The name of the setting
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,124,rivate final String name;
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,127, The hashCode of the setting
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,129,rivate final int hashCode;
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,132, Creates a new DisplaySetting with the specified name
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,133, @param name the name of the setting
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,135,rivate DisplaySetting(final String name) {
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,136,his.name = name;
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,137,his.hashCode = name.hashCode();
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,138,ll.add(this);
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,141,ublic int hashCode() {
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,142,eturn hashCode;
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,145,ublic boolean equals(final Object that) {
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,146,f (that instanceof DisplaySetting) {
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,147,eturn name.compareTo(that.toString()) == 0;
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,149,eturn false;
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,152,ublic String toString() {
False,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,153,eturn name;
True,src/java/org/apache/commons/cli2/DisplaySetting.java,src/java/org/apache/commons/cli2/DisplaySetting.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Collections;import java.util.HashSet;import java.util.Set;/** * An enum of possible display settings. These settings are used to control the * presence of various features in the String representations of options, * CommandLines and usage strings.  Usually a Set of DisplaySetting instances * will be passed to a method that will lookup the presence of the values. */public class DisplaySetting {    private static final Set all = new HashSet();    /**     * A Set guarenteed to contain all possible DisplaySetting values     */    public static final Set ALL = Collections.unmodifiableSet(all);    /**     * A Set guarenteed to contain no DisplaySetting values     */    public static final Set NONE = Collections.EMPTY_SET;    /**     * Indicates that aliases should be included     */    public static final DisplaySetting DISPLAY_ALIASES =        new DisplaySetting(""DISPLAY_ALIASES"");    /**     * Indicates that optionality should be included     */    public static final DisplaySetting DISPLAY_OPTIONAL =        new DisplaySetting(""DISPLAY_OPTIONAL"");    /**     * Indicates that property options should be included     */    public static final DisplaySetting DISPLAY_PROPERTY_OPTION =        new DisplaySetting(""DISPLAY_PROPERTY_OPTION"");    /**     * Indicates that switches should be included enabled     */    public static final DisplaySetting DISPLAY_SWITCH_ENABLED =        new DisplaySetting(""DISPLAY_SWITCH_ENABLED"");    /**     * Indicates that switches should be included disabled     */    public static final DisplaySetting DISPLAY_SWITCH_DISABLED =        new DisplaySetting(""DISPLAY_SWITCH_DISABLED"");    /**     * Indicates that group names should be included     */    public static final DisplaySetting DISPLAY_GROUP_NAME =        new DisplaySetting(""DISPLAY_GROUP_NAME"");    /**     * Indicates that groups should be included expanded     */    public static final DisplaySetting DISPLAY_GROUP_EXPANDED =        new DisplaySetting(""DISPLAY_GROUP_EXPANDED"");    /**     * Indicates that group arguments should be included     */    public static final DisplaySetting DISPLAY_GROUP_ARGUMENT =        new DisplaySetting(""DISPLAY_GROUP_ARGUMENT"");    /**     * Indicates that group outer brackets should be included     */    public static final DisplaySetting DISPLAY_GROUP_OUTER =        new DisplaySetting(""DISPLAY_GROUP_OUTER"");    /**     * Indicates that arguments should be included numbered     */    public static final DisplaySetting DISPLAY_ARGUMENT_NUMBERED =        new DisplaySetting(""DISPLAY_ARGUMENT_NUMBERED"");    /**     * Indicates that arguments should be included bracketed     */    public static final DisplaySetting DISPLAY_ARGUMENT_BRACKETED =        new DisplaySetting(""DISPLAY_ARGUMENT_BRACKETED"");    /**     * Indicates that arguments of Parents should be included     */    public static final DisplaySetting DISPLAY_PARENT_ARGUMENT =        new DisplaySetting(""DISPLAY_PARENT_ARGUMENT"");    /**     * Indicates that children of Parents should be included     */    public static final DisplaySetting DISPLAY_PARENT_CHILDREN =        new DisplaySetting(""DISPLAY_PARENT_CHILDREN"");    /**     * The name of the setting     */    private final String name;    /**     * The hashCode of the setting     */    private final int hashCode;    /**     * Creates a new DisplaySetting with the specified name     * @param name the name of the setting     */    private DisplaySetting(final String name) {        this.name = name;        this.hashCode = name.hashCode();        all.add(this);    }    public int hashCode() {        return hashCode;    }    public boolean equals(final Object that) {        if (that instanceof DisplaySetting) {            return name.compareTo(that.toString()) == 0;        }        return false;    }    public String toString() {        return name;    }}"
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,17,ackage org.apache.commons.cli2;
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,19,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,20,mport java.util.Set;
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,23," An Option representing a choice or group of Options in the form ""-a|-b|-c""."
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,25,ublic interface Group extends Option {
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,28, Appends usage information to the specified StringBuffer
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,30, @param buffer the buffer to append to
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,31, @param helpSettings a set of display settings @see DisplaySetting
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,32, @param comp a comparator used to sort the Options
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,33, @param separator the String used to separate member Options
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,35,oid appendUsage(
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,36,"inal StringBuffer buffer,"
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,37,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,38,"inal Comparator comp,"
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,39,inal String separator);
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,42, Indicates whether group members must be present for the CommandLine to be
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,43, valid.
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,45, @see #getMinimum()
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,46, @see #getMaximum()
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,47, @return true iff the CommandLine will be invalid without at least one
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,48,         member option
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,50,oolean isRequired();
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,53, Retrieves the minimum number of members required for a valid Group
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,55, @return the minimum number of members
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,57,nt getMinimum();
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,60, Retrieves the maximum number of members acceptable for a valid Group
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,62, @return the maximum number of members
False,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,64,nt getMaximum();
True,src/java/org/apache/commons/cli2/Group.java,src/java/org/apache/commons/cli2/Group.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Comparator;import java.util.Set;/** * An Option representing a choice or group of Options in the form ""-a|-b|-c"". */public interface Group extends Option {    /**     * Appends usage information to the specified StringBuffer     *     * @param buffer the buffer to append to     * @param helpSettings a set of display settings @see DisplaySetting     * @param comp a comparator used to sort the Options     * @param separator the String used to separate member Options     */    void appendUsage(        final StringBuffer buffer,        final Set helpSettings,        final Comparator comp,        final String separator);    /**     * Indicates whether group members must be present for the CommandLine to be     * valid.     *     * @see #getMinimum()     * @see #getMaximum()     * @return true iff the CommandLine will be invalid without at least one     *         member option     */    boolean isRequired();    /**     * Retrieves the minimum number of members required for a valid Group     *     * @return the minimum number of members     */    int getMinimum();    /**     * Retrieves the maximum number of members acceptable for a valid Group     *     * @return the maximum number of members     */    int getMaximum();}"
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,17,ackage org.apache.commons.cli2;
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,19,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,20,mport java.util.Set;
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,23, Represents a line of help for a particular Option.
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,25,ublic interface HelpLine {
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,28, @return The description of the option
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,30,tring getDescription();
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,33, @return The level of indentation for this line
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,35,nt getIndent();
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,38, @return The Option that the help line relates to
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,40,ption getOption();
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,43, Builds a usage string for the option using the specified settings and
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,44, comparator.
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,46, @param helpSettings
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,47,            the settings to apply
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,48, @param comparator
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,49,            a comparator to sort options when applicable
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,50, @return the usage string
False,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,52,"tring usage(final Set helpSettings, final Comparator comparator);"
True,src/java/org/apache/commons/cli2/HelpLine.java,src/java/org/apache/commons/cli2/HelpLine.java,2,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Comparator;import java.util.Set;/** * Represents a line of help for a particular Option. */public interface HelpLine {    /**     * @return The description of the option     */    String getDescription();    /**     * @return The level of indentation for this line     */    int getIndent();    /**     * @return The Option that the help line relates to     */    Option getOption();    /**     * Builds a usage string for the option using the specified settings and     * comparator.     *     * @param helpSettings     *            the settings to apply     * @param comparator     *            a comparator to sort options when applicable     * @return the usage string     */    String usage(final Set helpSettings, final Comparator comparator);}"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,17,ackage org.apache.commons.cli2;
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,19,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,20,mport java.util.List;
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,21,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,22,mport java.util.Set;
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,25, The super type of all options representing a particular element of the
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,26, command line interface.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,28,ublic interface Option {
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,31, Processes String arguments into a CommandLine.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,33, The iterator will initially point at the first argument to be processed
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,34, and at the end of the method should point to the first argument not
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,35, processed. This method MUST process at least one argument from the
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,36, ListIterator.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,38, @param commandLine
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,39,            The CommandLine object to store results in
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,40, @param args
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,41,            The arguments to process
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,42, @throws OptionException
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,43,             if any problems occur
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,45,oid process(
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,46,"inal WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,47,inal ListIterator args)
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,48,hrows OptionException;
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,51, Adds defaults to a CommandLine.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,53, Any defaults for this option are applied as well as the defaults for
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,54, any contained options
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,56, @param commandLine
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,57,            The CommandLine object to store defaults in
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,59,oid defaults(final WriteableCommandLine commandLine);
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,62, Indicates whether this Option will be able to process the particular
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,63, argument.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,65, @param argument
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,66,            The argument to be tested
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,67, @return true if the argument can be processed by this Option
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,69,"oolean canProcess(final WriteableCommandLine commandLine, final String argument);"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,72, Indicates whether this Option will be able to process the particular
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,73, argument. The ListIterator must be restored to the initial state before
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,74, returning the boolean.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,76," @see #canProcess(WriteableCommandLine,String)"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,77, @param arguments
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,78,            the ListIterator over String arguments
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,79, @return true if the argument can be processed by this Option
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,81,"oolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments);"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,84, Identifies the argument prefixes that should trigger this option. This
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,85, is used to decide which of many Options should be tried when processing
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,86, a given argument string.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,88, The returned Set must not be null.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,90, @return The set of triggers for this Option
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,92,et getTriggers();
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,95, Identifies the argument prefixes that should be considered options. This
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,96, is used to identify whether a given string looks like an option or an
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,97," argument value. Typically an option would return the set [--,-] while"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,98," switches might offer [-,+]."
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,100, The returned Set must not be null.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,102, @return The set of prefixes for this Option
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,104,et getPrefixes();
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,107, Checks that the supplied CommandLine is valid with respect to this
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,108, option.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,110, @param commandLine
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,111,            The CommandLine to check.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,112, @throws OptionException
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,113,             if the CommandLine is not valid.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,115,oid validate(final WriteableCommandLine commandLine)
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,116,hrows OptionException;
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,119, Builds up a list of HelpLineImpl instances to be presented by HelpFormatter.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,121, @see HelpLine
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,122, @see org.apache.commons.cli2.util.HelpFormatter
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,123, @param depth
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,124,            the initial indent depth
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,125, @param helpSettings
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,126,            the HelpSettings that should be applied
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,127, @param comp
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,128,            a comparator used to sort options when applicable.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,129, @return a List of HelpLineImpl objects
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,131,ist helpLines(
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,132,"inal int depth,"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,133,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,134,inal Comparator comp);
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,137, Appends usage information to the specified StringBuffer
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,139, @param buffer the buffer to append to
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,140, @param helpSettings a set of display settings @see DisplaySetting
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,141, @param comp a comparator used to sort the Options
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,143,oid appendUsage(
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,144,"inal StringBuffer buffer,"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,145,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,146,inal Comparator comp);
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,149, The preferred name of an option is used for generating help and usage
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,150, information.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,152, @return The preferred name of the option
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,154,tring getPreferredName();
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,157, Returns a description of the option. This string is used to build help
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,158, messages as in the HelpFormatter.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,160, @see org.apache.commons.cli2.util.HelpFormatter
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,161, @return a description of the option.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,163,tring getDescription();
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,166, Returns the id of the option.  This can be used in a loop and switch
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,167, construct:
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,169, <code>
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,170, for(Option o : cmd.getOptions()){
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,171,     switch(o.getId()){
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,172,         case POTENTIAL_OPTION:
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,176, </code>
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,178, The returned value is not guarenteed to be unique.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,180, @return the id of the option.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,182,nt getId();
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,185, Recursively searches for an option with the supplied trigger.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,187, @param trigger the trigger to search for.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,188, @return the matching option or null.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,190,ption findOption(final String trigger);
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,193, Indicates whether this option is required to be present.
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,194, @return true iff the CommandLine will be invalid without this Option
False,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,196,oolean isRequired();
True,src/java/org/apache/commons/cli2/Option.java,src/java/org/apache/commons/cli2/Option.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Comparator;import java.util.List;import java.util.ListIterator;import java.util.Set;/** * The super type of all options representing a particular element of the * command line interface. */public interface Option {    /**     * Processes String arguments into a CommandLine.     *     * The iterator will initially point at the first argument to be processed     * and at the end of the method should point to the first argument not     * processed. This method MUST process at least one argument from the     * ListIterator.     *     * @param commandLine     *            The CommandLine object to store results in     * @param args     *            The arguments to process     * @throws OptionException     *             if any problems occur     */    void process(        final WriteableCommandLine commandLine,        final ListIterator args)        throws OptionException;    /**     * Adds defaults to a CommandLine.     *     * Any defaults for this option are applied as well as the defaults for     * any contained options     *     * @param commandLine     *            The CommandLine object to store defaults in     */    void defaults(final WriteableCommandLine commandLine);    /**     * Indicates whether this Option will be able to process the particular     * argument.     *     * @param argument     *            The argument to be tested     * @return true if the argument can be processed by this Option     */    boolean canProcess(final WriteableCommandLine commandLine, final String argument);    /**     * Indicates whether this Option will be able to process the particular     * argument. The ListIterator must be restored to the initial state before     * returning the boolean.     *     * @see #canProcess(WriteableCommandLine,String)     * @param arguments     *            the ListIterator over String arguments     * @return true if the argument can be processed by this Option     */    boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments);    /**     * Identifies the argument prefixes that should trigger this option. This     * is used to decide which of many Options should be tried when processing     * a given argument string.     *     * The returned Set must not be null.     *     * @return The set of triggers for this Option     */    Set getTriggers();    /**     * Identifies the argument prefixes that should be considered options. This     * is used to identify whether a given string looks like an option or an     * argument value. Typically an option would return the set [--,-] while     * switches might offer [-,+].     *     * The returned Set must not be null.     *     * @return The set of prefixes for this Option     */    Set getPrefixes();    /**     * Checks that the supplied CommandLine is valid with respect to this     * option.     *     * @param commandLine     *            The CommandLine to check.     * @throws OptionException     *             if the CommandLine is not valid.     */    void validate(final WriteableCommandLine commandLine)        throws OptionException;    /**     * Builds up a list of HelpLineImpl instances to be presented by HelpFormatter.     *     * @see HelpLine     * @see org.apache.commons.cli2.util.HelpFormatter     * @param depth     *            the initial indent depth     * @param helpSettings     *            the HelpSettings that should be applied     * @param comp     *            a comparator used to sort options when applicable.     * @return a List of HelpLineImpl objects     */    List helpLines(        final int depth,        final Set helpSettings,        final Comparator comp);    /**     * Appends usage information to the specified StringBuffer     *     * @param buffer the buffer to append to     * @param helpSettings a set of display settings @see DisplaySetting     * @param comp a comparator used to sort the Options     */    void appendUsage(        final StringBuffer buffer,        final Set helpSettings,        final Comparator comp);    /**     * The preferred name of an option is used for generating help and usage     * information.     *     * @return The preferred name of the option     */    String getPreferredName();    /**     * Returns a description of the option. This string is used to build help     * messages as in the HelpFormatter.     *     * @see org.apache.commons.cli2.util.HelpFormatter     * @return a description of the option.     */    String getDescription();    /**     * Returns the id of the option.  This can be used in a loop and switch     * construct:     *     * <code>     * for(Option o : cmd.getOptions()){     *     switch(o.getId()){     *         case POTENTIAL_OPTION:     *             ...     *     }     * }     * </code>     *     * The returned value is not guarenteed to be unique.     *     * @return the id of the option.     */    int getId();	/**	 * Recursively searches for an option with the supplied trigger.	 *	 * @param trigger the trigger to search for.	 * @return the matching option or null.	 */	Option findOption(final String trigger);    /**     * Indicates whether this option is required to be present.     * @return true iff the CommandLine will be invalid without this Option     */    boolean isRequired();}"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,17,ackage org.apache.commons.cli2;
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,19,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,20,mport java.util.Set;
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,22,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,25, A problem found while dealing with command line options.
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,27,ublic class OptionException
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,28,xtends Exception {
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,30, The settings used when displaying the related Option.
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,32, @see DisplaySetting
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,34,ublic static final Set HELP_SETTINGS =
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,35,ollections.unmodifiableSet(Collections.singleton(DisplaySetting.DISPLAY_PROPERTY_OPTION));
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,37,** resource helper instance */
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,38,rivate static final ResourceHelper helper = ResourceHelper.getResourceHelper();
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,40,** The Option the exception relates to */
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,41,rivate final Option option;
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,43,** The message explaining the Exception */
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,44,rivate final String message;
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,47, Creates a new OptionException.
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,49, @param option
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,50,            The Option the exception relates to
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,52,ublic OptionException(final Option option) {
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,53,"his(option, null, null);"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,57, Creates a new OptionException.
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,58, @param option the Option the exception relates to
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,59, @param messageKey the id of the message to display
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,61,"ublic OptionException(final Option option,"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,62,inal String messageKey) {
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,63,"his(option, messageKey, null);"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,67, Creates a new OptionException.
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,68, @param option the Option the exception relates to
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,69, @param messageKey the id of the message to display
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,70, @param value a value to display with the message
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,72,"ublic OptionException(final Option option,"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,73,"inal String messageKey,"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,74,inal String value) {
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,75,his.option = option;
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,77,f (messageKey != null) {
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,78,inal StringBuffer buffer = new StringBuffer();
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,80,f (value != null) {
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,81,"uffer.append(helper.getMessage(messageKey, value));"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,82, else {
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,83,uffer.append(helper.getMessage(messageKey));
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,86,"uffer.append("" "");"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,88,"ption.appendUsage(buffer, HELP_SETTINGS, null);"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,89,essage = buffer.toString();
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,90, else {
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,91,"essage = """";"
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,96, Gets the Option the exception relates to
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,98, @return The related Option
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,100,ublic Option getOption() {
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,101,eturn option;
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,104,ublic String getMessage() {
False,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,105,eturn message;
True,src/java/org/apache/commons/cli2/OptionException.java,src/java/org/apache/commons/cli2/OptionException.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Collections;import java.util.Set;import org.apache.commons.cli2.resource.ResourceHelper;/** * A problem found while dealing with command line options. */public class OptionException    extends Exception {    /**     * The settings used when displaying the related Option.     *     * @see DisplaySetting     */    public static final Set HELP_SETTINGS =        Collections.unmodifiableSet(Collections.singleton(DisplaySetting.DISPLAY_PROPERTY_OPTION));    /** resource helper instance */    private static final ResourceHelper helper = ResourceHelper.getResourceHelper();    /** The Option the exception relates to */    private final Option option;    /** The message explaining the Exception */    private final String message;    /**     * Creates a new OptionException.     *     * @param option     *            The Option the exception relates to     */    public OptionException(final Option option) {        this(option, null, null);    }    /**     * Creates a new OptionException.     * @param option the Option the exception relates to     * @param messageKey the id of the message to display     */    public OptionException(final Option option,                           final String messageKey) {        this(option, messageKey, null);    }    /**     * Creates a new OptionException.     * @param option the Option the exception relates to     * @param messageKey the id of the message to display     * @param value a value to display with the message     */    public OptionException(final Option option,                           final String messageKey,                           final String value) {        this.option = option;        if (messageKey != null) {            final StringBuffer buffer = new StringBuffer();            if (value != null) {                buffer.append(helper.getMessage(messageKey, value));            } else {                buffer.append(helper.getMessage(messageKey));            }            buffer.append("" "");            option.appendUsage(buffer, HELP_SETTINGS, null);            message = buffer.toString();        } else {            message = """";        }    }    /**     * Gets the Option the exception relates to     *     * @return The related Option     */    public Option getOption() {        return option;    }    public String getMessage() {        return message;    }}"
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,17,ackage org.apache.commons.cli2;
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,19,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,22, An Option that can have an argument and/or group of child Options in the form
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,23," ""-f &lt;arg&gt; [-a|-b|-c]""."
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,25,ublic interface Parent extends Option {
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,28," Processes the parent part of the Option.  The combination of parent,"
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,29, argument and children is handled by the process method.
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,30," @see Option#process(WriteableCommandLine, ListIterator)"
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,32, @param commandLine the CommandLine to write results to
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,33, @param args a ListIterator over argument strings positioned at the next
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,34,             argument to process
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,35, @throws OptionException if an error occurs while processing
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,37,oid processParent(
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,38,"inal WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,39,inal ListIterator args)
False,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,40,hrows OptionException;
True,src/java/org/apache/commons/cli2/Parent.java,src/java/org/apache/commons/cli2/Parent.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.ListIterator;/** * An Option that can have an argument and/or group of child Options in the form * ""-f &lt;arg&gt; [-a|-b|-c]"". */public interface Parent extends Option {    /**     * Processes the parent part of the Option.  The combination of parent,     * argument and children is handled by the process method.     * @see Option#process(WriteableCommandLine, ListIterator)     *     * @param commandLine the CommandLine to write results to     * @param args a ListIterator over argument strings positioned at the next     *             argument to process     * @throws OptionException if an error occurs while processing     */    void processParent(        final WriteableCommandLine commandLine,        final ListIterator args)        throws OptionException;}"
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,17,ackage org.apache.commons.cli2;
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,19,mport java.util.List;
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,22, A CommandLine that detected values and options can be written to.
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,24,ublic interface WriteableCommandLine extends CommandLine {
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,27, Adds an Option to the CommandLine
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,28, @param option the Option to add
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,30,oid addOption(final Option option);
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,33, Adds a value to an Option in the CommandLine.
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,34, @param option the Option to add to
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,35, @param value the value to add
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,37,"oid addValue(final Option option, final Object value);"
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,40, Sets the default values for an Option in the CommandLine
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,41, @param option the Option to add to
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,42, @param defaultValues the defaults for the option
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,44,"oid setDefaultValues(final Option option, final List defaultValues);"
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,47, Adds a switch value to an Option in the CommandLine.
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,48, @param option the Option to add to
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,49, @param value the switch value to add
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,50, @throws IllegalStateException if the switch has already been added
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,52,"oid addSwitch(final Option option, final boolean value) throws IllegalStateException;"
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,55, Sets the default state for a Switch in the CommandLine.
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,56, @param option the Option to add to
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,57, @param defaultSwitch the defaults state for ths switch
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,59,"oid setDefaultSwitch(final Option option, final Boolean defaultSwitch);"
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,62, Adds a property value to a name in the CommandLine.
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,63, Replaces any existing value for the property.
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,65, @param property the name of the property
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,66, @param value the value of the property
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,68,"oid addProperty(final String property, final String value);"
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,71, Detects whether the argument looks like an Option trigger
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,72, @param argument the argument to test
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,73, @return true if the argument looks like an Option trigger
False,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,75,oolean looksLikeOption(final String argument);
True,src/java/org/apache/commons/cli2/WriteableCommandLine.java,src/java/org/apache/commons/cli2/WriteableCommandLine.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.List;/** * A CommandLine that detected values and options can be written to. */public interface WriteableCommandLine extends CommandLine {    /**     * Adds an Option to the CommandLine     * @param option the Option to add     */    void addOption(final Option option);    /**     * Adds a value to an Option in the CommandLine.     * @param option the Option to add to     * @param value the value to add     */    void addValue(final Option option, final Object value);    /**     * Sets the default values for an Option in the CommandLine     * @param option the Option to add to     * @param defaultValues the defaults for the option     */    void setDefaultValues(final Option option, final List defaultValues);    /**     * Adds a switch value to an Option in the CommandLine.     * @param option the Option to add to     * @param value the switch value to add     * @throws IllegalStateException if the switch has already been added     */    void addSwitch(final Option option, final boolean value) throws IllegalStateException;    /**     * Sets the default state for a Switch in the CommandLine.     * @param option the Option to add to     * @param defaultSwitch the defaults state for ths switch     */    void setDefaultSwitch(final Option option, final Boolean defaultSwitch);    /**     * Adds a property value to a name in the CommandLine.     * Replaces any existing value for the property.     *     * @param property the name of the property     * @param value the value of the property     */    void addProperty(final String property, final String value);    /**     * Detects whether the argument looks like an Option trigger     * @param argument the argument to test     * @return true if the argument looks like an Option trigger     */    boolean looksLikeOption(final String argument);}"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,17,ackage org.apache.commons.cli2.builder;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,20,mport java.util.List;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,22,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,23,mport org.apache.commons.cli2.option.ArgumentImpl;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,24,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,25,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,26,mport org.apache.commons.cli2.validation.Validator;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,29, Builds Argument instances.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,31,ublic class ArgumentBuilder {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,33,** i18n */
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,34,rivate final static ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,36,** name of the argument. Used for display and lookups in CommandLine */
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,37,rivate String name;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,39,** description of the argument. Used in the automated online help */
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,40,rivate String description;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,42,** minimum number of values required */
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,43,rivate int minimum;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,45,** maximum number of values permitted */
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,46,rivate int maximum;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,48,** character used to separate the values from the option */
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,49,rivate char initialSeparator;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,51,** character used to separate the values from each other */
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,52,rivate char subsequentSeparator;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,54,** object that should be used to ensure the values are valid */
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,55,rivate Validator validator;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,57,"** used to identify the consume remaining option, typically ""--"" */"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,58,rivate String consumeRemaining;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,60,** default values for argument */
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,61,rivate List defaultValues;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,63,** id of the argument */
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,64,rivate int id;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,67, Creates a new ArgumentBuilder instance
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,69,ublic ArgumentBuilder() {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,70,eset();
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,74, Creates a new Argument instance using the options specified in this
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,75, ArgumentBuilder.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,77, @return A new Argument instance using the options specified in this
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,78, ArgumentBuilder.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,80,ublic final Argument create() {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,81,inal Argument argument =
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,82,ew ArgumentImpl(
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,83,"ame,"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,84,"escription,"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,85,"inimum,"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,86,"aximum,"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,87,"nitialSeparator,"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,88,"ubsequentSeparator,"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,89,"alidator,"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,90,"onsumeRemaining,"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,91,"efaultValues,"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,92,d);
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,94,eset();
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,96,eturn argument;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,100, Resets the ArgumentBuilder to the defaults for a new Argument. The
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,101, method is called automatically at the end of a create() call.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,103,ublic final ArgumentBuilder reset() {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,104,"ame = ""arg"";"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,105,escription = null;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,106,inimum = 0;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,107,aximum = Integer.MAX_VALUE;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,108,nitialSeparator = ArgumentImpl.DEFAULT_INITIAL_SEPARATOR;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,109,ubsequentSeparator = ArgumentImpl.DEFAULT_SUBSEQUENT_SEPARATOR;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,110,alidator = null;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,111,"onsumeRemaining = ""--"";"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,112,efaultValues = null;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,113,d = 0;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,114,eturn this;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,118, Sets the name of the argument. The name is used when displaying usage
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,119, information and to allow lookups in the CommandLine object.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,121, @see org.apache.commons.cli2.CommandLine#getValue(String)
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,123, @param newName the name of the argument
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,124, @return this ArgumentBuilder
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,126,ublic final ArgumentBuilder withName(final String newName) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,127,f (newName == null) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,128,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME));
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,130,"f ("""".equals(newName)) {"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,131,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME));
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,133,his.name = newName;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,134,eturn this;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,138, Sets the description of the argument.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,140, The description is used when displaying online help.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,142, @param newDescription a description of the argument
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,143, @return this ArgumentBuilder
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,145,ublic final ArgumentBuilder withDescription(final String newDescription) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,146,his.description = newDescription;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,147,eturn this;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,151, Sets the minimum number of values needed for the argument to be valid.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,153, @param newMinimum the number of values needed
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,154, @return this ArgumentBuilder
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,156,ublic final ArgumentBuilder withMinimum(final int newMinimum) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,157,f (newMinimum < 0) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,158,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM));
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,160,his.minimum = newMinimum;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,161,eturn this;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,165, Sets the maximum number of values allowed for the argument to be valid.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,167, @param newMaximum the number of values allowed
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,168, @return this ArgumentBuilder
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,170,ublic final ArgumentBuilder withMaximum(final int newMaximum) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,171,f (newMaximum < 0) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,172,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM));
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,174,his.maximum = newMaximum;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,175,eturn this;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,179, Sets the character used to separate the values from the option. When an
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,180," argument is of the form -libs:dir1,dir2,dir3 the initialSeparator would"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,181, be ':'.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,183, @param newInitialSeparator the character used to separate the values
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,184, from the option
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,185, @return this ArgumentBuilder
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,187,ublic final ArgumentBuilder withInitialSeparator(
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,188,inal char newInitialSeparator) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,190,his.initialSeparator = newInitialSeparator;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,191,eturn this;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,195, Sets the character used to separate the values from each other. When an
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,196," argument is of the form -libs:dir1,dir2,dir3 the subsequentSeparator"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,197," would be ','."
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,199, @param newSubsequentSeparator the character used to separate the values
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,200, from each other
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,201, @return this ArgumentBuilder
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,203,ublic final ArgumentBuilder withSubsequentSeparator(
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,204,inal char newSubsequentSeparator) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,206,his.subsequentSeparator = newSubsequentSeparator;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,207,eturn this;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,211, Sets the validator instance used to perform validation on the Argument
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,212, values.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,214, @param newValidator a Validator instance
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,215, @return this ArgumentBuilder
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,217,ublic final ArgumentBuilder withValidator(final Validator newValidator) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,218,f (newValidator == null) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,219,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR));
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,221,his.validator = newValidator;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,222,eturn this;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,226," Sets the ""consume remaining"" option, defaults to ""--"". Use this if you"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,227, want to allow values that might be confused with option strings.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,229, @param newConsumeRemaining the string to use for the consume
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,230, remaining option
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,231, @return this ArgumentBuilder
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,233,ublic final ArgumentBuilder withConsumeRemaining(final String newConsumeRemaining) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,234,f (newConsumeRemaining == null) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,235,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING));
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,237,"f ( """".equals(newConsumeRemaining)) {"
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,238,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING));
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,240,his.consumeRemaining = newConsumeRemaining;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,241,eturn this;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,245, Sets the default value.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,247, @param defaultValue the default value for the Argument
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,248, @return this ArgumentBuilder
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,250,ublic final ArgumentBuilder withDefault(final Object defaultValue) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,251,f (defaultValue == null) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,252,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT));
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,255,f (this.defaultValues == null) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,256,his.defaultValues = new ArrayList(1);
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,258,his.defaultValues.add(defaultValue);
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,259,eturn this;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,263, Sets the default values.
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,265, @param newDefaultValues the default values for the Argument
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,266, @return this ArgumentBuilder
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,268,ublic final ArgumentBuilder withDefaults(final List newDefaultValues) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,269,f (newDefaultValues == null) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,270,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS));
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,272,his.defaultValues = newDefaultValues;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,273,eturn this;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,277, Sets the id
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,279, @param newId the id of the Argument
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,280, @return this ArgumentBuilder
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,282,ublic final ArgumentBuilder withId(final int newId) {
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,283,his.id = newId;
False,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,284,eturn this;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.ArrayList;import java.util.List;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.option.ArgumentImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;import org.apache.commons.cli2.validation.Validator;/** * Builds Argument instances. */public class ArgumentBuilder {	/** i18n */	private final static ResourceHelper resources = ResourceHelper.getResourceHelper();    /** name of the argument. Used for display and lookups in CommandLine */    private String name;    /** description of the argument. Used in the automated online help */    private String description;    /** minimum number of values required */    private int minimum;    /** maximum number of values permitted */    private int maximum;    /** character used to separate the values from the option */    private char initialSeparator;    /** character used to separate the values from each other */    private char subsequentSeparator;    /** object that should be used to ensure the values are valid */    private Validator validator;    /** used to identify the consume remaining option, typically ""--"" */    private String consumeRemaining;    /** default values for argument */    private List defaultValues;    /** id of the argument */    private int id;    /**     * Creates a new ArgumentBuilder instance     */    public ArgumentBuilder() {        reset();    }    /**     * Creates a new Argument instance using the options specified in this     * ArgumentBuilder.     *     * @return A new Argument instance using the options specified in this     * ArgumentBuilder.     */    public final Argument create() {        final Argument argument =            new ArgumentImpl(                name,                description,                minimum,                maximum,                initialSeparator,                subsequentSeparator,                validator,                consumeRemaining,                defaultValues,                id);        reset();        return argument;    }    /**     * Resets the ArgumentBuilder to the defaults for a new Argument. The     * method is called automatically at the end of a create() call.     */    public final ArgumentBuilder reset() {        name = ""arg"";        description = null;        minimum = 0;        maximum = Integer.MAX_VALUE;        initialSeparator = ArgumentImpl.DEFAULT_INITIAL_SEPARATOR;        subsequentSeparator = ArgumentImpl.DEFAULT_SUBSEQUENT_SEPARATOR;        validator = null;        consumeRemaining = ""--"";        defaultValues = null;        id = 0;        return this;    }    /**     * Sets the name of the argument. The name is used when displaying usage     * information and to allow lookups in the CommandLine object.     *     * @see org.apache.commons.cli2.CommandLine#getValue(String)     *     * @param newName the name of the argument     * @return this ArgumentBuilder     */    public final ArgumentBuilder withName(final String newName) {    	if (newName == null) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME));    	}    	if ("""".equals(newName)) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME));    	}        this.name = newName;        return this;    }    /**     * Sets the description of the argument.     *     * The description is used when displaying online help.     *     * @param newDescription a description of the argument     * @return this ArgumentBuilder     */    public final ArgumentBuilder withDescription(final String newDescription) {        this.description = newDescription;        return this;    }    /**     * Sets the minimum number of values needed for the argument to be valid.     *     * @param newMinimum the number of values needed     * @return this ArgumentBuilder     */    public final ArgumentBuilder withMinimum(final int newMinimum) {    	if (newMinimum < 0) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM));    	}        this.minimum = newMinimum;        return this;    }    /**     * Sets the maximum number of values allowed for the argument to be valid.     *     * @param newMaximum the number of values allowed     * @return this ArgumentBuilder     */    public final ArgumentBuilder withMaximum(final int newMaximum) {    	if (newMaximum < 0) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM));    	}        this.maximum = newMaximum;        return this;    }    /**     * Sets the character used to separate the values from the option. When an     * argument is of the form -libs:dir1,dir2,dir3 the initialSeparator would     * be ':'.     *     * @param newInitialSeparator the character used to separate the values     * from the option     * @return this ArgumentBuilder     */    public final ArgumentBuilder withInitialSeparator(        final char newInitialSeparator) {        this.initialSeparator = newInitialSeparator;        return this;    }    /**     * Sets the character used to separate the values from each other. When an     * argument is of the form -libs:dir1,dir2,dir3 the subsequentSeparator     * would be ','.     *     * @param newSubsequentSeparator the character used to separate the values     * from each other     * @return this ArgumentBuilder     */    public final ArgumentBuilder withSubsequentSeparator(        final char newSubsequentSeparator) {        this.subsequentSeparator = newSubsequentSeparator;        return this;    }    /**     * Sets the validator instance used to perform validation on the Argument     * values.     *     * @param newValidator a Validator instance     * @return this ArgumentBuilder     */    public final ArgumentBuilder withValidator(final Validator newValidator) {    	if (newValidator == null) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR));    	}        this.validator = newValidator;        return this;    }    /**     * Sets the ""consume remaining"" option, defaults to ""--"". Use this if you     * want to allow values that might be confused with option strings.     *     * @param newConsumeRemaining the string to use for the consume     * remaining option     * @return this ArgumentBuilder     */    public final ArgumentBuilder withConsumeRemaining(final String newConsumeRemaining) {    	if (newConsumeRemaining == null) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING));    	}    	if ( """".equals(newConsumeRemaining)) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING));    	}        this.consumeRemaining = newConsumeRemaining;        return this;    }    /**     * Sets the default value.     *     * @param defaultValue the default value for the Argument     * @return this ArgumentBuilder     */    public final ArgumentBuilder withDefault(final Object defaultValue) {    	if (defaultValue == null) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT));    	}        if (this.defaultValues == null) {            this.defaultValues = new ArrayList(1);        }        this.defaultValues.add(defaultValue);        return this;    }    /**     * Sets the default values.     *     * @param newDefaultValues the default values for the Argument     * @return this ArgumentBuilder     */    public final ArgumentBuilder withDefaults(final List newDefaultValues) {    	if (newDefaultValues == null) {    		throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS));    	}        this.defaultValues = newDefaultValues;        return this;    }    /**     * Sets the id     *     * @param newId the id of the Argument     * @return this ArgumentBuilder     */    public final ArgumentBuilder withId(final int newId) {        this.id = newId;        return this;    }}"
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,17,ackage org.apache.commons.cli2.builder;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,19,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,20,mport java.util.Set;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,22,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,23,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,24,mport org.apache.commons.cli2.option.Command;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,25,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,26,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,29, Builds Command instances
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,31,ublic class CommandBuilder {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,32,** the preferred name of the command */
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,33,rivate String preferredName;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,35,** the description of the command */
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,36,rivate String description;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,38,** the aliases of the command */
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,39,rivate Set aliases;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,41,** whether the command is required or not */
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,42,rivate boolean required;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,44,** the argument of the command */
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,45,rivate Argument argument;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,47,** the children of the command */
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,48,rivate Group children;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,50,** the id of the command */
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,51,rivate int id;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,54, Creates a new <code>CommandBuilder</code> instance.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,56,ublic CommandBuilder() {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,57,eset();
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,61, Creates a new <code>Command</code> instance using the properties of the
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,62, <code>CommandBuilder</code>.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,64, @return the new Command instance
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,66,ublic Command create() {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,67,/ check we have a valid name
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,68,f (preferredName == null) {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,69,hrow new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME));
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,72,/ build the command
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,73,inal Command option =
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,74,"ew Command(preferredName, description, aliases, required, argument, children, id);"
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,76,/ reset the builder
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,77,eset();
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,79,eturn option;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,83, Resets the CommandBuilder to the defaults for a new Command.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,85, This method is called automatically at the end of the
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,86, {@link #create() create} method.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,88,ublic CommandBuilder reset() {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,89,referredName = null;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,90,escription = null;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,91,liases = new HashSet();
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,92,equired = false;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,93,rgument = null;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,94,hildren = null;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,95,d = 0;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,97,eturn this;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,101, Specifies the name for the next <code>Command</code>
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,102, that is created.  The first name is used as the preferred
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,103, display name for the <code>Command</code> and then
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,104, later names are used as aliases.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,106, @param name the name for the next <code>Command</code>
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,107, that is created.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,108, @return this <code>CommandBuilder</code>.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,110,ublic CommandBuilder withName(final String name) {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,111,f (preferredName == null) {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,112,referredName = name;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,113, else {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,114,liases.add(name);
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,117,eturn this;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,121, Specifies the description for the next <code>Command</code>
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,122, that is created.  This description is used to produce
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,123, help documentation for the <code>Command</code>.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,125, @param newDescription the description for the next
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,126, <code>Command</code> that is created.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,127, @return this <code>CommandBuilder</code>.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,129,ublic CommandBuilder withDescription(final String newDescription) {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,130,his.description = newDescription;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,132,eturn this;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,136, Specifies whether the next <code>Command</code> created is
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,137, required or not.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,138, @param newRequired whether the next <code>Command</code> created is
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,139, required or not.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,140, @return this <code>CommandBuilder</code>.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,142,ublic CommandBuilder withRequired(final boolean newRequired) {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,143,his.required = newRequired;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,145,eturn this;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,149, Specifies the children for the next <code>Command</code>
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,150, that is created.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,152, @param newChildren the child options for the next <code>Command</code>
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,153, that is created.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,154, @return this <code>CommandBuilder</code>.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,156,ublic CommandBuilder withChildren(final Group newChildren) {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,157,his.children = newChildren;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,159,eturn this;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,163, Specifies the argument for the next <code>Command</code>
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,164, that is created.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,166, @param newArgument the argument for the next <code>Command</code>
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,167, that is created.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,168, @return this <code>CommandBuilder</code>.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,170,ublic CommandBuilder withArgument(final Argument newArgument) {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,171,his.argument = newArgument;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,173,eturn this;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,177, Specifies the id for the next <code>Command</code> that is created.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,179, @param newId the id for the next <code>Command</code> that is created.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,180, @return this <code>CommandBuilder</code>.
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,182,ublic final CommandBuilder withId(final int newId) {
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,183,his.id = newId;
False,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,185,eturn this;
True,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,src/java/org/apache/commons/cli2/builder/CommandBuilder.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.HashSet;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.option.Command;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Builds Command instances */public class CommandBuilder {    /** the preferred name of the command */    private String preferredName;    /** the description of the command */    private String description;    /** the aliases of the command */    private Set aliases;    /** whether the command is required or not */    private boolean required;    /** the argument of the command */    private Argument argument;    /** the children of the command */    private Group children;    /** the id of the command */    private int id;    /**     * Creates a new <code>CommandBuilder</code> instance.     */    public CommandBuilder() {        reset();    }    /**     * Creates a new <code>Command</code> instance using the properties of the     * <code>CommandBuilder</code>.     *     * @return the new Command instance     */    public Command create() {        // check we have a valid name        if (preferredName == null) {            throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME));        }        // build the command        final Command option =            new Command(preferredName, description, aliases, required, argument, children, id);        // reset the builder        reset();        return option;    }    /**     * Resets the CommandBuilder to the defaults for a new Command.     *     * This method is called automatically at the end of the     * {@link #create() create} method.     */    public CommandBuilder reset() {        preferredName = null;        description = null;        aliases = new HashSet();        required = false;        argument = null;        children = null;        id = 0;        return this;    }    /**     * Specifies the name for the next <code>Command</code>     * that is created.  The first name is used as the preferred     * display name for the <code>Command</code> and then     * later names are used as aliases.     *     * @param name the name for the next <code>Command</code>     * that is created.     * @return this <code>CommandBuilder</code>.     */    public CommandBuilder withName(final String name) {        if (preferredName == null) {            preferredName = name;        } else {            aliases.add(name);        }        return this;    }    /**     * Specifies the description for the next <code>Command</code>     * that is created.  This description is used to produce     * help documentation for the <code>Command</code>.     *     * @param newDescription the description for the next     * <code>Command</code> that is created.     * @return this <code>CommandBuilder</code>.     */    public CommandBuilder withDescription(final String newDescription) {        this.description = newDescription;        return this;    }    /**     * Specifies whether the next <code>Command</code> created is     * required or not.     * @param newRequired whether the next <code>Command</code> created is     * required or not.     * @return this <code>CommandBuilder</code>.     */    public CommandBuilder withRequired(final boolean newRequired) {        this.required = newRequired;        return this;    }    /**     * Specifies the children for the next <code>Command</code>     * that is created.     *     * @param newChildren the child options for the next <code>Command</code>     * that is created.     * @return this <code>CommandBuilder</code>.     */    public CommandBuilder withChildren(final Group newChildren) {        this.children = newChildren;        return this;    }    /**     * Specifies the argument for the next <code>Command</code>     * that is created.     *     * @param newArgument the argument for the next <code>Command</code>     * that is created.     * @return this <code>CommandBuilder</code>.     */    public CommandBuilder withArgument(final Argument newArgument) {        this.argument = newArgument;        return this;    }    /**     * Specifies the id for the next <code>Command</code> that is created.     *     * @param newId the id for the next <code>Command</code> that is created.     * @return this <code>CommandBuilder</code>.     */    public final CommandBuilder withId(final int newId) {        this.id = newId;        return this;    }}"
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,17,ackage org.apache.commons.cli2.builder;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,19,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,20,mport java.util.Set;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,22,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,23,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,24,mport org.apache.commons.cli2.option.DefaultOption;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,25,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,26,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,29, Builds DefaultOption instances.
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,31,ublic class DefaultOptionBuilder {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,32,rivate final String shortPrefix;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,33,rivate final String longPrefix;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,34,rivate final boolean burstEnabled;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,35,rivate String preferredName;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,36,rivate Set aliases;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,37,rivate Set burstAliases;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,38,rivate boolean required;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,39,rivate String description;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,40,rivate Argument argument;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,41,rivate Group children;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,42,rivate int id;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,45, Creates a new DefaultOptionBuilder using defaults
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,46, @see DefaultOption#DEFAULT_SHORT_PREFIX
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,47, @see DefaultOption#DEFAULT_LONG_PREFIX
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,48, @see DefaultOption#DEFAULT_BURST_ENABLED
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,50,ublic DefaultOptionBuilder() {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,51,"his(DefaultOption.DEFAULT_SHORT_PREFIX, DefaultOption.DEFAULT_LONG_PREFIX,"
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,52,efaultOption.DEFAULT_BURST_ENABLED);
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,56, Creates a new DefaultOptionBuilder
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,57, @param shortPrefix the prefix to use for short options
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,58, @param longPrefix the prefix to use for long options
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,59, @param burstEnabled whether to allow gnu style bursting
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,60, @throws IllegalArgumentException if either prefix is less than on
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,61,                                  character long
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,63,"ublic DefaultOptionBuilder(final String shortPrefix,"
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,64,"inal String longPrefix,"
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,65,inal boolean burstEnabled)
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,66,hrows IllegalArgumentException {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,67,f ((shortPrefix == null) || (shortPrefix.length() == 0)) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,68,hrow new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX));
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,71,f ((longPrefix == null) || (longPrefix.length() == 0)) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,72,hrow new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX));
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,75,his.shortPrefix = shortPrefix;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,76,his.longPrefix = longPrefix;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,77,his.burstEnabled = burstEnabled;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,78,eset();
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,82, Creates a DefaultOption instance
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,83, @return the new instance
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,84, @throws IllegalStateException if no names have been supplied
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,86,ublic DefaultOption create()
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,87,hrows IllegalStateException {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,88,f (preferredName == null) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,89,hrow new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME));
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,92,inal DefaultOption option =
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,93,"ew DefaultOption(shortPrefix, longPrefix, burstEnabled, preferredName, description,"
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,94,"liases, burstAliases, required, argument, children, id);"
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,96,eset();
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,98,eturn option;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,102, Resets the builder
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,104,ublic DefaultOptionBuilder reset() {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,105,referredName = null;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,106,escription = null;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,107,liases = new HashSet();
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,108,urstAliases = new HashSet();
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,109,equired = false;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,110,rgument = null;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,111,hildren = null;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,112,d = 0;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,114,eturn this;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,118, Use this short option name. The first name is used as the preferred
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,119, display name for the Command and then later names are used as aliases.
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,121, @param shortName the name to use
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,122, @return this builder
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,124,ublic DefaultOptionBuilder withShortName(final String shortName) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,125,inal String name = shortPrefix + shortName;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,127,f (preferredName == null) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,128,referredName = name;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,129, else {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,130,liases.add(name);
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,133,f (burstEnabled && (name.length() == (shortPrefix.length() + 1))) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,134,urstAliases.add(name);
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,137,eturn this;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,141, Use this long option name.  The first name is used as the preferred
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,142, display name for the Command and then later names are used as aliases.
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,144, @param longName the name to use
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,145, @return this builder
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,147,ublic DefaultOptionBuilder withLongName(final String longName) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,148,inal String name = longPrefix + longName;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,150,f (preferredName == null) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,151,referredName = name;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,152, else {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,153,liases.add(name);
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,156,eturn this;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,160, Use this option description
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,161, @param newDescription the description to use
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,162, @return this builder
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,164,ublic DefaultOptionBuilder withDescription(final String newDescription) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,165,his.description = newDescription;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,167,eturn this;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,171, Use this optionality
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,172, @param newRequired true iff the Option is required
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,173, @return this builder
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,175,ublic DefaultOptionBuilder withRequired(final boolean newRequired) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,176,his.required = newRequired;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,178,eturn this;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,182, Use this child Group
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,183, @param newChildren the child Group to use
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,184, @return this builder
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,186,ublic DefaultOptionBuilder withChildren(final Group newChildren) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,187,his.children = newChildren;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,189,eturn this;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,193, Use this Argument
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,194, @param newArgument the argument to use
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,195, @return this builder
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,197,ublic DefaultOptionBuilder withArgument(final Argument newArgument) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,198,his.argument = newArgument;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,200,eturn this;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,204, Sets the id
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,206, @param newId
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,207,            the id of the DefaultOption
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,208, @return this DefaultOptionBuilder
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,210,ublic final DefaultOptionBuilder withId(final int newId) {
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,211,his.id = newId;
False,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,213,eturn this;
True,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,src/java/org/apache/commons/cli2/builder/DefaultOptionBuilder.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.HashSet;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.option.DefaultOption;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Builds DefaultOption instances. */public class DefaultOptionBuilder {    private final String shortPrefix;    private final String longPrefix;    private final boolean burstEnabled;    private String preferredName;    private Set aliases;    private Set burstAliases;    private boolean required;    private String description;    private Argument argument;    private Group children;    private int id;    /**     * Creates a new DefaultOptionBuilder using defaults     * @see DefaultOption#DEFAULT_SHORT_PREFIX     * @see DefaultOption#DEFAULT_LONG_PREFIX     * @see DefaultOption#DEFAULT_BURST_ENABLED     */    public DefaultOptionBuilder() {        this(DefaultOption.DEFAULT_SHORT_PREFIX, DefaultOption.DEFAULT_LONG_PREFIX,             DefaultOption.DEFAULT_BURST_ENABLED);    }    /**     * Creates a new DefaultOptionBuilder     * @param shortPrefix the prefix to use for short options     * @param longPrefix the prefix to use for long options     * @param burstEnabled whether to allow gnu style bursting     * @throws IllegalArgumentException if either prefix is less than on     *                                  character long     */    public DefaultOptionBuilder(final String shortPrefix,                                final String longPrefix,                                final boolean burstEnabled)        throws IllegalArgumentException {        if ((shortPrefix == null) || (shortPrefix.length() == 0)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX));        }        if ((longPrefix == null) || (longPrefix.length() == 0)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX));        }        this.shortPrefix = shortPrefix;        this.longPrefix = longPrefix;        this.burstEnabled = burstEnabled;        reset();    }    /**     * Creates a DefaultOption instance     * @return the new instance     * @throws IllegalStateException if no names have been supplied     */    public DefaultOption create()        throws IllegalStateException {        if (preferredName == null) {            throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME));        }        final DefaultOption option =            new DefaultOption(shortPrefix, longPrefix, burstEnabled, preferredName, description,                              aliases, burstAliases, required, argument, children, id);        reset();        return option;    }    /**     * Resets the builder     */    public DefaultOptionBuilder reset() {        preferredName = null;        description = null;        aliases = new HashSet();        burstAliases = new HashSet();        required = false;        argument = null;        children = null;        id = 0;        return this;    }    /**     * Use this short option name. The first name is used as the preferred     * display name for the Command and then later names are used as aliases.     *     * @param shortName the name to use     * @return this builder     */    public DefaultOptionBuilder withShortName(final String shortName) {        final String name = shortPrefix + shortName;        if (preferredName == null) {            preferredName = name;        } else {            aliases.add(name);        }        if (burstEnabled && (name.length() == (shortPrefix.length() + 1))) {            burstAliases.add(name);        }        return this;    }    /**     * Use this long option name.  The first name is used as the preferred     * display name for the Command and then later names are used as aliases.     *     * @param longName the name to use     * @return this builder     */    public DefaultOptionBuilder withLongName(final String longName) {        final String name = longPrefix + longName;        if (preferredName == null) {            preferredName = name;        } else {            aliases.add(name);        }        return this;    }    /**     * Use this option description     * @param newDescription the description to use     * @return this builder     */    public DefaultOptionBuilder withDescription(final String newDescription) {        this.description = newDescription;        return this;    }    /**     * Use this optionality     * @param newRequired true iff the Option is required     * @return this builder     */    public DefaultOptionBuilder withRequired(final boolean newRequired) {        this.required = newRequired;        return this;    }    /**     * Use this child Group     * @param newChildren the child Group to use     * @return this builder     */    public DefaultOptionBuilder withChildren(final Group newChildren) {        this.children = newChildren;        return this;    }    /**     * Use this Argument     * @param newArgument the argument to use     * @return this builder     */    public DefaultOptionBuilder withArgument(final Argument newArgument) {        this.argument = newArgument;        return this;    }    /**     * Sets the id     *     * @param newId     *            the id of the DefaultOption     * @return this DefaultOptionBuilder     */    public final DefaultOptionBuilder withId(final int newId) {        this.id = newId;        return this;    }}"
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,17,ackage org.apache.commons.cli2.builder;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,20,mport java.util.List;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,22,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,23,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,24,mport org.apache.commons.cli2.option.GroupImpl;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,27, Builds Group instances
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,29,ublic class GroupBuilder {
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,31,rivate String name;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,32,rivate String description;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,33,rivate List options;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,34,rivate int minimum;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,35,rivate int maximum;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,38, Creates a new GroupBuilder
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,40,ublic GroupBuilder() {
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,41,eset();
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,45, Creates a new Group instance
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,46, @return the new Group instance
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,48,ublic Group create() {
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,49,inal GroupImpl group =
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,50,"ew GroupImpl(options, name, description, minimum, maximum);"
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,52,eset();
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,54,eturn group;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,58, Resets the builder
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,60,ublic GroupBuilder reset() {
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,61,ame = null;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,62,escription = null;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,63,ptions = new ArrayList();
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,64,inimum = 0;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,65,aximum = Integer.MAX_VALUE;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,66,eturn this;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,70, Use this option description
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,71, @param newDescription the description to use
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,72, @return this builder
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,74,ublic GroupBuilder withDescription(final String newDescription) {
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,75,his.description = newDescription;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,76,eturn this;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,80, Use this option name
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,81, @param newName the name to use
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,82, @return this builder
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,84,ublic GroupBuilder withName(final String newName) {
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,85,his.name = newName;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,86,eturn this;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,90, A valid group requires at least this many options present
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,91, @param newMinimum the minimum Options required
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,92, @return this builder
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,94,ublic GroupBuilder withMinimum(final int newMinimum) {
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,95,his.minimum = newMinimum;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,96,eturn this;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,100, A valid group requires at most this many options present
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,101, @param newMaximum the maximum Options allowed
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,102, @return this builder
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,104,ublic GroupBuilder withMaximum(final int newMaximum) {
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,105,his.maximum = newMaximum;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,106,eturn this;
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,110, Add this option to the group
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,111, @param option the Option to add
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,112, @return this builder
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,114,ublic GroupBuilder withOption(final Option option) {
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,115,his.options.add(option);
False,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,116,eturn this;
True,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,src/java/org/apache/commons/cli2/builder/GroupBuilder.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.ArrayList;import java.util.List;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.option.GroupImpl;/** * Builds Group instances */public class GroupBuilder {    private String name;    private String description;    private List options;    private int minimum;    private int maximum;    /**     * Creates a new GroupBuilder     */    public GroupBuilder() {        reset();    }    /**     * Creates a new Group instance     * @return the new Group instance     */    public Group create() {        final GroupImpl group =            new GroupImpl(options, name, description, minimum, maximum);        reset();        return group;    }    /**     * Resets the builder     */    public GroupBuilder reset() {        name = null;        description = null;        options = new ArrayList();        minimum = 0;        maximum = Integer.MAX_VALUE;        return this;    }    /**     * Use this option description     * @param newDescription the description to use     * @return this builder     */    public GroupBuilder withDescription(final String newDescription) {        this.description = newDescription;        return this;    }    /**     * Use this option name     * @param newName the name to use     * @return this builder     */    public GroupBuilder withName(final String newName) {        this.name = newName;        return this;    }    /**     * A valid group requires at least this many options present     * @param newMinimum the minimum Options required     * @return this builder     */    public GroupBuilder withMinimum(final int newMinimum) {        this.minimum = newMinimum;        return this;    }    /**     * A valid group requires at most this many options present     * @param newMaximum the maximum Options allowed     * @return this builder     */    public GroupBuilder withMaximum(final int newMaximum) {        this.maximum = newMaximum;        return this;    }    /**     * Add this option to the group     * @param option the Option to add     * @return this builder     */    public GroupBuilder withOption(final Option option) {        this.options.add(option);        return this;    }}"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,17,ackage org.apache.commons.cli2.builder;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,19,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,20,mport java.util.LinkedHashSet;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,21,mport java.util.Set;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,23,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,24,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,25,mport org.apache.commons.cli2.validation.ClassValidator;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,26,mport org.apache.commons.cli2.validation.DateValidator;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,27,mport org.apache.commons.cli2.validation.FileValidator;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,28,mport org.apache.commons.cli2.validation.NumberValidator;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,29,mport org.apache.commons.cli2.validation.UrlValidator;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,30,mport org.apache.commons.cli2.validation.Validator;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,33, Builds Options using a String pattern
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,35,/TODO Document and link to the acceptable patterns
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,36,ublic class PatternBuilder {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,38,rivate final GroupBuilder gbuilder;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,39,rivate final DefaultOptionBuilder obuilder;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,40,rivate final ArgumentBuilder abuilder;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,43, Creates a new PatternBuilder
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,45,ublic PatternBuilder() {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,46,his(
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,47,"ew GroupBuilder(),"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,48,"ew DefaultOptionBuilder(),"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,49,ew ArgumentBuilder());
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,53, Creates a new PatternBuilder
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,54, @param gbuilder the GroupBuilder to use
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,55, @param obuilder the DefaultOptionBuilder to use
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,56, @param abuilder the ArgumentBuilder to use
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,58,ublic PatternBuilder(
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,59,"inal GroupBuilder gbuilder,"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,60,"inal DefaultOptionBuilder obuilder,"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,61,inal ArgumentBuilder abuilder) {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,62,his.gbuilder = gbuilder;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,63,his.obuilder = obuilder;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,64,his.abuilder = abuilder;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,67,rivate final Set options = new LinkedHashSet();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,70, Creates a new Option instance.
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,71, @return a new Option instance
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,73,ublic Option create() {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,74,inal Option option;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,76,f (options.size() == 1) {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,77,ption = (Option)options.iterator().next();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,79,lse {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,80,builder.reset();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,81,or (final Iterator i = options.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,82,builder.withOption((Option)i.next());
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,84,ption = gbuilder.create();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,87,eset();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,89,eturn option;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,93, Resets this builder
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,95,ublic PatternBuilder reset() {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,96,ptions.clear();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,97,eturn this;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,100,rivate void createOption(
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,101,"inal char type,"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,102,"inal boolean required,"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,103,inal char opt) {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,104,inal Argument argument;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,105,f (type != ' ') {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,106,builder.reset();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,107,builder.withValidator(validator(type));
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,108,f (required) {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,109,builder.withMinimum(1);
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,111,f (type != '*') {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,112,builder.withMaximum(1);
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,114,rgument = abuilder.create();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,116,lse {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,117,rgument = null;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,120,builder.reset();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,121,builder.withArgument(argument);
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,122,builder.withShortName(String.valueOf(opt));
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,123,builder.withRequired(required);
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,125,ptions.add(obuilder.create());
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,129, Builds an Option using a pattern string.
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,130, @param pattern the pattern to build from
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,132,ublic void withPattern(final String pattern) {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,133,nt sz = pattern.length();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,135,har opt = ' ';
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,136,har ch = ' ';
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,137,har type = ' ';
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,138,oolean required = false;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,140,or (int i = 0; i < sz; i++) {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,141,h = pattern.charAt(i);
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,143,witch (ch) {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,144,ase '!' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,145,equired = true;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,146,reak;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,147,ase '@' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,148,ase ':' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,149,ase '%' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,150,ase '+' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,151,ase '#' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,152,ase '<' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,153,ase '>' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,154,ase '*' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,155,ase '/' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,156,ype = ch;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,157,reak;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,158,efault :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,159,f (opt != ' ') {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,160,"reateOption(type, required, opt);"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,161,equired = false;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,162,ype = ' ';
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,165,pt = ch;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,169,f (opt != ' ') {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,170,"reateOption(type, required, opt);"
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,174,rivate static Validator validator(final char c) {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,175,witch (c) {
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,176,ase '@' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,177,inal ClassValidator classv = new ClassValidator();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,178,lassv.setInstance(true);
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,179,eturn classv;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,180,ase '+' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,181,inal ClassValidator instancev = new ClassValidator();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,182,eturn instancev;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,183,/case ':':// no validator needed for a string
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,184,ase '%' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,185,eturn NumberValidator.getNumberInstance();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,186,ase '#' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,187,eturn DateValidator.getDateInstance();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,188,ase '<' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,189,inal FileValidator existingv = new FileValidator();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,190,xistingv.setExisting(true);
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,191,xistingv.setFile(true);
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,192,eturn existingv;
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,193,ase '>' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,194,ase '*' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,195,eturn new FileValidator();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,196,ase '/' :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,197,eturn new UrlValidator();
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,198,efault :
False,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,199,eturn null;
True,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,src/java/org/apache/commons/cli2/builder/PatternBuilder.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.Iterator;import java.util.LinkedHashSet;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.validation.ClassValidator;import org.apache.commons.cli2.validation.DateValidator;import org.apache.commons.cli2.validation.FileValidator;import org.apache.commons.cli2.validation.NumberValidator;import org.apache.commons.cli2.validation.UrlValidator;import org.apache.commons.cli2.validation.Validator;/** * Builds Options using a String pattern *///TODO Document and link to the acceptable patternspublic class PatternBuilder {    private final GroupBuilder gbuilder;    private final DefaultOptionBuilder obuilder;    private final ArgumentBuilder abuilder;    /**     * Creates a new PatternBuilder     */    public PatternBuilder() {        this(            new GroupBuilder(),            new DefaultOptionBuilder(),            new ArgumentBuilder());    }    /**     * Creates a new PatternBuilder     * @param gbuilder the GroupBuilder to use     * @param obuilder the DefaultOptionBuilder to use     * @param abuilder the ArgumentBuilder to use     */    public PatternBuilder(        final GroupBuilder gbuilder,        final DefaultOptionBuilder obuilder,        final ArgumentBuilder abuilder) {        this.gbuilder = gbuilder;        this.obuilder = obuilder;        this.abuilder = abuilder;    }    private final Set options = new LinkedHashSet();    /**     * Creates a new Option instance.     * @return a new Option instance     */    public Option create() {        final Option option;        if (options.size() == 1) {            option = (Option)options.iterator().next();        }        else {            gbuilder.reset();            for (final Iterator i = options.iterator(); i.hasNext();) {                gbuilder.withOption((Option)i.next());            }            option = gbuilder.create();        }        reset();        return option;    }    /**     * Resets this builder     */    public PatternBuilder reset() {        options.clear();        return this;    }    private void createOption(        final char type,        final boolean required,        final char opt) {        final Argument argument;        if (type != ' ') {            abuilder.reset();            abuilder.withValidator(validator(type));            if (required) {                abuilder.withMinimum(1);            }            if (type != '*') {                abuilder.withMaximum(1);            }            argument = abuilder.create();        }        else {            argument = null;        }        obuilder.reset();        obuilder.withArgument(argument);        obuilder.withShortName(String.valueOf(opt));        obuilder.withRequired(required);        options.add(obuilder.create());    }    /**     * Builds an Option using a pattern string.     * @param pattern the pattern to build from     */    public void withPattern(final String pattern) {        int sz = pattern.length();        char opt = ' ';        char ch = ' ';        char type = ' ';        boolean required = false;        for (int i = 0; i < sz; i++) {            ch = pattern.charAt(i);            switch (ch) {                case '!' :                    required = true;                    break;                case '@' :                case ':' :                case '%' :                case '+' :                case '#' :                case '<' :                case '>' :                case '*' :                case '/' :                    type = ch;                    break;                default :                    if (opt != ' ') {                        createOption(type, required, opt);                        required = false;                        type = ' ';                    }                    opt = ch;            }        }        if (opt != ' ') {            createOption(type, required, opt);        }    }    private static Validator validator(final char c) {        switch (c) {            case '@' :                final ClassValidator classv = new ClassValidator();                classv.setInstance(true);                return classv;            case '+' :                final ClassValidator instancev = new ClassValidator();                return instancev;                //case ':':// no validator needed for a string            case '%' :                return NumberValidator.getNumberInstance();            case '#' :                return DateValidator.getDateInstance();            case '<' :                final FileValidator existingv = new FileValidator();                existingv.setExisting(true);                existingv.setFile(true);                return existingv;            case '>' :            case '*' :                return new FileValidator();            case '/' :                return new UrlValidator();            default :                return null;        }    }}"
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,17,ackage org.apache.commons.cli2.builder;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,19,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,20,mport java.util.Set;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,22,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,23,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,24,mport org.apache.commons.cli2.option.Switch;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,25,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,26,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,29, Builds Switch instance.
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,31,ublic class SwitchBuilder {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,32,rivate final String enabledPrefix;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,33,rivate final String disabledPrefix;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,34,rivate String description;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,35,rivate String preferredName;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,36,rivate Set aliases;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,37,rivate boolean required;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,38,rivate Argument argument;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,39,rivate Group children;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,40,rivate int id;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,41,rivate Boolean switchDefault;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,44, Creates a new SwitchBuilder using defaults.
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,45, @see Switch#DEFAULT_ENABLED_PREFIX
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,46, @see Switch#DEFAULT_DISABLED_PREFIX
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,48,ublic SwitchBuilder() {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,49,"his(Switch.DEFAULT_ENABLED_PREFIX, Switch.DEFAULT_DISABLED_PREFIX);"
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,53, Creates a new SwitchBuilder
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,54, @param enabledPrefix the prefix to use for enabling the option
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,55, @param disabledPrefix the prefix to use for disabling the option
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,56, @throws IllegalArgumentException if either prefix is less than 1
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,57,                                  character long or the prefixes match
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,59,"ublic SwitchBuilder(final String enabledPrefix,"
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,60,inal String disabledPrefix)
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,61,hrows IllegalArgumentException {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,62,f ((enabledPrefix == null) || (enabledPrefix.length() < 1)) {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,63,hrow new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ILLEGAL_ENABLED_PREFIX));
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,66,f ((disabledPrefix == null) || (disabledPrefix.length() < 1)) {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,67,hrow new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ILLEGAL_DISABLED_PREFIX));
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,70,f (enabledPrefix.equals(disabledPrefix)) {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,71,hrow new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_IDENTICAL_PREFIXES));
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,74,his.enabledPrefix = enabledPrefix;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,75,his.disabledPrefix = disabledPrefix;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,76,eset();
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,80, Creates a new Switch instance
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,81, @return a new Switch instance
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,83,ublic Switch create() {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,84,inal Switch option =
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,85,"ew Switch(enabledPrefix, disabledPrefix, preferredName, aliases, description,"
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,86,"equired, argument, children, id, switchDefault);"
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,88,eset();
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,90,eturn option;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,94, Resets the builder
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,96,ublic SwitchBuilder reset() {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,97,escription = null;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,98,referredName = null;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,99,equired = false;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,100,liases = new HashSet();
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,101,rgument = null;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,102,hildren = null;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,103,d = 0;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,104,witchDefault = null;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,106,eturn this;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,110, Use this option description
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,111, @param newDescription the description to use
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,112, @return this builder
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,114,ublic SwitchBuilder withDescription(final String newDescription) {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,115,his.description = newDescription;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,117,eturn this;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,121, Use this option name. The first name is used as the preferred
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,122, display name for the Command and then later names are used as aliases.
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,124, @param name the name to use
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,125, @return this builder
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,127,ublic SwitchBuilder withName(final String name) {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,128,f (preferredName == null) {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,129,referredName = name;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,130, else {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,131,liases.add(name);
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,134,eturn this;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,138, Use this optionality
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,139, @param newRequired true iff the Option is required
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,140, @return this builder
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,142,ublic SwitchBuilder withRequired(final boolean newRequired) {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,143,his.required = newRequired;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,145,eturn this;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,149, Use this Argument
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,150, @param newArgument the argument to use
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,151, @return this builder
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,153,ublic SwitchBuilder withArgument(final Argument newArgument) {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,154,his.argument = newArgument;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,156,eturn this;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,160, Use this child Group
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,161, @param newChildren the child Group to use
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,162, @return this builder
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,164,ublic SwitchBuilder withChildren(final Group newChildren) {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,165,his.children = newChildren;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,167,eturn this;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,171, Sets the id
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,173, @param newId
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,174,            the id of the Switch
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,175, @return this SwitchBuilder
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,177,ublic final SwitchBuilder withId(final int newId) {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,178,his.id = newId;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,180,eturn this;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,184, Sets the default state for this switch
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,186, @param newSwitchDefault the default state
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,187, @return this SwitchBuilder
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,189,ublic final SwitchBuilder withSwitchDefault(final Boolean newSwitchDefault) {
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,190,his.switchDefault = newSwitchDefault;
False,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,192,eturn this;
True,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,src/java/org/apache/commons/cli2/builder/SwitchBuilder.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import java.util.HashSet;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.option.Switch;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Builds Switch instance. */public class SwitchBuilder {    private final String enabledPrefix;    private final String disabledPrefix;    private String description;    private String preferredName;    private Set aliases;    private boolean required;    private Argument argument;    private Group children;    private int id;    private Boolean switchDefault;    /**     * Creates a new SwitchBuilder using defaults.     * @see Switch#DEFAULT_ENABLED_PREFIX     * @see Switch#DEFAULT_DISABLED_PREFIX     */    public SwitchBuilder() {        this(Switch.DEFAULT_ENABLED_PREFIX, Switch.DEFAULT_DISABLED_PREFIX);    }    /**     * Creates a new SwitchBuilder     * @param enabledPrefix the prefix to use for enabling the option     * @param disabledPrefix the prefix to use for disabling the option     * @throws IllegalArgumentException if either prefix is less than 1     *                                  character long or the prefixes match     */    public SwitchBuilder(final String enabledPrefix,                         final String disabledPrefix)        throws IllegalArgumentException {        if ((enabledPrefix == null) || (enabledPrefix.length() < 1)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ILLEGAL_ENABLED_PREFIX));        }        if ((disabledPrefix == null) || (disabledPrefix.length() < 1)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ILLEGAL_DISABLED_PREFIX));        }        if (enabledPrefix.equals(disabledPrefix)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_IDENTICAL_PREFIXES));        }        this.enabledPrefix = enabledPrefix;        this.disabledPrefix = disabledPrefix;        reset();    }    /**     * Creates a new Switch instance     * @return a new Switch instance     */    public Switch create() {        final Switch option =            new Switch(enabledPrefix, disabledPrefix, preferredName, aliases, description,                       required, argument, children, id, switchDefault);        reset();        return option;    }    /**     * Resets the builder     */    public SwitchBuilder reset() {        description = null;        preferredName = null;        required = false;        aliases = new HashSet();        argument = null;        children = null;        id = 0;        switchDefault = null;        return this;    }    /**     * Use this option description     * @param newDescription the description to use     * @return this builder     */    public SwitchBuilder withDescription(final String newDescription) {        this.description = newDescription;        return this;    }    /**     * Use this option name. The first name is used as the preferred     * display name for the Command and then later names are used as aliases.     *     * @param name the name to use     * @return this builder     */    public SwitchBuilder withName(final String name) {        if (preferredName == null) {            preferredName = name;        } else {            aliases.add(name);        }        return this;    }    /**     * Use this optionality     * @param newRequired true iff the Option is required     * @return this builder     */    public SwitchBuilder withRequired(final boolean newRequired) {        this.required = newRequired;        return this;    }    /**     * Use this Argument     * @param newArgument the argument to use     * @return this builder     */    public SwitchBuilder withArgument(final Argument newArgument) {        this.argument = newArgument;        return this;    }    /**     * Use this child Group     * @param newChildren the child Group to use     * @return this builder     */    public SwitchBuilder withChildren(final Group newChildren) {        this.children = newChildren;        return this;    }    /**     * Sets the id     *     * @param newId     *            the id of the Switch     * @return this SwitchBuilder     */    public final SwitchBuilder withId(final int newId) {        this.id = newId;        return this;    }    /**     * Sets the default state for this switch     *     * @param newSwitchDefault the default state     * @return this SwitchBuilder     */    public final SwitchBuilder withSwitchDefault(final Boolean newSwitchDefault) {        this.switchDefault = newSwitchDefault;        return this;    }}"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,17,ackage org.apache.commons.cli2.commandline;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,19,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,20,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,21,mport java.util.List;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,23,mport org.apache.commons.cli2.CommandLine;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,24,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,25,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,26,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,29, Instances of CommandLine represent a command line that has been processed
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,30, according to the definition supplied to the parser.
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,32,ublic abstract class CommandLineImpl implements CommandLine {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,33,ublic final boolean hasOption(final String trigger) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,34,eturn hasOption(getOption(trigger));
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,37,ublic final List getValues(final String trigger) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,38,"eturn getValues(getOption(trigger), Collections.EMPTY_LIST);"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,41,"ublic final List getValues(final String trigger,"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,42,inal List defaultValues) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,43,"eturn getValues(getOption(trigger), defaultValues);"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,46,ublic final List getValues(final Option option) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,47,"eturn getValues(option, Collections.EMPTY_LIST);"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,50,ublic final Object getValue(final String trigger) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,51,"eturn getValue(getOption(trigger), null);"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,54,"ublic final Object getValue(final String trigger,"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,55,inal Object defaultValue) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,56,"eturn getValue(getOption(trigger), defaultValue);"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,59,ublic final Object getValue(final Option option) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,60,"eturn getValue(option, null);"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,63,"ublic final Object getValue(final Option option,"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,64,inal Object defaultValue) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,65,inal List values;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,67,f (defaultValue == null) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,68,alues = getValues(option);
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,69, else {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,70,"alues = getValues(option, Collections.singletonList(defaultValue));"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,73,f (values.size() > 1) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,74,hrow new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES));
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,77,f (values.isEmpty()) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,78,eturn defaultValue;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,81,eturn values.get(0);
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,84,ublic final Boolean getSwitch(final String trigger) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,85,"eturn getSwitch(getOption(trigger), null);"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,88,"ublic final Boolean getSwitch(final String trigger,"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,89,inal Boolean defaultValue) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,90,"eturn getSwitch(getOption(trigger), defaultValue);"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,93,ublic final Boolean getSwitch(final Option option) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,94,"eturn getSwitch(option, null);"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,97,ublic final String getProperty(final String property) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,98,"eturn getProperty(property, null);"
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,101,ublic final int getOptionCount(final String trigger) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,102,eturn getOptionCount(getOption(trigger));
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,105,ublic final int getOptionCount(final Option option) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,106,f (option == null) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,107,eturn 0;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,110,nt count = 0;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,112,or (Iterator i = getOptions().iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,113,f (option.equals(i.next())) {
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,114,+count;
False,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,118,eturn count;
True,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/CommandLineImpl.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.Collections;import java.util.Iterator;import java.util.List;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Instances of CommandLine represent a command line that has been processed * according to the definition supplied to the parser. */public abstract class CommandLineImpl implements CommandLine {    public final boolean hasOption(final String trigger) {        return hasOption(getOption(trigger));    }    public final List getValues(final String trigger) {        return getValues(getOption(trigger), Collections.EMPTY_LIST);    }    public final List getValues(final String trigger,                                final List defaultValues) {        return getValues(getOption(trigger), defaultValues);    }    public final List getValues(final Option option) {        return getValues(option, Collections.EMPTY_LIST);    }    public final Object getValue(final String trigger) {        return getValue(getOption(trigger), null);    }    public final Object getValue(final String trigger,                                 final Object defaultValue) {        return getValue(getOption(trigger), defaultValue);    }    public final Object getValue(final Option option) {        return getValue(option, null);    }    public final Object getValue(final Option option,                                 final Object defaultValue) {        final List values;        if (defaultValue == null) {            values = getValues(option);        } else {            values = getValues(option, Collections.singletonList(defaultValue));        }        if (values.size() > 1) {            throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES));        }        if (values.isEmpty()) {            return defaultValue;        }        return values.get(0);    }    public final Boolean getSwitch(final String trigger) {        return getSwitch(getOption(trigger), null);    }    public final Boolean getSwitch(final String trigger,                                   final Boolean defaultValue) {        return getSwitch(getOption(trigger), defaultValue);    }    public final Boolean getSwitch(final Option option) {        return getSwitch(option, null);    }    public final String getProperty(final String property) {        return getProperty(property, null);    }    public final int getOptionCount(final String trigger) {        return getOptionCount(getOption(trigger));    }    public final int getOptionCount(final Option option) {        if (option == null) {            return 0;        }        int count = 0;        for (Iterator i = getOptions().iterator(); i.hasNext();) {            if (option.equals(i.next())) {                ++count;            }        }        return count;    }}"
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,17,ackage org.apache.commons.cli2.commandline;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,20,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,21,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,22,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,23,mport java.util.List;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,24,mport java.util.Set;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,26,mport org.apache.commons.cli2.CommandLine;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,27,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,30, Manages a queue of default CommandLines. This CommandLine implementation is
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,31, backed by a queue of CommandLine instances which are queried in turn until a
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,32, suitable result is found.
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,34, CommandLine instances can either be added to the back of the queue or can be
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,35, pushed in at a specific position.
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,37, @see #appendCommandLine(CommandLine)
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,38," @see #insertCommandLine(int, CommandLine)"
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,40,ublic class DefaultingCommandLine extends CommandLineImpl {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,43, The list of default CommandLine instances
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,45,rivate final List commandLines = new ArrayList();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,48, Adds a CommandLine instance to the back of the queue. The supplied
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,49, CommandLine will be used as defaults when all other CommandLines produce
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,50, no result
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,52, @param commandLine
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,53,            the default values to use if all CommandLines
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,55,ublic void appendCommandLine(final CommandLine commandLine) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,56,ommandLines.add(commandLine);
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,60, Adds a CommandLine instance to a specified position in the queue.
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,62, @param index ths position at which to insert
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,63, @param commandLine the CommandLine to insert
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,65,ublic void insertCommandLine(
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,66,"inal int index,"
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,67,inal CommandLine commandLine) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,68,"ommandLines.add(index, commandLine);"
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,72, Builds an iterator over the build in CommandLines.
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,74, @return an unmodifiable iterator
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,76,ublic Iterator commandLines(){
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,77,eturn Collections.unmodifiableList(commandLines).iterator();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,80,ublic Option getOption(String trigger) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,81,or (final Iterator i = commandLines.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,82,inal CommandLine commandLine = (CommandLine)i.next();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,83,inal Option actual = commandLine.getOption(trigger);
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,84,f (actual != null) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,85,eturn actual;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,88,eturn null;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,91,ublic List getOptions() {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,92,inal List options = new ArrayList();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,94,inal List temp = new ArrayList();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,95,or (final Iterator i = commandLines.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,96,inal CommandLine commandLine = (CommandLine)i.next();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,97,emp.clear();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,98,emp.addAll(commandLine.getOptions());
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,99,emp.removeAll(options);
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,100,ptions.addAll(temp);
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,103,eturn Collections.unmodifiableList(options);
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,106,ublic Set getOptionTriggers() {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,107,inal Set all = new HashSet();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,108,or (final Iterator i = commandLines.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,109,inal CommandLine commandLine = (CommandLine)i.next();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,110,ll.addAll(commandLine.getOptionTriggers());
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,113,eturn Collections.unmodifiableSet(all);
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,116,ublic boolean hasOption(Option option) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,117,or (final Iterator i = commandLines.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,118,inal CommandLine commandLine = (CommandLine)i.next();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,119,f (commandLine.hasOption(option)) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,120,eturn true;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,123,eturn false;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,126,"ublic List getValues(Option option, List defaultValues) {"
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,127,or (final Iterator i = commandLines.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,128,inal CommandLine commandLine = (CommandLine)i.next();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,129,inal List actual = commandLine.getValues(option);
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,130,f (actual != null && !actual.isEmpty()) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,131,eturn actual;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,134,f(defaultValues==null){
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,135,eturn Collections.EMPTY_LIST;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,137,lse{
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,138,eturn defaultValues;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,142,"ublic Boolean getSwitch(Option option, Boolean defaultValue) {"
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,143,or (final Iterator i = commandLines.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,144,inal CommandLine commandLine = (CommandLine)i.next();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,145,inal Boolean actual = commandLine.getSwitch(option);
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,146,f (actual != null) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,147,eturn actual;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,150,eturn defaultValue;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,153,"ublic String getProperty(String property, String defaultValue) {"
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,154,or (final Iterator i = commandLines.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,155,inal CommandLine commandLine = (CommandLine)i.next();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,156,inal String actual = commandLine.getProperty(property);
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,157,f (actual != null) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,158,eturn actual;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,161,eturn defaultValue;
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,164,ublic Set getProperties() {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,165,inal Set all = new HashSet();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,166,or (final Iterator i = commandLines.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,167,inal CommandLine commandLine = (CommandLine)i.next();
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,168,ll.addAll(commandLine.getProperties());
False,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,170,eturn Collections.unmodifiableSet(all);
True,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,src/java/org/apache/commons/cli2/commandline/DefaultingCommandLine.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import java.util.Collections;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Option;/** * Manages a queue of default CommandLines. This CommandLine implementation is * backed by a queue of CommandLine instances which are queried in turn until a * suitable result is found. * * CommandLine instances can either be added to the back of the queue or can be * pushed in at a specific position. * * @see #appendCommandLine(CommandLine) * @see #insertCommandLine(int, CommandLine) */public class DefaultingCommandLine extends CommandLineImpl {    /**     * The list of default CommandLine instances     */    private final List commandLines = new ArrayList();    /**     * Adds a CommandLine instance to the back of the queue. The supplied     * CommandLine will be used as defaults when all other CommandLines produce     * no result     *     * @param commandLine     *            the default values to use if all CommandLines     */    public void appendCommandLine(final CommandLine commandLine) {        commandLines.add(commandLine);    }    /**     * Adds a CommandLine instance to a specified position in the queue.     *     * @param index ths position at which to insert     * @param commandLine the CommandLine to insert     */    public void insertCommandLine(        final int index,        final CommandLine commandLine) {        commandLines.add(index, commandLine);    }    /**     * Builds an iterator over the build in CommandLines.     *     * @return an unmodifiable iterator     */    public Iterator commandLines(){    	return Collections.unmodifiableList(commandLines).iterator();    }    public Option getOption(String trigger) {        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            final Option actual = commandLine.getOption(trigger);            if (actual != null) {                return actual;            }        }        return null;    }    public List getOptions() {        final List options = new ArrayList();        final List temp = new ArrayList();        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            temp.clear();            temp.addAll(commandLine.getOptions());            temp.removeAll(options);            options.addAll(temp);        }        return Collections.unmodifiableList(options);    }    public Set getOptionTriggers() {        final Set all = new HashSet();        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            all.addAll(commandLine.getOptionTriggers());        }        return Collections.unmodifiableSet(all);    }    public boolean hasOption(Option option) {        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            if (commandLine.hasOption(option)) {                return true;            }        }        return false;    }    public List getValues(Option option, List defaultValues) {        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            final List actual = commandLine.getValues(option);            if (actual != null && !actual.isEmpty()) {                return actual;            }        }        if(defaultValues==null){        	return Collections.EMPTY_LIST;        }        else{        	return defaultValues;        }    }    public Boolean getSwitch(Option option, Boolean defaultValue) {        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            final Boolean actual = commandLine.getSwitch(option);            if (actual != null) {                return actual;            }        }        return defaultValue;    }    public String getProperty(String property, String defaultValue) {        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            final String actual = commandLine.getProperty(property);            if (actual != null) {                return actual;            }        }        return defaultValue;    }    public Set getProperties() {        final Set all = new HashSet();        for (final Iterator i = commandLines.iterator(); i.hasNext();) {            final CommandLine commandLine = (CommandLine)i.next();            all.addAll(commandLine.getProperties());        }        return Collections.unmodifiableSet(all);    }}"
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,17,ackage org.apache.commons.cli2.commandline;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,19,mport java.util.LinkedList;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,20,mport java.util.List;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,21,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,23,mport org.apache.commons.cli2.CommandLine;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,24,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,25,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,26,mport org.apache.commons.cli2.OptionException;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,27,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,28,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,29,mport org.apache.commons.cli2.util.HelpFormatter;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,32, A class that implements the <code>Parser</code> interface can parse a
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,33, String array according to the {@link Group}specified and return a
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,34, {@link CommandLine}.
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,36, @author John Keyes (john at integralsource.com)
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,38,ublic class Parser {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,39,rivate HelpFormatter helpFormatter = new HelpFormatter();
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,40,rivate Option helpOption = null;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,41,rivate String helpTrigger = null;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,42,rivate Group group = null;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,45, Parse the arguments according to the specified options and properties.
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,47, @param arguments
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,48,            the command line arguments
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,50, @return the list of atomic option and value tokens
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,51, @throws OptionException
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,52,             if there are any problems encountered while parsing the
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,53,             command line tokens.
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,55,ublic CommandLine parse(final String[] arguments)
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,56,hrows OptionException {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,57,/ build a mutable list for the arguments
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,58,inal List argumentList = new LinkedList();
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,60,/ copy the arguments into the new list
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,61,or (int i = 0; i < arguments.length; i++) {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,62,inal String argument = arguments[i];
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,64,/ ensure non intern'd strings are used
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,65,/ so that == comparisons work as expected
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,66,rgumentList.add(new String(argument));
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,69,/ wet up a command line for this group
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,70,"inal WriteableCommandLine commandLine = new WriteableCommandLineImpl(group, argumentList);"
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,72,/ pick up any defaults from the model
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,73,roup.defaults(commandLine);
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,75,/ process the options as far as possible
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,76,inal ListIterator iterator = argumentList.listIterator();
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,77,bject previous = null;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,79,"hile (group.canProcess(commandLine, iterator)) {"
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,80,/ peek at the next item and backtrack
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,81,inal Object next = iterator.next();
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,82,terator.previous();
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,84,/ if we have just tried to process this instance
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,85,f (next == previous) {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,86,/ abort
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,87,reak;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,90,/ remember previous
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,91,revious = next;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,93,"roup.process(commandLine, iterator);"
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,96,/ if there are more arguments we have a problem
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,97,f (iterator.hasNext()) {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,98,inal String arg = (String) iterator.next();
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,99,"hrow new OptionException(group, ResourceConstants.UNEXPECTED_TOKEN, arg);"
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,102,/ no need to validate if the help option is present
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,103,f (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,104,roup.validate(commandLine);
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,107,eturn commandLine;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,111, Parse the arguments according to the specified options and properties and
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,112, displays the usage screen if the CommandLine is not valid or the help
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,113, option was specified.
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,115, @param arguments the command line arguments
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,116, @return a valid CommandLine or null if the parse was unsuccessful
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,117, @throws IOException if an error occurs while formatting help
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,119,ublic CommandLine parseAndHelp(final String[] arguments) {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,120,elpFormatter.setGroup(group);
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,122,ry {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,123,/ attempt to parse the command line
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,124,inal CommandLine commandLine = parse(arguments);
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,126,f (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,127,eturn commandLine;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,129, catch (final OptionException oe) {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,130,/ display help regarding the exception
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,131,elpFormatter.setException(oe);
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,134,/ print help
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,135,elpFormatter.print();
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,137,eturn null;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,141, Sets the Group of options to parse against
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,142, @param group the group of options to parse against
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,144,ublic void setGroup(final Group group) {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,145,his.group = group;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,149, Sets the HelpFormatter to use with the simplified parsing.
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,150, @see #parseAndHelp(String[])
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,151, @param helpFormatter the HelpFormatter to use with the simplified parsing
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,153,ublic void setHelpFormatter(final HelpFormatter helpFormatter) {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,154,his.helpFormatter = helpFormatter;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,158, Sets the help option to use with the simplified parsing.  For example
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,159," <code>--help</code>, <code>-h</code> and <code>-?</code> are often used."
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,160, @see #parseAndHelp(String[])
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,161, @param helpOption the help Option
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,163,ublic void setHelpOption(final Option helpOption) {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,164,his.helpOption = helpOption;
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,168, Sets the help option to use with the simplified parsing.  For example
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,169," <code>--help</code>, <code>-h</code> and <code>-?</code> are often used."
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,170, @see #parseAndHelp(String[])
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,171, @param helpTrigger the trigger of the help Option
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,173,ublic void setHelpTrigger(final String helpTrigger) {
False,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,174,his.helpTrigger = helpTrigger;
True,src/java/org/apache/commons/cli2/commandline/Parser.java,src/java/org/apache/commons/cli2/commandline/Parser.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.LinkedList;import java.util.List;import java.util.ListIterator;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.util.HelpFormatter;/** * A class that implements the <code>Parser</code> interface can parse a * String array according to the {@link Group}specified and return a * {@link CommandLine}. * * @author John Keyes (john at integralsource.com) */public class Parser {    private HelpFormatter helpFormatter = new HelpFormatter();    private Option helpOption = null;    private String helpTrigger = null;    private Group group = null;    /**     * Parse the arguments according to the specified options and properties.     *     * @param arguments     *            the command line arguments     *     * @return the list of atomic option and value tokens     * @throws OptionException     *             if there are any problems encountered while parsing the     *             command line tokens.     */    public CommandLine parse(final String[] arguments)        throws OptionException {        // build a mutable list for the arguments        final List argumentList = new LinkedList();        // copy the arguments into the new list        for (int i = 0; i < arguments.length; i++) {            final String argument = arguments[i];            // ensure non intern'd strings are used            // so that == comparisons work as expected            argumentList.add(new String(argument));        }        // wet up a command line for this group        final WriteableCommandLine commandLine = new WriteableCommandLineImpl(group, argumentList);        // pick up any defaults from the model        group.defaults(commandLine);        // process the options as far as possible        final ListIterator iterator = argumentList.listIterator();        Object previous = null;        while (group.canProcess(commandLine, iterator)) {            // peek at the next item and backtrack            final Object next = iterator.next();            iterator.previous();            // if we have just tried to process this instance            if (next == previous) {                // abort                break;            }            // remember previous            previous = next;            group.process(commandLine, iterator);        }        // if there are more arguments we have a problem        if (iterator.hasNext()) {            final String arg = (String) iterator.next();            throw new OptionException(group, ResourceConstants.UNEXPECTED_TOKEN, arg);        }        // no need to validate if the help option is present        if (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {            group.validate(commandLine);        }        return commandLine;    }    /**     * Parse the arguments according to the specified options and properties and     * displays the usage screen if the CommandLine is not valid or the help     * option was specified.     *     * @param arguments the command line arguments     * @return a valid CommandLine or null if the parse was unsuccessful     * @throws IOException if an error occurs while formatting help     */    public CommandLine parseAndHelp(final String[] arguments) {        helpFormatter.setGroup(group);        try {            // attempt to parse the command line            final CommandLine commandLine = parse(arguments);            if (!commandLine.hasOption(helpOption) && !commandLine.hasOption(helpTrigger)) {                return commandLine;            }        } catch (final OptionException oe) {            // display help regarding the exception            helpFormatter.setException(oe);        }        // print help        helpFormatter.print();        return null;    }    /**     * Sets the Group of options to parse against     * @param group the group of options to parse against     */    public void setGroup(final Group group) {        this.group = group;    }    /**     * Sets the HelpFormatter to use with the simplified parsing.     * @see #parseAndHelp(String[])     * @param helpFormatter the HelpFormatter to use with the simplified parsing     */    public void setHelpFormatter(final HelpFormatter helpFormatter) {        this.helpFormatter = helpFormatter;    }    /**     * Sets the help option to use with the simplified parsing.  For example     * <code>--help</code>, <code>-h</code> and <code>-?</code> are often used.     * @see #parseAndHelp(String[])     * @param helpOption the help Option     */    public void setHelpOption(final Option helpOption) {        this.helpOption = helpOption;    }    /**     * Sets the help option to use with the simplified parsing.  For example     * <code>--help</code>, <code>-h</code> and <code>-?</code> are often used.     * @see #parseAndHelp(String[])     * @param helpTrigger the trigger of the help Option     */    public void setHelpTrigger(final String helpTrigger) {        this.helpTrigger = helpTrigger;    }}"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,17,ackage org.apache.commons.cli2.commandline;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,20,mport java.util.Arrays;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,21,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,22,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,23,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,24,mport java.util.List;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,25,mport java.util.Set;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,26,mport java.util.StringTokenizer;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,27,mport java.util.prefs.BackingStoreException;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,28,mport java.util.prefs.Preferences;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,30,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,33," A CommandLine implementation using the Preferences API, useful when"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,34, constructing a complex DefaultingCommandLine
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,36, This implementation uses the children of a single preference node to populate
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,37, the CommandLine.  Options are keyed from their preferred name and presence in
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,38, the Preferences object is taken as presence in the CommandLine.  Argument
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,39, values are taken from the Preference value and are optionally separated using
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,40," the separator char defined, at construction time.  Switch values can be"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,41, specified using a simple value of <code>true</code> or <code>false</code>;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,42, obviously this means that Switches with Arguments are not supported by this
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,43, implementation.
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,45, @see java.util.prefs.Preferences
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,46, @see org.apache.commons.cli2.commandline.DefaultingCommandLine
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,47, @see org.apache.commons.cli2.Option#getPreferredName()
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,49,ublic class PreferencesCommandLine extends CommandLineImpl {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,51,rivate static final char NUL = '\0';
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,52,rivate final Preferences preferences;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,53,rivate final Option root;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,54,rivate final char separator;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,57, Creates a new PreferencesCommandLine using the specified root Option and
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,58, Preferences node.  Argument values will be separated using the char 0.
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,60, @param root the CommandLine's root Option
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,61, @param preferences the Preferences node to get values from
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,63,"ublic PreferencesCommandLine(final Option root, final Preferences preferences){"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,64,"his(root,preferences,NUL);"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,68," Creates a new PreferencesCommandLine using the specified root Option,"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,69, Preferences node and value separator.
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,71, @param root the CommandLine's root Option
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,72, @param preferences the Preferences node to get values from
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,73, @param separator the character to split argument values
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,75,"ublic PreferencesCommandLine(final Option root, final Preferences preferences, final char separator){"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,76,his.root = root;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,77,his.preferences = preferences;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,78,his.separator = separator;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,81,ublic boolean hasOption(Option option) {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,82,f(option==null){
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,83,eturn false;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,85,lse{
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,86,ry {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,87,eturn Arrays.asList(preferences.keys()).contains(option.getPreferredName());
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,88, catch (BackingStoreException e) {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,89,eturn false;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,94,ublic Option getOption(String trigger) {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,95,eturn root.findOption(trigger);
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,98,"ublic List getValues(final Option option, final List defaultValues) {"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,99,"inal String value = preferences.get(option.getPreferredName(),null);"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,101,f(value==null){
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,102,eturn defaultValues;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,104,lse if(separator>NUL){
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,105,inal List values = new ArrayList();
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,106,"inal StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,108,hile(tokens.hasMoreTokens()){
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,109,alues.add(tokens.nextToken());
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,112,eturn values;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,114,lse{
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,115,eturn Collections.singletonList(value);
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,119,"ublic Boolean getSwitch(final Option option, final Boolean defaultValue) {"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,120,"inal String value = preferences.get(option.getPreferredName(),null);"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,121,"f(""true"".equals(value)){"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,122,eturn Boolean.TRUE;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,124,"lse if(""false"".equals(value)){"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,125,eturn Boolean.FALSE;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,127,lse{
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,128,eturn defaultValue;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,132,"ublic String getProperty(final String property, final String defaultValue) {"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,133,"eturn preferences.get(property, defaultValue);"
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,136,ublic Set getProperties() {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,137,ry {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,138,eturn new HashSet(Arrays.asList(preferences.keys()));
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,139, catch (BackingStoreException e) {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,140,eturn Collections.EMPTY_SET;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,144,ublic List getOptions() {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,145,ry {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,146,inal List options = new ArrayList();
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,147,inal Iterator keys = Arrays.asList(preferences.keys()).iterator();
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,148,hile (keys.hasNext()) {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,149,inal String trigger = (String) keys.next();
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,150,inal Option option = root.findOption(trigger);
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,151,f (option != null) {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,152,ptions.add(option);
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,155,eturn Collections.unmodifiableList(options);
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,156, catch (BackingStoreException e) {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,157,eturn Collections.EMPTY_LIST;
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,161,ublic Set getOptionTriggers() {
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,162,inal Set triggers = new HashSet();
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,163,inal Iterator options = getOptions().iterator();
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,164,hile(options.hasNext()){
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,165,inal Option option = (Option)options.next();
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,166,riggers.addAll(option.getTriggers());
False,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,168,eturn Collections.unmodifiableSet(triggers);
True,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PreferencesCommandLine.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import java.util.StringTokenizer;import java.util.prefs.BackingStoreException;import java.util.prefs.Preferences;import org.apache.commons.cli2.Option;/** * A CommandLine implementation using the Preferences API, useful when * constructing a complex DefaultingCommandLine * * This implementation uses the children of a single preference node to populate * the CommandLine.  Options are keyed from their preferred name and presence in * the Preferences object is taken as presence in the CommandLine.  Argument * values are taken from the Preference value and are optionally separated using * the separator char defined, at construction time.  Switch values can be * specified using a simple value of <code>true</code> or <code>false</code>; * obviously this means that Switches with Arguments are not supported by this * implementation. * * @see java.util.prefs.Preferences * @see org.apache.commons.cli2.commandline.DefaultingCommandLine * @see org.apache.commons.cli2.Option#getPreferredName() */public class PreferencesCommandLine extends CommandLineImpl {	private static final char NUL = '\0';	private final Preferences preferences;	private final Option root;	private final char separator;	/**     * Creates a new PreferencesCommandLine using the specified root Option and     * Preferences node.  Argument values will be separated using the char 0.     *	 * @param root the CommandLine's root Option	 * @param preferences the Preferences node to get values from	 */	public PreferencesCommandLine(final Option root, final Preferences preferences){		this(root,preferences,NUL);	}    /**     * Creates a new PreferencesCommandLine using the specified root Option,     * Preferences node and value separator.     *     * @param root the CommandLine's root Option     * @param preferences the Preferences node to get values from     * @param separator the character to split argument values     */	public PreferencesCommandLine(final Option root, final Preferences preferences, final char separator){		this.root = root;		this.preferences = preferences;		this.separator = separator;	}	public boolean hasOption(Option option) {		if(option==null){			return false;		}		else{			try {				return Arrays.asList(preferences.keys()).contains(option.getPreferredName());			} catch (BackingStoreException e) {				return false;			}		}	}	public Option getOption(String trigger) {		return root.findOption(trigger);	}	public List getValues(final Option option, final List defaultValues) {		final String value = preferences.get(option.getPreferredName(),null);		if(value==null){			return defaultValues;		}		else if(separator>NUL){			final List values = new ArrayList();			final StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));			while(tokens.hasMoreTokens()){				values.add(tokens.nextToken());			}			return values;		}		else{			return Collections.singletonList(value);		}	}	public Boolean getSwitch(final Option option, final Boolean defaultValue) {		final String value = preferences.get(option.getPreferredName(),null);		if(""true"".equals(value)){			return Boolean.TRUE;		}		else if(""false"".equals(value)){			return Boolean.FALSE;		}		else{			return defaultValue;		}	}	public String getProperty(final String property, final String defaultValue) {		return preferences.get(property, defaultValue);	}	public Set getProperties() {		try {			return new HashSet(Arrays.asList(preferences.keys()));		} catch (BackingStoreException e) {			return Collections.EMPTY_SET;		}	}	public List getOptions() {		try {			final List options = new ArrayList();			final Iterator keys = Arrays.asList(preferences.keys()).iterator();			while (keys.hasNext()) {				final String trigger = (String) keys.next();				final Option option = root.findOption(trigger);				if (option != null) {					options.add(option);				}			}			return Collections.unmodifiableList(options);		} catch (BackingStoreException e) {			return Collections.EMPTY_LIST;		}	}	public Set getOptionTriggers() {		final Set triggers = new HashSet();		final Iterator options = getOptions().iterator();		while(options.hasNext()){			final Option option = (Option)options.next();			triggers.addAll(option.getTriggers());		}		return Collections.unmodifiableSet(triggers);	}}"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,17,ackage org.apache.commons.cli2.commandline;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,20,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,21,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,22,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,23,mport java.util.List;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,24,mport java.util.Properties;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,25,mport java.util.Set;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,26,mport java.util.StringTokenizer;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,28,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,31," A CommandLine implementation using a java Properties instance, useful for"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,32, constructing a complex DefaultingCommandLine
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,34, Options are keyed from their property name and presence in the Properties
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,35, instance is taken as presence in the CommandLine.  Argument values are taken
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,36, from the property value and are optionally separated using the separator
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,37," char, defined at construction time.  Switch values can be specified using a"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,38, simple value of <code>true</code> or <code>false</code>; obviously this means
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,39, that Switches with Arguments are not supported by this implementation.
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,41, @see java.util.Properties
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,42, @see org.apache.commons.cli2.commandline.DefaultingCommandLine
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,43, @see org.apache.commons.cli2.Option#getPreferredName()
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,45,ublic class PropertiesCommandLine extends CommandLineImpl {
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,47,rivate static final char NUL = '\0';
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,48,rivate final Properties properties;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,49,rivate final Option root;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,50,rivate final char separator;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,53," Creates a new PropertiesCommandLine using the specified root Option,"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,54, Properties instance.  The character 0 is used as the value separator.
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,56, @param root the CommandLine's root Option
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,57, @param properties the Properties instance to get values from
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,59,"ublic PropertiesCommandLine(final Option root, final Properties properties){"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,60,"his(root,properties,NUL);"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,64," Creates a new PropertiesCommandLine using the specified root Option,"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,65, Properties instance and value separator.
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,67, @param root the CommandLine's root Option
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,68, @param properties the Properties instance to get values from
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,69, @param separator the character to split argument values
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,71,"ublic PropertiesCommandLine(final Option root, final Properties properties, final char separator){"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,72,his.root = root;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,73,his.properties = properties;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,74,his.separator = separator;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,78,ublic boolean hasOption(Option option) {
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,79,f(option==null){
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,80,eturn false;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,82,lse{
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,83,eturn properties.containsKey(option.getPreferredName());
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,87,ublic Option getOption(String trigger) {
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,88,eturn root.findOption(trigger);
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,91,"ublic List getValues(final Option option, final List defaultValues) {"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,92,inal String value = properties.getProperty(option.getPreferredName());
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,94,f(value==null){
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,95,eturn defaultValues;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,97,lse if(separator>NUL){
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,98,inal List values = new ArrayList();
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,99,"inal StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,101,hile(tokens.hasMoreTokens()){
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,102,alues.add(tokens.nextToken());
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,105,eturn values;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,107,lse{
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,108,eturn Collections.singletonList(value);
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,112,"ublic Boolean getSwitch(final Option option, final Boolean defaultValue) {"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,113,inal String value = properties.getProperty(option.getPreferredName());
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,114,"f(""true"".equals(value)){"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,115,eturn Boolean.TRUE;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,117,"lse if(""false"".equals(value)){"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,118,eturn Boolean.FALSE;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,120,lse{
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,121,eturn defaultValue;
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,125,"ublic String getProperty(final String property, final String defaultValue) {"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,126,"eturn properties.getProperty(property,defaultValue);"
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,129,ublic Set getProperties() {
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,130,eturn properties.keySet();
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,133,ublic List getOptions() {
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,134,inal List options = new ArrayList();
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,135,inal Iterator keys = properties.keySet().iterator();
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,136,hile(keys.hasNext()){
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,137,inal String trigger = (String)keys.next();
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,138,inal Option option = root.findOption(trigger);
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,139,f(option!=null){
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,140,ptions.add(option);
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,143,eturn Collections.unmodifiableList(options);
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,146,ublic Set getOptionTriggers() {
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,147,inal Set triggers = new HashSet();
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,148,inal Iterator options = getOptions().iterator();
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,149,hile(options.hasNext()){
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,150,inal Option option = (Option)options.next();
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,151,riggers.addAll(option.getTriggers());
False,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,153,eturn Collections.unmodifiableSet(triggers);
True,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,src/java/org/apache/commons/cli2/commandline/PropertiesCommandLine.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import java.util.Collections;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Properties;import java.util.Set;import java.util.StringTokenizer;import org.apache.commons.cli2.Option;/** * A CommandLine implementation using a java Properties instance, useful for * constructing a complex DefaultingCommandLine * * Options are keyed from their property name and presence in the Properties * instance is taken as presence in the CommandLine.  Argument values are taken * from the property value and are optionally separated using the separator * char, defined at construction time.  Switch values can be specified using a * simple value of <code>true</code> or <code>false</code>; obviously this means * that Switches with Arguments are not supported by this implementation. * * @see java.util.Properties * @see org.apache.commons.cli2.commandline.DefaultingCommandLine * @see org.apache.commons.cli2.Option#getPreferredName() */public class PropertiesCommandLine extends CommandLineImpl {	private static final char NUL = '\0';	private final Properties properties;	private final Option root;	private final char separator;    /**     * Creates a new PropertiesCommandLine using the specified root Option,     * Properties instance.  The character 0 is used as the value separator.     *     * @param root the CommandLine's root Option     * @param properties the Properties instance to get values from     */	public PropertiesCommandLine(final Option root, final Properties properties){		this(root,properties,NUL);	}    /**     * Creates a new PropertiesCommandLine using the specified root Option,     * Properties instance and value separator.     *     * @param root the CommandLine's root Option     * @param properties the Properties instance to get values from     * @param separator the character to split argument values     */	public PropertiesCommandLine(final Option root, final Properties properties, final char separator){		this.root = root;		this.properties = properties;		this.separator = separator;	}	public boolean hasOption(Option option) {		if(option==null){			return false;		}		else{			return properties.containsKey(option.getPreferredName());		}	}	public Option getOption(String trigger) {		return root.findOption(trigger);	}	public List getValues(final Option option, final List defaultValues) {		final String value = properties.getProperty(option.getPreferredName());		if(value==null){			return defaultValues;		}		else if(separator>NUL){			final List values = new ArrayList();			final StringTokenizer tokens = new StringTokenizer(value,String.valueOf(separator));			while(tokens.hasMoreTokens()){				values.add(tokens.nextToken());			}			return values;		}		else{			return Collections.singletonList(value);		}	}	public Boolean getSwitch(final Option option, final Boolean defaultValue) {		final String value = properties.getProperty(option.getPreferredName());		if(""true"".equals(value)){			return Boolean.TRUE;		}		else if(""false"".equals(value)){			return Boolean.FALSE;		}		else{			return defaultValue;		}	}	public String getProperty(final String property, final String defaultValue) {		return properties.getProperty(property,defaultValue);	}	public Set getProperties() {		return properties.keySet();	}	public List getOptions() {		final List options = new ArrayList();		final Iterator keys = properties.keySet().iterator();		while(keys.hasNext()){			final String trigger = (String)keys.next();			final Option option = root.findOption(trigger);			if(option!=null){				options.add(option);			}		}		return Collections.unmodifiableList(options);	}	public Set getOptionTriggers() {		final Set triggers = new HashSet();		final Iterator options = getOptions().iterator();		while(options.hasNext()){			final Option option = (Option)options.next();			triggers.addAll(option.getTriggers());		}		return Collections.unmodifiableSet(triggers);	}}"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,17,ackage org.apache.commons.cli2.commandline;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,20,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,21,mport java.util.HashMap;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,22,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,23,mport java.util.List;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,24,mport java.util.Map;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,25,mport java.util.Properties;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,26,mport java.util.Set;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,28,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,29,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,30,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,31,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,32,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,35, A WriteableCommandLine implementation allowing Options to write their
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,36, processed information to a CommandLine.
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,38,ublic class WriteableCommandLineImpl
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,39,xtends CommandLineImpl implements WriteableCommandLine {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,40,rivate final Properties properties = new Properties();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,41,rivate final List options = new ArrayList();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,42,rivate final Map nameToOption = new HashMap();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,43,rivate final Map values = new HashMap();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,44,rivate final Map switches = new HashMap();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,45,rivate final Map defaultValues = new HashMap();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,46,rivate final Map defaultSwitches = new HashMap();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,47,rivate final List normalised;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,48,rivate final Set prefixes;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,51," Creates a new WriteableCommandLineImpl rooted on the specified Option, to"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,52, hold the parsed arguments.
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,54, @param rootOption the CommandLine's root Option
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,55, @param arguments the arguments this CommandLine represents
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,57,"ublic WriteableCommandLineImpl(final Option rootOption,"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,58,inal List arguments) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,59,his.prefixes = rootOption.getPrefixes();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,60,his.normalised = arguments;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,63,ublic void addOption(Option option) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,64,ptions.add(option);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,65,"ameToOption.put(option.getPreferredName(), option);"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,67,or (Iterator i = option.getTriggers().iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,68,"ameToOption.put(i.next(), option);"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,72,"ublic void addValue(final Option option,"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,73,inal Object value) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,74,f (option instanceof Argument) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,75,ddOption(option);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,78,ist valueList = (List) values.get(option);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,80,f (valueList == null) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,81,alueList = new ArrayList();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,82,"alues.put(option, valueList);"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,85,alueList.add(value);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,88,"ublic void addSwitch(final Option option,"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,89,inal boolean value) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,90,ddOption(option);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,92,f (switches.containsKey(option)) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,93,hrow new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET));
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,94, else {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,95,"witches.put(option, value ? Boolean.TRUE : Boolean.FALSE);"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,99,ublic boolean hasOption(final Option option) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,100,inal boolean present = options.contains(option);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,102,eturn present;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,105,ublic Option getOption(final String trigger) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,106,eturn (Option) nameToOption.get(trigger);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,109,"ublic List getValues(final Option option,"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,110,inal List defaultValues) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,111,/ First grab the command line values
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,112,ist valueList = (List) values.get(option);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,114,/ Secondly try the defaults supplied to the method
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,115,f ((valueList == null) || valueList.isEmpty()) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,116,alueList = defaultValues;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,119,/ Thirdly try the option's default values
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,120,f ((valueList == null) || valueList.isEmpty()) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,121,alueList = (List) this.defaultValues.get(option);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,124,/ Finally use an empty list
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,125,f (valueList == null) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,126,alueList = Collections.EMPTY_LIST;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,129,eturn valueList;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,132,"ublic Boolean getSwitch(final Option option,"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,133,inal Boolean defaultValue) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,134,/ First grab the command line values
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,135,oolean bool = (Boolean) switches.get(option);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,137,/ Secondly try the defaults supplied to the method
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,138,f (bool == null) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,139,ool = defaultValue;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,142,/ Thirdly try the option's default values
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,143,f (bool == null) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,144,ool = (Boolean) this.defaultSwitches.get(option);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,147,eturn bool;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,150,"ublic void addProperty(final String property,"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,151,inal String value) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,152,"roperties.setProperty(property, value);"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,155,"ublic String getProperty(final String property,"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,156,inal String defaultValue) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,157,"eturn properties.getProperty(property, defaultValue);"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,160,ublic Set getProperties() {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,161,eturn Collections.unmodifiableSet(properties.keySet());
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,164,ublic boolean looksLikeOption(final String trigger) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,165,or (final Iterator i = prefixes.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,166,inal String prefix = (String) i.next();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,168,f (trigger.startsWith(prefix)) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,169,eturn true;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,173,eturn false;
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,176,ublic String toString() {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,177,inal StringBuffer buffer = new StringBuffer();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,179,/ need to add group header
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,180,or (final Iterator i = normalised.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,181,inal String arg = (String) i.next();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,183,f (arg.indexOf(' ') >= 0) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,184,"uffer.append(""\"""").append(arg).append(""\"""");"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,185, else {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,186,uffer.append(arg);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,189,f (i.hasNext()) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,190,uffer.append(' ');
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,194,eturn buffer.toString();
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,197,ublic List getOptions() {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,198,eturn Collections.unmodifiableList(options);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,201,ublic Set getOptionTriggers() {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,202,eturn Collections.unmodifiableSet(nameToOption.keySet());
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,205,"ublic void setDefaultValues(final Option option,"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,206,inal List defaults) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,207,f (defaults == null) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,208,efaultValues.remove(option);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,209, else {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,210,"efaultValues.put(option, defaults);"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,214,"ublic void setDefaultSwitch(final Option option,"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,215,inal Boolean defaultSwitch) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,216,f (defaultSwitch == null) {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,217,efaultSwitches.remove(option);
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,218, else {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,219,"efaultSwitches.put(option, defaultSwitch);"
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,223,ublic List getNormalised() {
False,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,224,eturn Collections.unmodifiableList(normalised);
True,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Properties;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * A WriteableCommandLine implementation allowing Options to write their * processed information to a CommandLine. */public class WriteableCommandLineImpl    extends CommandLineImpl implements WriteableCommandLine {    private final Properties properties = new Properties();    private final List options = new ArrayList();    private final Map nameToOption = new HashMap();    private final Map values = new HashMap();    private final Map switches = new HashMap();    private final Map defaultValues = new HashMap();    private final Map defaultSwitches = new HashMap();    private final List normalised;    private final Set prefixes;    /**     * Creates a new WriteableCommandLineImpl rooted on the specified Option, to     * hold the parsed arguments.     *     * @param rootOption the CommandLine's root Option     * @param arguments the arguments this CommandLine represents     */    public WriteableCommandLineImpl(final Option rootOption,                                    final List arguments) {        this.prefixes = rootOption.getPrefixes();        this.normalised = arguments;    }    public void addOption(Option option) {        options.add(option);        nameToOption.put(option.getPreferredName(), option);        for (Iterator i = option.getTriggers().iterator(); i.hasNext();) {            nameToOption.put(i.next(), option);        }    }    public void addValue(final Option option,                         final Object value) {        if (option instanceof Argument) {            addOption(option);        }        List valueList = (List) values.get(option);        if (valueList == null) {            valueList = new ArrayList();            values.put(option, valueList);        }        valueList.add(value);    }    public void addSwitch(final Option option,                          final boolean value) {        addOption(option);        if (switches.containsKey(option)) {            throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET));        } else {            switches.put(option, value ? Boolean.TRUE : Boolean.FALSE);        }    }    public boolean hasOption(final Option option) {        final boolean present = options.contains(option);        return present;    }    public Option getOption(final String trigger) {        return (Option) nameToOption.get(trigger);    }    public List getValues(final Option option,                          final List defaultValues) {        // First grab the command line values        List valueList = (List) values.get(option);        // Secondly try the defaults supplied to the method        if ((valueList == null) || valueList.isEmpty()) {            valueList = defaultValues;        }        // Thirdly try the option's default values        if ((valueList == null) || valueList.isEmpty()) {            valueList = (List) this.defaultValues.get(option);        }        // Finally use an empty list        if (valueList == null) {            valueList = Collections.EMPTY_LIST;        }        return valueList;    }    public Boolean getSwitch(final Option option,                             final Boolean defaultValue) {        // First grab the command line values        Boolean bool = (Boolean) switches.get(option);        // Secondly try the defaults supplied to the method        if (bool == null) {            bool = defaultValue;        }        // Thirdly try the option's default values        if (bool == null) {            bool = (Boolean) this.defaultSwitches.get(option);        }        return bool;    }    public void addProperty(final String property,                            final String value) {        properties.setProperty(property, value);    }    public String getProperty(final String property,                              final String defaultValue) {        return properties.getProperty(property, defaultValue);    }    public Set getProperties() {        return Collections.unmodifiableSet(properties.keySet());    }    public boolean looksLikeOption(final String trigger) {        for (final Iterator i = prefixes.iterator(); i.hasNext();) {            final String prefix = (String) i.next();            if (trigger.startsWith(prefix)) {                return true;            }        }        return false;    }    public String toString() {        final StringBuffer buffer = new StringBuffer();        // need to add group header        for (final Iterator i = normalised.iterator(); i.hasNext();) {            final String arg = (String) i.next();            if (arg.indexOf(' ') >= 0) {                buffer.append(""\"""").append(arg).append(""\"""");            } else {                buffer.append(arg);            }            if (i.hasNext()) {                buffer.append(' ');            }        }        return buffer.toString();    }    public List getOptions() {        return Collections.unmodifiableList(options);    }    public Set getOptionTriggers() {        return Collections.unmodifiableSet(nameToOption.keySet());    }    public void setDefaultValues(final Option option,                                 final List defaults) {        if (defaults == null) {            defaultValues.remove(option);        } else {            defaultValues.put(option, defaults);        }    }    public void setDefaultSwitch(final Option option,                                 final Boolean defaultSwitch) {        if (defaultSwitch == null) {            defaultSwitches.remove(option);        } else {            defaultSwitches.put(option, defaultSwitch);        }    }    public List getNormalised() {        return Collections.unmodifiableList(normalised);    }}"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,17,ackage org.apache.commons.cli2.option;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,19,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,20,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,21,mport java.util.List;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,22,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,23,mport java.util.Set;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,24,mport java.util.StringTokenizer;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,26,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,27,mport org.apache.commons.cli2.DisplaySetting;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,28,mport org.apache.commons.cli2.HelpLine;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,29,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,30,mport org.apache.commons.cli2.OptionException;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,31,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,32,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,33,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,34,mport org.apache.commons.cli2.validation.InvalidArgumentException;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,35,mport org.apache.commons.cli2.validation.Validator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,38, An implementation of an Argument.
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,40,ublic class ArgumentImpl
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,41,xtends OptionImpl implements Argument {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,42,rivate static final char NUL = '\0';
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,45, The default value for the initial separator char.
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,47,ublic static final char DEFAULT_INITIAL_SEPARATOR = NUL;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,50, The default value for the subsequent separator char.
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,52,ublic static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,55, The default token to indicate that remaining arguments should be consumed
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,56, as values.
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,58,"ublic static final String DEFAULT_CONSUME_REMAINING = ""--"";"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,59,rivate final String name;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,60,rivate final String description;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,61,rivate final int minimum;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,62,rivate final int maximum;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,63,rivate final char initialSeparator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,64,rivate final char subsequentSeparator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,65,rivate final boolean subsequentSplit;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,66,rivate final Validator validator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,67,rivate final String consumeRemaining;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,68,rivate final List defaultValues;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,69,rivate final ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,72, Creates a new Argument instance.
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,74, @param name
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,75,            The name of the argument
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,76, @param description
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,77,            A description of the argument
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,78, @param minimum
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,79,            The minimum number of values needed to be valid
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,80, @param maximum
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,81,            The maximum number of values allowed to be valid
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,82, @param initialSeparator
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,83,            The char separating option from value
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,84, @param subsequentSeparator
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,85,            The char separating values from each other
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,86, @param validator
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,87,            The object responsible for validating the values
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,88, @param consumeRemaining
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,89,"            The String used for the ""consuming option"" group"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,90, @param valueDefaults
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,91,            The values to be used if none are specified.
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,92, @param id
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,93,"            The id of the option, 0 implies automatic assignment."
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,95," @see OptionImpl#OptionImpl(int,boolean)"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,97,"ublic ArgumentImpl(final String name,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,98,"inal String description,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,99,"inal int minimum,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,100,"inal int maximum,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,101,"inal char initialSeparator,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,102,"inal char subsequentSeparator,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,103,"inal Validator validator,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,104,"inal String consumeRemaining,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,105,"inal List valueDefaults,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,106,inal int id) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,107,"uper(id, false);"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,109,"his.name = (name == null) ? ""arg"" : name;"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,110,his.description = description;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,111,his.minimum = minimum;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,112,his.maximum = maximum;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,113,his.initialSeparator = initialSeparator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,114,his.subsequentSeparator = subsequentSeparator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,115,his.subsequentSplit = subsequentSeparator != NUL;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,116,his.validator = validator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,117,his.consumeRemaining = consumeRemaining;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,118,his.defaultValues = valueDefaults;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,120,f (minimum > maximum) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,121,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX));
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,124,f ((valueDefaults != null) && (valueDefaults.size() > 0)) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,125,f (valueDefaults.size() < minimum) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,126,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS));
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,129,f (valueDefaults.size() > maximum) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,130,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS));
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,135,ublic String getPreferredName() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,136,eturn name;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,139,"ublic void processValues(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,140,"inal ListIterator arguments,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,141,inal Option option)
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,142,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,143,"nt argumentCount = commandLine.getValues(option, Collections.EMPTY_LIST).size();"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,145,hile (arguments.hasNext() && (argumentCount < maximum)) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,146,inal String allValuesQuoted = (String) arguments.next();
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,147,inal String allValues = stripBoundaryQuotes(allValuesQuoted);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,149,/ should we ignore things that look like options?
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,150,f (allValuesQuoted.equals(consumeRemaining)) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,151,hile (arguments.hasNext() && (argumentCount < maximum)) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,152,+argumentCount;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,153,"ommandLine.addValue(option, arguments.next());"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,156,/ does it look like an option?
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,157,lse if (commandLine.looksLikeOption(allValuesQuoted)) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,158,rguments.previous();
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,160,reak;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,162,/ should we split the string up?
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,163,lse if (subsequentSplit) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,164,inal StringTokenizer values =
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,165,"ew StringTokenizer(allValues, String.valueOf(subsequentSeparator));"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,167,rguments.remove();
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,169,hile (values.hasMoreTokens() && (argumentCount < maximum)) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,170,+argumentCount;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,172,inal String token = values.nextToken();
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,173,"ommandLine.addValue(option, token);"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,174,rguments.add(token);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,177,f (values.hasMoreTokens()) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,178,"hrow new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,179,alues.nextToken());
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,182,/ it must be a value as it is
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,183,lse {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,184,+argumentCount;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,185,"ommandLine.addValue(option, allValues);"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,190,"ublic boolean canProcess(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,191,inal String arg) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,192,eturn true;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,195,ublic Set getPrefixes() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,196,eturn Collections.EMPTY_SET;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,199,"ublic void process(WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,200,istIterator args)
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,201,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,202,"rocessValues(commandLine, args, this);"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,205,ublic char getInitialSeparator() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,206,eturn this.initialSeparator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,209,ublic char getSubsequentSeparator() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,210,eturn this.subsequentSeparator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,213,ublic Set getTriggers() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,214,eturn Collections.EMPTY_SET;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,217,ublic String getConsumeRemaining() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,218,eturn this.consumeRemaining;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,221,ublic List getDefaultValues() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,222,eturn this.defaultValues;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,225,ublic Validator getValidator() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,226,eturn this.validator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,229,ublic void validate(final WriteableCommandLine commandLine)
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,230,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,231,"alidate(commandLine, this);"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,234,"ublic void validate(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,235,inal Option option)
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,236,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,237,inal List values = commandLine.getValues(option);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,239,f (values.size() < minimum) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,240,"hrow new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES);"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,243,f (values.size() > maximum) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,244,"hrow new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,245,String) values.get(maximum));
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,248,f (validator != null) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,249,ry {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,250,alidator.validate(values);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,251, catch (InvalidArgumentException ive) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,252,"hrow new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,253,ve.getMessage());
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,258,"ublic void appendUsage(final StringBuffer buffer,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,259,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,260,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,261,/ do we display the outer optionality
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,262,inal boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,264,/ allow numbering if multiple args
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,265,inal boolean numbered =
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,266,maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,268,inal boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,270,/ if infinite args are allowed then crop the list
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,271,inal int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,273,nt i = 0;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,275,/ for each argument
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,276,hile (i < max) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,277,/ if we're past the first add a space
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,278,f (i > 0) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,279,uffer.append(' ');
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,282,/ if the next arg is optional
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,283,f ((i >= minimum) && (optional || (i > 0))) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,284,uffer.append('[');
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,287,f (bracketed) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,288,uffer.append('<');
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,291,/ add name
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,292,uffer.append(name);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,293,+i;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,295,/ if numbering
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,296,f (numbered) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,297,uffer.append(i);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,300,f (bracketed) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,301,uffer.append('>');
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,305,/ if infinite args are allowed
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,306,f (maximum == Integer.MAX_VALUE) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,307,/ append elipsis
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,308,"uffer.append("" ..."");"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,311,/ for each argument
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,312,hile (i > 0) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,313,-i;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,315,/ if the next arg is optional
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,316,f ((i >= minimum) && (optional || (i > 0))) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,317,uffer.append(']');
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,322,ublic String getDescription() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,323,eturn description;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,326,"ublic List helpLines(final int depth,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,327,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,328,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,329,"inal HelpLine helpLine = new HelpLineImpl(this, depth);"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,331,eturn Collections.singletonList(helpLine);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,334,ublic int getMaximum() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,335,eturn maximum;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,338,ublic int getMinimum() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,339,eturn minimum;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,343, If there are any leading or trailing quotes remove them from the
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,344, specified token.
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,346, @param token
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,347,            the token to strip leading and trailing quotes
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,349, @return String the possibly modified token
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,351,ublic String stripBoundaryQuotes(String token) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,352,"f (!token.startsWith(""\"""") || !token.endsWith(""\"""")) {"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,353,eturn token;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,356,"oken = token.substring(1, token.length() - 1);"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,358,eturn token;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,361,ublic boolean isRequired() {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,362,eturn getMinimum() > 0;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,365,ublic void defaults(final WriteableCommandLine commandLine) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,366,uper.defaults(commandLine);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,367,"efaultValues(commandLine, this);"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,370,"ublic void defaultValues(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,371,inal Option option) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,372,"ommandLine.setDefaultValues(option, defaultValues);"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.Collections;import java.util.Comparator;import java.util.List;import java.util.ListIterator;import java.util.Set;import java.util.StringTokenizer;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;import org.apache.commons.cli2.validation.InvalidArgumentException;import org.apache.commons.cli2.validation.Validator;/** * An implementation of an Argument. */public class ArgumentImpl    extends OptionImpl implements Argument {    private static final char NUL = '\0';    /**     * The default value for the initial separator char.     */    public static final char DEFAULT_INITIAL_SEPARATOR = NUL;    /**     * The default value for the subsequent separator char.     */    public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL;    /**     * The default token to indicate that remaining arguments should be consumed     * as values.     */    public static final String DEFAULT_CONSUME_REMAINING = ""--"";    private final String name;    private final String description;    private final int minimum;    private final int maximum;    private final char initialSeparator;    private final char subsequentSeparator;    private final boolean subsequentSplit;    private final Validator validator;    private final String consumeRemaining;    private final List defaultValues;    private final ResourceHelper resources = ResourceHelper.getResourceHelper();    /**     * Creates a new Argument instance.     *     * @param name     *            The name of the argument     * @param description     *            A description of the argument     * @param minimum     *            The minimum number of values needed to be valid     * @param maximum     *            The maximum number of values allowed to be valid     * @param initialSeparator     *            The char separating option from value     * @param subsequentSeparator     *            The char separating values from each other     * @param validator     *            The object responsible for validating the values     * @param consumeRemaining     *            The String used for the ""consuming option"" group     * @param valueDefaults     *            The values to be used if none are specified.     * @param id     *            The id of the option, 0 implies automatic assignment.     *     * @see OptionImpl#OptionImpl(int,boolean)     */    public ArgumentImpl(final String name,                        final String description,                        final int minimum,                        final int maximum,                        final char initialSeparator,                        final char subsequentSeparator,                        final Validator validator,                        final String consumeRemaining,                        final List valueDefaults,                        final int id) {        super(id, false);        this.name = (name == null) ? ""arg"" : name;        this.description = description;        this.minimum = minimum;        this.maximum = maximum;        this.initialSeparator = initialSeparator;        this.subsequentSeparator = subsequentSeparator;        this.subsequentSplit = subsequentSeparator != NUL;        this.validator = validator;        this.consumeRemaining = consumeRemaining;        this.defaultValues = valueDefaults;        if (minimum > maximum) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX));        }        if ((valueDefaults != null) && (valueDefaults.size() > 0)) {            if (valueDefaults.size() < minimum) {                throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS));            }            if (valueDefaults.size() > maximum) {                throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS));            }        }    }    public String getPreferredName() {        return name;    }    public void processValues(final WriteableCommandLine commandLine,                              final ListIterator arguments,                              final Option option)        throws OptionException {        int argumentCount = commandLine.getValues(option, Collections.EMPTY_LIST).size();        while (arguments.hasNext() && (argumentCount < maximum)) {            final String allValuesQuoted = (String) arguments.next();            final String allValues = stripBoundaryQuotes(allValuesQuoted);            // should we ignore things that look like options?            if (allValuesQuoted.equals(consumeRemaining)) {                while (arguments.hasNext() && (argumentCount < maximum)) {                    ++argumentCount;                    commandLine.addValue(option, arguments.next());                }            }            // does it look like an option?            else if (commandLine.looksLikeOption(allValuesQuoted)) {                arguments.previous();                break;            }            // should we split the string up?            else if (subsequentSplit) {                final StringTokenizer values =                    new StringTokenizer(allValues, String.valueOf(subsequentSeparator));                arguments.remove();                while (values.hasMoreTokens() && (argumentCount < maximum)) {                    ++argumentCount;                    final String token = values.nextToken();                    commandLine.addValue(option, token);                    arguments.add(token);                }                if (values.hasMoreTokens()) {                    throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,                                              values.nextToken());                }            }            // it must be a value as it is            else {                ++argumentCount;                commandLine.addValue(option, allValues);            }        }    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final String arg) {        return true;    }    public Set getPrefixes() {        return Collections.EMPTY_SET;    }    public void process(WriteableCommandLine commandLine,                        ListIterator args)        throws OptionException {        processValues(commandLine, args, this);    }    public char getInitialSeparator() {        return this.initialSeparator;    }    public char getSubsequentSeparator() {        return this.subsequentSeparator;    }    public Set getTriggers() {        return Collections.EMPTY_SET;    }    public String getConsumeRemaining() {    	return this.consumeRemaining;    }    public List getDefaultValues() {    	return this.defaultValues;    }    public Validator getValidator() {    	return this.validator;    }    public void validate(final WriteableCommandLine commandLine)        throws OptionException {        validate(commandLine, this);    }    public void validate(final WriteableCommandLine commandLine,                         final Option option)        throws OptionException {        final List values = commandLine.getValues(option);        if (values.size() < minimum) {            throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES);        }        if (values.size() > maximum) {            throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,                                      (String) values.get(maximum));        }        if (validator != null) {            try {                validator.validate(values);            } catch (InvalidArgumentException ive) {                throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,                                          ive.getMessage());            }        }    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        // do we display the outer optionality        final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);        // allow numbering if multiple args        final boolean numbered =            (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);        final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);        // if infinite args are allowed then crop the list        final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;        int i = 0;        // for each argument        while (i < max) {            // if we're past the first add a space            if (i > 0) {                buffer.append(' ');            }            // if the next arg is optional            if ((i >= minimum) && (optional || (i > 0))) {                buffer.append('[');            }            if (bracketed) {                buffer.append('<');            }            // add name            buffer.append(name);            ++i;            // if numbering            if (numbered) {                buffer.append(i);            }            if (bracketed) {                buffer.append('>');            }        }        // if infinite args are allowed        if (maximum == Integer.MAX_VALUE) {            // append elipsis            buffer.append("" ..."");        }        // for each argument        while (i > 0) {            --i;            // if the next arg is optional            if ((i >= minimum) && (optional || (i > 0))) {                buffer.append(']');            }        }    }    public String getDescription() {        return description;    }    public List helpLines(final int depth,                          final Set helpSettings,                          final Comparator comp) {        final HelpLine helpLine = new HelpLineImpl(this, depth);        return Collections.singletonList(helpLine);    }    public int getMaximum() {        return maximum;    }    public int getMinimum() {        return minimum;    }    /**     * If there are any leading or trailing quotes remove them from the     * specified token.     *     * @param token     *            the token to strip leading and trailing quotes     *     * @return String the possibly modified token     */    public String stripBoundaryQuotes(String token) {        if (!token.startsWith(""\"""") || !token.endsWith(""\"""")) {            return token;        }        token = token.substring(1, token.length() - 1);        return token;    }    public boolean isRequired() {        return getMinimum() > 0;    }    public void defaults(final WriteableCommandLine commandLine) {        super.defaults(commandLine);        defaultValues(commandLine, this);    }    public void defaultValues(final WriteableCommandLine commandLine,                              final Option option) {        commandLine.setDefaultValues(option, defaultValues);    }}"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,17,ackage org.apache.commons.cli2.option;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,20,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,21,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,22,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,23,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,24,mport java.util.List;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,25,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,26,mport java.util.Set;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,28,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,29,mport org.apache.commons.cli2.DisplaySetting;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,30,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,31,mport org.apache.commons.cli2.OptionException;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,32,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,33,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,34,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,37," Represents a cvs ""update"" style command line option."
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,39," Like all Parents, Commands can have child options and can be part of"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,40, Arguments
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,42,ublic class Command
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,43,xtends ParentImpl {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,44,** The display name for the command */
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,45,rivate final String preferredName;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,47,** The aliases for this command */
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,48,rivate final Set aliases;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,50,** All the names for this command */
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,51,rivate final Set triggers;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,54, Creates a new Command instance.
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,56, @param preferredName
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,57,            The name normally used to refer to the Command
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,58, @param description
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,59,            A description of the Command
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,60, @param aliases
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,61,            Alternative names for the Command
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,62, @param required
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,63,            Whether the Command is required
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,64, @param argument
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,65,            An Argument that the command takes
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,66, @param children
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,67,            The Group of child options for this Command
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,68, @param id
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,69,            A unique id for the Command
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,71," @see ParentImpl#ParentImpl(Argument, Group, String, int, boolean)"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,73,"ublic Command(final String preferredName,"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,74,"inal String description,"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,75,"inal Set aliases,"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,76,"inal boolean required,"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,77,"inal Argument argument,"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,78,"inal Group children,"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,79,inal int id) {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,80,"uper(argument, children, description, id, required);"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,82,/ check the preferred name is valid
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,83,f ((preferredName == null) || (preferredName.length() < 1)) {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,84,hrow new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT));
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,87,his.preferredName = preferredName;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,89,/ gracefully and defensively handle aliases
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,90,his.aliases =
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,91,aliases == null) ? Collections.EMPTY_SET
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,92, Collections.unmodifiableSet(new HashSet(aliases));
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,94,/ populate the triggers Set
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,95,inal Set newTriggers = new HashSet();
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,96,ewTriggers.add(preferredName);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,97,ewTriggers.addAll(this.aliases);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,98,his.triggers = Collections.unmodifiableSet(newTriggers);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,101,"ublic void processParent(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,102,inal ListIterator arguments)
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,103,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,104,/ grab the argument to process
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,105,inal String arg = (String) arguments.next();
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,107,/ if we can process it
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,108,"f (canProcess(commandLine, arg)) {"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,109,/ then note the option
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,110,ommandLine.addOption(this);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,112,/ normalise the argument list
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,113,rguments.set(preferredName);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,114, else {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,115,"hrow new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,119,ublic Set getTriggers() {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,120,eturn triggers;
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,123,ublic void validate(WriteableCommandLine commandLine)
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,124,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,125,f (isRequired() && !commandLine.hasOption(this)) {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,126,"hrow new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,127,etPreferredName());
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,130,uper.validate(commandLine);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,133,"ublic void appendUsage(final StringBuffer buffer,"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,134,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,135,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,136,/ do we display optionality
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,137,inal boolean optional =
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,138,isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,139,inal boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,141,f (optional) {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,142,uffer.append('[');
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,145,uffer.append(preferredName);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,147,f (displayAliases && !aliases.isEmpty()) {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,148,"uffer.append("" ("");"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,150,inal List list = new ArrayList(aliases);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,151,ollections.sort(list);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,153,or (final Iterator i = list.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,154,inal String alias = (String) i.next();
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,155,uffer.append(alias);
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,157,f (i.hasNext()) {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,158,"uffer.append(',');"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,162,uffer.append(')');
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,165,"uper.appendUsage(buffer, helpSettings, comp);"
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,167,f (optional) {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,168,uffer.append(']');
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,172,ublic String getPreferredName() {
False,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,173,eturn preferredName;
True,src/java/org/apache/commons/cli2/option/Command.java,src/java/org/apache/commons/cli2/option/Command.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Represents a cvs ""update"" style command line option. * * Like all Parents, Commands can have child options and can be part of * Arguments */public class Command    extends ParentImpl {    /** The display name for the command */    private final String preferredName;    /** The aliases for this command */    private final Set aliases;    /** All the names for this command */    private final Set triggers;    /**     * Creates a new Command instance.     *     * @param preferredName     *            The name normally used to refer to the Command     * @param description     *            A description of the Command     * @param aliases     *            Alternative names for the Command     * @param required     *            Whether the Command is required     * @param argument     *            An Argument that the command takes     * @param children     *            The Group of child options for this Command     * @param id     *            A unique id for the Command     *     * @see ParentImpl#ParentImpl(Argument, Group, String, int, boolean)     */    public Command(final String preferredName,                   final String description,                   final Set aliases,                   final boolean required,                   final Argument argument,                   final Group children,                   final int id) {        super(argument, children, description, id, required);        // check the preferred name is valid        if ((preferredName == null) || (preferredName.length() < 1)) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT));        }        this.preferredName = preferredName;        // gracefully and defensively handle aliases        this.aliases =            (aliases == null) ? Collections.EMPTY_SET                              : Collections.unmodifiableSet(new HashSet(aliases));        // populate the triggers Set        final Set newTriggers = new HashSet();        newTriggers.add(preferredName);        newTriggers.addAll(this.aliases);        this.triggers = Collections.unmodifiableSet(newTriggers);    }    public void processParent(final WriteableCommandLine commandLine,                              final ListIterator arguments)        throws OptionException {        // grab the argument to process        final String arg = (String) arguments.next();        // if we can process it        if (canProcess(commandLine, arg)) {            // then note the option            commandLine.addOption(this);            // normalise the argument list            arguments.set(preferredName);        } else {            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);        }    }    public Set getTriggers() {        return triggers;    }    public void validate(WriteableCommandLine commandLine)        throws OptionException {        if (isRequired() && !commandLine.hasOption(this)) {            throw new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,                                      getPreferredName());        }        super.validate(commandLine);    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        // do we display optionality        final boolean optional =            !isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);        final boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);        if (optional) {            buffer.append('[');        }        buffer.append(preferredName);        if (displayAliases && !aliases.isEmpty()) {            buffer.append("" ("");            final List list = new ArrayList(aliases);            Collections.sort(list);            for (final Iterator i = list.iterator(); i.hasNext();) {                final String alias = (String) i.next();                buffer.append(alias);                if (i.hasNext()) {                    buffer.append(',');                }            }            buffer.append(')');        }        super.appendUsage(buffer, helpSettings, comp);        if (optional) {            buffer.append(']');        }    }    public String getPreferredName() {        return preferredName;    }}"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,17,ackage org.apache.commons.cli2.option;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,20,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,21,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,22,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,23,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,24,mport java.util.List;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,25,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,26,mport java.util.Set;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,28,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,29,mport org.apache.commons.cli2.DisplaySetting;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,30,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,31,mport org.apache.commons.cli2.OptionException;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,32,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,33,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,36, A Parent implementation representing normal options.
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,38,ublic class DefaultOption
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,39,xtends ParentImpl {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,41, The default token used to prefix a short option
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,43,"ublic static final String DEFAULT_SHORT_PREFIX = ""-"";"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,46, The default token used to prefix a long option
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,48,"ublic static final String DEFAULT_LONG_PREFIX = ""--"";"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,51, The default value for the burstEnabled constructor parameter
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,53,ublic static final boolean DEFAULT_BURST_ENABLED = true;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,54,rivate final String preferredName;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,55,rivate final Set aliases;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,56,rivate final Set burstAliases;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,57,rivate final Set triggers;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,58,rivate final Set prefixes;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,59,rivate final String shortPrefix;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,60,rivate final boolean burstEnabled;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,61,rivate final int burstLength;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,64, Creates a new DefaultOption
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,66, @param shortPrefix the prefix used for short options
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,67, @param longPrefix the prefix used for long options
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,68, @param burstEnabled should option bursting be enabled
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,69," @param preferredName the preferred name for this Option, this should begin with either shortPrefix or longPrefix"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,70, @param description a description of this Option
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,71, @param aliases the alternative names for this Option
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,72, @param burstAliases the aliases that can be burst
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,73, @param required whether the Option is strictly required
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,74," @param argument the Argument belonging to this Parent, or null"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,75," @param children the Group children belonging to this Parent, ot null"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,76, @param id the unique identifier for this Option
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,77, @throws IllegalArgumentException if the preferredName or an alias isn't
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,78,     prefixed with shortPrefix or longPrefix
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,80,"ublic DefaultOption(final String shortPrefix,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,81,"inal String longPrefix,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,82,"inal boolean burstEnabled,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,83,"inal String preferredName,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,84,"inal String description,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,85,"inal Set aliases,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,86,"inal Set burstAliases,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,87,"inal boolean required,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,88,"inal Argument argument,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,89,"inal Group children,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,90,inal int id) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,91,"uper(argument, children, description, id, required);"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,93,his.shortPrefix = shortPrefix;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,94,his.burstEnabled = burstEnabled;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,96,his.burstLength = shortPrefix.length() + 1;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,98,his.preferredName = preferredName;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,99,his.aliases =
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,100,aliases == null) ? Collections.EMPTY_SET
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,101, Collections.unmodifiableSet(new HashSet(aliases));
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,103,his.burstAliases =
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,104,burstAliases == null) ? Collections.EMPTY_SET
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,105, Collections.unmodifiableSet(new HashSet(burstAliases));
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,107,inal Set newTriggers = new HashSet();
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,108,ewTriggers.add(preferredName);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,109,ewTriggers.addAll(this.aliases);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,110,ewTriggers.addAll(this.burstAliases);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,111,his.triggers = Collections.unmodifiableSet(newTriggers);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,113,inal Set newPrefixes = new HashSet(super.getPrefixes());
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,114,ewPrefixes.add(shortPrefix);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,115,ewPrefixes.add(longPrefix);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,116,his.prefixes = Collections.unmodifiableSet(newPrefixes);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,118,heckPrefixes(newPrefixes);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,121,"ublic boolean canProcess(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,122,inal String argument) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,123,eturn (argument != null) &&
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,124,"super.canProcess(commandLine, argument) ||"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,125,(argument.length() >= burstLength) &&
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,126,"urstAliases.contains(argument.substring(0, burstLength))));"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,129,"ublic void processParent(WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,130,istIterator arguments)
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,131,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,132,inal String argument = (String) arguments.next();
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,134,f (triggers.contains(argument)) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,135,ommandLine.addOption(this);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,136,rguments.set(preferredName);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,137, else if (burstEnabled && (argument.length() >= burstLength)) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,138,"inal String burst = argument.substring(0, burstLength);"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,140,f (burstAliases.contains(burst)) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,141,ommandLine.addOption(this);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,143,/HMM test bursting all vs bursting one by one.
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,144,rguments.set(preferredName);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,146,f (getArgument() == null) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,147,rguments.add(shortPrefix + argument.substring(burstLength));
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,148, else {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,149,rguments.add(argument.substring(burstLength));
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,152,rguments.previous();
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,153, else {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,154,"hrow new OptionException(this, ResourceConstants.CANNOT_BURST, argument);"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,156, else {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,157,"hrow new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, argument);"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,161,ublic Set getTriggers() {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,162,eturn triggers;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,165,ublic Set getPrefixes() {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,166,eturn prefixes;
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,169,ublic void validate(WriteableCommandLine commandLine)
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,170,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,171,f (isRequired() && !commandLine.hasOption(this)) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,172,"hrow new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,173,etPreferredName());
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,176,uper.validate(commandLine);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,179,"ublic void appendUsage(final StringBuffer buffer,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,180,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,181,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,182,/ do we display optionality
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,183,inal boolean optional =
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,184,isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,185,inal boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,187,f (optional) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,188,uffer.append('[');
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,191,uffer.append(preferredName);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,193,f (displayAliases && !aliases.isEmpty()) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,194,"uffer.append("" ("");"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,196,inal List list = new ArrayList(aliases);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,197,ollections.sort(list);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,199,or (final Iterator i = list.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,200,inal String alias = (String) i.next();
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,201,uffer.append(alias);
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,203,f (i.hasNext()) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,204,"uffer.append(',');"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,208,uffer.append(')');
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,211,"uper.appendUsage(buffer, helpSettings, comp);"
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,213,f (optional) {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,214,uffer.append(']');
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,218,ublic String getPreferredName() {
False,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,219,eturn preferredName;
True,src/java/org/apache/commons/cli2/option/DefaultOption.java,src/java/org/apache/commons/cli2/option/DefaultOption.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;/** * A Parent implementation representing normal options. */public class DefaultOption    extends ParentImpl {    /**     * The default token used to prefix a short option     */    public static final String DEFAULT_SHORT_PREFIX = ""-"";    /**     * The default token used to prefix a long option     */    public static final String DEFAULT_LONG_PREFIX = ""--"";    /**     * The default value for the burstEnabled constructor parameter     */    public static final boolean DEFAULT_BURST_ENABLED = true;    private final String preferredName;    private final Set aliases;    private final Set burstAliases;    private final Set triggers;    private final Set prefixes;    private final String shortPrefix;    private final boolean burstEnabled;    private final int burstLength;    /**     * Creates a new DefaultOption     *     * @param shortPrefix the prefix used for short options     * @param longPrefix the prefix used for long options     * @param burstEnabled should option bursting be enabled     * @param preferredName the preferred name for this Option, this should begin with either shortPrefix or longPrefix     * @param description a description of this Option     * @param aliases the alternative names for this Option     * @param burstAliases the aliases that can be burst     * @param required whether the Option is strictly required     * @param argument the Argument belonging to this Parent, or null     * @param children the Group children belonging to this Parent, ot null     * @param id the unique identifier for this Option     * @throws IllegalArgumentException if the preferredName or an alias isn't     *     prefixed with shortPrefix or longPrefix     */    public DefaultOption(final String shortPrefix,                         final String longPrefix,                         final boolean burstEnabled,                         final String preferredName,                         final String description,                         final Set aliases,                         final Set burstAliases,                         final boolean required,                         final Argument argument,                         final Group children,                         final int id) {        super(argument, children, description, id, required);        this.shortPrefix = shortPrefix;        this.burstEnabled = burstEnabled;        this.burstLength = shortPrefix.length() + 1;        this.preferredName = preferredName;        this.aliases =            (aliases == null) ? Collections.EMPTY_SET                              : Collections.unmodifiableSet(new HashSet(aliases));        this.burstAliases =            (burstAliases == null) ? Collections.EMPTY_SET                                   : Collections.unmodifiableSet(new HashSet(burstAliases));        final Set newTriggers = new HashSet();        newTriggers.add(preferredName);        newTriggers.addAll(this.aliases);        newTriggers.addAll(this.burstAliases);        this.triggers = Collections.unmodifiableSet(newTriggers);        final Set newPrefixes = new HashSet(super.getPrefixes());        newPrefixes.add(shortPrefix);        newPrefixes.add(longPrefix);        this.prefixes = Collections.unmodifiableSet(newPrefixes);        checkPrefixes(newPrefixes);    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final String argument) {        return (argument != null) &&               (super.canProcess(commandLine, argument) ||               ((argument.length() >= burstLength) &&               burstAliases.contains(argument.substring(0, burstLength))));    }    public void processParent(WriteableCommandLine commandLine,                              ListIterator arguments)        throws OptionException {        final String argument = (String) arguments.next();        if (triggers.contains(argument)) {            commandLine.addOption(this);            arguments.set(preferredName);        } else if (burstEnabled && (argument.length() >= burstLength)) {            final String burst = argument.substring(0, burstLength);            if (burstAliases.contains(burst)) {                commandLine.addOption(this);                //HMM test bursting all vs bursting one by one.                arguments.set(preferredName);                if (getArgument() == null) {                    arguments.add(shortPrefix + argument.substring(burstLength));                } else {                    arguments.add(argument.substring(burstLength));                }                arguments.previous();            } else {                throw new OptionException(this, ResourceConstants.CANNOT_BURST, argument);            }        } else {            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, argument);        }    }    public Set getTriggers() {        return triggers;    }    public Set getPrefixes() {        return prefixes;    }    public void validate(WriteableCommandLine commandLine)        throws OptionException {        if (isRequired() && !commandLine.hasOption(this)) {            throw new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,                                      getPreferredName());        }        super.validate(commandLine);    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        // do we display optionality        final boolean optional =            !isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);        final boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);        if (optional) {            buffer.append('[');        }        buffer.append(preferredName);        if (displayAliases && !aliases.isEmpty()) {            buffer.append("" ("");            final List list = new ArrayList(aliases);            Collections.sort(list);            for (final Iterator i = list.iterator(); i.hasNext();) {                final String alias = (String) i.next();                buffer.append(alias);                if (i.hasNext()) {                    buffer.append(',');                }            }            buffer.append(')');        }        super.appendUsage(buffer, helpSettings, comp);        if (optional) {            buffer.append(']');        }    }    public String getPreferredName() {        return preferredName;    }}"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,17,ackage org.apache.commons.cli2.option;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,20,mport java.util.Collection;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,21,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,22,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,23,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,24,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,25,mport java.util.List;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,26,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,27,mport java.util.Map;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,28,mport java.util.Set;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,29,mport java.util.SortedMap;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,30,mport java.util.TreeMap;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,32,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,33,mport org.apache.commons.cli2.DisplaySetting;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,34,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,35,mport org.apache.commons.cli2.HelpLine;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,36,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,37,mport org.apache.commons.cli2.OptionException;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,38,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,39,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,42, An implementation of Group
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,44,ublic class GroupImpl
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,45,xtends OptionImpl implements Group {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,46,rivate final String name;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,47,rivate final String description;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,48,rivate final List options;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,49,rivate final int minimum;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,50,rivate final int maximum;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,51,rivate final List anonymous;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,52,rivate final SortedMap optionMap;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,53,rivate final Set prefixes;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,56, Creates a new GroupImpl using the specified parameters.
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,58, @param options the Options and Arguments that make up the Group
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,59," @param name the name of this Group, or null"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,60, @param description a description of this Group
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,61, @param minimum the minimum number of Options for a valid CommandLine
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,62, @param maximum the maximum number of Options for a valid CommandLine
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,64,"ublic GroupImpl(final List options,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,65,"inal String name,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,66,"inal String description,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,67,"inal int minimum,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,68,inal int maximum) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,69,"uper(0, false);"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,71,his.name = name;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,72,his.description = description;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,73,his.minimum = minimum;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,74,his.maximum = maximum;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,76,/ store a copy of the options to be used by the
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,77,/ help methods
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,78,his.options = Collections.unmodifiableList(options);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,80,/ anonymous Argument temporary storage
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,81,inal List newAnonymous = new ArrayList();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,83,/ map (key=trigger & value=Option) temporary storage
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,84,inal SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,86,/ prefixes temporary storage
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,87,inal Set newPrefixes = new HashSet();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,89,/ process the options
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,90,or (final Iterator i = options.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,91,inal Option option = (Option) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,93,f (option instanceof Argument) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,94,.remove();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,95,ewAnonymous.add(option);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,96, else {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,97,inal Set triggers = option.getTriggers();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,99,or (Iterator j = triggers.iterator(); j.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,100,"ewOptionMap.put(j.next(), option);"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,103,/ store the prefixes
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,104,ewPrefixes.addAll(option.getPrefixes());
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,108,his.anonymous = Collections.unmodifiableList(newAnonymous);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,109,his.optionMap = Collections.unmodifiableSortedMap(newOptionMap);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,110,his.prefixes = Collections.unmodifiableSet(newPrefixes);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,113,"ublic boolean canProcess(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,114,inal String arg) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,115,f (arg == null) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,116,eturn false;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,119,/ if arg does not require bursting
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,120,f (optionMap.containsKey(arg)) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,121,eturn true;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,124,/ filter
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,125,inal Map tailMap = optionMap.tailMap(arg);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,127,/ check if bursting is required
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,128,or (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,129,inal Option option = (Option) iter.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,131,"f (option.canProcess(commandLine, arg)) {"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,132,eturn true;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,136,f (commandLine.looksLikeOption(arg)) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,137,eturn false;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,140,/ anonymous argument(s) means we can process it
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,141,f (anonymous.size() > 0) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,142,eturn true;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,145,eturn false;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,148,ublic Set getPrefixes() {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,149,eturn prefixes;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,152,ublic Set getTriggers() {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,153,eturn optionMap.keySet();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,156,"ublic void process(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,157,inal ListIterator arguments)
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,158,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,159,tring previous = null;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,161,/ [START process each command line token
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,162,hile (arguments.hasNext()) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,163,/ grab the next argument
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,164,inal String arg = (String) arguments.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,166,/ if we have just tried to process this instance
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,167,f (arg == previous) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,168,/ rollback and abort
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,169,rguments.previous();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,171,reak;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,174,/ remember last processed instance
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,175,revious = arg;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,177,inal Option opt = (Option) optionMap.get(arg);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,179,/ option found
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,180,f (opt != null) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,181,rguments.previous();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,182,"pt.process(commandLine, arguments);"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,184,/ [START option NOT found
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,185,lse {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,186,/ it might be an anonymous argument continue search
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,187,/ [START argument may be anonymous
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,188,f (commandLine.looksLikeOption(arg)) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,189,/ narrow the search
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,190,inal Collection values = optionMap.tailMap(arg).values();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,192,oolean foundMemberOption = false;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,194,or (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,195,inal Option option = (Option) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,197,"f (option.canProcess(commandLine, arg)) {"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,198,oundMemberOption = true;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,199,rguments.previous();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,200,"ption.process(commandLine, arguments);"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,204,/ back track and abort this group if necessary
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,205,f (!foundMemberOption) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,206,rguments.previous();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,208,eturn;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,210, // [END argument may be anonymous
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,212,/ [START argument is NOT anonymous
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,213,lse {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,214,"/ move iterator back, current value not used"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,215,rguments.previous();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,217,/ if there are no anonymous arguments then this group can't
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,218,/ process the argument
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,219,f (anonymous.isEmpty()) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,220,reak;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,223,/ TODO: why do we iterate over all anonymous arguments?
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,224,/ canProcess will always return true?
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,225,or (final Iterator i = anonymous.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,226,inal Argument argument = (Argument) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,228,"f (argument.canProcess(commandLine, arguments)) {"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,229,"rgument.process(commandLine, arguments);"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,232, // [END argument is NOT anonymous
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,233, // [END option NOT found
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,234, // [END process each command line token
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,237,ublic void validate(final WriteableCommandLine commandLine)
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,238,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,239,/ number of options found
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,240,nt present = 0;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,242,/ reference to first unexpected option
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,243,ption unexpected = null;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,245,or (final Iterator i = options.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,246,inal Option option = (Option) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,248,/ if the child option is required then validate it
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,249,f (option.isRequired()) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,250,ption.validate(commandLine);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,253,f (option instanceof Group) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,254,ption.validate(commandLine);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,257,/ if the child option is present then validate it
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,258,f (commandLine.hasOption(option)) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,259,f (++present > maximum) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,260,nexpected = option;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,262,reak;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,265,ption.validate(commandLine);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,269,/ too many options
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,270,f (unexpected != null) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,271,"hrow new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,272,nexpected.getPreferredName());
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,275,/ too few option
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,276,f (present < minimum) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,277,"hrow new OptionException(this, ResourceConstants.MISSING_OPTION);"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,280,/ validate each anonymous argument
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,281,or (final Iterator i = anonymous.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,282,inal Option option = (Option) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,283,ption.validate(commandLine);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,287,ublic String getPreferredName() {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,288,eturn name;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,291,ublic String getDescription() {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,292,eturn description;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,295,"ublic void appendUsage(final StringBuffer buffer,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,296,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,297,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,298,"ppendUsage(buffer, helpSettings, comp, ""|"");"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,301,"ublic void appendUsage(final StringBuffer buffer,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,302,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,303,"inal Comparator comp,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,304,inal String separator) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,305,inal Set helpSettingsCopy = new HashSet(helpSettings);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,307,inal boolean optional =
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,308,minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,310,inal boolean expanded =
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,311,name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,313,inal boolean named =
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,314,expanded ||
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,315,(name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME));
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,317,inal boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,319,inal boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,321,elpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,323,inal boolean both = named && expanded;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,325,f (optional) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,326,uffer.append('[');
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,329,f (named) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,330,uffer.append(name);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,333,f (both) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,334,"uffer.append("" ("");"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,337,f (expanded) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,338,inal Set childSettings;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,340,f (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,341,hildSettings = DisplaySetting.NONE;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,342, else {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,343,hildSettings = new HashSet(helpSettingsCopy);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,344,hildSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,347,/ grab a list of the group's options.
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,348,inal List list;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,350,f (comp == null) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,351,/ default to using the initial order
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,352,ist = options;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,353, else {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,354,/ sort options if comparator is supplied
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,355,ist = new ArrayList(options);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,356,"ollections.sort(list, comp);"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,359,/ for each option.
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,360,or (final Iterator i = list.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,361,inal Option option = (Option) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,363,/ append usage information
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,364,"ption.appendUsage(buffer, childSettings, comp);"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,366,/ add separators as needed
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,367,f (i.hasNext()) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,368,uffer.append(separator);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,373,f (both) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,374,uffer.append(')');
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,377,f (optional && outer) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,378,uffer.append(']');
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,381,f (arguments) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,382,or (final Iterator i = anonymous.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,383,uffer.append(' ');
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,385,inal Option option = (Option) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,386,"ption.appendUsage(buffer, helpSettingsCopy, comp);"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,390,f (optional && !outer) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,391,uffer.append(']');
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,395,"ublic List helpLines(final int depth,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,396,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,397,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,398,inal List helpLines = new ArrayList();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,400,f (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,401,"inal HelpLine helpLine = new HelpLineImpl(this, depth);"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,402,elpLines.add(helpLine);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,405,f (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,406,/ grab a list of the group's options.
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,407,inal List list;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,409,f (comp == null) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,410,/ default to using the initial order
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,411,ist = options;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,412, else {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,413,/ sort options if comparator is supplied
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,414,ist = new ArrayList(options);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,415,"ollections.sort(list, comp);"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,418,/ for each option
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,419,or (final Iterator i = list.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,420,inal Option option = (Option) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,421,"elpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,425,f (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,426,or (final Iterator i = anonymous.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,427,inal Option option = (Option) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,428,"elpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,432,eturn helpLines;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,436, Gets the member Options of thie Group.
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,437, Note this does not include any Arguments
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,438, @return only the non Argument Options of the Group
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,440,ublic List getOptions() {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,441,eturn options;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,445, Gets the anonymous Arguments of this Group.
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,446, @return the Argument options of this Group
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,448,ublic List getAnonymous() {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,449,eturn anonymous;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,452,ublic Option findOption(final String trigger) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,453,inal Iterator i = getOptions().iterator();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,455,hile (i.hasNext()) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,456,inal Option option = (Option) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,457,inal Option found = option.findOption(trigger);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,459,f (found != null) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,460,eturn found;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,464,eturn null;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,467,ublic int getMinimum() {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,468,eturn minimum;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,471,ublic int getMaximum() {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,472,eturn maximum;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,475,ublic boolean isRequired() {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,476,eturn getMinimum() > 0;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,479,ublic void defaults(final WriteableCommandLine commandLine) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,480,uper.defaults(commandLine);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,482,or (final Iterator i = options.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,483,inal Option option = (Option) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,484,ption.defaults(commandLine);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,487,or (final Iterator i = anonymous.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,488,inal Option option = (Option) i.next();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,489,ption.defaults(commandLine);
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,495,lass ReverseStringComparator implements Comparator {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,496,rivate static final Comparator instance = new ReverseStringComparator();
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,498,rivate ReverseStringComparator() {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,499,/ just making sure nobody else creates one
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,503, Gets a singleton instance of a ReverseStringComparator
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,504, @return the singleton instance
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,506,ublic static final Comparator getInstance() {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,507,eturn instance;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,510,"ublic int compare(final Object o1,"
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,511,inal Object o2) {
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,512,inal String s1 = (String) o1;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,513,inal String s2 = (String) o2;
False,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,515,eturn -s1.compareTo(s2);
True,src/java/org/apache/commons/cli2/option/GroupImpl.java,src/java/org/apache/commons/cli2/option/GroupImpl.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Collection;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Map;import java.util.Set;import java.util.SortedMap;import java.util.TreeMap;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;/** * An implementation of Group */public class GroupImpl    extends OptionImpl implements Group {    private final String name;    private final String description;    private final List options;    private final int minimum;    private final int maximum;    private final List anonymous;    private final SortedMap optionMap;    private final Set prefixes;    /**     * Creates a new GroupImpl using the specified parameters.     *     * @param options the Options and Arguments that make up the Group     * @param name the name of this Group, or null     * @param description a description of this Group     * @param minimum the minimum number of Options for a valid CommandLine     * @param maximum the maximum number of Options for a valid CommandLine     */    public GroupImpl(final List options,                     final String name,                     final String description,                     final int minimum,                     final int maximum) {        super(0, false);        this.name = name;        this.description = description;        this.minimum = minimum;        this.maximum = maximum;        // store a copy of the options to be used by the        // help methods        this.options = Collections.unmodifiableList(options);        // anonymous Argument temporary storage        final List newAnonymous = new ArrayList();        // map (key=trigger & value=Option) temporary storage        final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());        // prefixes temporary storage        final Set newPrefixes = new HashSet();        // process the options        for (final Iterator i = options.iterator(); i.hasNext();) {            final Option option = (Option) i.next();            if (option instanceof Argument) {                i.remove();                newAnonymous.add(option);            } else {                final Set triggers = option.getTriggers();                for (Iterator j = triggers.iterator(); j.hasNext();) {                    newOptionMap.put(j.next(), option);                }                // store the prefixes                newPrefixes.addAll(option.getPrefixes());            }        }        this.anonymous = Collections.unmodifiableList(newAnonymous);        this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);        this.prefixes = Collections.unmodifiableSet(newPrefixes);    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final String arg) {        if (arg == null) {            return false;        }        // if arg does not require bursting        if (optionMap.containsKey(arg)) {            return true;        }        // filter        final Map tailMap = optionMap.tailMap(arg);        // check if bursting is required        for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) {            final Option option = (Option) iter.next();            if (option.canProcess(commandLine, arg)) {                return true;            }        }        if (commandLine.looksLikeOption(arg)) {            return false;        }        // anonymous argument(s) means we can process it        if (anonymous.size() > 0) {            return true;        }        return false;    }    public Set getPrefixes() {        return prefixes;    }    public Set getTriggers() {        return optionMap.keySet();    }    public void process(final WriteableCommandLine commandLine,                        final ListIterator arguments)        throws OptionException {        String previous = null;        // [START process each command line token        while (arguments.hasNext()) {            // grab the next argument            final String arg = (String) arguments.next();            // if we have just tried to process this instance            if (arg == previous) {                // rollback and abort                arguments.previous();                break;            }            // remember last processed instance            previous = arg;            final Option opt = (Option) optionMap.get(arg);            // option found            if (opt != null) {                arguments.previous();                opt.process(commandLine, arguments);            }            // [START option NOT found            else {                // it might be an anonymous argument continue search                // [START argument may be anonymous                if (commandLine.looksLikeOption(arg)) {                    // narrow the search                    final Collection values = optionMap.tailMap(arg).values();                    boolean foundMemberOption = false;                    for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) {                        final Option option = (Option) i.next();                        if (option.canProcess(commandLine, arg)) {                            foundMemberOption = true;                            arguments.previous();                            option.process(commandLine, arguments);                        }                    }                    // back track and abort this group if necessary                    if (!foundMemberOption) {                        arguments.previous();                        return;                    }                } // [END argument may be anonymous                // [START argument is NOT anonymous                else {                    // move iterator back, current value not used                    arguments.previous();                    // if there are no anonymous arguments then this group can't                    // process the argument                    if (anonymous.isEmpty()) {                        break;                    }                    // TODO: why do we iterate over all anonymous arguments?                    // canProcess will always return true?                    for (final Iterator i = anonymous.iterator(); i.hasNext();) {                        final Argument argument = (Argument) i.next();                        if (argument.canProcess(commandLine, arguments)) {                            argument.process(commandLine, arguments);                        }                    }                } // [END argument is NOT anonymous            } // [END option NOT found        } // [END process each command line token    }    public void validate(final WriteableCommandLine commandLine)        throws OptionException {        // number of options found        int present = 0;        // reference to first unexpected option        Option unexpected = null;        for (final Iterator i = options.iterator(); i.hasNext();) {            final Option option = (Option) i.next();            // if the child option is required then validate it            if (option.isRequired()) {                option.validate(commandLine);            }            if (option instanceof Group) {                option.validate(commandLine);            }            // if the child option is present then validate it            if (commandLine.hasOption(option)) {                if (++present > maximum) {                    unexpected = option;                    break;                }                option.validate(commandLine);            }        }        // too many options        if (unexpected != null) {            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,                                      unexpected.getPreferredName());        }        // too few option        if (present < minimum) {            throw new OptionException(this, ResourceConstants.MISSING_OPTION);        }        // validate each anonymous argument        for (final Iterator i = anonymous.iterator(); i.hasNext();) {            final Option option = (Option) i.next();            option.validate(commandLine);        }    }    public String getPreferredName() {        return name;    }    public String getDescription() {        return description;    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        appendUsage(buffer, helpSettings, comp, ""|"");    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp,                            final String separator) {        final Set helpSettingsCopy = new HashSet(helpSettings);        final boolean optional =            (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL);        final boolean expanded =            (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED);        final boolean named =            !expanded ||            ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME));        final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);        final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);        helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);        final boolean both = named && expanded;        if (optional) {            buffer.append('[');        }        if (named) {            buffer.append(name);        }        if (both) {            buffer.append("" ("");        }        if (expanded) {            final Set childSettings;            if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) {                childSettings = DisplaySetting.NONE;            } else {                childSettings = new HashSet(helpSettingsCopy);                childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);            }            // grab a list of the group's options.            final List list;            if (comp == null) {                // default to using the initial order                list = options;            } else {                // sort options if comparator is supplied                list = new ArrayList(options);                Collections.sort(list, comp);            }            // for each option.            for (final Iterator i = list.iterator(); i.hasNext();) {                final Option option = (Option) i.next();                // append usage information                option.appendUsage(buffer, childSettings, comp);                // add separators as needed                if (i.hasNext()) {                    buffer.append(separator);                }            }        }        if (both) {            buffer.append(')');        }        if (optional && outer) {            buffer.append(']');        }        if (arguments) {            for (final Iterator i = anonymous.iterator(); i.hasNext();) {                buffer.append(' ');                final Option option = (Option) i.next();                option.appendUsage(buffer, helpSettingsCopy, comp);            }        }        if (optional && !outer) {            buffer.append(']');        }    }    public List helpLines(final int depth,                          final Set helpSettings,                          final Comparator comp) {        final List helpLines = new ArrayList();        if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) {            final HelpLine helpLine = new HelpLineImpl(this, depth);            helpLines.add(helpLine);        }        if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) {            // grab a list of the group's options.            final List list;            if (comp == null) {                // default to using the initial order                list = options;            } else {                // sort options if comparator is supplied                list = new ArrayList(options);                Collections.sort(list, comp);            }            // for each option            for (final Iterator i = list.iterator(); i.hasNext();) {                final Option option = (Option) i.next();                helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));            }        }        if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) {            for (final Iterator i = anonymous.iterator(); i.hasNext();) {                final Option option = (Option) i.next();                helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));            }        }        return helpLines;    }    /**     * Gets the member Options of thie Group.     * Note this does not include any Arguments     * @return only the non Argument Options of the Group     */    public List getOptions() {        return options;    }    /**     * Gets the anonymous Arguments of this Group.     * @return the Argument options of this Group     */    public List getAnonymous() {        return anonymous;    }    public Option findOption(final String trigger) {        final Iterator i = getOptions().iterator();        while (i.hasNext()) {            final Option option = (Option) i.next();            final Option found = option.findOption(trigger);            if (found != null) {                return found;            }        }        return null;    }    public int getMinimum() {        return minimum;    }    public int getMaximum() {        return maximum;    }    public boolean isRequired() {        return getMinimum() > 0;    }    public void defaults(final WriteableCommandLine commandLine) {        super.defaults(commandLine);        for (final Iterator i = options.iterator(); i.hasNext();) {            final Option option = (Option) i.next();            option.defaults(commandLine);        }        for (final Iterator i = anonymous.iterator(); i.hasNext();) {            final Option option = (Option) i.next();            option.defaults(commandLine);        }    }}class ReverseStringComparator implements Comparator {    private static final Comparator instance = new ReverseStringComparator();    private ReverseStringComparator() {        // just making sure nobody else creates one    }    /**     * Gets a singleton instance of a ReverseStringComparator     * @return the singleton instance     */    public static final Comparator getInstance() {        return instance;    }    public int compare(final Object o1,                       final Object o2) {        final String s1 = (String) o1;        final String s2 = (String) o2;        return -s1.compareTo(s2);    }}"
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,17,ackage org.apache.commons.cli2.option;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,19,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,20,mport java.util.Set;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,22,mport org.apache.commons.cli2.HelpLine;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,23,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,26, Represents a line in the help screen.
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,28,ublic class HelpLineImpl implements HelpLine {
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,30,** The option that this HelpLineImpl describes */
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,31,rivate final Option option;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,33,** The level of indenting for this item */
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,34,rivate final int indent;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,36,** The help settings used to obtain the previous usage */
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,37,rivate transient Set cachedHelpSettings;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,39,** The comparator used to obtain the previous usage */
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,40,rivate transient Comparator cachedComparator;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,42,** The previously obtained usage */
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,43,rivate transient String cachedUsage;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,46, Creates a new HelpLineImpl to represent a particular Option in the online
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,47, help.
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,49, @param option
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,50,            Option that the HelpLineImpl describes
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,51, @param indent
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,52,            Level of indentation for this line
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,54,"ublic HelpLineImpl(final Option option, final int indent) {"
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,55,his.option = option;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,56,his.indent = indent;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,60, @return The description of the option
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,62,ublic String getDescription() {
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,63,eturn option.getDescription();
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,67, @return The level of indentation for this line
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,69,ublic int getIndent() {
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,70,eturn indent;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,74, @return The Option that the help line relates to
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,76,ublic Option getOption() {
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,77,eturn option;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,81, Builds a usage string for the option using the specified settings and
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,82, comparator.
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,85, @param helpSettings the settings to apply
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,86, @param comparator a comparator to sort options when applicable
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,87, @return the usage string
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,89,"ublic String usage(final Set helpSettings, final Comparator comparator) {"
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,90,f (cachedUsage == null
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,91,| cachedHelpSettings != helpSettings
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,92,| cachedComparator != comparator) {
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,94,/ cache the arguments to avoid redoing work
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,95,achedHelpSettings = helpSettings;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,96,achedComparator = comparator;
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,98,/ build the new buffer
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,99,inal StringBuffer buffer = new StringBuffer();
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,100,or (int i = 0; i < indent; ++i) {
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,101,"uffer.append(""  "");"
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,103,"ption.appendUsage(buffer, helpSettings, comparator);"
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,105,/ cache the usage string
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,106,achedUsage = buffer.toString();
False,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,108,eturn cachedUsage;
True,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,src/java/org/apache/commons/cli2/option/HelpLineImpl.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.Comparator;import java.util.Set;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;/** * Represents a line in the help screen. */public class HelpLineImpl implements HelpLine {    /** The option that this HelpLineImpl describes */    private final Option option;    /** The level of indenting for this item */    private final int indent;    /** The help settings used to obtain the previous usage */    private transient Set cachedHelpSettings;    /** The comparator used to obtain the previous usage */    private transient Comparator cachedComparator;    /** The previously obtained usage */    private transient String cachedUsage;    /**     * Creates a new HelpLineImpl to represent a particular Option in the online     * help.     *     * @param option     *            Option that the HelpLineImpl describes     * @param indent     *            Level of indentation for this line     */    public HelpLineImpl(final Option option, final int indent) {        this.option = option;        this.indent = indent;    }    /**     * @return The description of the option     */    public String getDescription() {        return option.getDescription();    }    /**     * @return The level of indentation for this line     */    public int getIndent() {        return indent;    }    /**     * @return The Option that the help line relates to     */    public Option getOption() {        return option;    }    /**     * Builds a usage string for the option using the specified settings and     * comparator.     *     *     * @param helpSettings the settings to apply     * @param comparator a comparator to sort options when applicable     * @return the usage string     */    public String usage(final Set helpSettings, final Comparator comparator) {        if (cachedUsage == null            || cachedHelpSettings != helpSettings            || cachedComparator != comparator) {            // cache the arguments to avoid redoing work            cachedHelpSettings = helpSettings;            cachedComparator = comparator;            // build the new buffer            final StringBuffer buffer = new StringBuffer();            for (int i = 0; i < indent; ++i) {                buffer.append(""  "");            }            option.appendUsage(buffer, helpSettings, comparator);            // cache the usage string            cachedUsage = buffer.toString();        }        return cachedUsage;    }}"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,17,ackage org.apache.commons.cli2.option;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,19,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,20,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,21,mport java.util.Set;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,23,mport org.apache.commons.cli2.DisplaySetting;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,24,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,25,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,26,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,27,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,30, A base implementation of Option providing limited ground work for further
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,31, Option implementations.
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,33,ublic abstract class OptionImpl implements Option {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,34,rivate final int id;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,35,rivate final boolean required;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,38, Creates an OptionImpl with the specified id
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,39, @param id the unique id of this Option
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,40, @param required true iff this Option must be present
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,42,"ublic OptionImpl(final int id,"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,43,inal boolean required) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,44,his.id = id;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,45,his.required = required;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,48,"ublic boolean canProcess(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,49,inal ListIterator arguments) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,50,f (arguments.hasNext()) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,51,inal String argument = (String) arguments.next();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,52,rguments.previous();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,54,"eturn canProcess(commandLine, argument);"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,55, else {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,56,eturn false;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,60,ublic String toString() {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,61,inal StringBuffer buffer = new StringBuffer();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,62,"ppendUsage(buffer, DisplaySetting.ALL, null);"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,64,eturn buffer.toString();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,67,ublic int getId() {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,68,eturn id;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,71,ublic boolean equals(final Object thatObj) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,72,f (thatObj instanceof OptionImpl) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,73,inal OptionImpl that = (OptionImpl) thatObj;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,75,eturn (getId() == that.getId()) &&
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,76,"quals(getPreferredName(), that.getPreferredName()) &&"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,77,"quals(getDescription(), that.getDescription()) &&"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,78,"quals(getPrefixes(), that.getPrefixes()) &&"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,79,"quals(getTriggers(), that.getTriggers());"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,80, else {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,81,eturn false;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,85,"rivate boolean equals(Object left,"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,86,bject right) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,87,f ((left == null) && (right == null)) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,88,eturn true;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,89, else if ((left == null) || (right == null)) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,90,eturn false;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,91, else {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,92,eturn left.equals(right);
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,96,ublic int hashCode() {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,97,nt hashCode = getId();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,98,ashCode = (hashCode * 37) + getPreferredName().hashCode();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,100,f (getDescription() != null) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,101,ashCode = (hashCode * 37) + getDescription().hashCode();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,104,ashCode = (hashCode * 37) + getPrefixes().hashCode();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,105,ashCode = (hashCode * 37) + getTriggers().hashCode();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,107,eturn hashCode;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,110,ublic Option findOption(String trigger) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,111,f (getTriggers().contains(trigger)) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,112,eturn this;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,113, else {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,114,eturn null;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,118,ublic boolean isRequired() {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,119,eturn required;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,122,ublic void defaults(final WriteableCommandLine commandLine) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,123,/ nothing to do normally
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,126,rotected void checkPrefixes(final Set prefixes) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,127,/ nothing to do if empty prefix list
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,128,f (prefixes.isEmpty()) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,129,eturn;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,132,/ check preferred name
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,133,"heckPrefix(prefixes, getPreferredName());"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,135,/ check triggers
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,136,his.getTriggers();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,138,or (final Iterator i = getTriggers().iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,139,"heckPrefix(prefixes, (String) i.next());"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,143,"rivate void checkPrefix(final Set prefixes,"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,144,inal String trigger) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,145,or (final Iterator i = prefixes.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,146,tring prefix = (String) i.next();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,148,f (trigger.startsWith(prefix)) {
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,149,eturn;
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,153,inal ResourceHelper helper = ResourceHelper.getResourceHelper();
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,154,inal String message =
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,155,"elper.getMessage(ResourceConstants.OPTION_TRIGGER_NEEDS_PREFIX, trigger,"
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,156,refixes.toString());
False,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,157,hrow new IllegalArgumentException(message);
True,src/java/org/apache/commons/cli2/option/OptionImpl.java,src/java/org/apache/commons/cli2/option/OptionImpl.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.Iterator;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * A base implementation of Option providing limited ground work for further * Option implementations. */public abstract class OptionImpl implements Option {    private final int id;    private final boolean required;    /**     * Creates an OptionImpl with the specified id     * @param id the unique id of this Option     * @param required true iff this Option must be present     */    public OptionImpl(final int id,                      final boolean required) {        this.id = id;        this.required = required;    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final ListIterator arguments) {        if (arguments.hasNext()) {            final String argument = (String) arguments.next();            arguments.previous();            return canProcess(commandLine, argument);        } else {            return false;        }    }    public String toString() {        final StringBuffer buffer = new StringBuffer();        appendUsage(buffer, DisplaySetting.ALL, null);        return buffer.toString();    }    public int getId() {        return id;    }    public boolean equals(final Object thatObj) {        if (thatObj instanceof OptionImpl) {            final OptionImpl that = (OptionImpl) thatObj;            return (getId() == that.getId()) &&                   equals(getPreferredName(), that.getPreferredName()) &&                   equals(getDescription(), that.getDescription()) &&                   equals(getPrefixes(), that.getPrefixes()) &&                   equals(getTriggers(), that.getTriggers());        } else {            return false;        }    }    private boolean equals(Object left,                           Object right) {        if ((left == null) && (right == null)) {            return true;        } else if ((left == null) || (right == null)) {            return false;        } else {            return left.equals(right);        }    }    public int hashCode() {        int hashCode = getId();        hashCode = (hashCode * 37) + getPreferredName().hashCode();        if (getDescription() != null) {            hashCode = (hashCode * 37) + getDescription().hashCode();        }        hashCode = (hashCode * 37) + getPrefixes().hashCode();        hashCode = (hashCode * 37) + getTriggers().hashCode();        return hashCode;    }    public Option findOption(String trigger) {        if (getTriggers().contains(trigger)) {            return this;        } else {            return null;        }    }    public boolean isRequired() {        return required;    }    public void defaults(final WriteableCommandLine commandLine) {        // nothing to do normally    }    protected void checkPrefixes(final Set prefixes) {        // nothing to do if empty prefix list        if (prefixes.isEmpty()) {            return;        }        // check preferred name        checkPrefix(prefixes, getPreferredName());        // check triggers        this.getTriggers();        for (final Iterator i = getTriggers().iterator(); i.hasNext();) {            checkPrefix(prefixes, (String) i.next());        }    }    private void checkPrefix(final Set prefixes,                             final String trigger) {        for (final Iterator i = prefixes.iterator(); i.hasNext();) {            String prefix = (String) i.next();            if (trigger.startsWith(prefix)) {                return;            }        }        final ResourceHelper helper = ResourceHelper.getResourceHelper();        final String message =            helper.getMessage(ResourceConstants.OPTION_TRIGGER_NEEDS_PREFIX, trigger,                              prefixes.toString());        throw new IllegalArgumentException(message);    }}"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,17,ackage org.apache.commons.cli2.option;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,20,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,21,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,22,mport java.util.List;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,23,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,24,mport java.util.Set;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,26,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,27,mport org.apache.commons.cli2.DisplaySetting;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,28,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,29,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,30,mport org.apache.commons.cli2.OptionException;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,31,mport org.apache.commons.cli2.Parent;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,32,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,35, A base implementation of Parent providing limited ground work for further
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,36, Parent implementations.
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,38,ublic abstract class ParentImpl
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,39,xtends OptionImpl implements Parent {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,40,rivate static final char NUL = '\0';
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,41,rivate final Group children;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,42,rivate final Argument argument;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,43,rivate final String description;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,45,"rotected ParentImpl(final Argument argument,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,46,"inal Group children,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,47,"inal String description,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,48,"inal int id,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,49,inal boolean required) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,50,"uper(id, required);"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,51,his.children = children;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,52,his.argument = argument;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,53,his.description = description;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,57, (non-Javadoc)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,59," @see org.apache.commons.cli2.Option#process(org.apache.commons.cli2.CommandLine,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,60,      java.util.ListIterator)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,62,"ublic void process(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,63,inal ListIterator arguments)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,64,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,65,f (argument != null) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,66,"andleInitialSeparator(arguments, argument.getInitialSeparator());"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,69,"rocessParent(commandLine, arguments);"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,71,f (argument != null) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,72,"rgument.processValues(commandLine, arguments, this);"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,75,"f ((children != null) && children.canProcess(commandLine, arguments)) {"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,76,"hildren.process(commandLine, arguments);"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,81, (non-Javadoc)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,83, @see org.apache.commons.cli2.Option#canProcess(java.lang.String)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,85,"ublic boolean canProcess(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,86,inal String arg) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,87,inal Set triggers = getTriggers();
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,89,f (argument != null) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,90,inal char separator = argument.getInitialSeparator();
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,92,/ if there is a valid separator character
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,93,f (separator != NUL) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,94,inal int initialIndex = arg.indexOf(separator);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,96,/ if there is a separator present
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,97,f (initialIndex > 0) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,98,"eturn triggers.contains(arg.substring(0, initialIndex));"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,103,eturn triggers.contains(arg);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,107, (non-Javadoc)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,109, @see org.apache.commons.cli2.Option#prefixes()
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,111,ublic Set getPrefixes() {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,112,eturn (children == null) ? Collections.EMPTY_SET : children.getPrefixes();
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,116, (non-Javadoc)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,118, @see org.apache.commons.cli2.Option#validate(org.apache.commons.cli2.CommandLine)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,120,ublic void validate(WriteableCommandLine commandLine)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,121,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,122,f (commandLine.hasOption(this)) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,123,f (argument != null) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,124,"rgument.validate(commandLine, this);"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,127,f (children != null) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,128,hildren.validate(commandLine);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,134, (non-Javadoc)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,136," @see org.apache.commons.cli2.Option#appendUsage(java.lang.StringBuffer,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,137,"      java.util.Set, java.util.Comparator)"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,139,"ublic void appendUsage(final StringBuffer buffer,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,140,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,141,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,142,inal boolean displayArgument =
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,143,this.argument != null) &&
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,144,elpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,145,inal boolean displayChildren =
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,146,this.children != null) &&
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,147,elpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,149,f (displayArgument) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,150,uffer.append(' ');
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,151,"rgument.appendUsage(buffer, helpSettings, comp);"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,154,f (displayChildren) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,155,uffer.append(' ');
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,156,"hildren.appendUsage(buffer, helpSettings, comp);"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,161, @return a description of this parent option
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,163,ublic String getDescription() {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,164,eturn description;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,168, (non-Javadoc)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,170," @see org.apache.commons.cli2.Option#helpLines(int, java.util.Set,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,171,      java.util.Comparator)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,173,"ublic List helpLines(final int depth,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,174,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,175,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,176,inal List helpLines = new ArrayList();
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,177,"elpLines.add(new HelpLineImpl(this, depth));"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,179,f (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT) && (argument != null)) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,180,"elpLines.addAll(argument.helpLines(depth + 1, helpSettings, comp));"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,183,f (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN) && (children != null)) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,184,"elpLines.addAll(children.helpLines(depth + 1, helpSettings, comp));"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,187,eturn helpLines;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,191, @return Returns the argument.
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,193,ublic Argument getArgument() {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,194,eturn argument;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,198, @return Returns the children.
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,200,ublic Group getChildren() {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,201,eturn children;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,205, Split the token using the specified separator character.
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,206, @param arguments the current position in the arguments iterator
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,207, @param separator the separator char to split on
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,209,"rivate void handleInitialSeparator(final ListIterator arguments,"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,210,inal char separator) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,211,/ next token
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,212,inal String newArgument = (String) arguments.next();
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,214,/ split the token
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,215,inal int initialIndex = newArgument.indexOf(separator);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,217,f (initialIndex > 0) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,218,rguments.remove();
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,219,"rguments.add(newArgument.substring(0, initialIndex));"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,220,tring value = newArgument.substring(initialIndex + 1);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,221,"/ The value obviously isn't an option, so we need to quote it if looks like an option."
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,222,/ The quotes will be removed later
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,223,"f (value.startsWith(""-"")) {"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,224,"alue = '""' + value + '""';"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,226,rguments.add(value);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,227,rguments.previous();
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,230,rguments.previous();
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,234, @see org.apache.commons.cli2.Option#findOption(java.lang.String)
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,236,ublic Option findOption(final String trigger) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,237,inal Option found = super.findOption(trigger);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,239,f ((found == null) && (children != null)) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,240,eturn children.findOption(trigger);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,241, else {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,242,eturn found;
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,246,ublic void defaults(final WriteableCommandLine commandLine) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,247,uper.defaults(commandLine);
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,249,f (argument != null) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,250,"rgument.defaultValues(commandLine, this);"
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,253,f (children != null) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,254,hildren.defaults(commandLine);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.Parent;import org.apache.commons.cli2.WriteableCommandLine;/** * A base implementation of Parent providing limited ground work for further * Parent implementations. */public abstract class ParentImpl    extends OptionImpl implements Parent {    private static final char NUL = '\0';    private final Group children;    private final Argument argument;    private final String description;    protected ParentImpl(final Argument argument,                         final Group children,                         final String description,                         final int id,                         final boolean required) {        super(id, required);        this.children = children;        this.argument = argument;        this.description = description;    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#process(org.apache.commons.cli2.CommandLine,     *      java.util.ListIterator)     */    public void process(final WriteableCommandLine commandLine,                        final ListIterator arguments)        throws OptionException {        if (argument != null) {            handleInitialSeparator(arguments, argument.getInitialSeparator());        }        processParent(commandLine, arguments);        if (argument != null) {            argument.processValues(commandLine, arguments, this);        }        if ((children != null) && children.canProcess(commandLine, arguments)) {            children.process(commandLine, arguments);        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#canProcess(java.lang.String)     */    public boolean canProcess(final WriteableCommandLine commandLine,                              final String arg) {        final Set triggers = getTriggers();        if (argument != null) {            final char separator = argument.getInitialSeparator();            // if there is a valid separator character            if (separator != NUL) {                final int initialIndex = arg.indexOf(separator);                // if there is a separator present                if (initialIndex > 0) {                    return triggers.contains(arg.substring(0, initialIndex));                }            }        }        return triggers.contains(arg);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#prefixes()     */    public Set getPrefixes() {        return (children == null) ? Collections.EMPTY_SET : children.getPrefixes();    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#validate(org.apache.commons.cli2.CommandLine)     */    public void validate(WriteableCommandLine commandLine)        throws OptionException {        if (commandLine.hasOption(this)) {            if (argument != null) {                argument.validate(commandLine, this);            }            if (children != null) {                children.validate(commandLine);            }        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#appendUsage(java.lang.StringBuffer,     *      java.util.Set, java.util.Comparator)     */    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        final boolean displayArgument =            (this.argument != null) &&            helpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        final boolean displayChildren =            (this.children != null) &&            helpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN);        if (displayArgument) {            buffer.append(' ');            argument.appendUsage(buffer, helpSettings, comp);        }        if (displayChildren) {            buffer.append(' ');            children.appendUsage(buffer, helpSettings, comp);        }    }    /**     * @return a description of this parent option     */    public String getDescription() {        return description;    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.Option#helpLines(int, java.util.Set,     *      java.util.Comparator)     */    public List helpLines(final int depth,                          final Set helpSettings,                          final Comparator comp) {        final List helpLines = new ArrayList();        helpLines.add(new HelpLineImpl(this, depth));        if (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_ARGUMENT) && (argument != null)) {            helpLines.addAll(argument.helpLines(depth + 1, helpSettings, comp));        }        if (helpSettings.contains(DisplaySetting.DISPLAY_PARENT_CHILDREN) && (children != null)) {            helpLines.addAll(children.helpLines(depth + 1, helpSettings, comp));        }        return helpLines;    }    /**     * @return Returns the argument.     */    public Argument getArgument() {        return argument;    }    /**     * @return Returns the children.     */    public Group getChildren() {        return children;    }    /**     * Split the token using the specified separator character.     * @param arguments the current position in the arguments iterator     * @param separator the separator char to split on     */    private void handleInitialSeparator(final ListIterator arguments,                                        final char separator) {        // next token        final String newArgument = (String) arguments.next();        // split the token        final int initialIndex = newArgument.indexOf(separator);        if (initialIndex > 0) {            arguments.remove();            arguments.add(newArgument.substring(0, initialIndex));            String value = newArgument.substring(initialIndex + 1);            // The value obviously isn't an option, so we need to quote it if looks like an option.            // The quotes will be removed later            if (value.startsWith(""-"")) {                value = '""' + value + '""';            }            arguments.add(value);            arguments.previous();        }        arguments.previous();    }    /*     * @see org.apache.commons.cli2.Option#findOption(java.lang.String)     */    public Option findOption(final String trigger) {        final Option found = super.findOption(trigger);        if ((found == null) && (children != null)) {            return children.findOption(trigger);        } else {            return found;        }    }    public void defaults(final WriteableCommandLine commandLine) {        super.defaults(commandLine);        if (argument != null) {            argument.defaultValues(commandLine, this);        }        if (children != null) {            children.defaults(commandLine);        }    }}"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,17,ackage org.apache.commons.cli2.option;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,19,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,20,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,21,mport java.util.List;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,22,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,23,mport java.util.Set;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,25,mport org.apache.commons.cli2.DisplaySetting;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,26,mport org.apache.commons.cli2.HelpLine;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,27,mport org.apache.commons.cli2.OptionException;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,28,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,29,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,32," Handles the java style ""-Dprop=value"" opions"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,34,ublic class PropertyOption
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,35,xtends OptionImpl {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,36,"ublic static final String DEFAULT_OPTION_STRING = ""-D"";"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,37,ublic static final String DEFAULT_DESCRIPTION =
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,38,"Passes properties and values to the application"";"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,41, A default PropertyOption instance
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,43,ublic static final PropertyOption INSTANCE = new PropertyOption();
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,44,rivate final String optionString;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,45,rivate final String description;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,46,rivate final Set prefixes;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,49," Creates a new PropertyOption using the default settings of a ""-D"" trigger"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,50, and an id of 'D'
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,52,ublic PropertyOption() {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,53,"his(DEFAULT_OPTION_STRING, DEFAULT_DESCRIPTION, 'D');"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,57, Creates a new PropertyOption using the specified parameters
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,58, @param optionString the trigger for the Option
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,59, @param description the description of the Option
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,60, @param id the id of the Option
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,62,"ublic PropertyOption(final String optionString,"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,63,"inal String description,"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,64,inal int id) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,65,"uper(id, false);"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,66,his.optionString = optionString;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,67,his.description = description;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,68,his.prefixes = Collections.singleton(optionString);
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,71,"ublic boolean canProcess(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,72,inal String argument) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,73,eturn (argument != null) && argument.startsWith(optionString) &&
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,74,argument.length() > optionString.length());
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,77,ublic Set getPrefixes() {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,78,eturn prefixes;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,81,"ublic void process(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,82,inal ListIterator arguments)
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,83,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,84,inal String arg = (String) arguments.next();
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,86,"f (!canProcess(commandLine, arg)) {"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,87,"hrow new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,90,inal int propertyStart = optionString.length();
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,91,"inal int equalsIndex = arg.indexOf('=', propertyStart);"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,92,inal String property;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,93,inal String value;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,95,f (equalsIndex < 0) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,96,roperty = arg.substring(propertyStart);
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,97,"alue = ""true"";"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,98, else {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,99,"roperty = arg.substring(propertyStart, equalsIndex);"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,100,alue = arg.substring(equalsIndex + 1);
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,103,"ommandLine.addProperty(property, value);"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,106,ublic Set getTriggers() {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,107,eturn Collections.singleton(optionString);
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,110,ublic void validate(WriteableCommandLine commandLine) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,111,/ PropertyOption needs no validation
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,114,"ublic void appendUsage(final StringBuffer buffer,"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,115,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,116,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,117,inal boolean display = helpSettings.contains(DisplaySetting.DISPLAY_PROPERTY_OPTION);
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,119,inal boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,121,f (display) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,122,uffer.append(optionString);
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,124,f (bracketed) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,125,uffer.append('<');
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,128,"uffer.append(""property"");"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,130,f (bracketed) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,131,uffer.append('>');
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,134,"uffer.append(""="");"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,136,f (bracketed) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,137,uffer.append('<');
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,140,"uffer.append(""value"");"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,142,f (bracketed) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,143,uffer.append('>');
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,148,ublic String getPreferredName() {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,149,eturn optionString;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,152,ublic String getDescription() {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,153,eturn description;
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,156,"ublic List helpLines(final int depth,"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,157,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,158,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,159,f (helpSettings.contains(DisplaySetting.DISPLAY_PROPERTY_OPTION)) {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,160,"inal HelpLine helpLine = new HelpLineImpl(this, depth);"
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,162,eturn Collections.singletonList(helpLine);
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,163, else {
False,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,164,eturn Collections.EMPTY_LIST;
True,src/java/org/apache/commons/cli2/option/PropertyOption.java,src/java/org/apache/commons/cli2/option/PropertyOption.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.Collections;import java.util.Comparator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;/** * Handles the java style ""-Dprop=value"" opions */public class PropertyOption    extends OptionImpl {    public static final String DEFAULT_OPTION_STRING = ""-D"";    public static final String DEFAULT_DESCRIPTION =        ""Passes properties and values to the application"";    /**     * A default PropertyOption instance     */    public static final PropertyOption INSTANCE = new PropertyOption();    private final String optionString;    private final String description;    private final Set prefixes;    /**     * Creates a new PropertyOption using the default settings of a ""-D"" trigger     * and an id of 'D'     */    public PropertyOption() {        this(DEFAULT_OPTION_STRING, DEFAULT_DESCRIPTION, 'D');    }    /**     * Creates a new PropertyOption using the specified parameters     * @param optionString the trigger for the Option     * @param description the description of the Option     * @param id the id of the Option     */    public PropertyOption(final String optionString,                          final String description,                          final int id) {        super(id, false);        this.optionString = optionString;        this.description = description;        this.prefixes = Collections.singleton(optionString);    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final String argument) {        return (argument != null) && argument.startsWith(optionString) &&               (argument.length() > optionString.length());    }    public Set getPrefixes() {        return prefixes;    }    public void process(final WriteableCommandLine commandLine,                        final ListIterator arguments)        throws OptionException {        final String arg = (String) arguments.next();        if (!canProcess(commandLine, arg)) {            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);        }        final int propertyStart = optionString.length();        final int equalsIndex = arg.indexOf('=', propertyStart);        final String property;        final String value;        if (equalsIndex < 0) {            property = arg.substring(propertyStart);            value = ""true"";        } else {            property = arg.substring(propertyStart, equalsIndex);            value = arg.substring(equalsIndex + 1);        }        commandLine.addProperty(property, value);    }    public Set getTriggers() {        return Collections.singleton(optionString);    }    public void validate(WriteableCommandLine commandLine) {        // PropertyOption needs no validation    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        final boolean display = helpSettings.contains(DisplaySetting.DISPLAY_PROPERTY_OPTION);        final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);        if (display) {            buffer.append(optionString);            if (bracketed) {                buffer.append('<');            }            buffer.append(""property"");            if (bracketed) {                buffer.append('>');            }            buffer.append(""="");            if (bracketed) {                buffer.append('<');            }            buffer.append(""value"");            if (bracketed) {                buffer.append('>');            }        }    }    public String getPreferredName() {        return optionString;    }    public String getDescription() {        return description;    }    public List helpLines(final int depth,                          final Set helpSettings,                          final Comparator comp) {        if (helpSettings.contains(DisplaySetting.DISPLAY_PROPERTY_OPTION)) {            final HelpLine helpLine = new HelpLineImpl(this, depth);            return Collections.singletonList(helpLine);        } else {            return Collections.EMPTY_LIST;        }    }}"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,17,ackage org.apache.commons.cli2.option;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,20,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,21,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,22,mport java.util.List;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,23,mport java.util.Set;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,25,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,26,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,27,mport org.apache.commons.cli2.OptionException;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,28,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,29,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,30,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,33, An Argument implementation that allows a variable size Argument to precede a
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,34, fixed size argument.  The canonical example of it's use is in the unix
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,35, <code>cp</code> command where a number of source can be specified with
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,36, exactly one destination specfied at the end.
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,38,ublic class SourceDestArgument
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,39,xtends ArgumentImpl {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,40,rivate final Argument source;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,41,rivate final Argument dest;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,44, Creates a SourceDestArgument using defaults where possible.
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,46, @param source the variable size Argument
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,47, @param dest the fixed size Argument
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,49,"ublic SourceDestArgument(final Argument source,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,50,inal Argument dest) {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,51,"his(source, dest, DEFAULT_INITIAL_SEPARATOR, DEFAULT_SUBSEQUENT_SEPARATOR,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,52,"EFAULT_CONSUME_REMAINING, null);"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,56, Creates a SourceDestArgument using the specified parameters.
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,58, @param source the variable size Argument
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,59, @param dest the fixed size Argument
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,60, @param initialSeparator the inistial separator to use
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,61, @param subsequentSeparator the subsequent separator to use
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,62, @param consumeRemaining the token triggering consume remaining behaviour
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,63, @param defaultValues the default values for the SourceDestArgument
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,65,"ublic SourceDestArgument(final Argument source,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,66,"inal Argument dest,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,67,"inal char initialSeparator,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,68,"inal char subsequentSeparator,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,69,"inal String consumeRemaining,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,70,inal List defaultValues) {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,71,"uper(""SourceDestArgument"", null, sum(source.getMinimum(), dest.getMinimum()),"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,72,"um(source.getMaximum(), dest.getMaximum()), initialSeparator, subsequentSeparator,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,73,"ull, consumeRemaining, defaultValues, 0);"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,75,his.source = source;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,76,his.dest = dest;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,78,f (dest.getMinimum() != dest.getMaximum()) {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,79,hrow new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SOURCE_DEST_MUST_ENFORCE_VALUES));
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,83,"rivate static int sum(final int a,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,84,inal int b) {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,85,"eturn Math.max(a, Math.max(b, a + b));"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,88,"ublic void appendUsage(final StringBuffer buffer,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,89,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,90,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,91,inal int length = buffer.length();
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,93,"ource.appendUsage(buffer, helpSettings, comp);"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,95,f (buffer.length() != length) {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,96,uffer.append(' ');
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,99,"est.appendUsage(buffer, helpSettings, comp);"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,102,"ublic List helpLines(int depth,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,103,"et helpSettings,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,104,omparator comp) {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,105,inal List helpLines = new ArrayList();
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,106,"elpLines.addAll(source.helpLines(depth, helpSettings, comp));"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,107,"elpLines.addAll(dest.helpLines(depth, helpSettings, comp));"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,109,eturn helpLines;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,112,"ublic void validate(WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,113,ption option)
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,114,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,115,inal List values = commandLine.getValues(option);
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,117,inal int limit = values.size() - dest.getMinimum();
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,118,nt count = 0;
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,120,inal Iterator i = values.iterator();
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,122,hile (count++ < limit) {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,123,"ommandLine.addValue(source, i.next());"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,126,hile (i.hasNext()) {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,127,"ommandLine.addValue(dest, i.next());"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,130,"ource.validate(commandLine, source);"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,131,"est.validate(commandLine, dest);"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,134,"ublic boolean canProcess(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,135,inal String arg) {
False,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,136,"eturn source.canProcess(commandLine, arg) || dest.canProcess(commandLine, arg);"
True,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,src/java/org/apache/commons/cli2/option/SourceDestArgument.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Comparator;import java.util.Iterator;import java.util.List;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * An Argument implementation that allows a variable size Argument to precede a * fixed size argument.  The canonical example of it's use is in the unix * <code>cp</code> command where a number of source can be specified with * exactly one destination specfied at the end. */public class SourceDestArgument    extends ArgumentImpl {    private final Argument source;    private final Argument dest;    /**     * Creates a SourceDestArgument using defaults where possible.     *     * @param source the variable size Argument     * @param dest the fixed size Argument     */    public SourceDestArgument(final Argument source,                              final Argument dest) {        this(source, dest, DEFAULT_INITIAL_SEPARATOR, DEFAULT_SUBSEQUENT_SEPARATOR,             DEFAULT_CONSUME_REMAINING, null);    }    /**     * Creates a SourceDestArgument using the specified parameters.     *     * @param source the variable size Argument     * @param dest the fixed size Argument     * @param initialSeparator the inistial separator to use     * @param subsequentSeparator the subsequent separator to use     * @param consumeRemaining the token triggering consume remaining behaviour     * @param defaultValues the default values for the SourceDestArgument     */    public SourceDestArgument(final Argument source,                              final Argument dest,                              final char initialSeparator,                              final char subsequentSeparator,                              final String consumeRemaining,                              final List defaultValues) {        super(""SourceDestArgument"", null, sum(source.getMinimum(), dest.getMinimum()),              sum(source.getMaximum(), dest.getMaximum()), initialSeparator, subsequentSeparator,              null, consumeRemaining, defaultValues, 0);        this.source = source;        this.dest = dest;        if (dest.getMinimum() != dest.getMaximum()) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SOURCE_DEST_MUST_ENFORCE_VALUES));        }    }    private static int sum(final int a,                           final int b) {        return Math.max(a, Math.max(b, a + b));    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        final int length = buffer.length();        source.appendUsage(buffer, helpSettings, comp);        if (buffer.length() != length) {            buffer.append(' ');        }        dest.appendUsage(buffer, helpSettings, comp);    }    public List helpLines(int depth,                          Set helpSettings,                          Comparator comp) {        final List helpLines = new ArrayList();        helpLines.addAll(source.helpLines(depth, helpSettings, comp));        helpLines.addAll(dest.helpLines(depth, helpSettings, comp));        return helpLines;    }    public void validate(WriteableCommandLine commandLine,                         Option option)        throws OptionException {        final List values = commandLine.getValues(option);        final int limit = values.size() - dest.getMinimum();        int count = 0;        final Iterator i = values.iterator();        while (count++ < limit) {            commandLine.addValue(source, i.next());        }        while (i.hasNext()) {            commandLine.addValue(dest, i.next());        }        source.validate(commandLine, source);        dest.validate(commandLine, dest);    }    public boolean canProcess(final WriteableCommandLine commandLine,                              final String arg) {        return source.canProcess(commandLine, arg) || dest.canProcess(commandLine, arg);    }}"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,17,ackage org.apache.commons.cli2.option;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,19,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,20,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,21,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,22,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,23,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,24,mport java.util.List;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,25,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,26,mport java.util.Set;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,28,mport org.apache.commons.cli2.Argument;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,29,mport org.apache.commons.cli2.DisplaySetting;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,30,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,31,mport org.apache.commons.cli2.OptionException;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,32,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,33,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,34,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,37, A Parent implementation representing normal switch options.
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,38, For example: <code>+d|-d</code> or <code>--enable-x|--disable-x</code>.
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,40,ublic class Switch
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,41,xtends ParentImpl {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,42,** i18n */
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,43,ublic static final ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,46, The default prefix for enabled switches
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,48,"ublic static final String DEFAULT_ENABLED_PREFIX = ""+"";"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,51, The default prefix for disabled switches
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,53,"ublic static final String DEFAULT_DISABLED_PREFIX = ""-"";"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,54,rivate final String enabledPrefix;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,55,rivate final String disabledPrefix;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,56,rivate final Set triggers;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,57,rivate final String preferredName;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,58,rivate final Set aliases;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,59,rivate final Set prefixes;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,60,rivate final Boolean defaultSwitch;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,63, Creates a new Switch with the specified parameters
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,64, @param enabledPrefix the prefix used for enabled switches
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,65, @param disabledPrefix the prefix used for disabled switches
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,66, @param preferredName the preferred name of the switch
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,67, @param aliases the aliases by which the Switch is known
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,68, @param description a description of the Switch
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,69, @param required whether the Option is strictly required
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,70," @param argument the Argument belonging to this Parent, or null"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,71," @param children the Group children belonging to this Parent, ot null"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,72, @param id the unique identifier for this Option
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,73, @throws IllegalArgumentException if the preferredName or an alias isn't
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,74,     prefixed with enabledPrefix or disabledPrefix
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,76,"ublic Switch(final String enabledPrefix,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,77,"inal String disabledPrefix,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,78,"inal String preferredName,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,79,"inal Set aliases,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,80,"inal String description,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,81,"inal boolean required,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,82,"inal Argument argument,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,83,"inal Group children,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,84,"inal int id,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,85,inal Boolean switchDefault) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,86,"uper(argument, children, description, id, required);"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,88,f (enabledPrefix == null) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,89,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_NO_ENABLED_PREFIX));
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,92,f (disabledPrefix == null) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,93,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_NO_DISABLED_PREFIX));
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,96,f (enabledPrefix.startsWith(disabledPrefix)) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,97,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_ENABLED_STARTS_WITH_DISABLED));
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,100,f (disabledPrefix.startsWith(enabledPrefix)) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,101,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_DISABLED_STARTWS_WITH_ENABLED));
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,104,his.enabledPrefix = enabledPrefix;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,105,his.disabledPrefix = disabledPrefix;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,106,his.preferredName = preferredName;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,108,f ((preferredName == null) || (preferredName.length() < 1)) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,109,hrow new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT));
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,112,inal Set newTriggers = new HashSet();
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,113,ewTriggers.add(enabledPrefix + preferredName);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,114,ewTriggers.add(disabledPrefix + preferredName);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,115,his.triggers = Collections.unmodifiableSet(newTriggers);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,117,f (aliases == null) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,118,his.aliases = Collections.EMPTY_SET;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,119, else {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,120,his.aliases = Collections.unmodifiableSet(new HashSet(aliases));
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,122,or (final Iterator i = aliases.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,123,inal String alias = (String) i.next();
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,124,ewTriggers.add(enabledPrefix + alias);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,125,ewTriggers.add(disabledPrefix + alias);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,129,inal Set newPrefixes = new HashSet(super.getPrefixes());
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,130,ewPrefixes.add(enabledPrefix);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,131,ewPrefixes.add(disabledPrefix);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,132,his.prefixes = Collections.unmodifiableSet(newPrefixes);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,134,his.defaultSwitch = switchDefault;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,136,heckPrefixes(newPrefixes);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,139,"ublic void processParent(final WriteableCommandLine commandLine,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,140,inal ListIterator arguments)
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,141,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,142,inal String arg = (String) arguments.next();
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,144,"f (canProcess(commandLine, arg)) {"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,145,f (arg.startsWith(enabledPrefix)) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,146,"ommandLine.addSwitch(this, true);"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,147,rguments.set(enabledPrefix + preferredName);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,150,f (arg.startsWith(disabledPrefix)) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,151,"ommandLine.addSwitch(this, false);"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,152,rguments.set(disabledPrefix + preferredName);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,154, else {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,155,"hrow new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,159,ublic Set getTriggers() {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,160,eturn triggers;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,163,ublic Set getPrefixes() {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,164,eturn prefixes;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,167,ublic void validate(WriteableCommandLine commandLine)
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,168,hrows OptionException {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,169,f (isRequired() && !commandLine.hasOption(this)) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,170,"hrow new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,171,etPreferredName());
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,174,uper.validate(commandLine);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,177,"ublic void appendUsage(final StringBuffer buffer,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,178,"inal Set helpSettings,"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,179,inal Comparator comp) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,180,/ do we display optionality
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,181,inal boolean optional =
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,182,isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,183,inal boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,184,inal boolean disabled = helpSettings.contains(DisplaySetting.DISPLAY_SWITCH_DISABLED);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,185,inal boolean enabled =
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,186,disabled || helpSettings.contains(DisplaySetting.DISPLAY_SWITCH_ENABLED);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,187,inal boolean both = disabled && enabled;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,189,f (optional) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,190,uffer.append('[');
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,193,f (enabled) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,194,uffer.append(enabledPrefix).append(preferredName);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,197,f (both) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,198,uffer.append('|');
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,201,f (disabled) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,202,uffer.append(disabledPrefix).append(preferredName);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,205,f (displayAliases && !aliases.isEmpty()) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,206,"uffer.append("" ("");"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,208,inal List list = new ArrayList(aliases);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,209,ollections.sort(list);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,211,or (final Iterator i = list.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,212,inal String alias = (String) i.next();
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,214,f (enabled) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,215,uffer.append(enabledPrefix).append(alias);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,218,f (both) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,219,uffer.append('|');
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,222,f (disabled) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,223,uffer.append(disabledPrefix).append(alias);
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,226,f (i.hasNext()) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,227,"uffer.append(',');"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,231,uffer.append(')');
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,234,"uper.appendUsage(buffer, helpSettings, comp);"
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,236,f (optional) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,237,uffer.append(']');
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,241,ublic String getPreferredName() {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,242,eturn enabledPrefix + preferredName;
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,245,ublic void defaults(final WriteableCommandLine commandLine) {
False,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,246,"ommandLine.setDefaultSwitch(this, defaultSwitch);"
True,src/java/org/apache/commons/cli2/option/Switch.java,src/java/org/apache/commons/cli2/option/Switch.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * A Parent implementation representing normal switch options. * For example: <code>+d|-d</code> or <code>--enable-x|--disable-x</code>. */public class Switch    extends ParentImpl {    /** i18n */    public static final ResourceHelper resources = ResourceHelper.getResourceHelper();    /**     * The default prefix for enabled switches     */    public static final String DEFAULT_ENABLED_PREFIX = ""+"";    /**     * The default prefix for disabled switches     */    public static final String DEFAULT_DISABLED_PREFIX = ""-"";    private final String enabledPrefix;    private final String disabledPrefix;    private final Set triggers;    private final String preferredName;    private final Set aliases;    private final Set prefixes;    private final Boolean defaultSwitch;    /**     * Creates a new Switch with the specified parameters     * @param enabledPrefix the prefix used for enabled switches     * @param disabledPrefix the prefix used for disabled switches     * @param preferredName the preferred name of the switch     * @param aliases the aliases by which the Switch is known     * @param description a description of the Switch     * @param required whether the Option is strictly required     * @param argument the Argument belonging to this Parent, or null     * @param children the Group children belonging to this Parent, ot null     * @param id the unique identifier for this Option     * @throws IllegalArgumentException if the preferredName or an alias isn't     *     prefixed with enabledPrefix or disabledPrefix     */    public Switch(final String enabledPrefix,                  final String disabledPrefix,                  final String preferredName,                  final Set aliases,                  final String description,                  final boolean required,                  final Argument argument,                  final Group children,                  final int id,                  final Boolean switchDefault) {        super(argument, children, description, id, required);        if (enabledPrefix == null) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_NO_ENABLED_PREFIX));        }        if (disabledPrefix == null) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_NO_DISABLED_PREFIX));        }        if (enabledPrefix.startsWith(disabledPrefix)) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_ENABLED_STARTS_WITH_DISABLED));        }        if (disabledPrefix.startsWith(enabledPrefix)) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_DISABLED_STARTWS_WITH_ENABLED));        }        this.enabledPrefix = enabledPrefix;        this.disabledPrefix = disabledPrefix;        this.preferredName = preferredName;        if ((preferredName == null) || (preferredName.length() < 1)) {            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT));        }        final Set newTriggers = new HashSet();        newTriggers.add(enabledPrefix + preferredName);        newTriggers.add(disabledPrefix + preferredName);        this.triggers = Collections.unmodifiableSet(newTriggers);        if (aliases == null) {            this.aliases = Collections.EMPTY_SET;        } else {            this.aliases = Collections.unmodifiableSet(new HashSet(aliases));            for (final Iterator i = aliases.iterator(); i.hasNext();) {                final String alias = (String) i.next();                newTriggers.add(enabledPrefix + alias);                newTriggers.add(disabledPrefix + alias);            }        }        final Set newPrefixes = new HashSet(super.getPrefixes());        newPrefixes.add(enabledPrefix);        newPrefixes.add(disabledPrefix);        this.prefixes = Collections.unmodifiableSet(newPrefixes);        this.defaultSwitch = switchDefault;        checkPrefixes(newPrefixes);    }    public void processParent(final WriteableCommandLine commandLine,                              final ListIterator arguments)        throws OptionException {        final String arg = (String) arguments.next();        if (canProcess(commandLine, arg)) {            if (arg.startsWith(enabledPrefix)) {                commandLine.addSwitch(this, true);                arguments.set(enabledPrefix + preferredName);            }            if (arg.startsWith(disabledPrefix)) {                commandLine.addSwitch(this, false);                arguments.set(disabledPrefix + preferredName);            }        } else {            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN, arg);        }    }    public Set getTriggers() {        return triggers;    }    public Set getPrefixes() {        return prefixes;    }    public void validate(WriteableCommandLine commandLine)        throws OptionException {        if (isRequired() && !commandLine.hasOption(this)) {            throw new OptionException(this, ResourceConstants.OPTION_MISSING_REQUIRED,                                      getPreferredName());        }        super.validate(commandLine);    }    public void appendUsage(final StringBuffer buffer,                            final Set helpSettings,                            final Comparator comp) {        // do we display optionality        final boolean optional =            !isRequired() && helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);        final boolean displayAliases = helpSettings.contains(DisplaySetting.DISPLAY_ALIASES);        final boolean disabled = helpSettings.contains(DisplaySetting.DISPLAY_SWITCH_DISABLED);        final boolean enabled =            !disabled || helpSettings.contains(DisplaySetting.DISPLAY_SWITCH_ENABLED);        final boolean both = disabled && enabled;        if (optional) {            buffer.append('[');        }        if (enabled) {            buffer.append(enabledPrefix).append(preferredName);        }        if (both) {            buffer.append('|');        }        if (disabled) {            buffer.append(disabledPrefix).append(preferredName);        }        if (displayAliases && !aliases.isEmpty()) {            buffer.append("" ("");            final List list = new ArrayList(aliases);            Collections.sort(list);            for (final Iterator i = list.iterator(); i.hasNext();) {                final String alias = (String) i.next();                if (enabled) {                    buffer.append(enabledPrefix).append(alias);                }                if (both) {                    buffer.append('|');                }                if (disabled) {                    buffer.append(disabledPrefix).append(alias);                }                if (i.hasNext()) {                    buffer.append(',');                }            }            buffer.append(')');        }        super.appendUsage(buffer, helpSettings, comp);        if (optional) {            buffer.append(']');        }    }    public String getPreferredName() {        return enabledPrefix + preferredName;    }    public void defaults(final WriteableCommandLine commandLine) {        commandLine.setDefaultSwitch(this, defaultSwitch);    }}"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,3, or more contributor license agreements.  See the NOTICE file
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,4, distributed with this work for additional information
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,6," to you under the Apache License, Version 2.0 (the"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,7," ""License""); you may not use this file except in compliance"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,8, with the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,12," Unless required by applicable law or agreed to in writing,"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,13, software distributed under the License is distributed on an
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,15," KIND, either express or implied.  See the License for the"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,16, specific language governing permissions and limitations
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,17, under the License.
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,19,ackage org.apache.commons.cli2.resource;
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,21,ublic abstract class ResourceConstants {
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,22,"ublic static final String CLASSVALIDATOR_BAD_CLASSNAME = ""ClassValidator.bad.classname"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,23,"ublic static final String CLASSVALIDATOR_CLASS_NOTFOUND = ""ClassValidator.class.notfound"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,24,"ublic static final String CLASSVALIDATOR_CLASS_ACCESS = ""ClassValidator.class.access"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,25,"ublic static final String CLASSVALIDATOR_CLASS_CREATE = ""ClassValidator.class.create"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,26,"ublic static final String DATEVALIDATOR_DATE_OUTOFRANGE = ""DateValidator.date.OutOfRange"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,27,"ublic static final String URLVALIDATOR_MALFORMED_URL = ""URLValidator.malformed.URL"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,28,ublic static final String NUMBERVALIDATOR_NUMBER_OUTOFRANGE =
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,29,"NumberValidator.number.OutOfRange"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,30,"ublic static final String ARGUMENT_UNEXPECTED_VALUE = ""Argument.unexpected.value"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,31,"ublic static final String ARGUMENT_MIN_EXCEEDS_MAX = ""Argument.minimum.exceeds.maximum"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,32,"ublic static final String ARGUMENT_TOO_FEW_DEFAULTS = ""Argument.too.few.defaults"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,33,"ublic static final String ARGUMENT_TOO_MANY_DEFAULTS = ""Argument.too.many.defaults"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,34,"ublic static final String ARGUMENT_MISSING_VALUES = ""Argument.missing.values"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,35,"ublic static final String ARGUMENT_TOO_MANY_VALUES = ""Argument.too.many.values"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,36,"ublic static final String OPTION_TRIGGER_NEEDS_PREFIX = ""Option.trigger.needs.prefix"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,37,"ublic static final String OPTION_MISSING_REQUIRED = ""Option.missing.required"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,38,"ublic static final String OPTION_NO_NAME = ""Option.no.name"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,39,"ublic static final String OPTION_ILLEGAL_LONG_PREFIX = ""Option.illegal.long.prefix"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,40,"ublic static final String OPTION_ILLEGAL_SHORT_PREFIX = ""Option.illegal.short.prefix"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,41,"ublic static final String UNEXPECTED_TOKEN = ""Unexpected.token"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,42,"ublic static final String MISSING_OPTION = ""Missing.option"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,43,"ublic static final String CANNOT_BURST = ""Cannot.burst"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,44,"ublic static final String COMMAND_PREFERRED_NAME_TOO_SHORT = ""Command.preferredName.too.short"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,45,"ublic static final String SWITCH_ILLEGAL_ENABLED_PREFIX = ""Option.illegal.enabled.prefix"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,46,"ublic static final String SWITCH_ILLEGAL_DISABLED_PREFIX = ""Option.illegal.disabled.prefix"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,47,"ublic static final String SWITCH_IDENTICAL_PREFIXES = ""Option.identical.prefixes"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,48,"ublic static final String SWITCH_ALREADY_SET = ""Switch.already.set"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,49,"ublic static final String SWITCH_NO_ENABLED_PREFIX = ""Switch.no.enabledPrefix"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,50,"ublic static final String SWITCH_NO_DISABLED_PREFIX = ""Switch.no.disabledPrefix"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,51,ublic static final String SWITCH_ENABLED_STARTS_WITH_DISABLED =
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,52,"Switch.enabled.startsWith.disabled"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,53,ublic static final String SWITCH_DISABLED_STARTWS_WITH_ENABLED =
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,54,"Switch.disabled.startsWith.enabled"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,55,"ublic static final String SWITCH_PREFERRED_NAME_TOO_SHORT = ""Switch.preferredName.too.short"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,56,"ublic static final String SOURCE_DEST_MUST_ENFORCE_VALUES = ""SourceDest.must.enforce.values"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,57,"ublic static final String HELPFORMATTER_GUTTER_TOO_LONG = ""HelpFormatter.gutter.too.long"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,58,"ublic static final String HELPFORMATTER_WIDTH_TOO_NARROW = ""HelpFormatter.width.too.narrow"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,59,"ublic static final String ENUM_ILLEGAL_VALUE = ""Enum.illegal.value"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,60,"ublic static final String ARGUMENT_BUILDER_NULL_CONSUME_REMAINING = ""ArgumentBuilder.null.consume.remaining"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,61,"ublic static final String ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING = ""ArgumentBuilder.empty.consume.remaining"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,62,"ublic static final String ARGUMENT_BUILDER_NULL_DEFAULT = ""ArgumentBuilder.null.default"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,63,"ublic static final String ARGUMENT_BUILDER_NULL_DEFAULTS = ""ArgumentBuilder.null.defaults"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,64,"ublic static final String ARGUMENT_BUILDER_NEGATIVE_MAXIMUM = ""ArgumentBuilder.negative.maximum"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,65,"ublic static final String ARGUMENT_BUILDER_NEGATIVE_MINIMUM = ""ArgumentBuilder.negative.minimum"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,66,"ublic static final String ARGUMENT_BUILDER_NULL_NAME = ""ArgumentBuilder.null.name"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,67,"ublic static final String ARGUMENT_BUILDER_EMPTY_NAME = ""ArgumentBuilder.empty.name"";"
False,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,68,"ublic static final String ARGUMENT_BUILDER_NULL_VALIDATOR = ""ArgumentBuilder.null.validator"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * ""License""); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.cli2.resource;public abstract class ResourceConstants {    public static final String CLASSVALIDATOR_BAD_CLASSNAME = ""ClassValidator.bad.classname"";    public static final String CLASSVALIDATOR_CLASS_NOTFOUND = ""ClassValidator.class.notfound"";    public static final String CLASSVALIDATOR_CLASS_ACCESS = ""ClassValidator.class.access"";    public static final String CLASSVALIDATOR_CLASS_CREATE = ""ClassValidator.class.create"";    public static final String DATEVALIDATOR_DATE_OUTOFRANGE = ""DateValidator.date.OutOfRange"";    public static final String URLVALIDATOR_MALFORMED_URL = ""URLValidator.malformed.URL"";    public static final String NUMBERVALIDATOR_NUMBER_OUTOFRANGE =        ""NumberValidator.number.OutOfRange"";    public static final String ARGUMENT_UNEXPECTED_VALUE = ""Argument.unexpected.value"";    public static final String ARGUMENT_MIN_EXCEEDS_MAX = ""Argument.minimum.exceeds.maximum"";    public static final String ARGUMENT_TOO_FEW_DEFAULTS = ""Argument.too.few.defaults"";    public static final String ARGUMENT_TOO_MANY_DEFAULTS = ""Argument.too.many.defaults"";    public static final String ARGUMENT_MISSING_VALUES = ""Argument.missing.values"";    public static final String ARGUMENT_TOO_MANY_VALUES = ""Argument.too.many.values"";    public static final String OPTION_TRIGGER_NEEDS_PREFIX = ""Option.trigger.needs.prefix"";    public static final String OPTION_MISSING_REQUIRED = ""Option.missing.required"";    public static final String OPTION_NO_NAME = ""Option.no.name"";    public static final String OPTION_ILLEGAL_LONG_PREFIX = ""Option.illegal.long.prefix"";    public static final String OPTION_ILLEGAL_SHORT_PREFIX = ""Option.illegal.short.prefix"";    public static final String UNEXPECTED_TOKEN = ""Unexpected.token"";    public static final String MISSING_OPTION = ""Missing.option"";    public static final String CANNOT_BURST = ""Cannot.burst"";    public static final String COMMAND_PREFERRED_NAME_TOO_SHORT = ""Command.preferredName.too.short"";    public static final String SWITCH_ILLEGAL_ENABLED_PREFIX = ""Option.illegal.enabled.prefix"";    public static final String SWITCH_ILLEGAL_DISABLED_PREFIX = ""Option.illegal.disabled.prefix"";    public static final String SWITCH_IDENTICAL_PREFIXES = ""Option.identical.prefixes"";    public static final String SWITCH_ALREADY_SET = ""Switch.already.set"";    public static final String SWITCH_NO_ENABLED_PREFIX = ""Switch.no.enabledPrefix"";    public static final String SWITCH_NO_DISABLED_PREFIX = ""Switch.no.disabledPrefix"";    public static final String SWITCH_ENABLED_STARTS_WITH_DISABLED =        ""Switch.enabled.startsWith.disabled"";    public static final String SWITCH_DISABLED_STARTWS_WITH_ENABLED =        ""Switch.disabled.startsWith.enabled"";    public static final String SWITCH_PREFERRED_NAME_TOO_SHORT = ""Switch.preferredName.too.short"";    public static final String SOURCE_DEST_MUST_ENFORCE_VALUES = ""SourceDest.must.enforce.values"";    public static final String HELPFORMATTER_GUTTER_TOO_LONG = ""HelpFormatter.gutter.too.long"";    public static final String HELPFORMATTER_WIDTH_TOO_NARROW = ""HelpFormatter.width.too.narrow"";    public static final String ENUM_ILLEGAL_VALUE = ""Enum.illegal.value"";    public static final String ARGUMENT_BUILDER_NULL_CONSUME_REMAINING = ""ArgumentBuilder.null.consume.remaining"";    public static final String ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING = ""ArgumentBuilder.empty.consume.remaining"";    public static final String ARGUMENT_BUILDER_NULL_DEFAULT = ""ArgumentBuilder.null.default"";    public static final String ARGUMENT_BUILDER_NULL_DEFAULTS = ""ArgumentBuilder.null.defaults"";    public static final String ARGUMENT_BUILDER_NEGATIVE_MAXIMUM = ""ArgumentBuilder.negative.maximum"";    public static final String ARGUMENT_BUILDER_NEGATIVE_MINIMUM = ""ArgumentBuilder.negative.minimum"";    public static final String ARGUMENT_BUILDER_NULL_NAME = ""ArgumentBuilder.null.name"";    public static final String ARGUMENT_BUILDER_EMPTY_NAME = ""ArgumentBuilder.empty.name"";    public static final String ARGUMENT_BUILDER_NULL_VALIDATOR = ""ArgumentBuilder.null.validator"";}"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,17,ackage org.apache.commons.cli2.resource;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,19,mport java.text.MessageFormat;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,21,mport java.util.Locale;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,22,mport java.util.MissingResourceException;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,23,mport java.util.ResourceBundle;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,26, A utility class used to provide internationalisation support.
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,28, @author John Keyes
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,30,ublic class ResourceHelper {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,31,** system property */
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,32,"rivate static final String PROP_LOCALE = ""org.apache.commons.cli2.resource.bundle"";"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,34,** default package name */
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,35,rivate static final String DEFAULT_BUNDLE =
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,36,"org.apache.commons.cli2.resource.CLIMessageBundle_en_US"";"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,37,rivate static ResourceHelper helper;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,39,** resource bundle */
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,40,rivate ResourceBundle bundle;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,42,rivate String prop;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,45, Create a new ResourceHelper for the current locale.
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,47,rivate ResourceHelper() {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,48,tring bundleName = System.getProperty(PROP_LOCALE);
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,50,f (bundleName == null) {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,51,undleName = DEFAULT_BUNDLE;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,54,his.prop = bundleName;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,56,nt firstUnderscore = bundleName.indexOf('_');
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,57,"nt secondUnderscore = bundleName.indexOf('_', firstUnderscore + 1);"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,59,ocale locale;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,60,f (firstUnderscore != -1) {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,61,"tring language = bundleName.substring(firstUnderscore + 1, secondUnderscore);"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,62,tring country = bundleName.substring(secondUnderscore + 1);
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,63,"ocale = new Locale(language, country);"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,65,lse {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,66,ocale = Locale.getDefault();
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,68,/ initialize the bundle
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,69,ry {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,70,"undle = ResourceBundle.getBundle(bundleName, locale);"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,71, catch (MissingResourceException exp) {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,72,"undle = ResourceBundle.getBundle(DEFAULT_BUNDLE, locale);"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,76,ublic String getBundleName() {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,77,eturn this.prop;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,81, Gets the ResourceHelper appropriate to the current locale.
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,82, @return a ResourceHelper
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,84,ublic static ResourceHelper getResourceHelper() {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,85,tring bundleName = System.getProperty(PROP_LOCALE);
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,86,f (helper == null || !helper.getBundleName().equals(bundleName)) {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,87,elper = new ResourceHelper();
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,90,eturn helper;
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,94, Returns the message for the specified key.
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,96, @param key the unique identifier of the message
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,97, @return String the formatted String
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,99,ublic String getMessage(final String key) {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,100,"eturn getMessage(key, new Object[] {  });"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,104, Returns the message for the specified key and argument.
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,106, @param key the unique identifier of the message
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,107, @param value the argument value
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,108, @return String the formatted String
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,110,"ublic String getMessage(final String key,"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,111,inal Object value) {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,112,"eturn getMessage(key, new Object[] { value });"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,116, Returns the message for the specified key and arguments.
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,118, @param key the unique identifier of the message
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,119, @param value1 an argument value
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,120, @param value2 an argument value
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,121, @return String the formatted String
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,123,"ublic String getMessage(final String key,"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,124,"inal Object value1,"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,125,inal Object value2) {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,126,"eturn getMessage(key, new Object[] { value1, value2 });"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,130, Returns the message for the specified key and arguments.
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,132, @param key the unique identifier of the message
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,133, @param value1 an argument value
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,134, @param value2 an argument value
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,135, @param value3 an argument value
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,137, @return String the formatted String
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,139,"ublic String getMessage(final String key,"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,140,"inal Object value1,"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,141,"inal Object value2,"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,142,inal Object value3) {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,143,"eturn getMessage(key, new Object[] { value1, value2, value3 });"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,147, Returns the message for the specified key and arguments.
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,149, @param key the unique identifier of the message
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,150, @param values argument values
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,151, @return String the formatted String
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,153,"ublic String getMessage(final String key,"
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,154,inal Object[] values) {
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,155,inal String msgFormatStr = bundle.getString(key);
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,156,inal MessageFormat msgFormat = new MessageFormat(msgFormatStr);
False,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,158,eturn msgFormat.format(values);
True,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,src/java/org/apache/commons/cli2/resource/ResourceHelper.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.resource;import java.text.MessageFormat;import java.util.Locale;import java.util.MissingResourceException;import java.util.ResourceBundle;/** * A utility class used to provide internationalisation support. * * @author John Keyes */public class ResourceHelper {    /** system property */    private static final String PROP_LOCALE = ""org.apache.commons.cli2.resource.bundle"";    /** default package name */    private static final String DEFAULT_BUNDLE =        ""org.apache.commons.cli2.resource.CLIMessageBundle_en_US"";    private static ResourceHelper helper;    /** resource bundle */    private ResourceBundle bundle;    private String prop;    /**     * Create a new ResourceHelper for the current locale.     */    private ResourceHelper() {        String bundleName = System.getProperty(PROP_LOCALE);        if (bundleName == null) {            bundleName = DEFAULT_BUNDLE;        }        this.prop = bundleName;        int firstUnderscore = bundleName.indexOf('_');        int secondUnderscore = bundleName.indexOf('_', firstUnderscore + 1);        Locale locale;        if (firstUnderscore != -1) {        String language = bundleName.substring(firstUnderscore + 1, secondUnderscore);        String country = bundleName.substring(secondUnderscore + 1);        	locale = new Locale(language, country);        }        else {        	locale = Locale.getDefault();        }        // initialize the bundle        try {            bundle = ResourceBundle.getBundle(bundleName, locale);        } catch (MissingResourceException exp) {            bundle = ResourceBundle.getBundle(DEFAULT_BUNDLE, locale);        }    }    public String getBundleName() {    	return this.prop;    }    /**     * Gets the ResourceHelper appropriate to the current locale.     * @return a ResourceHelper     */    public static ResourceHelper getResourceHelper() {        String bundleName = System.getProperty(PROP_LOCALE);        if (helper == null || !helper.getBundleName().equals(bundleName)) {            helper = new ResourceHelper();        }        return helper;    }    /**     * Returns the message for the specified key.     *     * @param key the unique identifier of the message     * @return String the formatted String     */    public String getMessage(final String key) {        return getMessage(key, new Object[] {  });    }    /**     * Returns the message for the specified key and argument.     *     * @param key the unique identifier of the message     * @param value the argument value     * @return String the formatted String     */    public String getMessage(final String key,                             final Object value) {        return getMessage(key, new Object[] { value });    }    /**     * Returns the message for the specified key and arguments.     *     * @param key the unique identifier of the message     * @param value1 an argument value     * @param value2 an argument value     * @return String the formatted String     */    public String getMessage(final String key,                             final Object value1,                             final Object value2) {        return getMessage(key, new Object[] { value1, value2 });    }    /**     * Returns the message for the specified key and arguments.     *     * @param key the unique identifier of the message     * @param value1 an argument value     * @param value2 an argument value     * @param value3 an argument value     *     * @return String the formatted String     */    public String getMessage(final String key,                             final Object value1,                             final Object value2,                             final Object value3) {        return getMessage(key, new Object[] { value1, value2, value3 });    }    /**     * Returns the message for the specified key and arguments.     *     * @param key the unique identifier of the message     * @param values argument values     * @return String the formatted String     */    public String getMessage(final String key,                             final Object[] values) {        final String msgFormatStr = bundle.getString(key);        final MessageFormat msgFormat = new MessageFormat(msgFormatStr);        return msgFormat.format(values);    }}"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,17,ackage org.apache.commons.cli2.util;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,19,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,20,mport java.util.List;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,22,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,23,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,24,mport org.apache.commons.cli2.option.Command;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,25,mport org.apache.commons.cli2.option.DefaultOption;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,26,mport org.apache.commons.cli2.option.Switch;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,29, A collection of Comparators suitable for use with Option instances.
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,31,ublic class Comparators {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,33,rivate Comparators(){
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,34,/ constructor hiden from potential users
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,39, Chains comparators together.
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,41, @see #chain(Comparator[])
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,42, @param c0
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,43,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,44, @param c1
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,45,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,46, @return a chained comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,48,"ublic static Comparator chain(final Comparator c0, final Comparator c1) {"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,49,"eturn chain(new Comparator[] { c0, c1 });"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,53, Chains comparators together.
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,55, @see #chain(Comparator[])
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,56, @param c0
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,57,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,58, @param c1
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,59,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,60, @param c2
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,61,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,62, @return a chained comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,64,ublic static Comparator chain(
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,65,"inal Comparator c0,"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,66,"inal Comparator c1,"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,67,inal Comparator c2) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,68,"eturn chain(new Comparator[] { c0, c1, c2 });"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,72, Chains comparators together.
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,74, @see #chain(Comparator[])
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,75, @param c0
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,76,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,77, @param c1
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,78,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,79, @param c2
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,80,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,81, @param c3
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,82,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,83, @return a chained comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,85,ublic static Comparator chain(
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,86,"inal Comparator c0,"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,87,"inal Comparator c1,"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,88,"inal Comparator c2,"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,89,inal Comparator c3) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,90,"eturn chain(new Comparator[] { c0, c1, c2, c3 });"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,94, Chains comparators together.
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,96, @see #chain(Comparator[])
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,97, @param c0
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,98,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,99, @param c1
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,100,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,101, @param c2
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,102,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,103, @param c3
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,104,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,105, @param c4
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,106,            a comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,107, @return a chained comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,109,ublic static Comparator chain(
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,110,"inal Comparator c0,"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,111,"inal Comparator c1,"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,112,"inal Comparator c2,"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,113,"inal Comparator c3,"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,114,inal Comparator c4) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,115,"eturn chain(new Comparator[] { c0, c1, c2, c3, c4 });"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,119, Chains comparators together.
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,121, @see #chain(Comparator[])
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,122, @param comparators
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,123,            a List of comparators to chain together
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,124, @return a chained comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,126,ublic static Comparator chain(final List comparators) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,127,eturn new Chain(
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,128,Comparator[])comparators.toArray(
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,129,ew Comparator[comparators.size()]));
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,133, Chains an array of comparators together. Each Comparator will be called
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,134," in turn until one of them return a non-zero value, this value will be"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,135, returned.
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,137, @param comparators
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,138,            the array of comparators
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,139, @return a chained comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,141,ublic static Comparator chain(final Comparator[] comparators) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,142,eturn new Chain(comparators);
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,146, Chains a series of Comparators together.
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,148,rivate static class Chain implements Comparator {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,150,inal Comparator[] chain;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,153, Creates a Comparator chain using the specified array of Comparators
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,154, @param chain the Comparators in the chain
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,156,ublic Chain(final Comparator[] chain) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,157,his.chain = new Comparator[chain.length];
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,158,"ystem.arraycopy(chain, 0, this.chain, 0, chain.length);"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,161,"ublic int compare(final Object left, final Object right) {"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,162,nt result = 0;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,163,or (int i = 0; result == 0 && i < chain.length; ++i) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,164,"esult = chain[i].compare(left, right);"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,166,eturn result;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,171, Reverses a comparator's logic.
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,173, @param wrapped
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,174,            the Comparator to reverse the logic of
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,175, @return a comparator with reverse logic
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,177,rivate static Comparator reverse(final Comparator wrapped) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,178,eturn new Reverse(wrapped);
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,181,rivate static class Reverse implements Comparator {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,182,rivate final Comparator wrapped;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,185, Creates a Comparator with reverse logic
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,186, @param wrapped the original logic
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,188,ublic Reverse(final Comparator wrapped) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,189,his.wrapped = wrapped;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,192,"ublic int compare(final Object left, final Object right) {"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,193,"eturn -wrapped.compare(left, right);"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,198, Forces Group instances to appear at the beginning of lists
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,200, @see Group
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,201, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,203,ublic static Comparator groupFirst() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,204,eturn new GroupFirst();
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,208, Forces Group instances to appear at the end of lists
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,210, @see Group
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,211, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,213,ublic static Comparator groupLast() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,214,eturn reverse(groupFirst());
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,217,rivate static class GroupFirst implements Comparator {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,218,"ublic int compare(final Object left, final Object right) {"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,219,inal boolean l = left instanceof Group;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,220,inal boolean r = right instanceof Group;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,222,f (l ^ r) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,223,f (l) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,224,eturn -1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,226,eturn 1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,228,eturn 0;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,233, Forces Switch instances to appear at the beginning of lists
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,235, @see Switch
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,236, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,238,ublic static Comparator switchFirst() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,239,eturn new SwitchFirst();
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,243, Forces Switch instances to appear at the end of lists
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,245, @see Switch
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,246, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,248,ublic static Comparator switchLast() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,249,eturn reverse(switchFirst());
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,252,rivate static class SwitchFirst implements Comparator {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,253,"ublic int compare(final Object left, final Object right) {"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,254,inal boolean l = left instanceof Switch;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,255,inal boolean r = right instanceof Switch;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,257,f (l ^ r) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,258,f (l) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,259,eturn -1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,261,eturn 1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,263,eturn 0;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,268, Forces Command instances to appear at the beginning of lists
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,270, @see Command
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,271, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,273,ublic static Comparator commandFirst() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,274,eturn new CommandFirst();
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,278, Forces Command instances to appear at the end of lists
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,280, @see Command
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,281, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,283,ublic static Comparator commandLast() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,284,eturn reverse(commandFirst());
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,287,rivate static class CommandFirst implements Comparator {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,288,"ublic int compare(final Object left, final Object right) {"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,289,inal boolean l = left instanceof Command;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,290,inal boolean r = right instanceof Command;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,292,f (l ^ r) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,293,f (l) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,294,eturn -1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,296,eturn 1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,298,eturn 0;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,303, Forces DefaultOption instances to appear at the beginning of lists
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,305, @see DefaultOption
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,306, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,308,ublic static Comparator defaultOptionFirst() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,309,eturn new DefaultOptionFirst();
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,313, Forces DefaultOption instances to appear at the end of lists
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,315, @see DefaultOption
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,316, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,318,ublic static Comparator defaultOptionLast() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,319,eturn reverse(defaultOptionFirst());
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,322,rivate static class DefaultOptionFirst implements Comparator {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,323,"ublic int compare(final Object left, final Object right) {"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,324,inal boolean l = left instanceof DefaultOption;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,325,inal boolean r = right instanceof DefaultOption;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,327,f (l ^ r) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,328,f (l) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,329,eturn -1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,331,eturn 1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,333,eturn 0;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,338, Forces Comparators with a particular trigger to appear at the beginning
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,339, of lists
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,341, @param name
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,342,            the trigger name to select
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,343, @see Option#getTriggers()
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,344, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,346,ublic static Comparator namedFirst(final String name) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,347,eturn new Named(name);
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,351, Forces Comparators with a particular trigger to appear at the end of
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,352, lists
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,354, @param name
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,355,            the trigger name to select
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,356, @see Option#getTriggers()
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,357, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,359,ublic static Comparator namedLast(final String name) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,360,eturn reverse(new Named(name));
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,363,rivate static class Named implements Comparator {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,364,rivate final String name;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,367, Creates a Comparator that sorts a particular name high in order
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,368, @param name the trigger name to select
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,370,ublic Named(final String name) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,371,his.name = name;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,373,"ublic int compare(final Object oleft, final Object oright) {"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,374,inal Option left = (Option)oleft;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,375,inal Option right = (Option)oright;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,377,inal boolean l = left.getTriggers().contains(name);
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,378,inal boolean r = right.getTriggers().contains(name);
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,380,f (l ^ r) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,381,f (l) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,382,eturn -1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,384,eturn 1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,386,eturn 0;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,391, Orders Options by preferredName
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,393, @see Option#getPreferredName()
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,394, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,396,ublic static Comparator preferredNameFirst() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,397,eturn new PreferredName();
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,401," Orders Options by preferredName, reversed"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,403, @see Option#getPreferredName()
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,404, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,406,ublic static Comparator preferredNameLast() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,407,eturn reverse(preferredNameFirst());
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,410,rivate static class PreferredName implements Comparator {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,411,"ublic int compare(final Object oleft, final Object oright) {"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,412,inal Option left = (Option)oleft;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,413,inal Option right = (Option)oright;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,415,eturn left.getPreferredName().compareTo(right.getPreferredName());
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,420, Orders Options grouping required Options first
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,422, @see Option#isRequired()
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,423, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,425,ublic static Comparator requiredFirst() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,426,eturn new Required();
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,430, Orders Options grouping required Options last
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,432, @see Option#isRequired()
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,433, @return a new comparator
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,435,ublic static Comparator requiredLast() {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,436,eturn reverse(requiredFirst());
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,439,rivate static class Required implements Comparator {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,440,"ublic int compare(final Object oleft, final Object oright) {"
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,441,inal Option left = (Option)oleft;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,442,inal Option right = (Option)oright;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,444,inal boolean l = left.isRequired();
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,445,inal boolean r = right.isRequired();
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,447,f (l ^ r) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,448,f (l) {
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,449,eturn -1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,451,eturn 1;
False,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,453,eturn 0;
True,src/java/org/apache/commons/cli2/util/Comparators.java,src/java/org/apache/commons/cli2/util/Comparators.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.util;import java.util.Comparator;import java.util.List;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.option.Command;import org.apache.commons.cli2.option.DefaultOption;import org.apache.commons.cli2.option.Switch;/** * A collection of Comparators suitable for use with Option instances. */public class Comparators {	private Comparators(){		// constructor hiden from potential users	}    /**     * Chains comparators together.     *     * @see #chain(Comparator[])     * @param c0     *            a comparator     * @param c1     *            a comparator     * @return a chained comparator     */    public static Comparator chain(final Comparator c0, final Comparator c1) {        return chain(new Comparator[] { c0, c1 });    }    /**     * Chains comparators together.     *     * @see #chain(Comparator[])     * @param c0     *            a comparator     * @param c1     *            a comparator     * @param c2     *            a comparator     * @return a chained comparator     */    public static Comparator chain(        final Comparator c0,        final Comparator c1,        final Comparator c2) {        return chain(new Comparator[] { c0, c1, c2 });    }    /**     * Chains comparators together.     *     * @see #chain(Comparator[])     * @param c0     *            a comparator     * @param c1     *            a comparator     * @param c2     *            a comparator     * @param c3     *            a comparator     * @return a chained comparator     */    public static Comparator chain(        final Comparator c0,        final Comparator c1,        final Comparator c2,        final Comparator c3) {        return chain(new Comparator[] { c0, c1, c2, c3 });    }    /**     * Chains comparators together.     *     * @see #chain(Comparator[])     * @param c0     *            a comparator     * @param c1     *            a comparator     * @param c2     *            a comparator     * @param c3     *            a comparator     * @param c4     *            a comparator     * @return a chained comparator     */    public static Comparator chain(        final Comparator c0,        final Comparator c1,        final Comparator c2,        final Comparator c3,        final Comparator c4) {        return chain(new Comparator[] { c0, c1, c2, c3, c4 });    }    /**     * Chains comparators together.     *     * @see #chain(Comparator[])     * @param comparators     *            a List of comparators to chain together     * @return a chained comparator     */    public static Comparator chain(final List comparators) {        return new Chain(            (Comparator[])comparators.toArray(                new Comparator[comparators.size()]));    }    /**     * Chains an array of comparators together. Each Comparator will be called     * in turn until one of them return a non-zero value, this value will be     * returned.     *     * @param comparators     *            the array of comparators     * @return a chained comparator     */    public static Comparator chain(final Comparator[] comparators) {        return new Chain(comparators);    }    /**     * Chains a series of Comparators together.     */    private static class Chain implements Comparator {        final Comparator[] chain;        /**         * Creates a Comparator chain using the specified array of Comparators         * @param chain the Comparators in the chain         */        public Chain(final Comparator[] chain) {            this.chain = new Comparator[chain.length];            System.arraycopy(chain, 0, this.chain, 0, chain.length);        }        public int compare(final Object left, final Object right) {            int result = 0;            for (int i = 0; result == 0 && i < chain.length; ++i) {                result = chain[i].compare(left, right);            }            return result;        }    }    /**     * Reverses a comparator's logic.     *     * @param wrapped     *            the Comparator to reverse the logic of     * @return a comparator with reverse logic     */    private static Comparator reverse(final Comparator wrapped) {        return new Reverse(wrapped);    }    private static class Reverse implements Comparator {        private final Comparator wrapped;        /**         * Creates a Comparator with reverse logic         * @param wrapped the original logic         */        public Reverse(final Comparator wrapped) {            this.wrapped = wrapped;        }        public int compare(final Object left, final Object right) {            return -wrapped.compare(left, right);        }    }    /**     * Forces Group instances to appear at the beginning of lists     *     * @see Group     * @return a new comparator     */    public static Comparator groupFirst() {        return new GroupFirst();    }    /**     * Forces Group instances to appear at the end of lists     *     * @see Group     * @return a new comparator     */    public static Comparator groupLast() {        return reverse(groupFirst());    }    private static class GroupFirst implements Comparator {        public int compare(final Object left, final Object right) {            final boolean l = left instanceof Group;            final boolean r = right instanceof Group;            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }    /**     * Forces Switch instances to appear at the beginning of lists     *     * @see Switch     * @return a new comparator     */    public static Comparator switchFirst() {        return new SwitchFirst();    }    /**     * Forces Switch instances to appear at the end of lists     *     * @see Switch     * @return a new comparator     */    public static Comparator switchLast() {        return reverse(switchFirst());    }    private static class SwitchFirst implements Comparator {        public int compare(final Object left, final Object right) {            final boolean l = left instanceof Switch;            final boolean r = right instanceof Switch;            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }    /**     * Forces Command instances to appear at the beginning of lists     *     * @see Command     * @return a new comparator     */    public static Comparator commandFirst() {        return new CommandFirst();    }    /**     * Forces Command instances to appear at the end of lists     *     * @see Command     * @return a new comparator     */    public static Comparator commandLast() {        return reverse(commandFirst());    }    private static class CommandFirst implements Comparator {        public int compare(final Object left, final Object right) {            final boolean l = left instanceof Command;            final boolean r = right instanceof Command;            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }    /**     * Forces DefaultOption instances to appear at the beginning of lists     *     * @see DefaultOption     * @return a new comparator     */    public static Comparator defaultOptionFirst() {        return new DefaultOptionFirst();    }    /**     * Forces DefaultOption instances to appear at the end of lists     *     * @see DefaultOption     * @return a new comparator     */    public static Comparator defaultOptionLast() {        return reverse(defaultOptionFirst());    }    private static class DefaultOptionFirst implements Comparator {        public int compare(final Object left, final Object right) {            final boolean l = left instanceof DefaultOption;            final boolean r = right instanceof DefaultOption;            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }    /**     * Forces Comparators with a particular trigger to appear at the beginning     * of lists     *     * @param name     *            the trigger name to select     * @see Option#getTriggers()     * @return a new comparator     */    public static Comparator namedFirst(final String name) {        return new Named(name);    }    /**     * Forces Comparators with a particular trigger to appear at the end of     * lists     *     * @param name     *            the trigger name to select     * @see Option#getTriggers()     * @return a new comparator     */    public static Comparator namedLast(final String name) {        return reverse(new Named(name));    }    private static class Named implements Comparator {        private final String name;        /**         * Creates a Comparator that sorts a particular name high in order         * @param name the trigger name to select         */        public Named(final String name) {            this.name = name;        }        public int compare(final Object oleft, final Object oright) {            final Option left = (Option)oleft;            final Option right = (Option)oright;            final boolean l = left.getTriggers().contains(name);            final boolean r = right.getTriggers().contains(name);            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }    /**     * Orders Options by preferredName     *     * @see Option#getPreferredName()     * @return a new comparator     */    public static Comparator preferredNameFirst() {        return new PreferredName();    }    /**     * Orders Options by preferredName, reversed     *     * @see Option#getPreferredName()     * @return a new comparator     */    public static Comparator preferredNameLast() {        return reverse(preferredNameFirst());    }    private static class PreferredName implements Comparator {        public int compare(final Object oleft, final Object oright) {            final Option left = (Option)oleft;            final Option right = (Option)oright;            return left.getPreferredName().compareTo(right.getPreferredName());        }    }    /**     * Orders Options grouping required Options first     *     * @see Option#isRequired()     * @return a new comparator     */    public static Comparator requiredFirst() {        return new Required();    }    /**     * Orders Options grouping required Options last     *     * @see Option#isRequired()     * @return a new comparator     */    public static Comparator requiredLast() {        return reverse(requiredFirst());    }    private static class Required implements Comparator {        public int compare(final Object oleft, final Object oright) {            final Option left = (Option)oleft;            final Option right = (Option)oright;            final boolean l = left.isRequired();            final boolean r = right.isRequired();            if (l ^ r) {                if (l) {                    return -1;                }                return 1;            }            return 0;        }    }}"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,17,ackage org.apache.commons.cli2.util;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,19,mport java.io.PrintWriter;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,21,mport java.util.ArrayList;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,22,mport java.util.Collections;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,23,mport java.util.Comparator;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,24,mport java.util.HashSet;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,25,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,26,mport java.util.List;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,27,mport java.util.Set;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,29,mport org.apache.commons.cli2.DisplaySetting;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,30,mport org.apache.commons.cli2.Group;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,31,mport org.apache.commons.cli2.HelpLine;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,32,mport org.apache.commons.cli2.Option;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,33,mport org.apache.commons.cli2.OptionException;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,34,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,35,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,38, Presents on screen help based on the application's Options
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,40,ublic class HelpFormatter {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,42, The default screen width
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,44,ublic static final int DEFAULT_FULL_WIDTH = 80;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,47, The default screen furniture left of screen
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,49,"ublic static final String DEFAULT_GUTTER_LEFT = """";"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,52, The default screen furniture right of screen
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,54,"ublic static final String DEFAULT_GUTTER_CENTER = ""    "";"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,57, The default screen furniture between columns
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,59,"ublic static final String DEFAULT_GUTTER_RIGHT = """";"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,62, The default DisplaySettings used to select the elements to display in the
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,63, displayed line of full usage information.
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,65, @see DisplaySetting
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,67,ublic static final Set DEFAULT_FULL_USAGE_SETTINGS;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,70, The default DisplaySettings used to select the elements of usage per help
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,71, line in the main body of help
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,73, @see DisplaySetting
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,75,ublic static final Set DEFAULT_LINE_USAGE_SETTINGS;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,78, The default DisplaySettings used to select the help lines in the main
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,79, body of help
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,81,ublic static final Set DEFAULT_DISPLAY_USAGE_SETTINGS;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,83,tatic {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,84,inal Set fullUsage = new HashSet(DisplaySetting.ALL);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,85,ullUsage.remove(DisplaySetting.DISPLAY_ALIASES);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,86,ullUsage.remove(DisplaySetting.DISPLAY_GROUP_NAME);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,87,EFAULT_FULL_USAGE_SETTINGS = Collections.unmodifiableSet(fullUsage);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,89,inal Set lineUsage = new HashSet();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,90,ineUsage.add(DisplaySetting.DISPLAY_ALIASES);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,91,ineUsage.add(DisplaySetting.DISPLAY_GROUP_NAME);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,92,ineUsage.add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,93,EFAULT_LINE_USAGE_SETTINGS = Collections.unmodifiableSet(lineUsage);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,95,inal Set displayUsage = new HashSet(DisplaySetting.ALL);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,96,isplayUsage.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,97,EFAULT_DISPLAY_USAGE_SETTINGS = Collections.unmodifiableSet(displayUsage);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,100,rivate Set fullUsageSettings = new HashSet(DEFAULT_FULL_USAGE_SETTINGS);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,101,rivate Set lineUsageSettings = new HashSet(DEFAULT_LINE_USAGE_SETTINGS);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,102,rivate Set displaySettings = new HashSet(DEFAULT_DISPLAY_USAGE_SETTINGS);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,103,rivate OptionException exception = null;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,104,rivate Group group;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,105,rivate Comparator comparator = null;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,106,rivate String divider = null;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,107,rivate String header = null;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,108,rivate String footer = null;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,109,"rivate String shellCommand = """";"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,110,rivate PrintWriter out = new PrintWriter(System.out);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,112,/or should this default to .err?
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,113,rivate final String gutterLeft;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,114,rivate final String gutterCenter;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,115,rivate final String gutterRight;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,116,rivate final int pageWidth;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,119, Creates a new HelpFormatter using the defaults
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,121,ublic HelpFormatter() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,122,"his(DEFAULT_GUTTER_LEFT, DEFAULT_GUTTER_CENTER, DEFAULT_GUTTER_RIGHT, DEFAULT_FULL_WIDTH);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,126, Creates a new HelpFormatter using the specified parameters
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,127, @param gutterLeft the string marking left of screen
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,128, @param gutterCenter the string marking center of screen
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,129, @param gutterRight the string marking right of screen
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,130, @param fullWidth the width of the screen
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,132,"ublic HelpFormatter(final String gutterLeft,"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,133,"inal String gutterCenter,"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,134,"inal String gutterRight,"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,135,inal int fullWidth) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,136,/ default the left gutter to empty string
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,137,his.gutterLeft = (gutterLeft == null) ? DEFAULT_GUTTER_LEFT : gutterLeft;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,139,/ default the center gutter to a single space
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,140,his.gutterCenter = (gutterCenter == null) ? DEFAULT_GUTTER_CENTER : gutterCenter;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,142,/ default the right gutter to empty string
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,143,his.gutterRight = (gutterRight == null) ? DEFAULT_GUTTER_RIGHT : gutterRight;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,145,/ calculate the available page width
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,146,his.pageWidth = fullWidth - this.gutterLeft.length() - this.gutterRight.length();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,148,/ check available page width is valid
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,149,nt availableWidth = fullWidth - pageWidth + this.gutterCenter.length();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,151,f (availableWidth < 2) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,152,hrow new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.HELPFORMATTER_GUTTER_TOO_LONG));
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,157, Prints the Option help.
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,159,ublic void print() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,160,rintHeader();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,161,rintException();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,162,rintUsage();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,163,rintHelp();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,164,rintFooter();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,165,ut.flush();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,169, Prints any error message.
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,171,ublic void printException() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,172,f (exception != null) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,173,rintDivider();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,174,rintWrapped(exception.getMessage());
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,179, Prints detailed help per option.
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,181,ublic void printHelp() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,182,rintDivider();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,184,inal Option option;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,186,f ((exception != null) && (exception.getOption() != null)) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,187,ption = exception.getOption();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,188, else {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,189,ption = group;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,192,/ grab the HelpLines to display
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,193,"inal List helpLines = option.helpLines(0, displaySettings, comparator);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,195,/ calculate the maximum width of the usage strings
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,196,nt usageWidth = 0;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,198,or (final Iterator i = helpLines.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,199,inal HelpLine helpLine = (HelpLine) i.next();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,200,"inal String usage = helpLine.usage(lineUsageSettings, comparator);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,201,"sageWidth = Math.max(usageWidth, usage.length());"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,204,/ build a blank string to pad wrapped descriptions
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,205,inal StringBuffer blankBuffer = new StringBuffer();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,207,or (int i = 0; i < usageWidth; i++) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,208,lankBuffer.append(' ');
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,211,/ determine the width available for descriptions
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,212,"inal int descriptionWidth = Math.max(1, pageWidth - gutterCenter.length() - usageWidth);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,214,/ display each HelpLine
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,215,or (final Iterator i = helpLines.iterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,216,/ grab the HelpLine
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,217,inal HelpLine helpLine = (HelpLine) i.next();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,219,/ wrap the description
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,220,"inal List descList = wrap(helpLine.getDescription(), descriptionWidth);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,221,inal Iterator descriptionIterator = descList.iterator();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,223,/ display usage + first line of description
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,224,rintGutterLeft();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,225,"ad(helpLine.usage(lineUsageSettings, comparator), usageWidth, out);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,226,ut.print(gutterCenter);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,227,"ad((String) descriptionIterator.next(), descriptionWidth, out);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,228,rintGutterRight();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,229,ut.println();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,231,/ display padding + remaining lines of description
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,232,hile (descriptionIterator.hasNext()) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,233,rintGutterLeft();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,235,"/pad(helpLine.getUsage(),usageWidth,out);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,236,ut.print(blankBuffer);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,237,ut.print(gutterCenter);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,238,"ad((String) descriptionIterator.next(), descriptionWidth, out);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,239,rintGutterRight();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,240,ut.println();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,244,rintDivider();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,248, Prints a single line of usage information (wrapping if necessary)
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,250,ublic void printUsage() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,251,rintDivider();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,253,"inal StringBuffer buffer = new StringBuffer(""Usage:\n"");"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,254,uffer.append(shellCommand).append(' ');
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,255,"roup.appendUsage(buffer, fullUsageSettings, comparator, "" "");"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,256,rintWrapped(buffer.toString());
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,260, Prints a header string if necessary
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,262,ublic void printHeader() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,263,f (header != null) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,264,rintDivider();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,265,rintWrapped(header);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,270, Prints a footer string if necessary
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,272,ublic void printFooter() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,273,f (footer != null) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,274,rintWrapped(footer);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,275,rintDivider();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,280, Prints a string wrapped if necessary
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,281, @param text the string to wrap
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,283,ublic void printWrapped(final String text) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,284,"or (final Iterator i = wrap(text, pageWidth).iterator(); i.hasNext();) {"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,285,rintGutterLeft();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,286,"ad((String) i.next(), pageWidth, out);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,287,rintGutterRight();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,288,ut.println();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,291,ut.flush();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,295, Prints the left gutter string
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,297,ublic void printGutterLeft() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,298,f (gutterLeft != null) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,299,ut.print(gutterLeft);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,304, Prints the right gutter string
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,306,ublic void printGutterRight() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,307,f (gutterRight != null) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,308,ut.print(gutterRight);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,313, Prints the divider text
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,315,ublic void printDivider() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,316,f (divider != null) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,317,ut.println(divider);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,321,"rotected static void pad(final String text,"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,322,"inal int width,"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,323,inal PrintWriter writer) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,324,inal int left;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,326,/ write the text and record how many characters written
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,327,f (text == null) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,328,eft = 0;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,329, else {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,330,riter.write(text);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,331,eft = text.length();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,334,/ pad remainder with spaces
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,335,or (int i = left; i < width; ++i) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,336,riter.write(' ');
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,340,"rotected static List wrap(final String text,"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,341,inal int width) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,342,/ check for valid width
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,343,f (width < 1) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,344,"hrow new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.HELPFORMATTER_WIDTH_TOO_NARROW,"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,345,ew Object[] {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,346,ew Integer(width)
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,350,/ handle degenerate case
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,351,f (text == null) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,352,"eturn Collections.singletonList("""");"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,355,inal List lines = new ArrayList();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,356,inal char[] chars = text.toCharArray();
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,357,nt left = 0;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,359,/ for each character in the string
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,360,hile (left < chars.length) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,361,/ sync left and right indeces
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,362,nt right = left;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,364,"/ move right until we run out of characters, width or find a newline"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,365,hile ((right < chars.length) && (chars[right] != '\n') &&
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,366,right < (left + width + 1))) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,367,ight++;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,370,/ if a newline was found
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,371,f ((right < chars.length) && (chars[right] == '\n')) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,372,/ record the substring
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,373,"inal String line = new String(chars, left, right - left);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,374,ines.add(line);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,376,/ move to the end of the substring
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,377,eft = right + 1;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,379,f (left == chars.length) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,380,"ines.add("""");"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,383,/ restart the loop
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,384,ontinue;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,387,/ move to the next ideal wrap point
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,388,ight = (left + width) - 1;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,390,/ if we have run out of characters
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,391,f (chars.length <= right) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,392,/ record the substring
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,393,"inal String line = new String(chars, left, chars.length - left);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,394,ines.add(line);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,396,/ abort the loop
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,397,reak;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,400,/ back track the substring end until a space is found
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,401,hile ((right >= left) && (chars[right] != ' ')) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,402,ight--;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,405,/ if a space was found
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,406,f (right >= left) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,407,/ record the substring to space
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,408,"inal String line = new String(chars, left, right - left);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,409,ines.add(line);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,411,/ absorb all the spaces before next substring
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,412,hile ((right < chars.length) && (chars[right] == ' ')) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,413,ight++;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,416,eft = right;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,418,/ restart the loop
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,419,ontinue;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,422,/ move to the wrap position irrespective of spaces
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,423,"ight = Math.min(left + width, chars.length);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,425,/ record the substring
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,426,"inal String line = new String(chars, left, right - left);"
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,427,ines.add(line);
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,429,/ absorb any the spaces before next substring
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,430,hile ((right < chars.length) && (chars[right] == ' ')) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,431,ight++;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,434,eft = right;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,437,eturn lines;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,441, The Comparator to use when sorting Options
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,442, @param comparator Comparator to use when sorting Options
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,444,ublic void setComparator(Comparator comparator) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,445,his.comparator = comparator;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,449, The DisplaySettings used to select the help lines in the main body of
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,450, help
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,452, @param displaySettings the settings to use
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,453, @see DisplaySetting
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,455,ublic void setDisplaySettings(Set displaySettings) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,456,his.displaySettings = displaySettings;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,460, Sets the string to use as a divider between sections of help
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,461, @param divider the dividing string
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,463,ublic void setDivider(String divider) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,464,his.divider = divider;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,468, Sets the exception to document
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,469, @param exception the exception that occured
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,471,ublic void setException(OptionException exception) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,472,his.exception = exception;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,476, Sets the footer text of the help screen
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,477, @param footer the footer text
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,479,ublic void setFooter(String footer) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,480,his.footer = footer;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,484, The DisplaySettings used to select the elements to display in the
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,485, displayed line of full usage information.
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,486, @see DisplaySetting
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,487, @param fullUsageSettings
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,489,ublic void setFullUsageSettings(Set fullUsageSettings) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,490,his.fullUsageSettings = fullUsageSettings;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,494, Sets the Group of Options to document
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,495, @param group the options to document
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,497,ublic void setGroup(Group group) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,498,his.group = group;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,502, Sets the footer text of the help screen
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,503, @param header the footer text
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,505,ublic void setHeader(String header) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,506,his.header = header;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,510, Sets the DisplaySettings used to select elements in the per helpline
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,511, usage strings.
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,512, @see DisplaySetting
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,513, @param lineUsageSettings the DisplaySettings to use
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,515,ublic void setLineUsageSettings(Set lineUsageSettings) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,516,his.lineUsageSettings = lineUsageSettings;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,520, Sets the command string used to invoke the application
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,521, @param shellCommand the invokation command
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,523,ublic void setShellCommand(String shellCommand) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,524,his.shellCommand = shellCommand;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,528, @return the Comparator used to sort the Group
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,530,ublic Comparator getComparator() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,531,eturn comparator;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,535, @return the DisplaySettings used to select HelpLines
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,537,ublic Set getDisplaySettings() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,538,eturn displaySettings;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,542, @return the String used as a horizontal section divider
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,544,ublic String getDivider() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,545,eturn divider;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,549, @return the Exception being documented by this HelpFormatter
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,551,ublic OptionException getException() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,552,eturn exception;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,556, @return the help screen footer text
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,558,ublic String getFooter() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,559,eturn footer;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,563, @return the DisplaySettings used in the full usage string
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,565,ublic Set getFullUsageSettings() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,566,eturn fullUsageSettings;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,570, @return the group documented by this HelpFormatter
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,572,ublic Group getGroup() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,573,eturn group;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,577, @return the String used as the central gutter
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,579,ublic String getGutterCenter() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,580,eturn gutterCenter;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,584, @return the String used as the left gutter
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,586,ublic String getGutterLeft() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,587,eturn gutterLeft;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,591, @return the String used as the right gutter
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,593,ublic String getGutterRight() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,594,eturn gutterRight;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,598, @return the help screen header text
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,600,ublic String getHeader() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,601,eturn header;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,605, @return the DisplaySettings used in the per help line usage strings
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,607,ublic Set getLineUsageSettings() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,608,eturn lineUsageSettings;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,612, @return the width of the screen in characters
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,614,ublic int getPageWidth() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,615,eturn pageWidth;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,619, @return the command used to execute the application
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,621,ublic String getShellCommand() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,622,eturn shellCommand;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,626, @param out the PrintWriter to write to
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,628,ublic void setPrintWriter(PrintWriter out) {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,629,his.out = out;
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,633, @return the PrintWriter that will be written to
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,635,ublic PrintWriter getPrintWriter() {
False,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,636,eturn out;
True,src/java/org/apache/commons/cli2/util/HelpFormatter.java,src/java/org/apache/commons/cli2/util/HelpFormatter.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.util;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * Presents on screen help based on the application's Options */public class HelpFormatter {    /**     * The default screen width     */    public static final int DEFAULT_FULL_WIDTH = 80;    /**     * The default screen furniture left of screen     */    public static final String DEFAULT_GUTTER_LEFT = """";    /**     * The default screen furniture right of screen     */    public static final String DEFAULT_GUTTER_CENTER = ""    "";    /**     * The default screen furniture between columns     */    public static final String DEFAULT_GUTTER_RIGHT = """";    /**     * The default DisplaySettings used to select the elements to display in the     * displayed line of full usage information.     *     * @see DisplaySetting     */    public static final Set DEFAULT_FULL_USAGE_SETTINGS;    /**     * The default DisplaySettings used to select the elements of usage per help     * line in the main body of help     *     * @see DisplaySetting     */    public static final Set DEFAULT_LINE_USAGE_SETTINGS;    /**     * The default DisplaySettings used to select the help lines in the main     * body of help     */    public static final Set DEFAULT_DISPLAY_USAGE_SETTINGS;    static {        final Set fullUsage = new HashSet(DisplaySetting.ALL);        fullUsage.remove(DisplaySetting.DISPLAY_ALIASES);        fullUsage.remove(DisplaySetting.DISPLAY_GROUP_NAME);        DEFAULT_FULL_USAGE_SETTINGS = Collections.unmodifiableSet(fullUsage);        final Set lineUsage = new HashSet();        lineUsage.add(DisplaySetting.DISPLAY_ALIASES);        lineUsage.add(DisplaySetting.DISPLAY_GROUP_NAME);        lineUsage.add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        DEFAULT_LINE_USAGE_SETTINGS = Collections.unmodifiableSet(lineUsage);        final Set displayUsage = new HashSet(DisplaySetting.ALL);        displayUsage.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        DEFAULT_DISPLAY_USAGE_SETTINGS = Collections.unmodifiableSet(displayUsage);    }    private Set fullUsageSettings = new HashSet(DEFAULT_FULL_USAGE_SETTINGS);    private Set lineUsageSettings = new HashSet(DEFAULT_LINE_USAGE_SETTINGS);    private Set displaySettings = new HashSet(DEFAULT_DISPLAY_USAGE_SETTINGS);    private OptionException exception = null;    private Group group;    private Comparator comparator = null;    private String divider = null;    private String header = null;    private String footer = null;    private String shellCommand = """";    private PrintWriter out = new PrintWriter(System.out);    //or should this default to .err?    private final String gutterLeft;    private final String gutterCenter;    private final String gutterRight;    private final int pageWidth;    /**     * Creates a new HelpFormatter using the defaults     */    public HelpFormatter() {        this(DEFAULT_GUTTER_LEFT, DEFAULT_GUTTER_CENTER, DEFAULT_GUTTER_RIGHT, DEFAULT_FULL_WIDTH);    }    /**     * Creates a new HelpFormatter using the specified parameters     * @param gutterLeft the string marking left of screen     * @param gutterCenter the string marking center of screen     * @param gutterRight the string marking right of screen     * @param fullWidth the width of the screen     */    public HelpFormatter(final String gutterLeft,                         final String gutterCenter,                         final String gutterRight,                         final int fullWidth) {        // default the left gutter to empty string        this.gutterLeft = (gutterLeft == null) ? DEFAULT_GUTTER_LEFT : gutterLeft;        // default the center gutter to a single space        this.gutterCenter = (gutterCenter == null) ? DEFAULT_GUTTER_CENTER : gutterCenter;        // default the right gutter to empty string        this.gutterRight = (gutterRight == null) ? DEFAULT_GUTTER_RIGHT : gutterRight;        // calculate the available page width        this.pageWidth = fullWidth - this.gutterLeft.length() - this.gutterRight.length();        // check available page width is valid        int availableWidth = fullWidth - pageWidth + this.gutterCenter.length();        if (availableWidth < 2) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.HELPFORMATTER_GUTTER_TOO_LONG));        }    }    /**     * Prints the Option help.     */    public void print() {        printHeader();        printException();        printUsage();        printHelp();        printFooter();        out.flush();    }    /**     * Prints any error message.     */    public void printException() {        if (exception != null) {            printDivider();            printWrapped(exception.getMessage());        }    }    /**     * Prints detailed help per option.     */    public void printHelp() {        printDivider();        final Option option;        if ((exception != null) && (exception.getOption() != null)) {            option = exception.getOption();        } else {            option = group;        }        // grab the HelpLines to display        final List helpLines = option.helpLines(0, displaySettings, comparator);        // calculate the maximum width of the usage strings        int usageWidth = 0;        for (final Iterator i = helpLines.iterator(); i.hasNext();) {            final HelpLine helpLine = (HelpLine) i.next();            final String usage = helpLine.usage(lineUsageSettings, comparator);            usageWidth = Math.max(usageWidth, usage.length());        }        // build a blank string to pad wrapped descriptions        final StringBuffer blankBuffer = new StringBuffer();        for (int i = 0; i < usageWidth; i++) {            blankBuffer.append(' ');        }        // determine the width available for descriptions        final int descriptionWidth = Math.max(1, pageWidth - gutterCenter.length() - usageWidth);        // display each HelpLine        for (final Iterator i = helpLines.iterator(); i.hasNext();) {            // grab the HelpLine            final HelpLine helpLine = (HelpLine) i.next();            // wrap the description            final List descList = wrap(helpLine.getDescription(), descriptionWidth);            final Iterator descriptionIterator = descList.iterator();            // display usage + first line of description            printGutterLeft();            pad(helpLine.usage(lineUsageSettings, comparator), usageWidth, out);            out.print(gutterCenter);            pad((String) descriptionIterator.next(), descriptionWidth, out);            printGutterRight();            out.println();            // display padding + remaining lines of description            while (descriptionIterator.hasNext()) {                printGutterLeft();                //pad(helpLine.getUsage(),usageWidth,out);                out.print(blankBuffer);                out.print(gutterCenter);                pad((String) descriptionIterator.next(), descriptionWidth, out);                printGutterRight();                out.println();            }        }        printDivider();    }    /**     * Prints a single line of usage information (wrapping if necessary)     */    public void printUsage() {        printDivider();        final StringBuffer buffer = new StringBuffer(""Usage:\n"");        buffer.append(shellCommand).append(' ');        group.appendUsage(buffer, fullUsageSettings, comparator, "" "");        printWrapped(buffer.toString());    }    /**     * Prints a header string if necessary     */    public void printHeader() {        if (header != null) {            printDivider();            printWrapped(header);        }    }    /**     * Prints a footer string if necessary     */    public void printFooter() {        if (footer != null) {            printWrapped(footer);            printDivider();        }    }    /**     * Prints a string wrapped if necessary     * @param text the string to wrap     */    public void printWrapped(final String text) {        for (final Iterator i = wrap(text, pageWidth).iterator(); i.hasNext();) {            printGutterLeft();            pad((String) i.next(), pageWidth, out);            printGutterRight();            out.println();        }        out.flush();    }    /**     * Prints the left gutter string     */    public void printGutterLeft() {        if (gutterLeft != null) {            out.print(gutterLeft);        }    }    /**     * Prints the right gutter string     */    public void printGutterRight() {        if (gutterRight != null) {            out.print(gutterRight);        }    }    /**     * Prints the divider text     */    public void printDivider() {        if (divider != null) {            out.println(divider);        }    }    protected static void pad(final String text,                              final int width,                              final PrintWriter writer) {        final int left;        // write the text and record how many characters written        if (text == null) {            left = 0;        } else {            writer.write(text);            left = text.length();        }        // pad remainder with spaces        for (int i = left; i < width; ++i) {            writer.write(' ');        }    }    protected static List wrap(final String text,                               final int width) {        // check for valid width        if (width < 1) {            throw new IllegalArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.HELPFORMATTER_WIDTH_TOO_NARROW,                                                                                             new Object[] {                                                                                                 new Integer(width)                                                                                             }));        }        // handle degenerate case        if (text == null) {            return Collections.singletonList("""");        }        final List lines = new ArrayList();        final char[] chars = text.toCharArray();        int left = 0;        // for each character in the string        while (left < chars.length) {            // sync left and right indeces            int right = left;            // move right until we run out of characters, width or find a newline            while ((right < chars.length) && (chars[right] != '\n') &&                       (right < (left + width + 1))) {                right++;            }            // if a newline was found            if ((right < chars.length) && (chars[right] == '\n')) {                // record the substring                final String line = new String(chars, left, right - left);                lines.add(line);                // move to the end of the substring                left = right + 1;                if (left == chars.length) {                    lines.add("""");                }                // restart the loop                continue;            }            // move to the next ideal wrap point            right = (left + width) - 1;            // if we have run out of characters            if (chars.length <= right) {                // record the substring                final String line = new String(chars, left, chars.length - left);                lines.add(line);                // abort the loop                break;            }            // back track the substring end until a space is found            while ((right >= left) && (chars[right] != ' ')) {                right--;            }            // if a space was found            if (right >= left) {                // record the substring to space                final String line = new String(chars, left, right - left);                lines.add(line);                // absorb all the spaces before next substring                while ((right < chars.length) && (chars[right] == ' ')) {                    right++;                }                left = right;                // restart the loop                continue;            }            // move to the wrap position irrespective of spaces            right = Math.min(left + width, chars.length);            // record the substring            final String line = new String(chars, left, right - left);            lines.add(line);            // absorb any the spaces before next substring            while ((right < chars.length) && (chars[right] == ' ')) {                right++;            }            left = right;        }        return lines;    }    /**     * The Comparator to use when sorting Options     * @param comparator Comparator to use when sorting Options     */    public void setComparator(Comparator comparator) {        this.comparator = comparator;    }    /**     * The DisplaySettings used to select the help lines in the main body of     * help     *     * @param displaySettings the settings to use     * @see DisplaySetting     */    public void setDisplaySettings(Set displaySettings) {        this.displaySettings = displaySettings;    }    /**     * Sets the string to use as a divider between sections of help     * @param divider the dividing string     */    public void setDivider(String divider) {        this.divider = divider;    }    /**     * Sets the exception to document     * @param exception the exception that occured     */    public void setException(OptionException exception) {        this.exception = exception;    }    /**     * Sets the footer text of the help screen     * @param footer the footer text     */    public void setFooter(String footer) {        this.footer = footer;    }    /**     * The DisplaySettings used to select the elements to display in the     * displayed line of full usage information.     * @see DisplaySetting     * @param fullUsageSettings     */    public void setFullUsageSettings(Set fullUsageSettings) {        this.fullUsageSettings = fullUsageSettings;    }    /**     * Sets the Group of Options to document     * @param group the options to document     */    public void setGroup(Group group) {        this.group = group;    }    /**     * Sets the footer text of the help screen     * @param header the footer text     */    public void setHeader(String header) {        this.header = header;    }    /**     * Sets the DisplaySettings used to select elements in the per helpline     * usage strings.     * @see DisplaySetting     * @param lineUsageSettings the DisplaySettings to use     */    public void setLineUsageSettings(Set lineUsageSettings) {        this.lineUsageSettings = lineUsageSettings;    }    /**     * Sets the command string used to invoke the application     * @param shellCommand the invokation command     */    public void setShellCommand(String shellCommand) {        this.shellCommand = shellCommand;    }    /**     * @return the Comparator used to sort the Group     */    public Comparator getComparator() {        return comparator;    }    /**     * @return the DisplaySettings used to select HelpLines     */    public Set getDisplaySettings() {        return displaySettings;    }    /**     * @return the String used as a horizontal section divider     */    public String getDivider() {        return divider;    }    /**     * @return the Exception being documented by this HelpFormatter     */    public OptionException getException() {        return exception;    }    /**     * @return the help screen footer text     */    public String getFooter() {        return footer;    }    /**     * @return the DisplaySettings used in the full usage string     */    public Set getFullUsageSettings() {        return fullUsageSettings;    }    /**     * @return the group documented by this HelpFormatter     */    public Group getGroup() {        return group;    }    /**     * @return the String used as the central gutter     */    public String getGutterCenter() {        return gutterCenter;    }    /**     * @return the String used as the left gutter     */    public String getGutterLeft() {        return gutterLeft;    }    /**     * @return the String used as the right gutter     */    public String getGutterRight() {        return gutterRight;    }    /**     * @return the help screen header text     */    public String getHeader() {        return header;    }    /**     * @return the DisplaySettings used in the per help line usage strings     */    public Set getLineUsageSettings() {        return lineUsageSettings;    }    /**     * @return the width of the screen in characters     */    public int getPageWidth() {        return pageWidth;    }    /**     * @return the command used to execute the application     */    public String getShellCommand() {        return shellCommand;    }    /**     * @param out the PrintWriter to write to     */    public void setPrintWriter(PrintWriter out) {        this.out = out;    }    /**     * @return the PrintWriter that will be written to     */    public PrintWriter getPrintWriter() {        return out;    }}"
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,17,ackage org.apache.commons.cli2.validation;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,19,mport java.util.List;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,20,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,22,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,23,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,26, The <code>ClassValidator</code> validates the string argument
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,27, values are class names.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,29, The following example shows how to validate the 'logger'
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,30," argument value is a class name, that can be instantiated."
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,32, <pre>
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,34, ClassValidator validator = new ClassValidator();
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,35, validator.setInstance(true);
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,37, ArgumentBuilder builder = new ArgumentBuilder();
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,38, Argument logger =
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,39,"     builder.withName(""logger"");"
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,40,            .withValidator(validator);
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,41, </pre>
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,43, @author John Keyes
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,45,ublic class ClassValidator implements Validator {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,46,** i18n */
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,47,rivate static final ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,49,** whether the class argument is loadable */
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,50,rivate boolean loadable;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,52,** whether to create an instance of the class */
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,53,rivate boolean instance;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,55,** the classloader to load classes from */
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,56,rivate ClassLoader loader;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,59, Validate each argument value in the specified List against this instances
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,60, permitted attributes.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,62, If a value is valid then it's <code>String</code> value in the list is
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,63, replaced with it's <code>Class</code> value or instance.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,65, @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,67,ublic void validate(final List values)
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,68,hrows InvalidArgumentException {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,69,or (final ListIterator i = values.listIterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,70,inal String name = (String) i.next();
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,72,f (!isPotentialClassName(name)) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,73,"hrow new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_BAD_CLASSNAME,"
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,74,ame));
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,77,f (loadable || instance) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,78,inal ClassLoader theLoader = getClassLoader();
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,80,ry {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,81,inal Class clazz = theLoader.loadClass(name);
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,83,f (instance) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,84,.set(clazz.newInstance());
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,85, else {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,86,.set(clazz);
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,88, catch (final ClassNotFoundException exp) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,89,"hrow new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_NOTFOUND,"
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,90,ame));
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,91, catch (final IllegalAccessException exp) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,92,"hrow new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_ACCESS,"
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,93,"ame, exp.getMessage()));"
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,94, catch (final InstantiationException exp) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,95,"hrow new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_CREATE,"
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,96,ame));
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,103, Returns whether the argument value must represent a
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,104, class that is loadable.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,106, @return whether the argument value must represent a
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,107, class that is loadable.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,109,ublic boolean isLoadable() {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,110,eturn loadable;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,114, Specifies whether the argument value must represent a
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,115, class that is loadable.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,117, @param loadable whether the argument value must
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,118, represent a class that is loadable.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,120,ublic void setLoadable(boolean loadable) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,121,his.loadable = loadable;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,125, Returns the {@link ClassLoader} used to resolve and load
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,126, the classes specified by the argument values.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,128, @return the {@link ClassLoader} used to resolve and load
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,129, the classes specified by the argument values.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,131,ublic ClassLoader getClassLoader() {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,132,f (loader == null) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,133,oader = getClass().getClassLoader();
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,136,eturn loader;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,140, Specifies the {@link ClassLoader} used to resolve and load
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,141, the classes specified by the argument values.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,143, @param loader the {@link ClassLoader} used to resolve and load
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,144, the classes specified by the argument values.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,146,ublic void setClassLoader(ClassLoader loader) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,147,his.loader = loader;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,151, Returns whether the argument value must represent a
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,152, class that can be instantiated.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,154, @return whether the argument value must represent a
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,155, class that can be instantiated.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,157,ublic boolean isInstance() {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,158,eturn instance;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,162, Specifies whether the argument value must represent a
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,163, class that can be instantiated.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,165, @param instance whether the argument value must
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,166, represent a class that can be instantiated.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,168,ublic void setInstance(boolean instance) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,169,his.instance = instance;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,173, Returns whether the specified name is allowed as
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,174, a Java class name.
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,176,rotected boolean isPotentialClassName(final String name) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,177,inal char[] chars = name.toCharArray();
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,179,oolean expectingStart = true;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,181,or (int i = 0; i < chars.length; ++i) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,182,inal char c = chars[i];
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,184,f (expectingStart) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,185,f (!Character.isJavaIdentifierStart(c)) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,186,eturn false;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,189,xpectingStart = false;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,190, else {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,191,f (c == '.') {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,192,xpectingStart = true;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,193, else if (!Character.isJavaIdentifierPart(c)) {
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,194,eturn false;
False,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,199,eturn !expectingStart;
True,src/java/org/apache/commons/cli2/validation/ClassValidator.java,src/java/org/apache/commons/cli2/validation/ClassValidator.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.util.List;import java.util.ListIterator;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * The <code>ClassValidator</code> validates the string argument * values are class names. * * The following example shows how to validate the 'logger' * argument value is a class name, that can be instantiated. * * <pre> * ... * ClassValidator validator = new ClassValidator(); * validator.setInstance(true); * * ArgumentBuilder builder = new ArgumentBuilder(); * Argument logger = *     builder.withName(""logger""); *            .withValidator(validator); * </pre> * * @author John Keyes */public class ClassValidator implements Validator {    /** i18n */    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    /** whether the class argument is loadable */    private boolean loadable;    /** whether to create an instance of the class */    private boolean instance;    /** the classloader to load classes from */    private ClassLoader loader;    /**     * Validate each argument value in the specified List against this instances     * permitted attributes.     *     * If a value is valid then it's <code>String</code> value in the list is     * replaced with it's <code>Class</code> value or instance.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values)        throws InvalidArgumentException {        for (final ListIterator i = values.listIterator(); i.hasNext();) {            final String name = (String) i.next();            if (!isPotentialClassName(name)) {                throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_BAD_CLASSNAME,                                                                        name));            }            if (loadable || instance) {                final ClassLoader theLoader = getClassLoader();                try {                    final Class clazz = theLoader.loadClass(name);                    if (instance) {                        i.set(clazz.newInstance());                    } else {                        i.set(clazz);                    }                } catch (final ClassNotFoundException exp) {                    throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_NOTFOUND,                                                                            name));                } catch (final IllegalAccessException exp) {                    throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_ACCESS,                                                                            name, exp.getMessage()));                } catch (final InstantiationException exp) {                    throw new InvalidArgumentException(resources.getMessage(ResourceConstants.CLASSVALIDATOR_CLASS_CREATE,                                                                            name));                }            }        }    }    /**     * Returns whether the argument value must represent a     * class that is loadable.     *     * @return whether the argument value must represent a     * class that is loadable.     */    public boolean isLoadable() {        return loadable;    }    /**     * Specifies whether the argument value must represent a     * class that is loadable.     *     * @param loadable whether the argument value must     * represent a class that is loadable.     */    public void setLoadable(boolean loadable) {        this.loadable = loadable;    }    /**     * Returns the {@link ClassLoader} used to resolve and load     * the classes specified by the argument values.     *     * @return the {@link ClassLoader} used to resolve and load     * the classes specified by the argument values.     */    public ClassLoader getClassLoader() {        if (loader == null) {            loader = getClass().getClassLoader();        }        return loader;    }    /**     * Specifies the {@link ClassLoader} used to resolve and load     * the classes specified by the argument values.     *     * @param loader the {@link ClassLoader} used to resolve and load     * the classes specified by the argument values.     */    public void setClassLoader(ClassLoader loader) {        this.loader = loader;    }    /**     * Returns whether the argument value must represent a     * class that can be instantiated.     *     * @return whether the argument value must represent a     * class that can be instantiated.     */    public boolean isInstance() {        return instance;    }    /**     * Specifies whether the argument value must represent a     * class that can be instantiated.     *     * @param instance whether the argument value must     * represent a class that can be instantiated.     */    public void setInstance(boolean instance) {        this.instance = instance;    }    /**     * Returns whether the specified name is allowed as     * a Java class name.     */    protected boolean isPotentialClassName(final String name) {        final char[] chars = name.toCharArray();        boolean expectingStart = true;        for (int i = 0; i < chars.length; ++i) {            final char c = chars[i];            if (expectingStart) {                if (!Character.isJavaIdentifierStart(c)) {                    return false;                }                expectingStart = false;            } else {                if (c == '.') {                    expectingStart = true;                } else if (!Character.isJavaIdentifierPart(c)) {                    return false;                }            }        }        return !expectingStart;    }}"
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,17,ackage org.apache.commons.cli2.validation;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,19,mport java.text.DateFormat;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,20,mport java.text.ParsePosition;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,22,mport java.util.Date;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,23,mport java.util.List;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,24,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,26,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,27,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,30, The <code>DateValidator</code> validates the argument values
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,31, are date or time value(s).
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,33, The following example shows how to validate that
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,34, an argument value(s) is a Date of the following
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,35, type: d/M/yy (see {@link java.text.DateFormat}).
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,37, <pre>
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,38," DateFormat date = new SimpleDateFormat(""d/M/yy"");"
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,40, ArgumentBuilder builder = new ArgumentBuilder();
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,41, Argument dateFormat =
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,42,"     builder.withName(""date"");"
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,43,            .withValidator(new DateValidator(dateFormat));
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,44, </pre>
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,46, The following example shows how to validate that
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,47, an argument value(s) is a time of the following
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,48, type: HH:mm:ss (see {@link java.text.DateFormat}).
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,50, <pre>
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,51," DateFormat timeFormat = new SimpleDateFormat(""HH:mm:ss"");"
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,53, ArgumentBuilder builder = new ArgumentBuilder();
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,54, Argument time =
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,55,"     builder.withName(""time"");"
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,56,            .withValidator(new DateValidator(timeFormat));
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,57, </pre>
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,59, @author John Keyes
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,61, @see java.text.DateFormat
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,63,ublic class DateValidator implements Validator {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,64,** i18n */
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,65,rivate static final ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,67,** an array of permitted DateFormats */
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,68,rivate DateFormat[] formats;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,70,** minimum Date allowed i.e: a valid date occurs later than this date */
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,71,rivate Date minimum;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,73,** maximum Date allowed i.e: a valid date occurs earlier than this date */
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,74,rivate Date maximum;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,76,** leniant parsing */
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,77,rivate boolean isLenient;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,80, Creates a Validator for the default date/time format
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,82,ublic DateValidator() {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,83,his(DateFormat.getInstance());
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,87, Creates a Validator for the specified DateFormat.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,89, @param format
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,90,            a DateFormat which dates must conform to
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,92,ublic DateValidator(final DateFormat format) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,93,etFormat(format);
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,97, Creates a Validator for the List of specified DateFormats.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,99, @param formats
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,100,            a List of DateFormats which dates must conform to
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,102,ublic DateValidator(final List formats) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,103,etFormats(formats);
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,107, Creates a Validator for dates.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,109, @return DateValidator a Validator for dates
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,111,ublic static DateValidator getDateInstance() {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,112,eturn new DateValidator(DateFormat.getDateInstance());
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,116, Creates a Validator for times.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,118, @return DateValidator a Validator for times
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,120,ublic static DateValidator getTimeInstance() {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,121,eturn new DateValidator(DateFormat.getTimeInstance());
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,125, Creates a Validator for date/times
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,127, @return DateValidator a Validator for date/times
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,129,ublic static DateValidator getDateTimeInstance() {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,130,eturn new DateValidator(DateFormat.getDateTimeInstance());
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,134, Validate each String value in the specified List against this instances
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,135, permitted DateFormats.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,137, If a value is valid then it's <code>String</code> value in the list is
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,138, replaced with it's <code>Date</code> value.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,140, @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,142,ublic void validate(final List values)
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,143,hrows InvalidArgumentException {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,144,/ for each value
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,145,or (final ListIterator i = values.listIterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,146,inal String value = (String) i.next();
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,148,ate date = null;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,150,/ create a resuable ParsePosition instance
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,151,inal ParsePosition pp = new ParsePosition(0);
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,153,/ for each permitted DateFormat
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,154,or (int f = 0; (f < this.formats.length) && (date == null); ++f) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,155,/ reset the parse position
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,156,p.setIndex(0);
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,157,"ate = this.formats[f].parse(value, pp);"
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,159,/ if the wrong number of characters have been parsed
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,160,f (pp.getIndex() < value.length()) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,161,ate = null;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,165,/ if date has not been set throw an InvalidArgumentException
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,166,f (date == null) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,167,hrow new InvalidArgumentException(value);
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,170,/ if the date is outside the bounds
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,171,f (isDateEarlier(date) || isDateLater(date)) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,172,"hrow new InvalidArgumentException(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,"
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,173,alue));
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,176,/ replace the value in the list with the actual Date
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,177,.set(date);
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,182, Sets whether this validator uses lenient parsing.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,184, @param lenient whether this validator uses lenient parsing
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,186,ublic void setLenient(final boolean lenient) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,187,or (int i = 0; i < this.formats.length; i++) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,188,his.formats[i].setLenient(lenient);
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,191,his.isLenient = lenient;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,195, Returns whether this validator uses lenient parsing.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,197, @return whether this validator uses lenient parsing
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,199,ublic boolean isLenient() {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,200,eturn this.isLenient;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,204, Returns the maximum date permitted.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,206, @return Date the maximum date permitted. If no maximum date has been
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,207,         specified then return <code>null</code>.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,209,ublic Date getMaximum() {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,210,eturn maximum;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,214, Sets the maximum Date to the specified value.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,216, @param maximum
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,217,            the maximum Date permitted
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,219,ublic void setMaximum(final Date maximum) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,220,his.maximum = maximum;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,224, Returns the minimum date permitted.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,226, @return Date the minimum date permitted. If no minimum date has been
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,227,         specified then return <code>null</code>.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,229,ublic Date getMinimum() {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,230,eturn minimum;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,234, Sets the minimum Date to the specified value.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,236, @param minimum
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,237,            the minimum Date permitted
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,239,ublic void setMinimum(Date minimum) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,240,his.minimum = minimum;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,244, Returns whether the specified Date is later than the maximum date.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,246, @param date
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,247,            the Date to evaluate
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,249, @return boolean whether <code>date</code> is earlier than the maximum
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,250,         date
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,252,rivate boolean isDateLater(Date date) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,253,eturn (maximum != null) && (date.getTime() > maximum.getTime());
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,257, Returns whether the specified Date is earlier than the minimum date.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,259, @param date
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,260,            the Date to evaluate
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,262, @return boolean whether <code>date</code> is earlier than the minimum
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,263,         date
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,265,rivate boolean isDateEarlier(Date date) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,266,eturn (minimum != null) && (date.getTime() < minimum.getTime());
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,270, Sets the date format permitted.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,272, @param format
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,273,              the format to use
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,275,ublic void setFormat(final DateFormat format) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,276,etFormats(new DateFormat[] { format });
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,280, Sets the date formats permitted.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,282, @param formats
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,283,               the List of DateFormats to use
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,285,ublic void setFormats(final List formats) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,286,etFormats((DateFormat[]) formats.toArray(new DateFormat[formats.size()]));
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,290, Sets the date formats permitted.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,292, @param formats
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,293,               the array of DateFormats to use
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,295,ublic void setFormats(final DateFormat[] formats) {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,296,his.formats = formats;
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,297,etLenient(this.isLenient);
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,301, Gets the date formats permitted.
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,303, @return the permitted formats
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,305,ublic DateFormat[] getFormats() {
False,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,306,eturn this.formats;
True,src/java/org/apache/commons/cli2/validation/DateValidator.java,src/java/org/apache/commons/cli2/validation/DateValidator.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.text.DateFormat;import java.text.ParsePosition;import java.util.Date;import java.util.List;import java.util.ListIterator;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * The <code>DateValidator</code> validates the argument values * are date or time value(s). * * The following example shows how to validate that * an argument value(s) is a Date of the following * type: d/M/yy (see {@link java.text.DateFormat}). * * <pre> * DateFormat date = new SimpleDateFormat(""d/M/yy""); * ... * ArgumentBuilder builder = new ArgumentBuilder(); * Argument dateFormat = *     builder.withName(""date""); *            .withValidator(new DateValidator(dateFormat)); * </pre> * * The following example shows how to validate that * an argument value(s) is a time of the following * type: HH:mm:ss (see {@link java.text.DateFormat}). * * <pre> * DateFormat timeFormat = new SimpleDateFormat(""HH:mm:ss""); * ... * ArgumentBuilder builder = new ArgumentBuilder(); * Argument time = *     builder.withName(""time""); *            .withValidator(new DateValidator(timeFormat)); * </pre> * * @author John Keyes * * @see java.text.DateFormat */public class DateValidator implements Validator {    /** i18n */    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    /** an array of permitted DateFormats */    private DateFormat[] formats;    /** minimum Date allowed i.e: a valid date occurs later than this date */    private Date minimum;    /** maximum Date allowed i.e: a valid date occurs earlier than this date */    private Date maximum;    /** leniant parsing */    private boolean isLenient;    /**     * Creates a Validator for the default date/time format     */    public DateValidator() {        this(DateFormat.getInstance());    }    /**     * Creates a Validator for the specified DateFormat.     *     * @param format     *            a DateFormat which dates must conform to     */    public DateValidator(final DateFormat format) {        setFormat(format);    }    /**     * Creates a Validator for the List of specified DateFormats.     *     * @param formats     *            a List of DateFormats which dates must conform to     */    public DateValidator(final List formats) {        setFormats(formats);    }    /**     * Creates a Validator for dates.     *     * @return DateValidator a Validator for dates     */    public static DateValidator getDateInstance() {        return new DateValidator(DateFormat.getDateInstance());    }    /**     * Creates a Validator for times.     *     * @return DateValidator a Validator for times     */    public static DateValidator getTimeInstance() {        return new DateValidator(DateFormat.getTimeInstance());    }    /**     * Creates a Validator for date/times     *     * @return DateValidator a Validator for date/times     */    public static DateValidator getDateTimeInstance() {        return new DateValidator(DateFormat.getDateTimeInstance());    }    /**     * Validate each String value in the specified List against this instances     * permitted DateFormats.     *     * If a value is valid then it's <code>String</code> value in the list is     * replaced with it's <code>Date</code> value.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values)        throws InvalidArgumentException {        // for each value        for (final ListIterator i = values.listIterator(); i.hasNext();) {            final String value = (String) i.next();            Date date = null;            // create a resuable ParsePosition instance            final ParsePosition pp = new ParsePosition(0);            // for each permitted DateFormat            for (int f = 0; (f < this.formats.length) && (date == null); ++f) {                // reset the parse position                pp.setIndex(0);                date = this.formats[f].parse(value, pp);                // if the wrong number of characters have been parsed                if (pp.getIndex() < value.length()) {                    date = null;                }            }            // if date has not been set throw an InvalidArgumentException            if (date == null) {                throw new InvalidArgumentException(value);            }            // if the date is outside the bounds            if (isDateEarlier(date) || isDateLater(date)) {                throw new InvalidArgumentException(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,                                                                        value));            }            // replace the value in the list with the actual Date            i.set(date);        }    }    /**     * Sets whether this validator uses lenient parsing.     *     * @param lenient whether this validator uses lenient parsing     */    public void setLenient(final boolean lenient) {        for (int i = 0; i < this.formats.length; i++) {            this.formats[i].setLenient(lenient);        }        this.isLenient = lenient;    }    /**     * Returns whether this validator uses lenient parsing.     *     * @return whether this validator uses lenient parsing     */    public boolean isLenient() {        return this.isLenient;    }    /**     * Returns the maximum date permitted.     *     * @return Date the maximum date permitted. If no maximum date has been     *         specified then return <code>null</code>.     */    public Date getMaximum() {        return maximum;    }    /**     * Sets the maximum Date to the specified value.     *     * @param maximum     *            the maximum Date permitted     */    public void setMaximum(final Date maximum) {        this.maximum = maximum;    }    /**     * Returns the minimum date permitted.     *     * @return Date the minimum date permitted. If no minimum date has been     *         specified then return <code>null</code>.     */    public Date getMinimum() {        return minimum;    }    /**     * Sets the minimum Date to the specified value.     *     * @param minimum     *            the minimum Date permitted     */    public void setMinimum(Date minimum) {        this.minimum = minimum;    }    /**     * Returns whether the specified Date is later than the maximum date.     *     * @param date     *            the Date to evaluate     *     * @return boolean whether <code>date</code> is earlier than the maximum     *         date     */    private boolean isDateLater(Date date) {        return (maximum != null) && (date.getTime() > maximum.getTime());    }    /**     * Returns whether the specified Date is earlier than the minimum date.     *     * @param date     *            the Date to evaluate     *     * @return boolean whether <code>date</code> is earlier than the minimum     *         date     */    private boolean isDateEarlier(Date date) {        return (minimum != null) && (date.getTime() < minimum.getTime());    }    /**     * Sets the date format permitted.     *     * @param format     *              the format to use     */    public void setFormat(final DateFormat format) {        setFormats(new DateFormat[] { format });    }    /**     * Sets the date formats permitted.     *     * @param formats     *               the List of DateFormats to use     */    public void setFormats(final List formats) {        setFormats((DateFormat[]) formats.toArray(new DateFormat[formats.size()]));    }    /**     * Sets the date formats permitted.     *     * @param formats     *               the array of DateFormats to use     */    public void setFormats(final DateFormat[] formats) {        this.formats = formats;        setLenient(this.isLenient);    }    /**     * Gets the date formats permitted.     *     * @return the permitted formats     */    public DateFormat[] getFormats() {        return this.formats;    }}"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,17,ackage org.apache.commons.cli2.validation;
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,19,mport java.util.Iterator;
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,20,mport java.util.List;
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,21,mport java.util.Set;
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,23,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,24,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,27, The <code>EnumValidator</code> validates the string argument
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,28, values are valid.
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,30, The following example shows how to limit the valid values
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,31," for the color argument to 'red', 'green', or 'blue'."
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,33, <pre>
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,34, Set values = new HashSet();
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,35," values.add(""red"");"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,36," values.add(""green"");"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,37," values.add(""blue"");"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,39, ArgumentBuilder builder = new ArgumentBuilder();
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,40, Argument color =
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,41,"     builder.withName(""color"");"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,42,            .withValidator(new EnumValidator(values));
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,43, </pre>
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,45, @author John Keyes
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,47,ublic class EnumValidator implements Validator {
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,48,** List of permitted values */
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,49,rivate Set validValues;
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,52, Creates a new EnumValidator for the specified values.
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,54, @param values The list of permitted values
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,56,ublic EnumValidator(final Set values) {
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,57,etValidValues(values);
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,61, Validate the list of values against the list of permitted values.
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,63, @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,65,ublic void validate(final List values)
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,66,hrows InvalidArgumentException {
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,67,or (final Iterator iter = values.iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,68,inal String value = (String) iter.next();
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,70,f (!this.validValues.contains(value)) {
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,71,"hrow new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ENUM_ILLEGAL_VALUE,"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,72,ew Object[] {
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,73,"alue,"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,74,etValuesAsString()
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,81, Returns the permitted values in a comma separated String
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,83, @return String formatted list of values
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,85,tring getValuesAsString() {
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,86,inal StringBuffer buff = new StringBuffer();
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,88,"uff.append(""["");"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,90,or (final Iterator iter = this.validValues.iterator(); iter.hasNext();) {
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,91,"uff.append(""'"").append(iter.next()).append(""'"");"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,93,f (iter.hasNext()) {
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,94,"uff.append("", "");"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,98,"uff.append(""]"");"
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,100,eturn buff.toString();
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,104, Returns the Set of valid argument values.
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,106, @return Returns the Set of valid argument values.
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,108,ublic Set getValidValues() {
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,109,eturn validValues;
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,113, Specifies the Set of valid argument values.
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,115, @param validValues The Set of valid argument values.
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,117,rotected void setValidValues(Set validValues) {
False,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,118,his.validValues = validValues;
True,src/java/org/apache/commons/cli2/validation/EnumValidator.java,src/java/org/apache/commons/cli2/validation/EnumValidator.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.util.Iterator;import java.util.List;import java.util.Set;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * The <code>EnumValidator</code> validates the string argument * values are valid. * * The following example shows how to limit the valid values * for the color argument to 'red', 'green', or 'blue'. * * <pre> * Set values = new HashSet(); * values.add(""red""); * values.add(""green""); * values.add(""blue""); * ... * ArgumentBuilder builder = new ArgumentBuilder(); * Argument color = *     builder.withName(""color""); *            .withValidator(new EnumValidator(values)); * </pre> * * @author John Keyes */public class EnumValidator implements Validator {    /** List of permitted values */    private Set validValues;    /**     * Creates a new EnumValidator for the specified values.     *     * @param values The list of permitted values     */    public EnumValidator(final Set values) {        setValidValues(values);    }    /**     * Validate the list of values against the list of permitted values.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values)        throws InvalidArgumentException {        for (final Iterator iter = values.iterator(); iter.hasNext();) {            final String value = (String) iter.next();            if (!this.validValues.contains(value)) {                throw new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ENUM_ILLEGAL_VALUE,                                                                                                 new Object[] {                                                                                                     value,                                                                                                     getValuesAsString()                                                                                                 }));            }        }    }    /**     * Returns the permitted values in a comma separated String     *     * @return String formatted list of values     */    String getValuesAsString() {        final StringBuffer buff = new StringBuffer();        buff.append(""["");        for (final Iterator iter = this.validValues.iterator(); iter.hasNext();) {            buff.append(""'"").append(iter.next()).append(""'"");            if (iter.hasNext()) {                buff.append("", "");            }        }        buff.append(""]"");        return buff.toString();    }    /**     * Returns the Set of valid argument values.     *     * @return Returns the Set of valid argument values.     */    public Set getValidValues() {        return validValues;    }    /**     * Specifies the Set of valid argument values.     *     * @param validValues The Set of valid argument values.     */    protected void setValidValues(Set validValues) {        this.validValues = validValues;    }}"
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,17,ackage org.apache.commons.cli2.validation;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,19,mport java.io.File;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,20,mport java.util.List;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,21,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,24, The <code>FileValidator</code> validates the string argument
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,25," values are files.  If the value is a file, the string value in"
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,26, the {@link java.util.List} of values is replaced with the
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,27, {@link java.io.File} instance.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,29, The following attributes can also be specified using the
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,30, appropriate settors:
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,31, <ul>
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,32,  <li>writable</li>
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,33,  <li>readable</li>
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,34,  <li>hidden</li>
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,35,  <li>existing</li>
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,36,  <li>is a file</li>
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,37,  <li>is a directory</li>
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,38, </ul>
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,40, The following example shows how to limit the valid values
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,41," for the config attribute to files that are readable, writeable,"
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,42, and that already existing.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,44, <pre>
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,46, ArgumentBuilder builder = new ArgumentBuilder();
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,47, FileValidator validator = FileValidator.getExistingFileInstance();
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,48, validator.setReadable(true);
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,49, validator.setWritable(true);
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,51, Argument age =
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,52,"     builder.withName(""config"");"
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,53,            .withValidator(validator);
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,54, </pre>
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,56, @author Rob Oxspring
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,57, @author John Keyes
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,59,ublic class FileValidator implements Validator {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,62, Returns a <code>FileValidator</code> for existing files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,64, @return a <code>FileValidator</code> for existing files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,66,ublic static FileValidator getExistingInstance() {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,67,inal FileValidator validator = new FileValidator();
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,68,alidator.setExisting(true);
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,69,eturn validator;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,73, Returns a <code>FileValidator</code> for existing files.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,75, @return a <code>FileValidator</code> for existing files.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,77,ublic static FileValidator getExistingFileInstance() {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,78,inal FileValidator validator = new FileValidator();
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,79,alidator.setExisting(true);
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,80,alidator.setFile(true);
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,81,eturn validator;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,85, Returns a <code>FileValidator</code> for existing directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,87, @return a <code>FileValidator</code> for existing directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,89,ublic static FileValidator getExistingDirectoryInstance() {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,90,inal FileValidator validator = new FileValidator();
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,91,alidator.setExisting(true);
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,92,alidator.setDirectory(true);
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,93,eturn validator;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,96,** whether the argument value is readable */
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,97,rivate boolean readable = false;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,99,** whether the argument value is writable */
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,100,rivate boolean writable = false;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,102,** whether the argument value exists */
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,103,rivate boolean existing = false;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,105,** whether the argument value is a directory */
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,106,rivate boolean directory = false;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,108,** whether the argument value is a file */
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,109,rivate boolean file = false;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,111,** whether the argument value is a hidden file or directory */
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,112,rivate boolean hidden = false;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,115, Validate the list of values against the list of permitted values.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,116," If a value is valid, replace the string in the <code>values</code>"
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,117, {@link java.util.List} with the {@link java.io.File} instance.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,119, @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,121,ublic void validate(final List values) throws InvalidArgumentException {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,122,or (final ListIterator i = values.listIterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,123,inal String name = (String)i.next();
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,124,inal File f = new File(name);
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,126,f ((existing && !f.exists())
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,127,| (file && !f.isFile())
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,128,| (directory && !f.isDirectory())
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,129,| (hidden && !f.isHidden())
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,130,| (readable && !f.canRead())
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,131,| (writable && !f.canWrite())) {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,133,hrow new InvalidArgumentException(name);
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,136,.set(f);
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,141, Returns whether the argument values must represent directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,143, @return whether the argument values must represent directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,145,ublic boolean isDirectory() {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,146,eturn directory;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,150, Specifies whether the argument values must represent directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,152, @param directory specifies whether the argument values must
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,153, represent directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,155,ublic void setDirectory(boolean directory) {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,156,his.directory = directory;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,160, Returns whether the argument values must represent existing
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,161, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,163, @return whether the argument values must represent existing
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,164, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,166,ublic boolean isExisting() {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,167,eturn existing;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,171, Specifies whether the argument values must represent existing
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,172, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,174, @param existing specifies whether the argument values must
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,175, represent existing files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,177,ublic void setExisting(boolean existing) {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,178,his.existing = existing;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,182, Returns whether the argument values must represent directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,184, @return whether the argument values must represent directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,186,ublic boolean isFile() {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,187,eturn file;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,191, Specifies whether the argument values must represent files.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,193, @param file specifies whether the argument values must
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,194, represent files.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,196,ublic void setFile(boolean file) {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,197,his.file = file;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,201, Returns whether the argument values must represent hidden
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,202, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,204, @return whether the argument values must represent hidden
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,205, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,207,ublic boolean isHidden() {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,208,eturn hidden;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,212, Specifies whether the argument values must represent hidden
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,213, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,215, @param hidden specifies whether the argument values must
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,216, represent hidden files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,218,ublic void setHidden(boolean hidden) {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,219,his.hidden = hidden;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,223, Returns whether the argument values must represent readable
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,224, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,226, @return whether the argument values must represent readable
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,227, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,229,ublic boolean isReadable() {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,230,eturn readable;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,234, Specifies whether the argument values must represent readable
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,235, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,237, @param readable specifies whether the argument values must
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,238, represent readable files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,240,ublic void setReadable(boolean readable) {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,241,his.readable = readable;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,245, Returns whether the argument values must represent writable
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,246, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,248, @return whether the argument values must represent writable
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,249, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,251,ublic boolean isWritable() {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,252,eturn writable;
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,256, Specifies whether the argument values must represent writable
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,257, files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,259, @param writable specifies whether the argument values must
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,260, represent writable files/directories.
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,262,ublic void setWritable(boolean writable) {
False,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,263,his.writable = writable;
True,src/java/org/apache/commons/cli2/validation/FileValidator.java,src/java/org/apache/commons/cli2/validation/FileValidator.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.io.File;import java.util.List;import java.util.ListIterator;/** * The <code>FileValidator</code> validates the string argument * values are files.  If the value is a file, the string value in * the {@link java.util.List} of values is replaced with the * {@link java.io.File} instance. * * The following attributes can also be specified using the * appropriate settors: * <ul> *  <li>writable</li> *  <li>readable</li> *  <li>hidden</li> *  <li>existing</li> *  <li>is a file</li> *  <li>is a directory</li> * </ul> * * The following example shows how to limit the valid values * for the config attribute to files that are readable, writeable, * and that already existing. * * <pre> * ... * ArgumentBuilder builder = new ArgumentBuilder(); * FileValidator validator = FileValidator.getExistingFileInstance(); * validator.setReadable(true); * validator.setWritable(true); * * Argument age = *     builder.withName(""config""); *            .withValidator(validator); * </pre> * * @author Rob Oxspring * @author John Keyes */public class FileValidator implements Validator {    /**     * Returns a <code>FileValidator</code> for existing files/directories.     *     * @return a <code>FileValidator</code> for existing files/directories.     */    public static FileValidator getExistingInstance() {        final FileValidator validator = new FileValidator();        validator.setExisting(true);        return validator;    }    /**     * Returns a <code>FileValidator</code> for existing files.     *     * @return a <code>FileValidator</code> for existing files.     */    public static FileValidator getExistingFileInstance() {        final FileValidator validator = new FileValidator();        validator.setExisting(true);        validator.setFile(true);        return validator;    }    /**     * Returns a <code>FileValidator</code> for existing directories.     *     * @return a <code>FileValidator</code> for existing directories.     */    public static FileValidator getExistingDirectoryInstance() {        final FileValidator validator = new FileValidator();        validator.setExisting(true);        validator.setDirectory(true);        return validator;    }    /** whether the argument value is readable */    private boolean readable = false;    /** whether the argument value is writable */    private boolean writable = false;    /** whether the argument value exists */    private boolean existing = false;    /** whether the argument value is a directory */    private boolean directory = false;    /** whether the argument value is a file */    private boolean file = false;    /** whether the argument value is a hidden file or directory */    private boolean hidden = false;    /**     * Validate the list of values against the list of permitted values.     * If a value is valid, replace the string in the <code>values</code>     * {@link java.util.List} with the {@link java.io.File} instance.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values) throws InvalidArgumentException {        for (final ListIterator i = values.listIterator(); i.hasNext();) {            final String name = (String)i.next();            final File f = new File(name);            if ((existing && !f.exists())                || (file && !f.isFile())                || (directory && !f.isDirectory())                || (hidden && !f.isHidden())                || (readable && !f.canRead())                || (writable && !f.canWrite())) {                throw new InvalidArgumentException(name);            }            i.set(f);        }    }    /**     * Returns whether the argument values must represent directories.     *     * @return whether the argument values must represent directories.     */    public boolean isDirectory() {        return directory;    }    /**     * Specifies whether the argument values must represent directories.     *     * @param directory specifies whether the argument values must     * represent directories.     */    public void setDirectory(boolean directory) {        this.directory = directory;    }    /**     * Returns whether the argument values must represent existing     * files/directories.     *     * @return whether the argument values must represent existing     * files/directories.     */    public boolean isExisting() {        return existing;    }    /**     * Specifies whether the argument values must represent existing     * files/directories.     *     * @param existing specifies whether the argument values must     * represent existing files/directories.     */    public void setExisting(boolean existing) {        this.existing = existing;    }    /**     * Returns whether the argument values must represent directories.     *     * @return whether the argument values must represent directories.     */    public boolean isFile() {        return file;    }    /**     * Specifies whether the argument values must represent files.     *     * @param file specifies whether the argument values must     * represent files.     */    public void setFile(boolean file) {        this.file = file;    }    /**     * Returns whether the argument values must represent hidden     * files/directories.     *     * @return whether the argument values must represent hidden     * files/directories.     */    public boolean isHidden() {        return hidden;    }    /**     * Specifies whether the argument values must represent hidden     * files/directories.     *     * @param hidden specifies whether the argument values must     * represent hidden files/directories.     */    public void setHidden(boolean hidden) {        this.hidden = hidden;    }    /**     * Returns whether the argument values must represent readable     * files/directories.     *     * @return whether the argument values must represent readable     * files/directories.     */    public boolean isReadable() {        return readable;    }    /**     * Specifies whether the argument values must represent readable     * files/directories.     *     * @param readable specifies whether the argument values must     * represent readable files/directories.     */    public void setReadable(boolean readable) {        this.readable = readable;    }    /**     * Returns whether the argument values must represent writable     * files/directories.     *     * @return whether the argument values must represent writable     * files/directories.     */    public boolean isWritable() {        return writable;    }    /**     * Specifies whether the argument values must represent writable     * files/directories.     *     * @param writable specifies whether the argument values must     * represent writable files/directories.     */    public void setWritable(boolean writable) {        this.writable = writable;    }}"
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,17,ackage org.apache.commons.cli2.validation;
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,20, An exception indicating validation failure.
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,22, @author Rob Oxspring
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,23, @author John Keyes
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,25,ublic class InvalidArgumentException extends Exception {
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,28, Creates a new exception
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,29, @param message the reason for failure
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,31,ublic InvalidArgumentException(final String message) {
False,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,32,uper(message);
True,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,src/java/org/apache/commons/cli2/validation/InvalidArgumentException.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;/** * An exception indicating validation failure. * * @author Rob Oxspring * @author John Keyes */public class InvalidArgumentException extends Exception {    /**     * Creates a new exception     * @param message the reason for failure     */    public InvalidArgumentException(final String message) {        super(message);    }}"
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,17,ackage org.apache.commons.cli2.validation;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,19,mport java.text.NumberFormat;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,20,mport java.text.ParsePosition;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,22,mport java.util.List;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,23,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,25,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,26,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,29, The <code>NumberValidator</code> validates the string argument
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,30," values are numbers.  If the value is a number, the string value in"
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,31, the {@link java.util.List} of values is replaced with the
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,32, {@link java.lang.Number} instance.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,34, A maximum and minimum value can also be specified using
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,35," the {@link #setMaximum setMaximum}, and the"
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,36, {@link #setMinimum setMinimum} methods.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,38, The following example shows how to limit the valid values
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,39, for the age attribute to integers less than 100.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,41, <pre>
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,43, ArgumentBuilder builder = new ArgumentBuilder();
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,44, NumberValidator validator = NumberValidator.getIntegerInstance();
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,45, validator.setMaximum(new Integer(100));
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,47, Argument age =
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,48,"     builder.withName(""age"");"
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,49,            .withValidator(validator);
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,50, </pre>
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,52, @author Rob Oxspring
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,53, @author John Keyes
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,55,ublic class NumberValidator implements Validator {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,56,** the <code>NumberFormat</code> being used. */
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,57,rivate NumberFormat format;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,59,** the lower bound for argument values. */
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,60,rivate Number minimum = null;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,62,** the upper bound for argument values */
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,63,rivate Number maximum = null;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,66, Creates a new NumberValidator based on the specified NumberFormat
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,67, @param format the format of numbers to accept
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,69,ublic NumberValidator(final NumberFormat format) {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,70,etFormat(format);
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,74, Returns a <code>NumberValidator</code> for a currency format
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,75, for the current default locale.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,76, @return a <code>NumberValidator</code> for a currency format
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,77, for the current default locale.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,79,ublic static NumberValidator getCurrencyInstance() {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,80,eturn new NumberValidator(NumberFormat.getCurrencyInstance());
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,84, Returns a <code>NumberValidator</code> for an integer number format
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,85, for the current default locale.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,86, @return a <code>NumberValidator</code> for an integer number format
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,87, for the current default locale.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,89,ublic static NumberValidator getIntegerInstance() {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,90,inal NumberFormat format = NumberFormat.getNumberInstance();
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,91,ormat.setParseIntegerOnly(true);
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,93,eturn new NumberValidator(format);
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,97, Returns a <code>NumberValidator</code> for a percentage format
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,98, for the current default locale.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,99, @return a <code>NumberValidator</code> for a percentage format
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,100, for the current default locale.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,102,ublic static NumberValidator getPercentInstance() {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,103,eturn new NumberValidator(NumberFormat.getPercentInstance());
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,107, Returns a <code>NumberValidator</code> for a general-purpose
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,108, number format for the current default locale.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,109, @return a <code>NumberValidator</code> for a general-purpose
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,110, number format for the current default locale.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,112,ublic static NumberValidator getNumberInstance() {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,113,eturn new NumberValidator(NumberFormat.getNumberInstance());
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,117, Validate the list of values against the list of permitted values.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,118," If a value is valid, replace the string in the <code>values</code>"
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,119, {@link java.util.List} with the {@link java.lang.Number} instance.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,121, @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,123,ublic void validate(final List values)
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,124,hrows InvalidArgumentException {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,125,or (final ListIterator i = values.listIterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,126,inal String value = (String) i.next();
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,128,inal ParsePosition pp = new ParsePosition(0);
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,129,"inal Number number = format.parse(value, pp);"
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,131,f (pp.getIndex() < value.length()) {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,132,hrow new InvalidArgumentException(value);
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,135,f (((minimum != null) && (number.doubleValue() < minimum.doubleValue())) ||
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,136,(maximum != null) && (number.doubleValue() > maximum.doubleValue()))) {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,137,"hrow new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,"
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,138,ew Object[] {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,139,alue
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,143,.set(number);
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,148, Return the format being used to validate argument values against.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,150, @return the format being used to validate argument values against.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,152,ublic NumberFormat getFormat() {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,153,eturn format;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,157, Specify the format being used to validate argument values against.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,159, @param format the format being used to validate argument values against.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,161,rotected void setFormat(NumberFormat format) {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,162,his.format = format;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,166, Return the maximum value allowed for an argument value.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,168, @return the maximum value allowed for an argument value.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,170,ublic Number getMaximum() {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,171,eturn maximum;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,175, Specify the maximum value allowed for an argument value.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,177, @param maximum the maximum value allowed for an argument value.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,179,ublic void setMaximum(Number maximum) {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,180,his.maximum = maximum;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,184, Return the minimum value allowed for an argument value.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,186, @return the minimum value allowed for an argument value.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,188,ublic Number getMinimum() {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,189,eturn minimum;
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,193, Specify the minimum value allowed for an argument value.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,195, @param minimum the minimum value allowed for an argument value.
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,197,ublic void setMinimum(Number minimum) {
False,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,198,his.minimum = minimum;
True,src/java/org/apache/commons/cli2/validation/NumberValidator.java,src/java/org/apache/commons/cli2/validation/NumberValidator.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.text.NumberFormat;import java.text.ParsePosition;import java.util.List;import java.util.ListIterator;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * The <code>NumberValidator</code> validates the string argument * values are numbers.  If the value is a number, the string value in * the {@link java.util.List} of values is replaced with the * {@link java.lang.Number} instance. * * A maximum and minimum value can also be specified using * the {@link #setMaximum setMaximum}, and the * {@link #setMinimum setMinimum} methods. * * The following example shows how to limit the valid values * for the age attribute to integers less than 100. * * <pre> * ... * ArgumentBuilder builder = new ArgumentBuilder(); * NumberValidator validator = NumberValidator.getIntegerInstance(); * validator.setMaximum(new Integer(100)); * * Argument age = *     builder.withName(""age""); *            .withValidator(validator); * </pre> * * @author Rob Oxspring * @author John Keyes */public class NumberValidator implements Validator {    /** the <code>NumberFormat</code> being used. */    private NumberFormat format;    /** the lower bound for argument values. */    private Number minimum = null;    /** the upper bound for argument values */    private Number maximum = null;    /**     * Creates a new NumberValidator based on the specified NumberFormat     * @param format the format of numbers to accept     */    public NumberValidator(final NumberFormat format) {        setFormat(format);    }    /**     * Returns a <code>NumberValidator</code> for a currency format     * for the current default locale.     * @return a <code>NumberValidator</code> for a currency format     * for the current default locale.     */    public static NumberValidator getCurrencyInstance() {        return new NumberValidator(NumberFormat.getCurrencyInstance());    }    /**     * Returns a <code>NumberValidator</code> for an integer number format     * for the current default locale.     * @return a <code>NumberValidator</code> for an integer number format     * for the current default locale.     */    public static NumberValidator getIntegerInstance() {        final NumberFormat format = NumberFormat.getNumberInstance();        format.setParseIntegerOnly(true);        return new NumberValidator(format);    }    /**     * Returns a <code>NumberValidator</code> for a percentage format     * for the current default locale.     * @return a <code>NumberValidator</code> for a percentage format     * for the current default locale.     */    public static NumberValidator getPercentInstance() {        return new NumberValidator(NumberFormat.getPercentInstance());    }    /**     * Returns a <code>NumberValidator</code> for a general-purpose     * number format for the current default locale.     * @return a <code>NumberValidator</code> for a general-purpose     * number format for the current default locale.     */    public static NumberValidator getNumberInstance() {        return new NumberValidator(NumberFormat.getNumberInstance());    }    /**     * Validate the list of values against the list of permitted values.     * If a value is valid, replace the string in the <code>values</code>     * {@link java.util.List} with the {@link java.lang.Number} instance.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values)        throws InvalidArgumentException {        for (final ListIterator i = values.listIterator(); i.hasNext();) {            final String value = (String) i.next();            final ParsePosition pp = new ParsePosition(0);            final Number number = format.parse(value, pp);            if (pp.getIndex() < value.length()) {                throw new InvalidArgumentException(value);            }            if (((minimum != null) && (number.doubleValue() < minimum.doubleValue())) ||                    ((maximum != null) && (number.doubleValue() > maximum.doubleValue()))) {                throw new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,                                                                                                 new Object[] {                                                                                                     value                                                                                                 }));            }            i.set(number);        }    }    /**     * Return the format being used to validate argument values against.     *     * @return the format being used to validate argument values against.     */    public NumberFormat getFormat() {        return format;    }    /**     * Specify the format being used to validate argument values against.     *     * @param format the format being used to validate argument values against.     */    protected void setFormat(NumberFormat format) {        this.format = format;    }    /**     * Return the maximum value allowed for an argument value.     *     * @return the maximum value allowed for an argument value.     */    public Number getMaximum() {        return maximum;    }    /**     * Specify the maximum value allowed for an argument value.     *     * @param maximum the maximum value allowed for an argument value.     */    public void setMaximum(Number maximum) {        this.maximum = maximum;    }    /**     * Return the minimum value allowed for an argument value.     *     * @return the minimum value allowed for an argument value.     */    public Number getMinimum() {        return minimum;    }    /**     * Specify the minimum value allowed for an argument value.     *     * @param minimum the minimum value allowed for an argument value.     */    public void setMinimum(Number minimum) {        this.minimum = minimum;    }}"
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,17,ackage org.apache.commons.cli2.validation;
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,19,mport java.net.MalformedURLException;
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,20,mport java.net.URL;
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,22,mport java.util.List;
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,23,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,25,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,26,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,29, The <code>UrlValidator</code> validates the string argument
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,30," values are URLs.  If the value is a URL, the string value in"
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,31, the {@link java.util.List} of values is replaced with the
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,32, {@link java.net.URL} instance.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,34, URLs can also be validated based on their scheme by using
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,35," the {@link #setProtocol setProtocol} method, or by using the specified"
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,36, {@link #UrlValidator(java.lang.String) constructor}.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,38, The following example shows how to limit the valid values
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,39, for the site argument to 'https' URLs.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,41, <pre>
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,43, ArgumentBuilder builder = new ArgumentBuilder();
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,44, Argument site =
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,45,"     builder.withName(""site"");"
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,46,"            .withValidator(new URLValidator(""https""));"
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,47, </pre>
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,49, @author Rob Oxspring
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,50, @author John Keyes
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,52,ublic class UrlValidator implements Validator {
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,53,** allowed protocol */
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,54,rivate String protocol = null;
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,57, Creates a UrlValidator.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,59,ublic UrlValidator() {
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,63, Creates a UrlValidator for the specified protocol.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,65,ublic UrlValidator(final String protocol) {
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,66,etProtocol(protocol);
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,70, Validate the list of values against the list of permitted values.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,71," If a value is valid, replace the string in the <code>values</code>"
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,72, {@link java.util.List} with the { java.net.URL} instance.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,74, @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,76,ublic void validate(final List values)
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,77,hrows InvalidArgumentException {
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,78,or (final ListIterator i = values.listIterator(); i.hasNext();) {
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,79,inal String name = (String) i.next();
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,81,ry {
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,82,inal URL url = new URL(name);
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,84,f ((protocol != null) && !protocol.equals(url.getProtocol())) {
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,85,hrow new InvalidArgumentException(name);
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,88,.set(url);
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,89, catch (final MalformedURLException mue) {
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,90,"hrow new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.URLVALIDATOR_MALFORMED_URL,"
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,91,ew Object[] {
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,92,ame
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,99, Returns the protocol that must be used by a valid URL.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,101, @return the protocol that must be used by a valid URL.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,103,ublic String getProtocol() {
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,104,eturn protocol;
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,108, Specifies the protocol that a URL must have to be valid.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,110, @param protocol the protocol that a URL must have to be valid.
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,112,ublic void setProtocol(String protocol) {
False,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,113,his.protocol = protocol;
True,src/java/org/apache/commons/cli2/validation/UrlValidator.java,src/java/org/apache/commons/cli2/validation/UrlValidator.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.net.MalformedURLException;import java.net.URL;import java.util.List;import java.util.ListIterator;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * The <code>UrlValidator</code> validates the string argument * values are URLs.  If the value is a URL, the string value in * the {@link java.util.List} of values is replaced with the * {@link java.net.URL} instance. * * URLs can also be validated based on their scheme by using * the {@link #setProtocol setProtocol} method, or by using the specified * {@link #UrlValidator(java.lang.String) constructor}. * * The following example shows how to limit the valid values * for the site argument to 'https' URLs. * * <pre> * ... * ArgumentBuilder builder = new ArgumentBuilder(); * Argument site = *     builder.withName(""site""); *            .withValidator(new URLValidator(""https"")); * </pre> * * @author Rob Oxspring * @author John Keyes */public class UrlValidator implements Validator {    /** allowed protocol */    private String protocol = null;    /**     * Creates a UrlValidator.     */    public UrlValidator() {    }    /**     * Creates a UrlValidator for the specified protocol.     */    public UrlValidator(final String protocol) {        setProtocol(protocol);    }    /**     * Validate the list of values against the list of permitted values.     * If a value is valid, replace the string in the <code>values</code>     * {@link java.util.List} with the { java.net.URL} instance.     *     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)     */    public void validate(final List values)        throws InvalidArgumentException {        for (final ListIterator i = values.listIterator(); i.hasNext();) {            final String name = (String) i.next();            try {                final URL url = new URL(name);                if ((protocol != null) && !protocol.equals(url.getProtocol())) {                    throw new InvalidArgumentException(name);                }                i.set(url);            } catch (final MalformedURLException mue) {                throw new InvalidArgumentException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.URLVALIDATOR_MALFORMED_URL,                                                                                                 new Object[] {                                                                                                     name                                                                                                 }));            }        }    }    /**     * Returns the protocol that must be used by a valid URL.     *     * @return the protocol that must be used by a valid URL.     */    public String getProtocol() {        return protocol;    }    /**     * Specifies the protocol that a URL must have to be valid.     *     * @param protocol the protocol that a URL must have to be valid.     */    public void setProtocol(String protocol) {        this.protocol = protocol;    }}"
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,4, this work for additional information regarding copyright ownership.
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,7, the License.  You may obtain a copy of the License at
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,14, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,15, limitations under the License.
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,17,ackage org.apache.commons.cli2.validation;
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,19,mport java.util.List;
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,22, The validation interface for validating argument values(s).
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,24, A validator can replace the argument string value with a
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,25, specific class instance e.g. the {@link UrlValidator} replaces
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,26, the string value with a {@link java.net.URL} instance.
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,28, @author Rob Oxspring
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,29, @author John Keyes
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,31,ublic interface Validator {
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,34, Validate the specified values (List of Strings).
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,36, @param values The values to validate.
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,38, @throws InvalidArgumentException If any of the
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,39, specified values are not valid.
False,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,41,oid validate(final List values) throws InvalidArgumentException;
True,src/java/org/apache/commons/cli2/validation/Validator.java,src/java/org/apache/commons/cli2/validation/Validator.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.util.List;/** * The validation interface for validating argument values(s). * * A validator can replace the argument string value with a * specific class instance e.g. the {@link UrlValidator} replaces * the string value with a {@link java.net.URL} instance. * * @author Rob Oxspring * @author John Keyes */public interface Validator {    /**     * Validate the specified values (List of Strings).     *     * @param values The values to validate.     *     * @throws InvalidArgumentException If any of the     * specified values are not valid.     */    void validate(final List values) throws InvalidArgumentException;}"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,17,ackage org.apache.commons.cli2;
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,19,mport java.util.Arrays;
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,20,mport java.util.Collection;
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,21,mport java.util.Collections;
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,22,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,23,mport java.util.LinkedList;
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,24,mport java.util.List;
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,26,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,28,ublic abstract class CLITestCase extends TestCase {
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,30,ublic static List list() {
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,31,eturn Collections.EMPTY_LIST;
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,34,ublic static List list(final Object args[]) {
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,35,eturn new LinkedList(Arrays.asList(args));
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,38,ublic static List list(final Object arg0) {
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,39,eturn list(new Object[] { arg0 });
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,42,"ublic static List list(final Object arg0, final Object arg1) {"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,43,"eturn list(new Object[] { arg0, arg1 });"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,46,"ublic static List list(final Object arg0, final Object arg1, final Object arg2) {"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,47,"eturn list(new Object[] { arg0, arg1, arg2 });"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,50,"ublic static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3) {"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,51,"eturn list(new Object[] { arg0, arg1, arg2, arg3 });"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,54,"ublic static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3, final Object arg4) {"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,55,"eturn list(new Object[] { arg0, arg1, arg2, arg3, arg4 });"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,58,"ublic static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3, final Object arg4, final Object arg5) {"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,59,"eturn list(new Object[] { arg0, arg1, arg2, arg3, arg4, arg5 });"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,62,"ublic static void assertListContentsEqual(final List expected, final List found) {"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,64,inal Iterator e = expected.iterator();
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,65,inal Iterator f = found.iterator();
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,67,hile (e.hasNext() && f.hasNext()) {
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,68,"ssertEquals(e.next(), f.next());"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,71,f (e.hasNext()) {
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,72,"ail(""Expected more elements"");"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,75,f (f.hasNext()) {
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,76,"ail(""Found more elements"");"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,80,"ublic static void assertContentsEqual(final Collection expected, final Collection found) {"
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,81,ssertTrue(expected.containsAll(found));
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,82,ssertTrue(found.containsAll(expected));
False,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,83,"ssertEquals(expected.size(), found.size());"
True,src/test/org/apache/commons/cli2/CLITestCase.java,src/test/org/apache/commons/cli2/CLITestCase.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Arrays;import java.util.Collection;import java.util.Collections;import java.util.Iterator;import java.util.LinkedList;import java.util.List;import junit.framework.TestCase;public abstract class CLITestCase extends TestCase {	public static List list() {	    return Collections.EMPTY_LIST;	}	public static List list(final Object args[]) {	    return new LinkedList(Arrays.asList(args));	}	public static List list(final Object arg0) {	    return list(new Object[] { arg0 });	}	public static List list(final Object arg0, final Object arg1) {	    return list(new Object[] { arg0, arg1 });	}	public static List list(final Object arg0, final Object arg1, final Object arg2) {	    return list(new Object[] { arg0, arg1, arg2 });	}	public static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3) {	    return list(new Object[] { arg0, arg1, arg2, arg3 });	}	public static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3, final Object arg4) {	    return list(new Object[] { arg0, arg1, arg2, arg3, arg4 });	}	public static List list(final Object arg0, final Object arg1, final Object arg2, final Object arg3, final Object arg4, final Object arg5) {	    return list(new Object[] { arg0, arg1, arg2, arg3, arg4, arg5 });	}	public static void assertListContentsEqual(final List expected, final List found) {	    final Iterator e = expected.iterator();	    final Iterator f = found.iterator();	    while (e.hasNext() && f.hasNext()) {	        assertEquals(e.next(), f.next());	    }	    if (e.hasNext()) {	        fail(""Expected more elements"");	    }	    if (f.hasNext()) {	        fail(""Found more elements"");	    }	}	public static void assertContentsEqual(final Collection expected, final Collection found) {	    assertTrue(expected.containsAll(found));	    assertTrue(found.containsAll(expected));	    assertEquals(expected.size(), found.size());	}}"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,17,ackage org.apache.commons.cli2;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,19,mport java.util.Arrays;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,20,mport java.util.Collections;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,21,mport java.util.List;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,23,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,25,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,26,mport org.apache.commons.cli2.builder.SwitchBuilder;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,27,mport org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,30, Tests the interaction of command line values and defaults supplied in different ways.
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,32, Tests marked _Parsed involve values parsed from a command line.
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,34, Tests marked _Method involve defaults supplied in the query method.
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,36, Tests marked _Option involce defaults specified in the model.
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,38, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,40,ublic class CommandLineDefaultsTest extends TestCase {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,43, utils to grab the default from the method
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,46,"rivate Object methodSwitch(WriteableCommandLine cl, Option o, Boolean bool) {"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,47,"eturn cl.getSwitch(o, bool);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,50,"rivate Object methodSwitchNull(WriteableCommandLine cl, Option o) {"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,51,"eturn methodSwitch(cl, o, null);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,54,"rivate Object methodSwitchOff(WriteableCommandLine cl, Option o) {"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,55,"eturn methodSwitch(cl, o, Boolean.FALSE);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,58,"rivate Object methodSwitchOn(WriteableCommandLine cl, Option o) {"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,59,"eturn methodSwitch(cl, o, Boolean.TRUE);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,62,"rivate Object methodValueMissing(WriteableCommandLine cl, Option o) {"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,63,eturn cl.getValue(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,66,"rivate Object methodValuePresent(WriteableCommandLine cl, Option o) {"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,67,"eturn cl.getValue(o, ""method"");"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,71, utils to grab the default from the option model
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,74,rivate Option optionSwitch(Boolean bool) {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,75,"eturn new SwitchBuilder().withName(""switch"").withSwitchDefault(bool)"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,76,create();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,79,rivate Option optionSwitchNull() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,80,eturn optionSwitch(null);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,83,rivate Option optionSwitchOff() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,84,eturn optionSwitch(Boolean.FALSE);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,87,rivate Option optionSwitchOn() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,88,eturn optionSwitch(Boolean.TRUE);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,91,rivate Option optionValueMissing() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,92,eturn new ArgumentBuilder().create();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,95,rivate Option optionValuePresent() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,96,eturn new ArgumentBuilder().withDefaults(
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,97,"rrays.asList(new String[] { ""option"" })).create();"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,101, utils to grab the input from the command line
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,104,"rivate WriteableCommandLine parsedSwitch(Option o, Boolean bool) {"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,105,inal List args;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,106,f (bool == null) {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,107,rgs = Collections.EMPTY_LIST;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,108, else {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,109,rgs = Collections
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,110,singletonList(String.valueOf(bool).toLowerCase());
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,112,"riteableCommandLine cl = new WriteableCommandLineImpl(o, args);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,113,.defaults(cl);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,114,f (bool != null) {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,115,"l.addSwitch(o, bool.booleanValue());"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,117,eturn cl;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,120,rivate WriteableCommandLine parsedSwitchNull(Option o) {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,121,"eturn parsedSwitch(o, null);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,124,rivate WriteableCommandLine parsedSwitchOn(Option o) {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,125,"eturn parsedSwitch(o, Boolean.TRUE);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,128,rivate WriteableCommandLine parsedValueMissing(Option o) {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,129,"riteableCommandLine cl = new WriteableCommandLineImpl(o,"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,130,ollections.EMPTY_LIST);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,131,.defaults(cl);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,132,eturn cl;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,135,rivate WriteableCommandLine parsedValuePresent(Option o) {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,136,"riteableCommandLine cl = new WriteableCommandLineImpl(o, Arrays"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,137,"asList(new String[] { ""parsed"" }));"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,138,.defaults(cl);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,139,"l.addValue(o, ""parsed"");"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,140,eturn cl;
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,144, tests
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,147,ublic void testSwitch_Method() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,148,inal Option o = optionSwitchNull();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,149,inal WriteableCommandLine cl = parsedSwitchNull(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,150,"inal Object v = methodSwitchOn(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,151,"ssertEquals(Boolean.TRUE, v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,154,ublic void testSwitch_Method_Option() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,155,inal Option o = optionSwitchOff();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,156,inal WriteableCommandLine cl = parsedSwitchNull(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,157,"inal Object v = methodSwitchOn(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,158,"ssertEquals(Boolean.TRUE, v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,161,ublic void testSwitch_Option() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,162,inal Option o = optionSwitchOn();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,163,inal WriteableCommandLine cl = parsedSwitchNull(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,164,"inal Object v = methodSwitchNull(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,165,"ssertEquals(Boolean.TRUE, v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,168,ublic void testSwitch_Parsed() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,169,inal Option o = optionSwitchNull();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,170,inal WriteableCommandLine cl = parsedSwitchOn(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,171,"inal Object v = methodSwitchNull(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,172,"ssertEquals(Boolean.TRUE, v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,175,ublic void testSwitch_Parsed_Method() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,176,inal Option o = optionSwitchOff();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,177,inal WriteableCommandLine cl = parsedSwitchOn(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,178,"inal Object v = methodSwitchNull(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,179,"ssertEquals(Boolean.TRUE, v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,182,ublic void testSwitch_Parsed_Method_Option() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,183,inal Option o = optionSwitchOff();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,184,inal WriteableCommandLine cl = parsedSwitchOn(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,185,"inal Object v = methodSwitchOff(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,186,"ssertEquals(Boolean.TRUE, v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,189,ublic void testSwitch_Parsed_Option() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,190,inal Option o = optionSwitchOff();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,191,inal WriteableCommandLine cl = parsedSwitchOn(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,192,"inal Object v = methodSwitchNull(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,193,"ssertEquals(Boolean.TRUE, v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,196,ublic void testValues() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,197,inal Option o = optionValueMissing();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,198,inal WriteableCommandLine cl = parsedValueMissing(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,199,"inal Object v = methodValueMissing(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,200,ssertNull(v);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,203,ublic void testValues_Method() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,204,inal Option o = optionValueMissing();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,205,inal WriteableCommandLine cl = parsedValueMissing(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,206,"inal Object v = methodValuePresent(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,207,"ssertEquals(""method"", v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,210,ublic void testValues_Method_Option() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,211,inal Option o = optionValuePresent();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,212,inal WriteableCommandLine cl = parsedValueMissing(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,213,"inal Object v = methodValuePresent(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,214,"ssertEquals(""method"", v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,217,ublic void testValues_Option() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,218,inal Option o = optionValuePresent();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,219,inal WriteableCommandLine cl = parsedValueMissing(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,220,"inal Object v = methodValueMissing(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,221,"ssertEquals(""option"", v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,224,ublic void testValues_Parsed() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,225,inal Option o = optionValueMissing();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,226,inal WriteableCommandLine cl = parsedValuePresent(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,227,"inal Object v = methodValueMissing(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,228,"ssertEquals(""parsed"", v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,231,ublic void testValues_Parsed_Method() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,232,inal Option o = optionValueMissing();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,233,inal WriteableCommandLine cl = parsedValuePresent(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,234,"inal Object v = methodValuePresent(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,235,"ssertEquals(""parsed"", v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,238,ublic void testValues_Parsed_Method_Option() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,239,inal Option o = optionValuePresent();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,240,inal WriteableCommandLine cl = parsedValuePresent(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,241,"inal Object v = methodValuePresent(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,242,"ssertEquals(""parsed"", v);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,245,ublic void testValues_Parsed_Option() {
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,246,inal Option o = optionValuePresent();
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,247,inal WriteableCommandLine cl = parsedValuePresent(o);
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,248,"inal Object v = methodValueMissing(cl, o);"
False,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,249,"ssertEquals(""parsed"", v);"
True,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,src/test/org/apache/commons/cli2/CommandLineDefaultsTest.java,2,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Arrays;import java.util.Collections;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.SwitchBuilder;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;/** * Tests the interaction of command line values and defaults supplied in different ways. * * Tests marked _Parsed involve values parsed from a command line. * * Tests marked _Method involve defaults supplied in the query method. * * Tests marked _Option involce defaults specified in the model. * * @author Rob Oxspring */public class CommandLineDefaultsTest extends TestCase {    /*     * utils to grab the default from the method     */    private Object methodSwitch(WriteableCommandLine cl, Option o, Boolean bool) {        return cl.getSwitch(o, bool);    }    private Object methodSwitchNull(WriteableCommandLine cl, Option o) {        return methodSwitch(cl, o, null);    }    private Object methodSwitchOff(WriteableCommandLine cl, Option o) {        return methodSwitch(cl, o, Boolean.FALSE);    }    private Object methodSwitchOn(WriteableCommandLine cl, Option o) {        return methodSwitch(cl, o, Boolean.TRUE);    }    private Object methodValueMissing(WriteableCommandLine cl, Option o) {        return cl.getValue(o);    }    private Object methodValuePresent(WriteableCommandLine cl, Option o) {        return cl.getValue(o, ""method"");    }    /*     * utils to grab the default from the option model     */    private Option optionSwitch(Boolean bool) {        return new SwitchBuilder().withName(""switch"").withSwitchDefault(bool)                .create();    }    private Option optionSwitchNull() {        return optionSwitch(null);    }    private Option optionSwitchOff() {        return optionSwitch(Boolean.FALSE);    }    private Option optionSwitchOn() {        return optionSwitch(Boolean.TRUE);    }    private Option optionValueMissing() {        return new ArgumentBuilder().create();    }    private Option optionValuePresent() {        return new ArgumentBuilder().withDefaults(                Arrays.asList(new String[] { ""option"" })).create();    }    /*     * utils to grab the input from the command line     */    private WriteableCommandLine parsedSwitch(Option o, Boolean bool) {        final List args;        if (bool == null) {            args = Collections.EMPTY_LIST;        } else {            args = Collections                    .singletonList(String.valueOf(bool).toLowerCase());        }        WriteableCommandLine cl = new WriteableCommandLineImpl(o, args);        o.defaults(cl);        if (bool != null) {            cl.addSwitch(o, bool.booleanValue());        }        return cl;    }    private WriteableCommandLine parsedSwitchNull(Option o) {        return parsedSwitch(o, null);    }    private WriteableCommandLine parsedSwitchOn(Option o) {        return parsedSwitch(o, Boolean.TRUE);    }    private WriteableCommandLine parsedValueMissing(Option o) {        WriteableCommandLine cl = new WriteableCommandLineImpl(o,                Collections.EMPTY_LIST);        o.defaults(cl);        return cl;    }    private WriteableCommandLine parsedValuePresent(Option o) {        WriteableCommandLine cl = new WriteableCommandLineImpl(o, Arrays                .asList(new String[] { ""parsed"" }));        o.defaults(cl);        cl.addValue(o, ""parsed"");        return cl;    }    /*     * tests     */    public void testSwitch_Method() {        final Option o = optionSwitchNull();        final WriteableCommandLine cl = parsedSwitchNull(o);        final Object v = methodSwitchOn(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Method_Option() {        final Option o = optionSwitchOff();        final WriteableCommandLine cl = parsedSwitchNull(o);        final Object v = methodSwitchOn(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Option() {        final Option o = optionSwitchOn();        final WriteableCommandLine cl = parsedSwitchNull(o);        final Object v = methodSwitchNull(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Parsed() {        final Option o = optionSwitchNull();        final WriteableCommandLine cl = parsedSwitchOn(o);        final Object v = methodSwitchNull(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Parsed_Method() {        final Option o = optionSwitchOff();        final WriteableCommandLine cl = parsedSwitchOn(o);        final Object v = methodSwitchNull(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Parsed_Method_Option() {        final Option o = optionSwitchOff();        final WriteableCommandLine cl = parsedSwitchOn(o);        final Object v = methodSwitchOff(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testSwitch_Parsed_Option() {        final Option o = optionSwitchOff();        final WriteableCommandLine cl = parsedSwitchOn(o);        final Object v = methodSwitchNull(cl, o);        assertEquals(Boolean.TRUE, v);    }    public void testValues() {        final Option o = optionValueMissing();        final WriteableCommandLine cl = parsedValueMissing(o);        final Object v = methodValueMissing(cl, o);        assertNull(v);    }    public void testValues_Method() {        final Option o = optionValueMissing();        final WriteableCommandLine cl = parsedValueMissing(o);        final Object v = methodValuePresent(cl, o);        assertEquals(""method"", v);    }    public void testValues_Method_Option() {        final Option o = optionValuePresent();        final WriteableCommandLine cl = parsedValueMissing(o);        final Object v = methodValuePresent(cl, o);        assertEquals(""method"", v);    }    public void testValues_Option() {        final Option o = optionValuePresent();        final WriteableCommandLine cl = parsedValueMissing(o);        final Object v = methodValueMissing(cl, o);        assertEquals(""option"", v);    }    public void testValues_Parsed() {        final Option o = optionValueMissing();        final WriteableCommandLine cl = parsedValuePresent(o);        final Object v = methodValueMissing(cl, o);        assertEquals(""parsed"", v);    }    public void testValues_Parsed_Method() {        final Option o = optionValueMissing();        final WriteableCommandLine cl = parsedValuePresent(o);        final Object v = methodValuePresent(cl, o);        assertEquals(""parsed"", v);    }    public void testValues_Parsed_Method_Option() {        final Option o = optionValuePresent();        final WriteableCommandLine cl = parsedValuePresent(o);        final Object v = methodValuePresent(cl, o);        assertEquals(""parsed"", v);    }    public void testValues_Parsed_Option() {        final Option o = optionValuePresent();        final WriteableCommandLine cl = parsedValuePresent(o);        final Object v = methodValueMissing(cl, o);        assertEquals(""parsed"", v);    }}"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,17,ackage org.apache.commons.cli2;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,19,mport java.util.Collections;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,20,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,21,mport java.util.List;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,23,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,24,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,25,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,26,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,27,mport org.apache.commons.cli2.option.ArgumentTest;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,28,mport org.apache.commons.cli2.option.CommandTest;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,29,mport org.apache.commons.cli2.option.DefaultOptionTest;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,30,mport org.apache.commons.cli2.option.OptionTestCase;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,31,mport org.apache.commons.cli2.option.PropertyOption;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,32,mport org.apache.commons.cli2.option.SwitchTest;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,33,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,34,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,36,ublic abstract class CommandLineTestCase
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,37,xtends CLITestCase {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,38,rivate static final ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,39,ublic final Option present =
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,40,"ew DefaultOptionBuilder().withLongName(""present"").withLongName(""alsopresent"").create();"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,41,"ublic final Option missing = new DefaultOptionBuilder().withLongName(""missing"").create();"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,42,"ublic final Option multiple = new DefaultOptionBuilder().withLongName(""multiple"").create();"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,43,"ublic final Option bool = new DefaultOptionBuilder().withLongName(""bool"").create();"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,44,ublic final Option root =
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,45,ew GroupBuilder().withOption(present).withOption(missing).withOption(multiple)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,46,withOption(bool).create();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,47,rivate CommandLine commandLine;
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,49,rotected abstract CommandLine createCommandLine();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,52, @see TestCase#setUp()
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,54,ublic void setUp()
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,55,hrows Exception {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,56,uper.setUp();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,57,ommandLine = createCommandLine();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,61, Class to test for boolean hasOption(String)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,63,ublic final void testHasOptionString() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,64,"ssertTrue(commandLine.hasOption(""--present""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,65,"ssertTrue(commandLine.hasOption(""--alsopresent""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,66,"ssertFalse(commandLine.hasOption(""--missing""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,70, Class to test for boolean hasOption(Option)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,72,ublic final void testHasOptionOption() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,73,ssertTrue(commandLine.hasOption(present));
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,74,ssertFalse(commandLine.hasOption(missing));
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,77,ublic final void testGetOption() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,78,"ssertSame(present, commandLine.getOption(""--present""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,79,"ssertSame(present, commandLine.getOption(""--alsopresent""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,81,/TODO decide whether the following assertion is valid
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,82,"/assertSame(missing,commandLine.getOption(""--missing""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,86, Class to test for List getValues(String)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,88,ublic final void testGetValuesString() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,89,"ssertListContentsEqual(list(""present value""), commandLine.getValues(""--present""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,90,"ssertListContentsEqual(list(""value 1"", ""value 2"", ""value 3""),"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,91,"ommandLine.getValues(""--multiple""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,92,"ssertTrue(commandLine.getValues(""--missing"").isEmpty());"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,96," Class to test for List getValues(String, List)"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,98,ublic final void testGetValuesStringList() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,99,"ssertListContentsEqual(list(""present value""), commandLine.getValues(""--present"", null));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,100,"ssertListContentsEqual(list(""present value""), commandLine.getValues(""--alsopresent"", null));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,101,"ssertSame(commandLine.getValues(""--missing"", Collections.EMPTY_LIST),"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,102,ollections.EMPTY_LIST);
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,104,"inal List def = Collections.singletonList(""default value"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,105,"ssertSame(def, commandLine.getValues(""--missing"", def));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,109, Class to test for List getValues(Option)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,111,ublic final void testGetValuesOption() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,112,"ssertListContentsEqual(list(""present value""), commandLine.getValues(present));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,113,ssertTrue(commandLine.getValues(missing).isEmpty());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,117," Class to test for List getValues(Option, List)"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,119,ublic final void testGetValuesOptionList() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,120,"ssertListContentsEqual(list(""present value""), commandLine.getValues(present));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,121,"ssertSame(commandLine.getValues(missing, Collections.EMPTY_LIST), Collections.EMPTY_LIST);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,123,"inal List defs = Collections.singletonList(""custom default"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,124,"ssertSame(defs, commandLine.getValues(missing, defs));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,128, Class to test for Object getValue(String)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,130,ublic final void testGetValueString() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,131,"ssertEquals(""present value"", commandLine.getValue(""--present""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,132,"ssertEquals(""present value"", commandLine.getValue(""--alsopresent""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,133,"ssertNull(commandLine.getValue(""--missing""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,135,ry {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,136,"ommandLine.getValue(""--multiple"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,137,"ail(""expected IllegalStateException"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,138, catch (IllegalStateException e) {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,139,"ssertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,140,.getMessage());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,145," Class to test for Object getValue(String, Object)"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,147,ublic final void testGetValueStringObject() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,148,"ssertEquals(""present value"", commandLine.getValue(""--present"", ""default value""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,149,"ssertEquals(""present value"", commandLine.getValue(""--alsopresent"", ""default value""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,150,"ssertEquals(""default value"", commandLine.getValue(""--missing"", ""default value""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,152,ry {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,153,"ommandLine.getValue(""--multiple"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,154,"ail(""expected IllegalStateException"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,155, catch (IllegalStateException e) {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,156,"ssertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,157,.getMessage());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,162, Class to test for Object getValue(Option)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,164,ublic final void testGetValueOption() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,165,"ssertEquals(""present value"", commandLine.getValue(present));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,166,ssertNull(commandLine.getValue(missing));
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,168,ry {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,169,ommandLine.getValue(multiple);
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,170,"ail(""expected IllegalStateException"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,171, catch (IllegalStateException e) {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,172,"ssertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,173,.getMessage());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,178," Class to test for Object getValue(Option, Object)"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,180,ublic final void testGetValueOptionObject() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,181,"ssertEquals(""present value"", commandLine.getValue(present, ""default value""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,182,"ssertEquals(""default value"", commandLine.getValue(missing, ""default value""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,184,ry {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,185,ommandLine.getValue(multiple);
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,186,"ail(""expected IllegalStateException"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,187, catch (IllegalStateException e) {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,188,"ssertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,189,.getMessage());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,194, Class to test for Boolean getSwitch(String)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,196,ublic final void testGetSwitchString() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,197,"ssertEquals(Boolean.TRUE, commandLine.getSwitch(""--bool""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,198,"ssertNull(commandLine.getSwitch(""--missing""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,202," Class to test for Boolean getSwitch(String, Boolean)"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,204,ublic final void testGetSwitchStringBoolean() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,205,"ssertEquals(Boolean.TRUE, commandLine.getSwitch(""--bool"", Boolean.FALSE));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,206,"ssertEquals(Boolean.FALSE, commandLine.getSwitch(""--missing"", Boolean.FALSE));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,210, Class to test for Boolean getSwitch(Option)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,212,ublic final void testGetSwitchOption() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,213,"ssertEquals(Boolean.TRUE, commandLine.getSwitch(bool));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,214,ssertNull(commandLine.getSwitch(missing));
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,218," Class to test for Boolean getSwitch(Option, Boolean)"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,220,ublic final void testGetSwitchOptionBoolean() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,221,"ssertEquals(Boolean.TRUE, commandLine.getSwitch(bool, Boolean.FALSE));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,222,"ssertEquals(Boolean.FALSE, commandLine.getSwitch(missing, Boolean.FALSE));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,226, Class to test for String getProperty(String)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,228,ublic final void testGetPropertyString() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,229,"ssertEquals(""present property"", commandLine.getProperty(""present""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,230,"ssertNull(commandLine.getProperty(""missing""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,234," Class to test for String getProperty(String, String)"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,236,ublic final void testGetPropertyStringString() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,237,"ssertEquals(""present property"", commandLine.getProperty(""present"", ""default property""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,238,"ssertEquals(""default property"", commandLine.getProperty(""missing"", ""default property""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,241,ublic final void testGetProperties() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,242,"ssertTrue(commandLine.getProperties().containsAll(list(""present"")));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,246, Class to test for int getOptionCount(String)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,248,ublic final void testGetOptionCountString() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,249,"/ one option, one switch"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,250,"ssertTrue(1 <= commandLine.getOptionCount(""--present""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,251,"ssertTrue(1 <= commandLine.getOptionCount(""--bool""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,252,"ssertEquals(0, commandLine.getOptionCount(""--missing""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,256, Class to test for int getOptionCount(Option)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,258,ublic final void testGetOptionCountOption() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,259,"/ one option, one switch"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,260,ssertTrue(1 <= commandLine.getOptionCount(present));
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,261,ssertTrue(1 <= commandLine.getOptionCount(bool));
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,262,"ssertEquals(0, commandLine.getOptionCount(missing));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,265,ublic final void testGetOptions() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,266,/TODO Implement getOptions().
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,269,ublic final void testGetOptionTriggers() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,270,/TODO Implement getOptionTriggers().
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,273,/ OLD TESTS FOLLOW
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,274,ublic final void testProperties() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,275,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,276,inal List args = CLITestCase.list();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,277,"inal WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,279,ssertTrue(writeable.getProperties().isEmpty());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,281,"riteable.addProperty(""myprop"", ""myval"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,282,"ssertEquals(1, writeable.getProperties().size());"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,283,"ssertEquals(""myval"", writeable.getProperty(""myprop""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,285,"riteable.addProperty(""myprop"", ""myval2"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,286,"ssertEquals(1, writeable.getProperties().size());"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,287,"ssertEquals(""myval2"", writeable.getProperty(""myprop""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,289,"riteable.addProperty(""myprop2"", ""myval3"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,290,"ssertEquals(2, writeable.getProperties().size());"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,291,"ssertEquals(""myval3"", writeable.getProperty(""myprop2""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,294,ublic final void testOptions() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,295,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,296,inal List args = CLITestCase.list();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,297,"inal WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,299,inal Option start = CommandTest.buildStartCommand();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,301,ssertFalse(writeable.hasOption(start));
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,302,"ssertFalse(writeable.hasOption(""start""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,303,"ssertFalse(writeable.hasOption(""go""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,305,riteable.addOption(start);
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,307,ssertTrue(writeable.hasOption(start));
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,308,"ssertTrue(writeable.hasOption(""start""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,309,"ssertTrue(writeable.hasOption(""go""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,312,ublic final void testValues() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,313,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,314,inal List args = CLITestCase.list();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,315,"inal WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,317,inal Option start = CommandTest.buildStartCommand();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,319,ssertNull(writeable.getValue(start));
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,320,ssertTrue(writeable.getValues(start).isEmpty());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,322,riteable.addOption(start);
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,324,ssertTrue(writeable.getValues(start).isEmpty());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,326,"riteable.addValue(start, ""file1"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,328,"ssertEquals(""file1"", writeable.getValue(start));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,329,"ssertEquals(""file1"", writeable.getValue(""start""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,330,"ssertEquals(""file1"", writeable.getValue(""go""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,331,"ssertEquals(1, writeable.getValues(start).size());"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,332,"ssertEquals(1, writeable.getValues(""start"").size());"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,333,"ssertEquals(1, writeable.getValues(""go"").size());"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,334,"ssertTrue(writeable.getValues(start).contains(""file1""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,335,"ssertTrue(writeable.getValues(""start"").contains(""file1""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,336,"ssertTrue(writeable.getValues(""go"").contains(""file1""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,338,"riteable.addValue(start, ""file2"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,340,ry {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,341,riteable.getValue(start);
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,342,"ail(""Cannot get single value if multiple are present"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,343, catch (IllegalStateException ise) {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,344,"ssertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,345,se.getMessage());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,348,ry {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,349,"riteable.getValue(""start"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,350,"ail(""Cannot get single value if multiple are present"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,351, catch (IllegalStateException ise) {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,352,"ssertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,353,se.getMessage());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,356,"riteable.getValues(start).add(""file3"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,359,ublic final void testSwitches() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,360,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,361,inal List args = CLITestCase.list();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,362,"inal WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,364,inal Option start = CommandTest.buildStartCommand();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,366,ssertNull(writeable.getSwitch(start));
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,367,"ssertNull(writeable.getSwitch(""start""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,368,"ssertNull(writeable.getSwitch(""go""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,370,"riteable.addSwitch(start, true);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,372,ry {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,373,"riteable.addSwitch(start, false);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,374,"ail(""Switch cannot be changed"");"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,375, catch (IllegalStateException ise) {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,376,"ssertEquals(resources.getMessage(ResourceConstants.SWITCH_ALREADY_SET),"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,377,se.getMessage());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,381,ublic final void testSwitches_True() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,382,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,383,inal List args = CLITestCase.list();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,384,"inal WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,386,inal Option start = CommandTest.buildStartCommand();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,388,"riteable.addSwitch(start, true);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,389,"ssertSame(Boolean.TRUE, writeable.getSwitch(start));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,392,ublic final void testSwitches_False() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,393,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,394,inal List args = CLITestCase.list();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,395,"inal WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,397,inal Option start = CommandTest.buildStartCommand();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,399,"riteable.addSwitch(start, false);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,400,"ssertSame(Boolean.FALSE, writeable.getSwitch(start));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,403,/    public final void testLooksLikeOption() {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,404,/        final Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,405,/        final List args = OptionTestCase.list();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,406,/        final WriteableCommandLine commandLine =
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,407,"/            OptionTestCase.commandLine(option, args);"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,409,"/        assertTrue(commandLine.looksLikeOption(""-D""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,410,"/        assertFalse(commandLine.looksLikeOption(""--help""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,411,"/        assertFalse(commandLine.looksLikeOption(""+display""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,412,"/        assertFalse(commandLine.looksLikeOption(""myprefix""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,413,"/        assertFalse(commandLine.looksLikeOption(""myprefix2""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,414,"/        assertFalse(commandLine.looksLikeOption(""myprefference""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,415,"/        assertFalse(commandLine.looksLikeOption(""/SCANDISK""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,416,"/        assertFalse(commandLine.looksLikeOption(""update""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,418,ublic final void testGetOptions_Order()
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,419,hrows OptionException {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,420,inal Option help = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,421,inal Option login = CommandTest.buildLoginCommand();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,422,inal Option targets = ArgumentTest.buildTargetsArgument();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,424,inal Group group =
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,425,ew GroupBuilder().withOption(help).withOption(login).withOption(targets).create();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,427,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,428,arser.setGroup(group);
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,430,inal CommandLine cl =
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,431,"arser.parse(new String[] { ""login"", ""rob"", ""--help"", ""target1"", ""target2"" });"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,433,inal Iterator i = cl.getOptions().iterator();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,435,"ssertSame(login, i.next());"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,436,"ssertSame(help, i.next());"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,437,"ssertSame(targets, i.next());"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,438,"ssertSame(targets, i.next());"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,439,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,442,ublic final void testGetOptionCount()
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,443,hrows OptionException {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,444,inal Option help = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,445,inal Option login = CommandTest.buildLoginCommand();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,446,inal Option targets = ArgumentTest.buildTargetsArgument();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,447,inal Option display = SwitchTest.buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,449,inal Group group =
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,450,ew GroupBuilder().withOption(help).withOption(login).withOption(targets)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,451,withOption(display).create();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,453,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,454,arser.setGroup(group);
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,456,inal CommandLine cl =
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,457,arser.parse(new String[] {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,458,"--help"", ""login"", ""rob"", ""+display"", ""--help"", ""--help"", ""target1"","
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,459,"target2"""
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,462,"ssertEquals(1, cl.getOptionCount(login));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,463,"ssertEquals(3, cl.getOptionCount(help));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,464,"ssertEquals(2, cl.getOptionCount(targets));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,465,"ssertEquals(1, cl.getOptionCount(display));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,468,ublic final void testGetOptionCount_Strings()
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,469,hrows OptionException {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,470,inal Option help = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,471,inal Option login = CommandTest.buildLoginCommand();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,472,inal Option targets = ArgumentTest.buildTargetsArgument();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,473,inal Option display = SwitchTest.buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,475,inal Group group =
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,476,ew GroupBuilder().withOption(help).withOption(login).withOption(targets)
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,477,withOption(display).create();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,479,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,480,arser.setGroup(group);
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,482,inal CommandLine cl =
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,483,arser.parse(new String[] {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,484,"--help"", ""login"", ""rob"", ""+display"", ""--help"", ""--help"", ""target1"","
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,485,"target2"""
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,488,"ssertEquals(1, cl.getOptionCount(""login""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,489,"ssertEquals(3, cl.getOptionCount(""-?""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,490,"ssertEquals(1, cl.getOptionCount(""+display""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,493,ublic final void testOptionAsArgument()
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,494,hrows OptionException {
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,495,"inal Option p = new DefaultOptionBuilder().withShortName(""p"").create();"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,496,inal Argument argument = new ArgumentBuilder().create();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,497,inal Option withArgument =
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,498,"ew DefaultOptionBuilder().withShortName(""attr"").withArgument(argument).create();"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,500,inal Group group = new GroupBuilder().withOption(p).withOption(withArgument).create();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,502,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,503,arser.setGroup(group);
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,505,"inal CommandLine cl = parser.parse(new String[] { ""-p"", ""-attr"", ""p"" });"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,507,"ssertEquals(1, cl.getOptionCount(""-p""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,508,"ssertTrue(cl.hasOption(""-p""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,509,"ssertTrue(cl.hasOption(""-attr""));"
False,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,510,"ssertTrue(cl.getValue(""-attr"").equals(""p""));"
True,src/test/org/apache/commons/cli2/CommandLineTestCase.java,src/test/org/apache/commons/cli2/CommandLineTestCase.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Collections;import java.util.Iterator;import java.util.List;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.option.ArgumentTest;import org.apache.commons.cli2.option.CommandTest;import org.apache.commons.cli2.option.DefaultOptionTest;import org.apache.commons.cli2.option.OptionTestCase;import org.apache.commons.cli2.option.PropertyOption;import org.apache.commons.cli2.option.SwitchTest;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;public abstract class CommandLineTestCase    extends CLITestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    public final Option present =        new DefaultOptionBuilder().withLongName(""present"").withLongName(""alsopresent"").create();    public final Option missing = new DefaultOptionBuilder().withLongName(""missing"").create();    public final Option multiple = new DefaultOptionBuilder().withLongName(""multiple"").create();    public final Option bool = new DefaultOptionBuilder().withLongName(""bool"").create();    public final Option root =        new GroupBuilder().withOption(present).withOption(missing).withOption(multiple)                          .withOption(bool).create();    private CommandLine commandLine;    protected abstract CommandLine createCommandLine();    /*     * @see TestCase#setUp()     */    public void setUp()        throws Exception {        super.setUp();        commandLine = createCommandLine();    }    /*     * Class to test for boolean hasOption(String)     */    public final void testHasOptionString() {        assertTrue(commandLine.hasOption(""--present""));        assertTrue(commandLine.hasOption(""--alsopresent""));        assertFalse(commandLine.hasOption(""--missing""));    }    /*     * Class to test for boolean hasOption(Option)     */    public final void testHasOptionOption() {        assertTrue(commandLine.hasOption(present));        assertFalse(commandLine.hasOption(missing));    }    public final void testGetOption() {        assertSame(present, commandLine.getOption(""--present""));        assertSame(present, commandLine.getOption(""--alsopresent""));        //TODO decide whether the following assertion is valid        //assertSame(missing,commandLine.getOption(""--missing""));    }    /*     * Class to test for List getValues(String)     */    public final void testGetValuesString() {        assertListContentsEqual(list(""present value""), commandLine.getValues(""--present""));        assertListContentsEqual(list(""value 1"", ""value 2"", ""value 3""),                                commandLine.getValues(""--multiple""));        assertTrue(commandLine.getValues(""--missing"").isEmpty());    }    /*     * Class to test for List getValues(String, List)     */    public final void testGetValuesStringList() {        assertListContentsEqual(list(""present value""), commandLine.getValues(""--present"", null));        assertListContentsEqual(list(""present value""), commandLine.getValues(""--alsopresent"", null));        assertSame(commandLine.getValues(""--missing"", Collections.EMPTY_LIST),                   Collections.EMPTY_LIST);        final List def = Collections.singletonList(""default value"");        assertSame(def, commandLine.getValues(""--missing"", def));    }    /*     * Class to test for List getValues(Option)     */    public final void testGetValuesOption() {        assertListContentsEqual(list(""present value""), commandLine.getValues(present));        assertTrue(commandLine.getValues(missing).isEmpty());    }    /*     * Class to test for List getValues(Option, List)     */    public final void testGetValuesOptionList() {        assertListContentsEqual(list(""present value""), commandLine.getValues(present));        assertSame(commandLine.getValues(missing, Collections.EMPTY_LIST), Collections.EMPTY_LIST);        final List defs = Collections.singletonList(""custom default"");        assertSame(defs, commandLine.getValues(missing, defs));    }    /*     * Class to test for Object getValue(String)     */    public final void testGetValueString() {        assertEquals(""present value"", commandLine.getValue(""--present""));        assertEquals(""present value"", commandLine.getValue(""--alsopresent""));        assertNull(commandLine.getValue(""--missing""));        try {            commandLine.getValue(""--multiple"");            fail(""expected IllegalStateException"");        } catch (IllegalStateException e) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         e.getMessage());        }    }    /*     * Class to test for Object getValue(String, Object)     */    public final void testGetValueStringObject() {        assertEquals(""present value"", commandLine.getValue(""--present"", ""default value""));        assertEquals(""present value"", commandLine.getValue(""--alsopresent"", ""default value""));        assertEquals(""default value"", commandLine.getValue(""--missing"", ""default value""));        try {            commandLine.getValue(""--multiple"");            fail(""expected IllegalStateException"");        } catch (IllegalStateException e) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         e.getMessage());        }    }    /*     * Class to test for Object getValue(Option)     */    public final void testGetValueOption() {        assertEquals(""present value"", commandLine.getValue(present));        assertNull(commandLine.getValue(missing));        try {            commandLine.getValue(multiple);            fail(""expected IllegalStateException"");        } catch (IllegalStateException e) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         e.getMessage());        }    }    /*     * Class to test for Object getValue(Option, Object)     */    public final void testGetValueOptionObject() {        assertEquals(""present value"", commandLine.getValue(present, ""default value""));        assertEquals(""default value"", commandLine.getValue(missing, ""default value""));        try {            commandLine.getValue(multiple);            fail(""expected IllegalStateException"");        } catch (IllegalStateException e) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         e.getMessage());        }    }    /*     * Class to test for Boolean getSwitch(String)     */    public final void testGetSwitchString() {        assertEquals(Boolean.TRUE, commandLine.getSwitch(""--bool""));        assertNull(commandLine.getSwitch(""--missing""));    }    /*     * Class to test for Boolean getSwitch(String, Boolean)     */    public final void testGetSwitchStringBoolean() {        assertEquals(Boolean.TRUE, commandLine.getSwitch(""--bool"", Boolean.FALSE));        assertEquals(Boolean.FALSE, commandLine.getSwitch(""--missing"", Boolean.FALSE));    }    /*     * Class to test for Boolean getSwitch(Option)     */    public final void testGetSwitchOption() {        assertEquals(Boolean.TRUE, commandLine.getSwitch(bool));        assertNull(commandLine.getSwitch(missing));    }    /*     * Class to test for Boolean getSwitch(Option, Boolean)     */    public final void testGetSwitchOptionBoolean() {        assertEquals(Boolean.TRUE, commandLine.getSwitch(bool, Boolean.FALSE));        assertEquals(Boolean.FALSE, commandLine.getSwitch(missing, Boolean.FALSE));    }    /*     * Class to test for String getProperty(String)     */    public final void testGetPropertyString() {        assertEquals(""present property"", commandLine.getProperty(""present""));        assertNull(commandLine.getProperty(""missing""));    }    /*     * Class to test for String getProperty(String, String)     */    public final void testGetPropertyStringString() {        assertEquals(""present property"", commandLine.getProperty(""present"", ""default property""));        assertEquals(""default property"", commandLine.getProperty(""missing"", ""default property""));    }    public final void testGetProperties() {        assertTrue(commandLine.getProperties().containsAll(list(""present"")));    }    /*     * Class to test for int getOptionCount(String)     */    public final void testGetOptionCountString() {        // one option, one switch        assertTrue(1 <= commandLine.getOptionCount(""--present""));        assertTrue(1 <= commandLine.getOptionCount(""--bool""));        assertEquals(0, commandLine.getOptionCount(""--missing""));    }    /*     * Class to test for int getOptionCount(Option)     */    public final void testGetOptionCountOption() {        // one option, one switch        assertTrue(1 <= commandLine.getOptionCount(present));        assertTrue(1 <= commandLine.getOptionCount(bool));        assertEquals(0, commandLine.getOptionCount(missing));    }    public final void testGetOptions() {        //TODO Implement getOptions().    }    public final void testGetOptionTriggers() {        //TODO Implement getOptionTriggers().    }    // OLD TESTS FOLLOW    public final void testProperties() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        assertTrue(writeable.getProperties().isEmpty());        writeable.addProperty(""myprop"", ""myval"");        assertEquals(1, writeable.getProperties().size());        assertEquals(""myval"", writeable.getProperty(""myprop""));        writeable.addProperty(""myprop"", ""myval2"");        assertEquals(1, writeable.getProperties().size());        assertEquals(""myval2"", writeable.getProperty(""myprop""));        writeable.addProperty(""myprop2"", ""myval3"");        assertEquals(2, writeable.getProperties().size());        assertEquals(""myval3"", writeable.getProperty(""myprop2""));    }    public final void testOptions() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        final Option start = CommandTest.buildStartCommand();        assertFalse(writeable.hasOption(start));        assertFalse(writeable.hasOption(""start""));        assertFalse(writeable.hasOption(""go""));        writeable.addOption(start);        assertTrue(writeable.hasOption(start));        assertTrue(writeable.hasOption(""start""));        assertTrue(writeable.hasOption(""go""));    }    public final void testValues() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        final Option start = CommandTest.buildStartCommand();        assertNull(writeable.getValue(start));        assertTrue(writeable.getValues(start).isEmpty());        writeable.addOption(start);        assertTrue(writeable.getValues(start).isEmpty());        writeable.addValue(start, ""file1"");        assertEquals(""file1"", writeable.getValue(start));        assertEquals(""file1"", writeable.getValue(""start""));        assertEquals(""file1"", writeable.getValue(""go""));        assertEquals(1, writeable.getValues(start).size());        assertEquals(1, writeable.getValues(""start"").size());        assertEquals(1, writeable.getValues(""go"").size());        assertTrue(writeable.getValues(start).contains(""file1""));        assertTrue(writeable.getValues(""start"").contains(""file1""));        assertTrue(writeable.getValues(""go"").contains(""file1""));        writeable.addValue(start, ""file2"");        try {            writeable.getValue(start);            fail(""Cannot get single value if multiple are present"");        } catch (IllegalStateException ise) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         ise.getMessage());        }        try {            writeable.getValue(""start"");            fail(""Cannot get single value if multiple are present"");        } catch (IllegalStateException ise) {            assertEquals(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_VALUES),                         ise.getMessage());        }        writeable.getValues(start).add(""file3"");    }    public final void testSwitches() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        final Option start = CommandTest.buildStartCommand();        assertNull(writeable.getSwitch(start));        assertNull(writeable.getSwitch(""start""));        assertNull(writeable.getSwitch(""go""));        writeable.addSwitch(start, true);        try {            writeable.addSwitch(start, false);            fail(""Switch cannot be changed"");        } catch (IllegalStateException ise) {            assertEquals(resources.getMessage(ResourceConstants.SWITCH_ALREADY_SET),                         ise.getMessage());        }    }    public final void testSwitches_True() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        final Option start = CommandTest.buildStartCommand();        writeable.addSwitch(start, true);        assertSame(Boolean.TRUE, writeable.getSwitch(start));    }    public final void testSwitches_False() {        final Option option = new PropertyOption();        final List args = CLITestCase.list();        final WriteableCommandLine writeable = OptionTestCase.commandLine(option, args);        final Option start = CommandTest.buildStartCommand();        writeable.addSwitch(start, false);        assertSame(Boolean.FALSE, writeable.getSwitch(start));    }    //    public final void testLooksLikeOption() {    //        final Option option = new PropertyOption();    //        final List args = OptionTestCase.list();    //        final WriteableCommandLine commandLine =    //            OptionTestCase.commandLine(option, args);    //    //        assertTrue(commandLine.looksLikeOption(""-D""));    //        assertFalse(commandLine.looksLikeOption(""--help""));    //        assertFalse(commandLine.looksLikeOption(""+display""));    //        assertFalse(commandLine.looksLikeOption(""myprefix""));    //        assertFalse(commandLine.looksLikeOption(""myprefix2""));    //        assertFalse(commandLine.looksLikeOption(""myprefference""));    //        assertFalse(commandLine.looksLikeOption(""/SCANDISK""));    //        assertFalse(commandLine.looksLikeOption(""update""));    //    }    public final void testGetOptions_Order()        throws OptionException {        final Option help = DefaultOptionTest.buildHelpOption();        final Option login = CommandTest.buildLoginCommand();        final Option targets = ArgumentTest.buildTargetsArgument();        final Group group =            new GroupBuilder().withOption(help).withOption(login).withOption(targets).create();        final Parser parser = new Parser();        parser.setGroup(group);        final CommandLine cl =            parser.parse(new String[] { ""login"", ""rob"", ""--help"", ""target1"", ""target2"" });        final Iterator i = cl.getOptions().iterator();        assertSame(login, i.next());        assertSame(help, i.next());        assertSame(targets, i.next());        assertSame(targets, i.next());        assertFalse(i.hasNext());    }    public final void testGetOptionCount()        throws OptionException {        final Option help = DefaultOptionTest.buildHelpOption();        final Option login = CommandTest.buildLoginCommand();        final Option targets = ArgumentTest.buildTargetsArgument();        final Option display = SwitchTest.buildDisplaySwitch();        final Group group =            new GroupBuilder().withOption(help).withOption(login).withOption(targets)                              .withOption(display).create();        final Parser parser = new Parser();        parser.setGroup(group);        final CommandLine cl =            parser.parse(new String[] {                             ""--help"", ""login"", ""rob"", ""+display"", ""--help"", ""--help"", ""target1"",                             ""target2""                         });        assertEquals(1, cl.getOptionCount(login));        assertEquals(3, cl.getOptionCount(help));        assertEquals(2, cl.getOptionCount(targets));        assertEquals(1, cl.getOptionCount(display));    }    public final void testGetOptionCount_Strings()        throws OptionException {        final Option help = DefaultOptionTest.buildHelpOption();        final Option login = CommandTest.buildLoginCommand();        final Option targets = ArgumentTest.buildTargetsArgument();        final Option display = SwitchTest.buildDisplaySwitch();        final Group group =            new GroupBuilder().withOption(help).withOption(login).withOption(targets)                              .withOption(display).create();        final Parser parser = new Parser();        parser.setGroup(group);        final CommandLine cl =            parser.parse(new String[] {                             ""--help"", ""login"", ""rob"", ""+display"", ""--help"", ""--help"", ""target1"",                             ""target2""                         });        assertEquals(1, cl.getOptionCount(""login""));        assertEquals(3, cl.getOptionCount(""-?""));        assertEquals(1, cl.getOptionCount(""+display""));    }    public final void testOptionAsArgument()        throws OptionException {        final Option p = new DefaultOptionBuilder().withShortName(""p"").create();        final Argument argument = new ArgumentBuilder().create();        final Option withArgument =            new DefaultOptionBuilder().withShortName(""attr"").withArgument(argument).create();        final Group group = new GroupBuilder().withOption(p).withOption(withArgument).create();        final Parser parser = new Parser();        parser.setGroup(group);        final CommandLine cl = parser.parse(new String[] { ""-p"", ""-attr"", ""p"" });        assertEquals(1, cl.getOptionCount(""-p""));        assertTrue(cl.hasOption(""-p""));        assertTrue(cl.hasOption(""-attr""));        assertTrue(cl.getValue(""-attr"").equals(""p""));    }}"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,17,ackage org.apache.commons.cli2;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,19,mport java.io.IOException;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,20,mport java.io.PrintWriter;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,21,mport java.io.StringWriter;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,22,mport java.util.ArrayList;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,23,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,24,mport java.util.List;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,26,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,28,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,29,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,30,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,31,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,32,mport org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,33,mport org.apache.commons.cli2.option.DefaultOption;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,34,mport org.apache.commons.cli2.option.PropertyOption;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,35,mport org.apache.commons.cli2.util.HelpFormatter;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,38, @author Rob
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,40,ublic class DocumentationTest extends TestCase {
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,42,"ublic void testBasicUsage() throws IOException, OptionException {"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,43,elpFormatter helpFormatter = new HelpFormatter();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,44,/ignore all printed
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,45,elpFormatter.setPrintWriter(new PrintWriter(new StringWriter()));
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,48, --version -? -h --help -log file -s|-q|-v|-d Bursting File/Num/Date
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,49, validation Switches Commands Auto help Auto exception help
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,52,efaultOptionBuilder obuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,53,ption version =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,54,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,55,"withLongName(""version"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,56,"withDescription(""Displays version information and then exits"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,57,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,59,ption help =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,60,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,61,"withShortName(""h"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,62,"withShortName(""?"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,63,"withLongName(""help"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,64,"withDescription(""Displays help on usage and then exits"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,65,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,67,rgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,68,rgument logFile =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,69,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,70,"withDescription(""The log file to write to"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,71,"withName(""file"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,72,withMinimum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,73,withMaximum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,74,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,75,ption log =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,76,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,77,withArgument(logFile)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,78,"withShortName(""log"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,79,"withDescription(""Log progress information to a file"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,80,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,82,roupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,83,roup outputQuality =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,84,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,85,"withName(""quality"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,86,"withDescription(""Controls the quality of console output"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,87,withMaximum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,88,withOption(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,89,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,90,"withShortName(""s"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,91,"withDescription(""Silent"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,92,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,93,withOption(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,94,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,95,"withShortName(""q"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,96,"withDescription(""Quiet"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,97,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,98,withOption(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,99,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,100,"withShortName(""n"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,101,"withDescription(""Normal"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,102,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,103,withOption(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,104,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,105,"withShortName(""v"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,106,"withDescription(""Verbose"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,107,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,108,withOption(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,109,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,110,"withShortName(""d"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,111,"withDescription(""Debug"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,112,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,113,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,115,roup options =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,116,ew GroupBuilder()
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,117,"withName(""options"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,118,withOption(version)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,119,withOption(help)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,120,withOption(log)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,121,withOption(outputQuality)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,122,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,124,"inal String[] args = new String[] { ""--bad-option"" };"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,126,arser parser = new Parser();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,127,arser.setHelpFormatter(helpFormatter);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,128,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,129,arser.setHelpOption(help);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,130,ommandLine commandLine = parser.parseAndHelp(args);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,131,f (commandLine != null) {
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,132,f (commandLine.hasOption(version)) {
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,133,"ystem.out.println(""MyApp ver 1.0"");"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,134,eturn;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,136,"f (commandLine.hasOption(""-log"")) {"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,137,"tring filename = (String)commandLine.getValue(""-log"");"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,142,ry {
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,143,ommandLine = parser.parse(args);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,144,"ail(""Unexpected Option!"");"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,146,atch (OptionException uoe) {
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,147,ssertEquals(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,148,"Unexpected --bad-option while processing options"","
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,149,oe.getMessage());
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,153,ublic void testManualIntroduction() {
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,155,efaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,156,rgumentBuilder aBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,157,roupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,159,efaultOption xmlOption =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,160,Builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,161,"withLongName(""xml"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,162,"withDescription(""Output using xml format"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,163,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,165,rgument pathArgument =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,166,Builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,167,"withName(""path"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,168,withMinimum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,169,withMaximum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,170,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,172,roup outputChildren =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,173,Builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,174,withOption(xmlOption)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,175,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,177,ption outputOption =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,178,Builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,179,"withLongName(""output"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,180,"withDescription(""Outputs to a file"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,181,withArgument(pathArgument)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,182,withChildren(outputChildren)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,183,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,187,roup options = outputChildren;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,188,elpFormatter hf = new HelpFormatter();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,190,arser p = new Parser();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,191,.setGroup(options);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,192,.setHelpFormatter(hf);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,193,".setHelpTrigger(""--help"");"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,194,ommandLine cl = p.parseAndHelp(new String[]{});
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,195,f(cl==null) {
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,196,ystem.exit(-1);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,201,"l = new WriteableCommandLineImpl(outputChildren,new ArrayList());"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,203,/ if we have --output option
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,204,"f(cl.hasOption(""--output"")) {"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,205,/ grab the path
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,206,"tring path = (String)cl.getValue(""--output"");"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,207,/ grab the format
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,208,"oolean xml = cl.hasOption(""--xml"");"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,209,/ configure the application's output
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,210,"onfigureOutput(path,xml);"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,218,"rivate void configureOutput(String path, boolean xml) {"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,219,/ TODO Auto-generated method stub
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,223,"ublic void testExampleAnt() throws IOException, OptionException {"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,224,/ Apache Ant version 1.6.1 compiled on February 12 2004
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,226,inal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,227,inal ArgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,228,inal GroupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,230,ption help =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,231,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,232,"withShortName(""help"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,233,"withShortName(""h"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,234,"withDescription(""print this message"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,235,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,236,ption projecthelp =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,237,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,238,"withShortName(""projecthelp"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,239,"withShortName(""p"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,240,"withDescription(""print project help information"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,241,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,242,ption version =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,243,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,244,"withShortName(""version"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,245,"withDescription(""print the version information and exit"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,246,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,247,ption diagnostics =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,248,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,249,"withShortName(""diagnostics"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,250,"withDescription(""print information that might be helpful to diagnose or report problems."")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,251,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,252,ption quiet =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,253,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,254,"withShortName(""quiet"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,255,"withShortName(""q"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,256,"withDescription(""be extra quiet"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,257,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,258,ption verbose =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,259,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,260,"withShortName(""verbose"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,261,"withShortName(""v"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,262,"withDescription(""be extra verbose"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,263,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,264,ption debug =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,265,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,266,"withShortName(""debug"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,267,"withShortName(""d"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,268,"withDescription(""print debugging information"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,269,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,270,ption emacs =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,271,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,272,"withShortName(""emacs"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,273,"withShortName(""e"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,274,"withDescription(""produce logging information without adornments"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,275,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,276,ption lib =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,277,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,278,"withShortName(""lib"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,279,"withDescription(""specifies a path to search for jars and classes"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,280,withArgument(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,281,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,282,"withName(""path"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,283,withMinimum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,284,withMaximum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,285,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,286,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,287,ption logfile =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,288,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,289,"withShortName(""logfile"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,290,"withShortName(""l"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,291,"withDescription(""use given file for log"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,292,withArgument(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,293,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,294,"withName(""file"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,295,withMinimum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,296,withMaximum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,297,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,298,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,299,ption logger =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,300,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,301,"withShortName(""logger"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,302,"withDescription(""the class which is to perform logging"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,303,withArgument(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,304,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,305,"withName(""classname"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,306,withMinimum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,307,withMaximum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,308,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,309,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,310,ption listener =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,311,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,312,"withShortName(""listener"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,313,"withDescription(""add an instance of class as a project listener"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,314,withArgument(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,315,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,316,"withName(""classname"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,317,withMinimum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,318,withMaximum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,319,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,320,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,321,ption noinput =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,322,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,323,"withShortName(""noinput"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,324,"withDescription(""do not allow interactive input"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,325,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,326,ption buildfile =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,327,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,328,"withShortName(""buildfile"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,329,"withShortName(""file"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,330,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,331,"withDescription(""use given buildfile"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,332,withArgument(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,333,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,334,"withName(""file"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,335,withMinimum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,336,withMaximum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,337,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,338,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,339,ption property = new PropertyOption();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,340,ption propertyfile =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,341,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,342,"withShortName(""propertyfile"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,343,"withDescription(""load all properties from file with -D properties taking precedence"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,344,withArgument(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,345,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,346,"withName(""name"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,347,withMinimum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,348,withMaximum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,349,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,350,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,351,ption inputhandler =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,352,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,353,"withShortName(""inputhandler"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,354,"withDescription(""the class which will handle input requests"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,355,withArgument(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,356,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,357,"withName(""class"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,358,withMinimum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,359,withMaximum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,360,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,361,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,362,ption find =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,363,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,364,"withShortName(""find"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,365,"withShortName(""s"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,366,"withDescription(""search for buildfile towards the root of the filesystem and use it"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,367,withArgument(
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,368,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,369,"withName(""file"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,370,withMinimum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,371,withMaximum(1)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,372,create())
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,373,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,374,"ption targets = abuilder.withName(""target"").create();"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,376,roup options =
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,377,builder
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,378,"withName(""options"")"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,379,withOption(help)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,380,withOption(projecthelp)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,381,withOption(version)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,382,withOption(diagnostics)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,383,withOption(quiet)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,384,withOption(verbose)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,385,withOption(debug)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,386,withOption(emacs)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,387,withOption(lib)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,388,withOption(logfile)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,389,withOption(logger)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,390,withOption(listener)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,391,withOption(noinput)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,392,withOption(buildfile)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,393,withOption(property)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,394,withOption(propertyfile)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,395,withOption(inputhandler)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,396,withOption(find)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,397,withOption(targets)
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,398,create();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,401,tring[] args = new String[]{};
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,403,arser parser = new Parser();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,404,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,405,ommandLine cl = parser.parse(args);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,407,f(cl.hasOption(help)) {
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,408,/displayHelp();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,409,eturn;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,411,"f(cl.hasOption(""-version"")) {"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,412,/displayVersion();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,413,eturn;
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,415,f(cl.hasOption(logfile)) {
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,416,tring file = (String)cl.getValue(logfile);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,417,/setLogFile();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,419,ist targetList = cl.getValues(targets);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,420,or (Iterator i = targetList.iterator(); i.hasNext();) {
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,421,tring target = (String) i.next();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,422,/doTarget(target);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,427,elpFormatter hf = new HelpFormatter();
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,428,"f.setShellCommand(""ant"");"
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,429,f.getFullUsageSettings().add(DisplaySetting.DISPLAY_GROUP_NAME);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,430,f.getFullUsageSettings().add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,431,f.getFullUsageSettings().remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,433,f.getLineUsageSettings().add(DisplaySetting.DISPLAY_PROPERTY_OPTION);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,434,f.getLineUsageSettings().add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,435,f.getLineUsageSettings().add(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,437,f.getDisplaySettings().remove(DisplaySetting.DISPLAY_GROUP_ARGUMENT);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,439,f.setGroup(options);
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,440,/ redirect printed stuff to a string
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,441,f.setPrintWriter(new PrintWriter(new StringWriter()));
False,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,442,f.print();
True,src/test/org/apache/commons/cli2/DocumentationTest.java,src/test/org/apache/commons/cli2/DocumentationTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.io.IOException;import java.io.PrintWriter;import java.io.StringWriter;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;import org.apache.commons.cli2.option.DefaultOption;import org.apache.commons.cli2.option.PropertyOption;import org.apache.commons.cli2.util.HelpFormatter;/** * @author Rob */public class DocumentationTest extends TestCase {    public void testBasicUsage() throws IOException, OptionException {        HelpFormatter helpFormatter = new HelpFormatter();        //ignore all printed        helpFormatter.setPrintWriter(new PrintWriter(new StringWriter()));        /*         * --version -? -h --help -log file -s|-q|-v|-d Bursting File/Num/Date         * validation Switches Commands Auto help Auto exception help         *         */        DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        Option version =            obuilder                .withLongName(""version"")                .withDescription(""Displays version information and then exits"")                .create();        Option help =            obuilder                .withShortName(""h"")                .withShortName(""?"")                .withLongName(""help"")                .withDescription(""Displays help on usage and then exits"")                .create();        ArgumentBuilder abuilder = new ArgumentBuilder();        Argument logFile =            abuilder                .withDescription(""The log file to write to"")                .withName(""file"")                .withMinimum(1)                .withMaximum(1)                .create();        Option log =            obuilder                .withArgument(logFile)                .withShortName(""log"")                .withDescription(""Log progress information to a file"")                .create();        GroupBuilder gbuilder = new GroupBuilder();        Group outputQuality =            gbuilder                .withName(""quality"")                .withDescription(""Controls the quality of console output"")                .withMaximum(1)                .withOption(                    obuilder                        .withShortName(""s"")                        .withDescription(""Silent"")                        .create())                .withOption(                    obuilder                        .withShortName(""q"")                        .withDescription(""Quiet"")                        .create())                .withOption(                    obuilder                        .withShortName(""n"")                        .withDescription(""Normal"")                        .create())                .withOption(                    obuilder                        .withShortName(""v"")                        .withDescription(""Verbose"")                        .create())                .withOption(                    obuilder                        .withShortName(""d"")                        .withDescription(""Debug"")                        .create())                .create();        Group options =            new GroupBuilder()                .withName(""options"")                .withOption(version)                .withOption(help)                .withOption(log)                .withOption(outputQuality)                .create();        final String[] args = new String[] { ""--bad-option"" };        Parser parser = new Parser();        parser.setHelpFormatter(helpFormatter);        parser.setGroup(options);        parser.setHelpOption(help);        CommandLine commandLine = parser.parseAndHelp(args);        if (commandLine != null) {            if (commandLine.hasOption(version)) {                System.out.println(""MyApp ver 1.0"");                return;            }            if (commandLine.hasOption(""-log"")) {                String filename = (String)commandLine.getValue(""-log"");                //...            }        }        try {            commandLine = parser.parse(args);            fail(""Unexpected Option!"");        }        catch (OptionException uoe) {            assertEquals(                ""Unexpected --bad-option while processing options"",                uoe.getMessage());        }    }    public void testManualIntroduction() {        DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        ArgumentBuilder aBuilder = new ArgumentBuilder();        GroupBuilder gBuilder = new GroupBuilder();        DefaultOption xmlOption =            oBuilder                .withLongName(""xml"")                .withDescription(""Output using xml format"")                .create();        Argument pathArgument =            aBuilder                .withName(""path"")                .withMinimum(1)                .withMaximum(1)                .create();        Group outputChildren =            gBuilder                .withOption(xmlOption)                .create();        Option outputOption =            oBuilder                .withLongName(""output"")                .withDescription(""Outputs to a file"")                .withArgument(pathArgument)                .withChildren(outputChildren)                .create();        ///////////////////////////////////////////////////        Group options = outputChildren;        HelpFormatter hf = new HelpFormatter();        Parser p = new Parser();        p.setGroup(options);        p.setHelpFormatter(hf);        p.setHelpTrigger(""--help"");        CommandLine cl = p.parseAndHelp(new String[]{});        if(cl==null) {            System.exit(-1);        }        //////////////////////////////////////////////////        cl = new WriteableCommandLineImpl(outputChildren,new ArrayList());        // if we have --output option        if(cl.hasOption(""--output"")) {            // grab the path            String path = (String)cl.getValue(""--output"");            // grab the format            boolean xml = cl.hasOption(""--xml"");            // configure the application's output            configureOutput(path,xml);        }    }    private void configureOutput(String path, boolean xml) {        // TODO Auto-generated method stub    }    public void testExampleAnt() throws IOException, OptionException {        // Apache Ant version 1.6.1 compiled on February 12 2004        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        Option help =            obuilder                .withShortName(""help"")                .withShortName(""h"")                .withDescription(""print this message"")                .create();        Option projecthelp =            obuilder                .withShortName(""projecthelp"")                .withShortName(""p"")                .withDescription(""print project help information"")                .create();        Option version =            obuilder                .withShortName(""version"")                .withDescription(""print the version information and exit"")                .create();        Option diagnostics =            obuilder                .withShortName(""diagnostics"")                .withDescription(""print information that might be helpful to diagnose or report problems."")                .create();        Option quiet =            obuilder                .withShortName(""quiet"")                .withShortName(""q"")                .withDescription(""be extra quiet"")                .create();        Option verbose =            obuilder                .withShortName(""verbose"")                .withShortName(""v"")                .withDescription(""be extra verbose"")                .create();        Option debug =            obuilder                .withShortName(""debug"")                .withShortName(""d"")                .withDescription(""print debugging information"")                .create();        Option emacs =            obuilder                .withShortName(""emacs"")                .withShortName(""e"")                .withDescription(""produce logging information without adornments"")                .create();        Option lib =            obuilder                .withShortName(""lib"")                .withDescription(""specifies a path to search for jars and classes"")                .withArgument(                    abuilder                        .withName(""path"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option logfile =            obuilder                .withShortName(""logfile"")                .withShortName(""l"")                .withDescription(""use given file for log"")                .withArgument(                    abuilder                        .withName(""file"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option logger =            obuilder                .withShortName(""logger"")                .withDescription(""the class which is to perform logging"")                .withArgument(                    abuilder                        .withName(""classname"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option listener =            obuilder                .withShortName(""listener"")                .withDescription(""add an instance of class as a project listener"")                .withArgument(                    abuilder                        .withName(""classname"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option noinput =            obuilder                .withShortName(""noinput"")                .withDescription(""do not allow interactive input"")                .create();        Option buildfile =            obuilder                .withShortName(""buildfile"")                .withShortName(""file"")                .withShortName(""f"")                .withDescription(""use given buildfile"")                .withArgument(                    abuilder                        .withName(""file"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option property = new PropertyOption();        Option propertyfile =            obuilder                .withShortName(""propertyfile"")                .withDescription(""load all properties from file with -D properties taking precedence"")                .withArgument(                    abuilder                        .withName(""name"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option inputhandler =            obuilder                .withShortName(""inputhandler"")                .withDescription(""the class which will handle input requests"")                .withArgument(                    abuilder                        .withName(""class"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option find =            obuilder                .withShortName(""find"")                .withShortName(""s"")                .withDescription(""search for buildfile towards the root of the filesystem and use it"")                .withArgument(                    abuilder                        .withName(""file"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        Option targets = abuilder.withName(""target"").create();        Group options =            gbuilder                .withName(""options"")                .withOption(help)                .withOption(projecthelp)                .withOption(version)                .withOption(diagnostics)                .withOption(quiet)                .withOption(verbose)                .withOption(debug)                .withOption(emacs)                .withOption(lib)                .withOption(logfile)                .withOption(logger)                .withOption(listener)                .withOption(noinput)                .withOption(buildfile)                .withOption(property)                .withOption(propertyfile)                .withOption(inputhandler)                .withOption(find)                .withOption(targets)                .create();        /////////////////////////////////////        String[] args = new String[]{};        Parser parser = new Parser();        parser.setGroup(options);        CommandLine cl = parser.parse(args);        if(cl.hasOption(help)) {            //displayHelp();            return;        }        if(cl.hasOption(""-version"")) {            //displayVersion();            return;        }        if(cl.hasOption(logfile)) {            String file = (String)cl.getValue(logfile);            //setLogFile();        }        List targetList = cl.getValues(targets);        for (Iterator i = targetList.iterator(); i.hasNext();) {            String target = (String) i.next();            //doTarget(target);        }        /////////////////////////////////////        HelpFormatter hf = new HelpFormatter();        hf.setShellCommand(""ant"");        hf.getFullUsageSettings().add(DisplaySetting.DISPLAY_GROUP_NAME);        hf.getFullUsageSettings().add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);        hf.getFullUsageSettings().remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);        hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_PROPERTY_OPTION);        hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);        hf.getDisplaySettings().remove(DisplaySetting.DISPLAY_GROUP_ARGUMENT);        hf.setGroup(options);        // redirect printed stuff to a string        hf.setPrintWriter(new PrintWriter(new StringWriter()));        hf.print();    }}"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,17,ackage org.apache.commons.cli2;
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,19,mport java.util.Arrays;
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,20,mport java.util.List;
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,21,mport java.util.Set;
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,23,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,25,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,26,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,27,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,28,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,31, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,33,ublic class PrecedenceTest extends TestCase {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,34,"rivate final String[] args = new String[] { ""-file"" };"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,36,ublic void testSimple() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,37,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,39,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,40,ew GroupBuilder()
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,41,"withOption(oBuilder.withShortName(""file"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,42,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,44,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,45,"ssertEquals(new String[] { ""-file"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,48,ublic void testArgument() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,49,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,50,inal ArgumentBuilder aBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,52,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,53,ew GroupBuilder()
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,54,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,55,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,56,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,57,withArgument(aBuilder.create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,58,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,59,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,61,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,62,"ssertEquals(new String[] { ""-f"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,65,ublic void testBurst() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,66,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,67,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,68,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,69,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,70,"withOption(oBuilder.withShortName(""f"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,71,"withOption(oBuilder.withShortName(""i"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,72,"withOption(oBuilder.withShortName(""l"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,73,"withOption(oBuilder.withShortName(""e"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,74,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,76,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,77,"ssertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,80,ublic void testChildren() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,81,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,82,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,84,inal Group children =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,85,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,86,"withOption(oBuilder.withShortName(""i"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,87,"withOption(oBuilder.withShortName(""l"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,88,"withOption(oBuilder.withShortName(""e"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,89,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,90,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,91,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,92,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,93,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,94,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,95,withChildren(children)
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,96,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,97,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,99,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,100,"ssertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,103,ublic void XtestSimpleVsArgument() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,104,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,105,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,106,inal ArgumentBuilder aBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,108,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,109,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,110,"withOption(oBuilder.withShortName(""file"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,111,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,112,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,113,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,114,withArgument(aBuilder.create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,115,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,116,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,118,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,119,"ssertEquals(new String[] { ""-f"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,122,ublic void XtestSimpleVsBurst() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,123,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,124,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,125,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,126,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,127,"withOption(oBuilder.withShortName(""file"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,128,"withOption(oBuilder.withShortName(""f"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,129,"withOption(oBuilder.withShortName(""i"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,130,"withOption(oBuilder.withShortName(""l"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,131,"withOption(oBuilder.withShortName(""e"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,132,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,134,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,135,"ssertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,138,ublic void XtestSimpleVsChildren() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,139,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,140,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,142,inal Group children =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,143,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,144,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,145,"Builder.withShortName(""i"").withLongName(""ci"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,146,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,147,"Builder.withShortName(""l"").withLongName(""cl"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,148,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,149,"Builder.withShortName(""e"").withLongName(""ce"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,150,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,152,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,153,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,154,"withOption(oBuilder.withShortName(""file"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,155,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,156,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,157,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,158,withChildren(children)
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,159,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,160,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,162,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,163,ssertEquals(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,164,"ew String[] { ""-f"", ""-i"", ""--ci"", ""-l"", ""--cl"", ""-e"", ""--ce"" },"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,165,l);
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,168,ublic void testArgumentVsBurst() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,169,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,170,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,171,inal ArgumentBuilder aBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,173,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,174,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,175,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,176,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,177,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,178,withArgument(aBuilder.create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,179,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,180,"withOption(oBuilder.withShortName(""i"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,181,"withOption(oBuilder.withShortName(""l"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,182,"withOption(oBuilder.withShortName(""e"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,183,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,185,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,186,"ssertEquals(new String[] { ""-f"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,189,ublic void testArgumentVsChildren() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,190,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,191,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,192,inal ArgumentBuilder aBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,194,inal Group children =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,195,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,196,"withOption(oBuilder.withShortName(""i"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,197,"withOption(oBuilder.withShortName(""l"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,198,"withOption(oBuilder.withShortName(""e"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,199,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,200,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,201,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,202,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,203,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,204,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,205,withChildren(children)
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,206,withArgument(aBuilder.create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,207,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,208,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,210,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,211,"ssertEquals(new String[] { ""-f"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,214,ublic void testBurstVsChildren() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,215,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,216,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,218,inal Group children =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,219,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,220,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,221,"Builder.withShortName(""i"").withLongName(""ci"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,222,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,223,"Builder.withShortName(""l"").withLongName(""cl"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,224,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,225,"Builder.withShortName(""e"").withLongName(""ce"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,226,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,228,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,229,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,230,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,231,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,232,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,233,withChildren(children)
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,234,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,235,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,236,"Builder.withShortName(""i"").withLongName(""bi"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,237,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,238,"Builder.withShortName(""l"").withLongName(""bl"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,239,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,240,"Builder.withShortName(""e"").withLongName(""be"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,241,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,243,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,244,ssertEquals(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,245,"ew String[] { ""-f"", ""-i"", ""--ci"", ""-l"", ""--cl"", ""-e"", ""--ce"" },"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,246,l);
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,249,ublic void XtestSimpleVsArgumentVsBurst() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,250,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,251,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,252,inal ArgumentBuilder aBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,254,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,255,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,256,"withOption(oBuilder.withShortName(""file"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,257,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,258,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,259,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,260,withArgument(aBuilder.create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,261,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,262,"withOption(oBuilder.withShortName(""i"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,263,"withOption(oBuilder.withShortName(""l"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,264,"withOption(oBuilder.withShortName(""e"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,265,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,267,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,268,"ssertEquals(new String[] { ""-f"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,271,ublic void XtestSimpleVsArgumentVsChildren() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,272,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,273,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,274,inal ArgumentBuilder aBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,276,inal Group children =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,277,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,278,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,279,"Builder.withShortName(""i"").withLongName(""ci"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,280,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,281,"Builder.withShortName(""l"").withLongName(""cl"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,282,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,283,"Builder.withShortName(""e"").withLongName(""ce"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,284,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,286,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,287,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,288,"withOption(oBuilder.withShortName(""file"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,289,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,290,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,291,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,292,withChildren(children)
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,293,withArgument(aBuilder.create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,294,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,295,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,297,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,298,"ssertEquals(new String[] { ""-f"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,301,ublic void XtestSimpleVsBurstVsChildren() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,302,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,303,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,305,inal Group children =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,306,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,307,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,308,"Builder.withShortName(""i"").withLongName(""ci"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,309,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,310,"Builder.withShortName(""l"").withLongName(""cl"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,311,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,312,"Builder.withShortName(""e"").withLongName(""ce"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,313,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,315,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,316,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,317,"withOption(oBuilder.withShortName(""file"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,318,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,319,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,320,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,321,withChildren(children)
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,322,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,323,"withOption(oBuilder.withShortName(""i"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,324,"withOption(oBuilder.withShortName(""l"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,325,"withOption(oBuilder.withShortName(""e"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,326,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,328,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,329,"ssertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,332,ublic void testArgumentVsBurstVsChildren() throws OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,333,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,334,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,335,inal ArgumentBuilder aBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,337,inal Group children =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,338,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,339,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,340,"Builder.withShortName(""i"").withLongName(""ci"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,341,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,342,"Builder.withShortName(""l"").withLongName(""cl"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,343,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,344,"Builder.withShortName(""e"").withLongName(""ce"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,345,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,347,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,348,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,349,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,350,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,351,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,352,withChildren(children)
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,353,withArgument(aBuilder.create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,354,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,355,"withOption(oBuilder.withShortName(""i"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,356,"withOption(oBuilder.withShortName(""l"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,357,"withOption(oBuilder.withShortName(""e"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,358,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,360,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,361,"ssertEquals(new String[] { ""-f"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,364,ublic void XtestSimpleVsArgumentVsBurstVsChildren()
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,365,hrows OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,366,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,367,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,368,inal ArgumentBuilder aBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,370,inal Group children =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,371,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,372,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,373,"Builder.withShortName(""i"").withLongName(""ci"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,374,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,375,"Builder.withShortName(""l"").withLongName(""cl"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,376,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,377,"Builder.withShortName(""e"").withLongName(""ce"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,378,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,380,inal Group options =
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,381,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,382,"withOption(oBuilder.withShortName(""file"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,383,withOption(
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,384,Builder
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,385,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,386,withChildren(children)
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,387,withArgument(aBuilder.create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,388,create())
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,389,"withOption(oBuilder.withShortName(""i"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,390,"withOption(oBuilder.withShortName(""l"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,391,"withOption(oBuilder.withShortName(""e"").create())"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,392,create();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,394,"inal CommandLine cl = buildCommandLine(options, args);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,395,"ssertEquals(new String[] { ""-f"" }, cl);"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,398,"ublic CommandLine buildCommandLine(final Group group, final String[] arguments)"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,399,hrows OptionException {
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,400,arser p = new Parser();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,401,.setGroup(group);
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,402,eturn p.parse(arguments);
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,405,"ublic void assertEquals(final String options[], final CommandLine line) {"
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,406,inal List expected = Arrays.asList(options);
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,407,inal Set actual = line.getOptionTriggers();
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,409,ssertTrue(expected.containsAll(actual));
False,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,410,ssertTrue(actual.containsAll(expected));
True,src/test/org/apache/commons/cli2/PrecedenceTest.java,src/test/org/apache/commons/cli2/PrecedenceTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import java.util.Arrays;import java.util.List;import java.util.Set;import junit.framework.TestCase;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;/** * @author Rob Oxspring */public class PrecedenceTest extends TestCase {    private final String[] args = new String[] { ""-file"" };    public void testSimple() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final Group options =            new GroupBuilder()                .withOption(oBuilder.withShortName(""file"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-file"" }, cl);    }    public void testArgument() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group options =            new GroupBuilder()                .withOption(                    oBuilder                        .withShortName(""f"")                        .withArgument(aBuilder.create())                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void testBurst() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""f"").create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);    }    public void testChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group children =            gBuilder                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final Group options =            gBuilder                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);    }    public void XtestSimpleVsArgument() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withArgument(aBuilder.create())                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void XtestSimpleVsBurst() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(oBuilder.withShortName(""f"").create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);    }    public void XtestSimpleVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(            new String[] { ""-f"", ""-i"", ""--ci"", ""-l"", ""--cl"", ""-e"", ""--ce"" },            cl);    }    public void testArgumentVsBurst() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group options =            gBuilder                .withOption(                    oBuilder                        .withShortName(""f"")                        .withArgument(aBuilder.create())                        .create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void testArgumentVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group children =            gBuilder                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final Group options =            gBuilder                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .withArgument(aBuilder.create())                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void testBurstVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .create())                .withOption(                    oBuilder.withShortName(""i"").withLongName(""bi"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""bl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""be"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(            new String[] { ""-f"", ""-i"", ""--ci"", ""-l"", ""--cl"", ""-e"", ""--ce"" },            cl);    }    public void XtestSimpleVsArgumentVsBurst() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withArgument(aBuilder.create())                        .create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void XtestSimpleVsArgumentVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .withArgument(aBuilder.create())                        .create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void XtestSimpleVsBurstVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"", ""-i"", ""-l"", ""-e"" }, cl);    }    public void testArgumentVsBurstVsChildren() throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .withArgument(aBuilder.create())                        .create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public void XtestSimpleVsArgumentVsBurstVsChildren()        throws OptionException {        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        final GroupBuilder gBuilder = new GroupBuilder();        final ArgumentBuilder aBuilder = new ArgumentBuilder();        final Group children =            gBuilder                .withOption(                    oBuilder.withShortName(""i"").withLongName(""ci"").create())                .withOption(                    oBuilder.withShortName(""l"").withLongName(""cl"").create())                .withOption(                    oBuilder.withShortName(""e"").withLongName(""ce"").create())                .create();        final Group options =            gBuilder                .withOption(oBuilder.withShortName(""file"").create())                .withOption(                    oBuilder                        .withShortName(""f"")                        .withChildren(children)                        .withArgument(aBuilder.create())                        .create())                .withOption(oBuilder.withShortName(""i"").create())                .withOption(oBuilder.withShortName(""l"").create())                .withOption(oBuilder.withShortName(""e"").create())                .create();        final CommandLine cl = buildCommandLine(options, args);        assertEquals(new String[] { ""-f"" }, cl);    }    public CommandLine buildCommandLine(final Group group, final String[] arguments)        throws OptionException {        Parser p = new Parser();        p.setGroup(group);        return p.parse(arguments);    }    public void assertEquals(final String options[], final CommandLine line) {        final List expected = Arrays.asList(options);        final Set actual = line.getOptionTriggers();        assertTrue(expected.containsAll(actual));        assertTrue(actual.containsAll(expected));    }}"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,17,ackage org.apache.commons.cli2;
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,19,mport org.apache.commons.cli2.option.ArgumentTest;
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,22, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,24,ublic abstract class WriteableCommandLineTestCase extends CommandLineTestCase {
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,26,rivate WriteableCommandLine writeable;
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,28,rotected abstract WriteableCommandLine createWriteableCommandLine();
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,30,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,31, @see org.apache.commons.cli2.CommandLineTest#createCommandLine()
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,33,rotected final CommandLine createCommandLine() {
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,34,inal WriteableCommandLine cl = createWriteableCommandLine();
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,35,l.addOption(present);
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,36,"l.addProperty(""present"",""present property"");"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,37,"l.addSwitch(bool,true);"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,38,"l.addValue(present,""present value"");"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,39,l.addOption(multiple);
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,40,"l.addValue(multiple,""value 1"");"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,41,"l.addValue(multiple,""value 2"");"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,42,"l.addValue(multiple,""value 3"");"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,43,eturn cl;
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,47, @see CommandLineTest#setUp()
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,49,ublic void setUp() throws Exception {
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,50,uper.setUp();
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,51,riteable = createWriteableCommandLine();
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,53,ublic final void testAddOption() {
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,54,ssertFalse(writeable.hasOption(present));
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,55,riteable.addOption(present);
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,56,ssertTrue(writeable.hasOption(present));
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,58,ublic final void testAddValue() {
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,59,ssertFalse(writeable.hasOption(present));
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,60,ssertTrue(writeable.getValues(present).isEmpty());
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,61,"riteable.addValue(present,""value"");"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,62,"ssertContentsEqual(list(""value""),writeable.getValues(present));"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,64,/ most options shouldn't appear due to adding values
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,65,ssertFalse(writeable.hasOption(present));
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,67,inal Argument arg = ArgumentTest.buildHostArgument();
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,69,ssertFalse(writeable.hasOption(arg));
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,70,ssertTrue(writeable.getValues(arg).isEmpty());
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,71,"riteable.addValue(arg,""value"");"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,72,"ssertContentsEqual(list(""value""),writeable.getValues(arg));"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,74,/ Arguments should force the option present
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,75,ssertTrue(writeable.hasOption(arg));
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,77,ublic final void testAddSwitch() {
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,78,ssertFalse(writeable.hasOption(present));
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,79,ssertNull(writeable.getSwitch(present));
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,80,"riteable.addSwitch(present,true);"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,81,"ssertEquals(Boolean.TRUE,writeable.getSwitch(present));"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,82,ssertTrue(writeable.hasOption(present));
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,84,ublic final void testAddProperty() {
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,85,"ssertNull(writeable.getProperty(""present""));"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,86,"riteable.addProperty(""present"",""present value"");"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,87,"ssertEquals(""present value"",writeable.getProperty(""present""));"
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,89,ublic final void testLooksLikeOption() {
False,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,90,/TODO Implement looksLikeOption().
True,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,src/test/org/apache/commons/cli2/WriteableCommandLineTestCase.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2;import org.apache.commons.cli2.option.ArgumentTest;/** * @author Rob Oxspring */public abstract class WriteableCommandLineTestCase extends CommandLineTestCase {	private WriteableCommandLine writeable;	protected abstract WriteableCommandLine createWriteableCommandLine();	/* (non-Javadoc)	 * @see org.apache.commons.cli2.CommandLineTest#createCommandLine()	 */	protected final CommandLine createCommandLine() {		final WriteableCommandLine cl = createWriteableCommandLine();		cl.addOption(present);		cl.addProperty(""present"",""present property"");		cl.addSwitch(bool,true);		cl.addValue(present,""present value"");		cl.addOption(multiple);		cl.addValue(multiple,""value 1"");		cl.addValue(multiple,""value 2"");		cl.addValue(multiple,""value 3"");		return cl;	}	/*	 * @see CommandLineTest#setUp()	 */	public void setUp() throws Exception {		super.setUp();		writeable = createWriteableCommandLine();	}	public final void testAddOption() {		assertFalse(writeable.hasOption(present));		writeable.addOption(present);		assertTrue(writeable.hasOption(present));	}	public final void testAddValue() {		assertFalse(writeable.hasOption(present));		assertTrue(writeable.getValues(present).isEmpty());		writeable.addValue(present,""value"");		assertContentsEqual(list(""value""),writeable.getValues(present));		// most options shouldn't appear due to adding values		assertFalse(writeable.hasOption(present));		final Argument arg = ArgumentTest.buildHostArgument();		assertFalse(writeable.hasOption(arg));		assertTrue(writeable.getValues(arg).isEmpty());		writeable.addValue(arg,""value"");		assertContentsEqual(list(""value""),writeable.getValues(arg));		// Arguments should force the option present		assertTrue(writeable.hasOption(arg));	}	public final void testAddSwitch() {		assertFalse(writeable.hasOption(present));		assertNull(writeable.getSwitch(present));		writeable.addSwitch(present,true);		assertEquals(Boolean.TRUE,writeable.getSwitch(present));		assertTrue(writeable.hasOption(present));	}	public final void testAddProperty() {		assertNull(writeable.getProperty(""present""));		writeable.addProperty(""present"",""present value"");		assertEquals(""present value"",writeable.getProperty(""present""));	}	public final void testLooksLikeOption() {		//TODO Implement looksLikeOption().	}}"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,17,ackage org.apache.commons.cli2.application;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,19,mport java.util.ArrayList;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,20,mport java.util.List;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,22,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,24,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,25,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,26,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,27,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,28,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,29,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,30,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,31,mport org.apache.commons.cli2.option.PropertyOption;
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,33,/TODO Build up AntTest like CpTest
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,34,ublic class AntTest extends TestCase {
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,35,ublic void testAnt() throws OptionException {
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,36,inal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,37,inal ArgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,38,inal GroupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,40,inal Group options =
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,41,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,42,"withName(""ant"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,43,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,44,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,45,"withShortName(""help"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,46,"withDescription(""print this message"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,47,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,48,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,49,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,50,"withShortName(""projecthelp"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,51,"withDescription(""print project help information"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,52,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,53,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,54,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,55,"withShortName(""version"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,56,"withDescription(""print the version information and exit"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,57,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,58,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,59,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,60,"withShortName(""diagnostics"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,61,"withDescription(""print information that might be helpful to diagnose or report problems."")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,62,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,63,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,64,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,65,"withShortName(""quiet"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,66,"withShortName(""q"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,67,"withDescription(""be extra quiet"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,68,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,69,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,70,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,71,"withShortName(""verbose"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,72,"withShortName(""v"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,73,"withDescription(""be extra verbose"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,74,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,75,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,76,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,77,"withShortName(""debug"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,78,"withDescription(""print debugging information"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,79,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,80,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,81,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,82,"withShortName(""emacs"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,83,"withDescription(""produce logging information without adornments"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,84,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,85,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,86,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,87,"withShortName(""logfile"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,88,"withShortName(""l"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,89,"withDescription(""use given file for log"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,90,withArgument(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,91,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,92,"withName(""file"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,93,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,94,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,95,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,96,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,97,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,98,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,99,"withShortName(""logger"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,100,"withDescription(""the class which is to perform logging"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,101,withArgument(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,102,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,103,"withName(""classname"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,104,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,105,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,106,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,107,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,108,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,109,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,110,"withShortName(""listener"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,111,"withDescription(""add an instance of class as a project listener"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,112,withArgument(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,113,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,114,"withName(""classname"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,115,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,116,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,117,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,118,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,119,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,120,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,121,"withShortName(""buildfile"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,122,"withShortName(""file"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,123,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,124,"withDescription(""use given buildfile"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,125,withArgument(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,126,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,127,"withName(""file"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,128,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,129,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,130,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,131,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,132,withOption(PropertyOption.INSTANCE)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,133,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,134,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,135,"withShortName(""propertyfile"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,136,"withDescription(""load all properties from file with -D properties taking precedence"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,137,withArgument(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,138,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,139,"withName(""name"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,140,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,141,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,142,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,143,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,144,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,145,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,146,"withShortName(""inputhandler"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,147,"withDescription(""the class which will handle input requests"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,148,withArgument(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,149,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,150,"withName(""class"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,151,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,152,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,153,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,154,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,155,withOption(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,156,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,157,"withShortName(""find"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,158,"withDescription(""search for buildfile towards the root of the filesystem and use it"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,159,withArgument(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,160,builder
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,161,"withName(""file"")"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,162,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,163,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,164,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,165,create())
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,166,"withOption(abuilder.withName(""target"").create())"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,167,create();
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,169,arser parser = new Parser();
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,170,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,171,ommandLine line =
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,172,arser.parse(
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,173,ew String[] {
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,174,"-buildfile"","
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,175,"mybuild.xml"","
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,176,"-Dproperty=value"","
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,177,"-Dproperty1=value1"","
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,178,"-projecthelp"","
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,179,"compile"","
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,180,"docs"" });"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,182,/ check properties
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,183,"ssertEquals(2, line.getProperties().size());"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,184,"ssertEquals(""value"", line.getProperty(""property""));"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,185,"ssertEquals(""value1"", line.getProperty(""property1""));"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,187,/ check single values
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,188,"ssertEquals(""mybuild.xml"", line.getValue(""-buildfile""));"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,189,"ssertTrue(line.hasOption(""-projecthelp""));"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,190,"ssertFalse(line.hasOption(""-help""));"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,192,"ssertTrue(line.hasOption(""target""));"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,193,inal List targets = new ArrayList();
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,194,"argets.add(""compile"");"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,195,"argets.add(""docs"");"
False,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,196,"ssertEquals(targets, line.getValues(""target""));"
True,src/test/org/apache/commons/cli2/application/AntTest.java,src/test/org/apache/commons/cli2/application/AntTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.application;import java.util.ArrayList;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.option.PropertyOption;//TODO Build up AntTest like CpTestpublic class AntTest extends TestCase {    public void testAnt() throws OptionException {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Group options =            gbuilder                .withName(""ant"")                .withOption(                    obuilder                        .withShortName(""help"")                        .withDescription(""print this message"")                        .create())                .withOption(                    obuilder                        .withShortName(""projecthelp"")                        .withDescription(""print project help information"")                        .create())                .withOption(                    obuilder                        .withShortName(""version"")                        .withDescription(""print the version information and exit"")                        .create())                .withOption(                    obuilder                        .withShortName(""diagnostics"")                        .withDescription(""print information that might be helpful to diagnose or report problems."")                        .create())                .withOption(                    obuilder                        .withShortName(""quiet"")                        .withShortName(""q"")                        .withDescription(""be extra quiet"")                        .create())                .withOption(                    obuilder                        .withShortName(""verbose"")                        .withShortName(""v"")                        .withDescription(""be extra verbose"")                        .create())                .withOption(                    obuilder                        .withShortName(""debug"")                        .withDescription(""print debugging information"")                        .create())                .withOption(                    obuilder                        .withShortName(""emacs"")                        .withDescription(""produce logging information without adornments"")                        .create())                .withOption(                    obuilder                        .withShortName(""logfile"")                        .withShortName(""l"")                        .withDescription(""use given file for log"")                        .withArgument(                            abuilder                                .withName(""file"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(                    obuilder                        .withShortName(""logger"")                        .withDescription(""the class which is to perform logging"")                        .withArgument(                            abuilder                                .withName(""classname"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(                    obuilder                        .withShortName(""listener"")                        .withDescription(""add an instance of class as a project listener"")                        .withArgument(                            abuilder                                .withName(""classname"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(                    obuilder                        .withShortName(""buildfile"")                        .withShortName(""file"")                        .withShortName(""f"")                        .withDescription(""use given buildfile"")                        .withArgument(                            abuilder                                .withName(""file"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(PropertyOption.INSTANCE)                .withOption(                    obuilder                        .withShortName(""propertyfile"")                        .withDescription(""load all properties from file with -D properties taking precedence"")                        .withArgument(                            abuilder                                .withName(""name"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(                    obuilder                        .withShortName(""inputhandler"")                        .withDescription(""the class which will handle input requests"")                        .withArgument(                            abuilder                                .withName(""class"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(                    obuilder                        .withShortName(""find"")                        .withDescription(""search for buildfile towards the root of the filesystem and use it"")                        .withArgument(                            abuilder                                .withName(""file"")                                .withMinimum(1)                                .withMaximum(1)                                .create())                        .create())                .withOption(abuilder.withName(""target"").create())                .create();        Parser parser = new Parser();        parser.setGroup(options);        CommandLine line =            parser.parse(                new String[] {                    ""-buildfile"",                    ""mybuild.xml"",                    ""-Dproperty=value"",                    ""-Dproperty1=value1"",                    ""-projecthelp"",                    ""compile"",                    ""docs"" });        // check properties        assertEquals(2, line.getProperties().size());        assertEquals(""value"", line.getProperty(""property""));        assertEquals(""value1"", line.getProperty(""property1""));        // check single values        assertEquals(""mybuild.xml"", line.getValue(""-buildfile""));        assertTrue(line.hasOption(""-projecthelp""));        assertFalse(line.hasOption(""-help""));        assertTrue(line.hasOption(""target""));        final List targets = new ArrayList();        targets.add(""compile"");        targets.add(""docs"");        assertEquals(targets, line.getValues(""target""));    }}"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,17,ackage org.apache.commons.cli2.application;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,19,mport java.io.BufferedReader;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,20,mport java.io.IOException;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,21,mport java.io.PrintWriter;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,22,mport java.io.StringReader;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,23,mport java.io.StringWriter;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,25,mport junit.framework.Test;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,26,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,27,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,29,mport org.apache.commons.cli2.Argument;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,30,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,31,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,32,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,33,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,34,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,35,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,36,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,37,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,38,mport org.apache.commons.cli2.option.ArgumentImpl;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,39,mport org.apache.commons.cli2.option.SourceDestArgument;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,40,mport org.apache.commons.cli2.util.HelpFormatter;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,43, <p>Test the <code>cp</code> command. Duplicated Option types are not
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,44, tested e.g. -a and -d are the same Option type.</p>
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,46, <p>The following is the man output for 'cp'. See
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,47," <a href=""http://www.rt.com/man/cp.1.html"">http://www.rt.com/man/cp.1.html</a>.</p>"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,49, <pre>
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,50,  CP(1) FSF CP(1)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,52,  NAME cp - copy files and directories
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,54,  SYNOPSIS cp [OPTION]... SOURCE DEST cp [OPTION]... SOURCE... DIRECTORY
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,56,"  DESCRIPTION Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY."
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,58,"  -a, --archive same as -dpR"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,60,"  -b, --backup make backup before removal"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,62,"  -d, --no-dereference preserve links"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,64,"  -f, --force remove existing destinations, never prompt"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,66,"  -i, --interactive prompt before overwrite"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,68,"  -l, --link link files instead of copying"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,70,"  -p, --preserve preserve file attributes if possible"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,72,"  -P, --parents append source path to DIRECTORY"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,73," -r copy recursively, non-directories as files"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,75,  --sparse=WHEN control creation of sparse files
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,77,"  -R, --recursive copy directories recursively"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,79,"  -s, --symbolic-link make symbolic links instead of copying"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,81,"  -S, --suffix=SUFFIX override the usual backup suffix"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,83,"  -u, --update copy only when the SOURCE file is newer than the destination file or when the destination file is missing"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,85,"  -v, --verbose explain what is being done"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,87,"  -V, --version-control=WORD override the usual version control"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,89,"  -x, --one-file-system stay on this file system"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,91,  --help display this help and exit
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,93,  --version output version information and exit
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,95,"  By default, sparse SOURCE files are detected by a crude heuristic and the corresponding DEST file is made sparse as well. That is the behavior selected by --sparse=auto. Specify --sparse=always to create a sparse DEST file when- ever the SOURCE file contains a long enough sequence of zero bytes. Use --sparse=never to inhibit creation of sparse files."
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,97,"  The backup suffix is ~, unless set with SIMPLE_BACKUP_SUF- FIX. The version control may be set with VERSION_CONTROL, values are:"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,98," t, numbered make numbered backups"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,100,"  nil, existing numbered if numbered backups exist, simple other- wise"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,102,"  never, simple always make simple backups"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,104,"  As a special case, cp makes a backup of SOURCE when the force and backup options are given and SOURCE and DEST are the same name for an existing, regular file. * </pre>"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,105, </pre>
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,107, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,108, @author John Keyes
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,110,ublic class CpTest extends TestCase {
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,112,** Option Builder */
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,113,rivate static final DefaultOptionBuilder oBuilder =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,114,ew DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,116,** Argument Builder */
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,117,rivate static final ArgumentBuilder aBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,119,** Group Builder */
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,120,rivate static final GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,122,rivate Group options;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,124,ublic static Test suite() {
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,125,eturn new TestSuite(CpTest.class);
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,128,rivate ArgumentImpl source;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,129,rivate ArgumentImpl dest;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,130,rivate Argument targets;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,132,rivate Option archive;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,133,rivate Option backup;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,134,rivate Option noDereference;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,135,rivate Option force;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,136,rivate Option interactive;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,137,rivate Option link;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,138,rivate Option preserve;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,139,rivate Option parents;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,140,rivate Option recursive1;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,141,rivate Option sparse;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,142,rivate Option recursive2;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,143,rivate Option symbolicLink;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,144,rivate Option suffix;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,145,rivate Option update;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,146,rivate Option verbose;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,147,rivate Option versionControl;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,148,rivate Option oneFileSystem;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,149,rivate Option help;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,150,rivate Option version;
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,152,ublic void setUp() {
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,153,ource =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,154,"ArgumentImpl)aBuilder.withName(""SOURCE"").withMinimum(1).create();"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,155,est =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,156,ArgumentImpl)aBuilder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,157,"withName(""DEST"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,158,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,159,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,160,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,161,"argets = new SourceDestArgument(source, dest);"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,163,rchive =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,164,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,165,"withShortName(""a"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,166,"withLongName(""archive"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,167,"withDescription(""same as -dpR"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,168,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,170,ackup =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,171,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,172,"withShortName(""b"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,173,"withLongName(""backup"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,174,"withDescription(""make backup before removal"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,175,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,177,oDereference =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,178,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,179,"withShortName(""d"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,180,"withLongName(""no-dereference"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,181,"withDescription(""preserve links"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,182,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,184,orce =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,185,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,186,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,187,"withLongName(""force"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,188,"withDescription(""remove existing destinations, never prompt"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,189,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,191,nteractive =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,192,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,193,"withShortName(""i"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,194,"withLongName(""interactive"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,195,"withDescription(""prompt before overwrite"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,196,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,198,ink =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,199,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,200,"withShortName(""l"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,201,"withLongName(""link"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,202,"withDescription(""link files instead of copying"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,203,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,205,reserve =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,206,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,207,"withShortName(""p"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,208,"withLongName(""preserve"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,209,"withDescription(""preserve file attributes if possible"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,210,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,212,arents =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,213,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,214,"withShortName(""P"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,215,"withLongName(""parents"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,216,"withDescription(""append source path to DIRECTORY"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,217,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,219,ecursive1 =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,220,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,221,"withShortName(""r"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,222,"withDescription(""copy recursively, non-directories as files"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,223,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,225,parse =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,226,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,227,"withLongName(""sparse"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,228,"withDescription(""control creation of sparse files"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,229,withArgument(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,230,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,231,"withName(""WHEN"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,232,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,233,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,234,withInitialSeparator('=')
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,235,create())
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,236,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,238,ecursive2 =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,239,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,240,"withShortName(""R"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,241,"withLongName(""recursive"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,242,"withDescription(""copy directories recursively"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,243,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,245,ymbolicLink =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,246,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,247,"withShortName(""s"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,248,"withLongName(""symbolic-link"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,249,"withDescription(""make symbolic links instead of copying"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,250,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,252,uffix =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,253,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,254,"withShortName(""S"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,255,"withLongName(""suffix"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,256,"withDescription(""override the usual backup suffix"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,257,withArgument(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,258,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,259,"withName(""SUFFIX"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,260,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,261,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,262,create())
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,263,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,265,pdate =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,266,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,267,"withShortName(""u"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,268,"withLongName(""update"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,269,"withDescription(""copy only when the SOURCE file is newer than the destination file or when the destination file is missing"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,270,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,272,erbose =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,273,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,274,"withShortName(""v"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,275,"withLongName(""verbose"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,276,"withDescription(""explain what is being done"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,277,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,279,ersionControl =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,280,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,281,"withShortName(""V"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,282,"withLongName(""version-contol"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,283,"withDescription(""explain what is being done"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,284,withArgument(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,285,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,286,"withName(""WORD"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,287,withInitialSeparator('=')
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,288,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,289,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,290,create())
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,291,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,293,neFileSystem =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,294,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,295,"withShortName(""x"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,296,"withLongName(""one-file-system"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,297,"withDescription(""stay on this file system"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,298,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,300,elp =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,301,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,302,"withLongName(""help"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,303,"withDescription(""display this help and exit"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,304,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,306,ersion =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,307,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,308,"withLongName(""version"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,309,"withDescription(""output version information and exit"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,310,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,312,ptions =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,313,Builder
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,314,withOption(archive)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,315,withOption(backup)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,316,withOption(noDereference)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,317,withOption(force)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,318,withOption(interactive)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,319,withOption(link)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,320,withOption(preserve)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,321,withOption(parents)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,322,withOption(recursive1)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,323,withOption(sparse)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,324,withOption(recursive2)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,325,withOption(symbolicLink)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,326,withOption(suffix)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,327,withOption(update)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,328,withOption(verbose)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,329,withOption(versionControl)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,330,withOption(oneFileSystem)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,331,withOption(help)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,332,withOption(version)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,333,withOption(targets)
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,334,"withName(""OPTIONS"")"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,335,create();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,338,ublic void testNoSource() {
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,339,arser parser = new Parser();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,340,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,341,ry {
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,342,arser.parse(new String[0]);
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,344,atch (OptionException mve) {
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,345,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,346,"Missing value(s) SOURCE [SOURCE ...]"","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,347,ve.getMessage());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,351,ublic void testOneSource() throws OptionException {
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,352,"inal String[] args = new String[] { ""source1"", ""dest1"" };"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,353,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,354,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,355,inal CommandLine commandLine = parser.parse(args);
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,357,"ssertTrue(commandLine.getValues(source).contains(""source1""));"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,358,"ssertEquals(1, commandLine.getValues(source).size());"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,359,"ssertTrue(commandLine.getValues(dest).contains(""dest1""));"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,360,"ssertEquals(1, commandLine.getValues(dest).size());"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,363,ublic void testMultiSource() throws OptionException {
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,364,inal String[] args =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,365,"ew String[] { ""source1"", ""source2"", ""source3"", ""dest1"" };"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,366,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,367,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,368,inal CommandLine commandLine = parser.parse(args);
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,370,"ssertTrue(commandLine.getValues(source).contains(""source1""));"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,371,"ssertTrue(commandLine.getValues(source).contains(""source2""));"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,372,"ssertTrue(commandLine.getValues(source).contains(""source3""));"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,373,"ssertEquals(3, commandLine.getValues(source).size());"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,375,"ssertTrue(commandLine.getValues(dest).contains(""dest1""));"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,376,"ssertEquals(1, commandLine.getValues(dest).size());"
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,379,ublic void testHelp() throws IOException {
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,380,inal StringWriter out = new StringWriter();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,381,inal HelpFormatter helpFormatter = new HelpFormatter();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,382,elpFormatter.setGroup(options);
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,383,elpFormatter.setPrintWriter(new PrintWriter(out));
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,384,elpFormatter.print();
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,386,inal BufferedReader in =
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,387,ew BufferedReader(new StringReader(out.toString()));
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,388,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,389,"Usage:                                                                          "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,390,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,391,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,392," [-a -b -d -f -i -l -p -P -r --sparse <WHEN> -R -s -S <SUFFIX> -u -v -V <WORD>  "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,393,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,394,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,395,"-x --help --version] <SOURCE1> [<SOURCE2> ...] <DEST>                           "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,396,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,397,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,398,"OPTIONS                                                                         "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,399,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,400,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,401,"  -a (--archive)                same as -dpR                                    "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,402,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,403,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,404,"  -b (--backup)                 make backup before removal                      "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,405,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,406,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,407,"  -d (--no-dereference)         preserve links                                  "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,408,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,409,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,410,"  -f (--force)                  remove existing destinations, never prompt      "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,411,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,412,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,413,"  -i (--interactive)            prompt before overwrite                         "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,414,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,415,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,416,"  -l (--link)                   link files instead of copying                   "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,417,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,418,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,419,"  -p (--preserve)               preserve file attributes if possible            "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,420,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,421,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,422,"  -P (--parents)                append source path to DIRECTORY                 "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,423,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,424,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,425,"  -r                            copy recursively, non-directories as files      "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,426,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,427,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,428,"  --sparse WHEN                 control creation of sparse files                "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,429,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,430,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,431,"  -R (--recursive)              copy directories recursively                    "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,432,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,433,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,434,"  -s (--symbolic-link)          make symbolic links instead of copying          "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,435,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,436,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,437,"  -S (--suffix) SUFFIX          override the usual backup suffix                "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,438,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,439,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,440,"  -u (--update)                 copy only when the SOURCE file is newer than    "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,441,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,442,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,443,"                                the destination file or when the destination    "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,444,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,445,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,446,"                                file is missing                                 "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,447,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,448,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,449,"  -v (--verbose)                explain what is being done                      "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,450,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,451,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,452,"  -V (--version-contol) WORD    explain what is being done                      "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,453,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,454,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,455,"  -x (--one-file-system)        stay on this file system                        "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,456,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,457,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,458,"  --help                        display this help and exit                      "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,459,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,460,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,461,"  --version                     output version information and exit             "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,462,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,463,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,464,"  SOURCE [SOURCE ...]                                                           "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,465,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,466,ssertEquals(
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,467,"  DEST                                                                          "","
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,468,n.readLine());
False,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,469,ssertNull(in.readLine());
True,src/test/org/apache/commons/cli2/application/CpTest.java,src/test/org/apache/commons/cli2/application/CpTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.application;import java.io.BufferedReader;import java.io.IOException;import java.io.PrintWriter;import java.io.StringReader;import java.io.StringWriter;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.option.ArgumentImpl;import org.apache.commons.cli2.option.SourceDestArgument;import org.apache.commons.cli2.util.HelpFormatter;/** * <p>Test the <code>cp</code> command. Duplicated Option types are not * tested e.g. -a and -d are the same Option type.</p> * * <p>The following is the man output for 'cp'. See * <a href=""http://www.rt.com/man/cp.1.html"">http://www.rt.com/man/cp.1.html</a>.</p> * * <pre> *  CP(1) FSF CP(1) * *  NAME cp - copy files and directories * *  SYNOPSIS cp [OPTION]... SOURCE DEST cp [OPTION]... SOURCE... DIRECTORY * *  DESCRIPTION Copy SOURCE to DEST, or multiple SOURCE(s) to DIRECTORY. * *  -a, --archive same as -dpR * *  -b, --backup make backup before removal * *  -d, --no-dereference preserve links * *  -f, --force remove existing destinations, never prompt * *  -i, --interactive prompt before overwrite * *  -l, --link link files instead of copying * *  -p, --preserve preserve file attributes if possible * *  -P, --parents append source path to DIRECTORY * -r copy recursively, non-directories as files * *  --sparse=WHEN control creation of sparse files * *  -R, --recursive copy directories recursively * *  -s, --symbolic-link make symbolic links instead of copying * *  -S, --suffix=SUFFIX override the usual backup suffix * *  -u, --update copy only when the SOURCE file is newer than the destination file or when the destination file is missing * *  -v, --verbose explain what is being done * *  -V, --version-control=WORD override the usual version control * *  -x, --one-file-system stay on this file system * *  --help display this help and exit * *  --version output version information and exit * *  By default, sparse SOURCE files are detected by a crude heuristic and the corresponding DEST file is made sparse as well. That is the behavior selected by --sparse=auto. Specify --sparse=always to create a sparse DEST file when- ever the SOURCE file contains a long enough sequence of zero bytes. Use --sparse=never to inhibit creation of sparse files. * *  The backup suffix is ~, unless set with SIMPLE_BACKUP_SUF- FIX. The version control may be set with VERSION_CONTROL, values are: * t, numbered make numbered backups * *  nil, existing numbered if numbered backups exist, simple other- wise * *  never, simple always make simple backups * *  As a special case, cp makes a backup of SOURCE when the force and backup options are given and SOURCE and DEST are the same name for an existing, regular file. * </pre> * </pre> * * @author Rob Oxspring * @author John Keyes */public class CpTest extends TestCase {    /** Option Builder */    private static final DefaultOptionBuilder oBuilder =        new DefaultOptionBuilder();    /** Argument Builder */    private static final ArgumentBuilder aBuilder = new ArgumentBuilder();    /** Group Builder */    private static final GroupBuilder gBuilder = new GroupBuilder();    private Group options;    public static Test suite() {        return new TestSuite(CpTest.class);    }    private ArgumentImpl source;    private ArgumentImpl dest;    private Argument targets;    private Option archive;    private Option backup;    private Option noDereference;    private Option force;    private Option interactive;    private Option link;    private Option preserve;    private Option parents;    private Option recursive1;    private Option sparse;    private Option recursive2;    private Option symbolicLink;    private Option suffix;    private Option update;    private Option verbose;    private Option versionControl;    private Option oneFileSystem;    private Option help;    private Option version;    public void setUp() {        source =            (ArgumentImpl)aBuilder.withName(""SOURCE"").withMinimum(1).create();        dest =            (ArgumentImpl)aBuilder                .withName(""DEST"")                .withMinimum(1)                .withMaximum(1)                .create();        targets = new SourceDestArgument(source, dest);        archive =            oBuilder                .withShortName(""a"")                .withLongName(""archive"")                .withDescription(""same as -dpR"")                .create();        backup =            oBuilder                .withShortName(""b"")                .withLongName(""backup"")                .withDescription(""make backup before removal"")                .create();        noDereference =            oBuilder                .withShortName(""d"")                .withLongName(""no-dereference"")                .withDescription(""preserve links"")                .create();        force =            oBuilder                .withShortName(""f"")                .withLongName(""force"")                .withDescription(""remove existing destinations, never prompt"")                .create();        interactive =            oBuilder                .withShortName(""i"")                .withLongName(""interactive"")                .withDescription(""prompt before overwrite"")                .create();        link =            oBuilder                .withShortName(""l"")                .withLongName(""link"")                .withDescription(""link files instead of copying"")                .create();        preserve =            oBuilder                .withShortName(""p"")                .withLongName(""preserve"")                .withDescription(""preserve file attributes if possible"")                .create();        parents =            oBuilder                .withShortName(""P"")                .withLongName(""parents"")                .withDescription(""append source path to DIRECTORY"")                .create();        recursive1 =            oBuilder                .withShortName(""r"")                .withDescription(""copy recursively, non-directories as files"")                .create();        sparse =            oBuilder                .withLongName(""sparse"")                .withDescription(""control creation of sparse files"")                .withArgument(                    aBuilder                        .withName(""WHEN"")                        .withMinimum(1)                        .withMaximum(1)                        .withInitialSeparator('=')                        .create())                .create();        recursive2 =            oBuilder                .withShortName(""R"")                .withLongName(""recursive"")                .withDescription(""copy directories recursively"")                .create();        symbolicLink =            oBuilder                .withShortName(""s"")                .withLongName(""symbolic-link"")                .withDescription(""make symbolic links instead of copying"")                .create();        suffix =            oBuilder                .withShortName(""S"")                .withLongName(""suffix"")                .withDescription(""override the usual backup suffix"")                .withArgument(                    aBuilder                        .withName(""SUFFIX"")                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        update =            oBuilder                .withShortName(""u"")                .withLongName(""update"")                .withDescription(""copy only when the SOURCE file is newer than the destination file or when the destination file is missing"")                .create();        verbose =            oBuilder                .withShortName(""v"")                .withLongName(""verbose"")                .withDescription(""explain what is being done"")                .create();        versionControl =            oBuilder                .withShortName(""V"")                .withLongName(""version-contol"")                .withDescription(""explain what is being done"")                .withArgument(                    aBuilder                        .withName(""WORD"")                        .withInitialSeparator('=')                        .withMinimum(1)                        .withMaximum(1)                        .create())                .create();        oneFileSystem =            oBuilder                .withShortName(""x"")                .withLongName(""one-file-system"")                .withDescription(""stay on this file system"")                .create();        help =            oBuilder                .withLongName(""help"")                .withDescription(""display this help and exit"")                .create();        version =            oBuilder                .withLongName(""version"")                .withDescription(""output version information and exit"")                .create();        options =            gBuilder                .withOption(archive)                .withOption(backup)                .withOption(noDereference)                .withOption(force)                .withOption(interactive)                .withOption(link)                .withOption(preserve)                .withOption(parents)                .withOption(recursive1)                .withOption(sparse)                .withOption(recursive2)                .withOption(symbolicLink)                .withOption(suffix)                .withOption(update)                .withOption(verbose)                .withOption(versionControl)                .withOption(oneFileSystem)                .withOption(help)                .withOption(version)                .withOption(targets)                .withName(""OPTIONS"")                .create();    }    public void testNoSource() {        Parser parser = new Parser();        parser.setGroup(options);        try {            parser.parse(new String[0]);        }        catch (OptionException mve) {            assertEquals(                ""Missing value(s) SOURCE [SOURCE ...]"",                mve.getMessage());        }    }    public void testOneSource() throws OptionException {        final String[] args = new String[] { ""source1"", ""dest1"" };        final Parser parser = new Parser();        parser.setGroup(options);        final CommandLine commandLine = parser.parse(args);        assertTrue(commandLine.getValues(source).contains(""source1""));        assertEquals(1, commandLine.getValues(source).size());        assertTrue(commandLine.getValues(dest).contains(""dest1""));        assertEquals(1, commandLine.getValues(dest).size());    }    public void testMultiSource() throws OptionException {        final String[] args =            new String[] { ""source1"", ""source2"", ""source3"", ""dest1"" };        final Parser parser = new Parser();        parser.setGroup(options);        final CommandLine commandLine = parser.parse(args);        assertTrue(commandLine.getValues(source).contains(""source1""));        assertTrue(commandLine.getValues(source).contains(""source2""));        assertTrue(commandLine.getValues(source).contains(""source3""));        assertEquals(3, commandLine.getValues(source).size());        assertTrue(commandLine.getValues(dest).contains(""dest1""));        assertEquals(1, commandLine.getValues(dest).size());    }    public void testHelp() throws IOException {        final StringWriter out = new StringWriter();        final HelpFormatter helpFormatter = new HelpFormatter();        helpFormatter.setGroup(options);        helpFormatter.setPrintWriter(new PrintWriter(out));        helpFormatter.print();        final BufferedReader in =            new BufferedReader(new StringReader(out.toString()));        assertEquals(            ""Usage:                                                                          "",            in.readLine());        assertEquals(            "" [-a -b -d -f -i -l -p -P -r --sparse <WHEN> -R -s -S <SUFFIX> -u -v -V <WORD>  "",            in.readLine());        assertEquals(            ""-x --help --version] <SOURCE1> [<SOURCE2> ...] <DEST>                           "",            in.readLine());        assertEquals(            ""OPTIONS                                                                         "",            in.readLine());        assertEquals(            ""  -a (--archive)                same as -dpR                                    "",            in.readLine());        assertEquals(            ""  -b (--backup)                 make backup before removal                      "",            in.readLine());        assertEquals(            ""  -d (--no-dereference)         preserve links                                  "",            in.readLine());        assertEquals(            ""  -f (--force)                  remove existing destinations, never prompt      "",            in.readLine());        assertEquals(            ""  -i (--interactive)            prompt before overwrite                         "",            in.readLine());        assertEquals(            ""  -l (--link)                   link files instead of copying                   "",            in.readLine());        assertEquals(            ""  -p (--preserve)               preserve file attributes if possible            "",            in.readLine());        assertEquals(            ""  -P (--parents)                append source path to DIRECTORY                 "",            in.readLine());        assertEquals(            ""  -r                            copy recursively, non-directories as files      "",            in.readLine());        assertEquals(            ""  --sparse WHEN                 control creation of sparse files                "",            in.readLine());        assertEquals(            ""  -R (--recursive)              copy directories recursively                    "",            in.readLine());        assertEquals(            ""  -s (--symbolic-link)          make symbolic links instead of copying          "",            in.readLine());        assertEquals(            ""  -S (--suffix) SUFFIX          override the usual backup suffix                "",            in.readLine());        assertEquals(            ""  -u (--update)                 copy only when the SOURCE file is newer than    "",            in.readLine());        assertEquals(            ""                                the destination file or when the destination    "",            in.readLine());        assertEquals(            ""                                file is missing                                 "",            in.readLine());        assertEquals(            ""  -v (--verbose)                explain what is being done                      "",            in.readLine());        assertEquals(            ""  -V (--version-contol) WORD    explain what is being done                      "",            in.readLine());        assertEquals(            ""  -x (--one-file-system)        stay on this file system                        "",            in.readLine());        assertEquals(            ""  --help                        display this help and exit                      "",            in.readLine());        assertEquals(            ""  --version                     output version information and exit             "",            in.readLine());        assertEquals(            ""  SOURCE [SOURCE ...]                                                           "",            in.readLine());        assertEquals(            ""  DEST                                                                          "",            in.readLine());        assertNull(in.readLine());    }}"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,17,ackage org.apache.commons.cli2.application;
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,21,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,22,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,23,mport org.apache.commons.cli2.builder.CommandBuilder;
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,24,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,25,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,26,mport org.apache.commons.cli2.option.ArgumentTest;
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,28,/TODO Build up CvsTest like CpTest
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,29,ublic class CvsTest extends TestCase {
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,30,ublic void testCVS() {
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,31,inal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,32,inal ArgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,33,inal CommandBuilder cbuilder = new CommandBuilder();
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,34,inal GroupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,36,inal Group commands =
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,37,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,38,"withName(""commands"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,39,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,40,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,41,"withName(""add"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,42,"withName(""ad"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,43,"withName(""new"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,44,"withDescription(""Add a new file/directory to the repository"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,45,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,46,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,47,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,48,"withName(""admin"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,49,"withName(""adm"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,50,"withName(""rcs"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,51,"withDescription(""Administration front end for rcs"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,52,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,53,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,54,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,55,"withName(""annotate"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,56,"withName(""ann"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,57,"withDescription(""Show last revision where each line was modified"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,58,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,59,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,60,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,61,"withName(""checkout"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,62,"withName(""co"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,63,"withName(""get"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,64,"withDescription(""Checkout sources for editing"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,65,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,66,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,67,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,68,"withName(""commit"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,69,"withName(""ci"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,70,"withName(""com"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,71,"withDescription(""Check files into the repository"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,72,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,73,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,74,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,75,"withName(""diff"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,76,"withName(""di"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,77,"withName(""dif"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,78,"withDescription(""Show differences between revisions"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,79,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,80,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,81,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,82,"withName(""edit"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,83,"withDescription(""Get ready to edit a watched file"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,84,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,85,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,86,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,87,"withName(""editors"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,88,"withDescription(""See who is editing a watched file"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,89,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,90,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,91,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,92,"withName(""export"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,93,"withName(""exp"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,94,"withName(""ex"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,95,"withDescription(""Export sources from CVS, similar to checkout"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,96,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,97,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,98,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,99,"withName(""history"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,100,"withName(""hi"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,101,"withName(""his"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,102,"withDescription(""Show repository access history"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,103,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,104,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,105,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,106,"withName(""import"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,107,"withName(""im"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,108,"withName(""imp"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,109,"withDescription(""Import sources into CVS, using vendor branches"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,110,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,111,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,112,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,113,"withName(""init"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,114,"withDescription(""Create a CVS repository if it doesn't exist"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,115,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,116,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,117,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,118,"withName(""log"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,119,"withName(""lo"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,120,"withName(""rlog"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,121,"withDescription(""Print out history information for files"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,122,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,123,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,124,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,125,"withName(""login"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,126,"withName(""logon"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,127,"withName(""lgn"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,128,"withDescription(""Prompt for password for authenticating server"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,129,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,130,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,131,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,132,"withName(""logout"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,133,"withDescription(""Removes entry in .cvspass for remote repository"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,134,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,135,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,136,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,137,"withName(""rdiff"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,138,"withName(""patch"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,139,"withName(""pa"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,140,"withDescription(""Create 'patch' format diffs between releases"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,141,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,142,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,143,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,144,"withName(""release"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,145,"withName(""re"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,146,"withName(""rel"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,147,"withDescription(""Indicate that a Module is no longer in use"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,148,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,149,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,150,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,151,"withName(""remove"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,152,"withName(""rm"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,153,"withName(""delete"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,154,"withDescription(""Remove an entry from the repository"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,155,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,156,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,157,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,158,"withName(""rtag"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,159,"withName(""rt"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,160,"withName(""rfreeze"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,161,"withDescription(""Add a symbolic tag to a module"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,162,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,163,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,164,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,165,"withName(""status"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,166,"withName(""st"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,167,"withName(""stat"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,168,"withDescription(""Display status information on checked out files"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,169,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,170,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,171,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,172,"withName(""tag"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,173,"withName(""ta"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,174,"withName(""freeze"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,175,"withDescription(""Add a symbolic tag to checked out version of files"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,176,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,177,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,178,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,179,"withName(""unedit"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,180,"withDescription(""Undo an edit command"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,181,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,182,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,183,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,184,"withName(""update"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,185,"withName(""up"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,186,"withName(""upd"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,187,"withDescription(""Bring work tree in sync with repository"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,188,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,189,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,190,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,191,"withName(""watch"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,192,"withDescription(""Set watches"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,193,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,194,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,195,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,196,"withName(""watchers"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,197,"withDescription(""See who is watching a file"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,198,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,199,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,200,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,201,"withName(""version"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,202,"withName(""ve"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,203,"withName(""ver"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,204,"withDescription(""????"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,205,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,206,withOption(ArgumentTest.buildTargetsArgument())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,207,create();
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,209,inal Group cvsOptions =
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,210,ew GroupBuilder()
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,211,"withName(""cvs-options"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,212,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,213,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,214,"withShortName(""H"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,215,"withDescription(""Displays usage information for command."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,216,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,217,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,218,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,219,"withShortName(""Q"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,220,"withDescription(""Cause CVS to be really quiet."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,221,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,222,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,223,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,224,"withShortName(""q"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,225,"withDescription(""Cause CVS to be somewhat quiet."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,226,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,227,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,228,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,229,"withShortName(""r"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,230,"withDescription(""Make checked-out files read-only."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,231,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,232,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,233,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,234,"withShortName(""w"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,235,"withDescription(""Make checked-out files read-write (default)."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,236,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,237,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,238,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,239,"withShortName(""l"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,240,"withDescription(""Turn history logging off."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,241,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,242,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,243,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,244,"withShortName(""n"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,245,"withDescription(""Do not execute anything that will change the disk."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,246,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,247,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,248,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,249,"withShortName(""t"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,250,"withDescription(""Show trace of program execution -- try with -n."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,251,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,252,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,253,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,254,"withShortName(""v"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,255,"withDescription(""CVS version and copyright."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,256,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,257,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,258,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,259,"withLongName(""crlf"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,260,"withDescription(""Use the Dos line feed for text files (default)."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,261,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,262,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,263,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,264,"withLongName(""lf"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,265,"withDescription(""Use the Unix line feed for text files."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,266,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,267,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,268,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,269,"withShortName(""T"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,270,"withDescription(""Use 'tmpdir' for temporary files."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,271,"withArgument(abuilder.withName(""tmpdir"").create())"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,272,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,273,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,274,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,275,"withShortName(""e"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,276,"withDescription(""Use 'editor' for editing log information."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,277,"withArgument(abuilder.withName(""editor"").create())"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,278,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,279,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,280,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,281,"withShortName(""d"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,282,"withDescription(""Overrides $CVSROOT as the root of the CVS tree."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,283,"withArgument(abuilder.withName(""CVS_root"").create())"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,284,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,285,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,286,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,287,"withShortName(""f"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,288,"withDescription(""Do not use the ~/.cvsrc file."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,289,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,290,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,291,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,292,"withShortName(""z"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,293,"withDescription(""Use compression level '#' for net traffic."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,294,"withArgument(abuilder.withName(""#"").create())"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,295,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,296,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,297,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,298,"withShortName(""a"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,299,"withDescription(""Authenticate all net traffic."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,300,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,301,withOption(
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,302,builder
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,303,"withShortName(""s"")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,304,"withDescription(""Set CVS user variable."")"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,305,"withArgument(abuilder.withName(""VAR=VAL"").create())"
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,306,create())
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,307,withOption(commands)
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,308,create();
False,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,310,ssertNotNull(cvsOptions);
True,src/test/org/apache/commons/cli2/application/CvsTest.java,src/test/org/apache/commons/cli2/application/CvsTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.application;import junit.framework.TestCase;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.CommandBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.option.ArgumentTest;//TODO Build up CvsTest like CpTestpublic class CvsTest extends TestCase {    public void testCVS() {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final CommandBuilder cbuilder = new CommandBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Group commands =            gbuilder                .withName(""commands"")                .withOption(                    cbuilder                        .withName(""add"")                        .withName(""ad"")                        .withName(""new"")                        .withDescription(""Add a new file/directory to the repository"")                        .create())                .withOption(                    cbuilder                        .withName(""admin"")                        .withName(""adm"")                        .withName(""rcs"")                        .withDescription(""Administration front end for rcs"")                        .create())                .withOption(                    cbuilder                        .withName(""annotate"")                        .withName(""ann"")                        .withDescription(""Show last revision where each line was modified"")                        .create())                .withOption(                    cbuilder                        .withName(""checkout"")                        .withName(""co"")                        .withName(""get"")                        .withDescription(""Checkout sources for editing"")                        .create())                .withOption(                    cbuilder                        .withName(""commit"")                        .withName(""ci"")                        .withName(""com"")                        .withDescription(""Check files into the repository"")                        .create())                .withOption(                    cbuilder                        .withName(""diff"")                        .withName(""di"")                        .withName(""dif"")                        .withDescription(""Show differences between revisions"")                        .create())                .withOption(                    cbuilder                        .withName(""edit"")                        .withDescription(""Get ready to edit a watched file"")                        .create())                .withOption(                    cbuilder                        .withName(""editors"")                        .withDescription(""See who is editing a watched file"")                        .create())                .withOption(                    cbuilder                        .withName(""export"")                        .withName(""exp"")                        .withName(""ex"")                        .withDescription(""Export sources from CVS, similar to checkout"")                        .create())                .withOption(                    cbuilder                        .withName(""history"")                        .withName(""hi"")                        .withName(""his"")                        .withDescription(""Show repository access history"")                        .create())                .withOption(                    cbuilder                        .withName(""import"")                        .withName(""im"")                        .withName(""imp"")                        .withDescription(""Import sources into CVS, using vendor branches"")                        .create())                .withOption(                    cbuilder                        .withName(""init"")                        .withDescription(""Create a CVS repository if it doesn't exist"")                        .create())                .withOption(                    cbuilder                        .withName(""log"")                        .withName(""lo"")                        .withName(""rlog"")                        .withDescription(""Print out history information for files"")                        .create())                .withOption(                    cbuilder                        .withName(""login"")                        .withName(""logon"")                        .withName(""lgn"")                        .withDescription(""Prompt for password for authenticating server"")                        .create())                .withOption(                    cbuilder                        .withName(""logout"")                        .withDescription(""Removes entry in .cvspass for remote repository"")                        .create())                .withOption(                    cbuilder                        .withName(""rdiff"")                        .withName(""patch"")                        .withName(""pa"")                        .withDescription(""Create 'patch' format diffs between releases"")                        .create())                .withOption(                    cbuilder                        .withName(""release"")                        .withName(""re"")                        .withName(""rel"")                        .withDescription(""Indicate that a Module is no longer in use"")                        .create())                .withOption(                    cbuilder                        .withName(""remove"")                        .withName(""rm"")                        .withName(""delete"")                        .withDescription(""Remove an entry from the repository"")                        .create())                .withOption(                    cbuilder                        .withName(""rtag"")                        .withName(""rt"")                        .withName(""rfreeze"")                        .withDescription(""Add a symbolic tag to a module"")                        .create())                .withOption(                    cbuilder                        .withName(""status"")                        .withName(""st"")                        .withName(""stat"")                        .withDescription(""Display status information on checked out files"")                        .create())                .withOption(                    cbuilder                        .withName(""tag"")                        .withName(""ta"")                        .withName(""freeze"")                        .withDescription(""Add a symbolic tag to checked out version of files"")                        .create())                .withOption(                    cbuilder                        .withName(""unedit"")                        .withDescription(""Undo an edit command"")                        .create())                .withOption(                    cbuilder                        .withName(""update"")                        .withName(""up"")                        .withName(""upd"")                        .withDescription(""Bring work tree in sync with repository"")                        .create())                .withOption(                    cbuilder                        .withName(""watch"")                        .withDescription(""Set watches"")                        .create())                .withOption(                    cbuilder                        .withName(""watchers"")                        .withDescription(""See who is watching a file"")                        .create())                .withOption(                    cbuilder                        .withName(""version"")                        .withName(""ve"")                        .withName(""ver"")                        .withDescription(""????"")                        .create())                .withOption(ArgumentTest.buildTargetsArgument())                .create();        final Group cvsOptions =            new GroupBuilder()                .withName(""cvs-options"")                .withOption(                    obuilder                        .withShortName(""H"")                        .withDescription(""Displays usage information for command."")                        .create())                .withOption(                    obuilder                        .withShortName(""Q"")                        .withDescription(""Cause CVS to be really quiet."")                        .create())                .withOption(                    obuilder                        .withShortName(""q"")                        .withDescription(""Cause CVS to be somewhat quiet."")                        .create())                .withOption(                    obuilder                        .withShortName(""r"")                        .withDescription(""Make checked-out files read-only."")                        .create())                .withOption(                    obuilder                        .withShortName(""w"")                        .withDescription(""Make checked-out files read-write (default)."")                        .create())                .withOption(                    obuilder                        .withShortName(""l"")                        .withDescription(""Turn history logging off."")                        .create())                .withOption(                    obuilder                        .withShortName(""n"")                        .withDescription(""Do not execute anything that will change the disk."")                        .create())                .withOption(                    obuilder                        .withShortName(""t"")                        .withDescription(""Show trace of program execution -- try with -n."")                        .create())                .withOption(                    obuilder                        .withShortName(""v"")                        .withDescription(""CVS version and copyright."")                        .create())                .withOption(                    obuilder                        .withLongName(""crlf"")                        .withDescription(""Use the Dos line feed for text files (default)."")                        .create())                .withOption(                    obuilder                        .withLongName(""lf"")                        .withDescription(""Use the Unix line feed for text files."")                        .create())                .withOption(                    obuilder                        .withShortName(""T"")                        .withDescription(""Use 'tmpdir' for temporary files."")                        .withArgument(abuilder.withName(""tmpdir"").create())                        .create())                .withOption(                    obuilder                        .withShortName(""e"")                        .withDescription(""Use 'editor' for editing log information."")                        .withArgument(abuilder.withName(""editor"").create())                        .create())                .withOption(                    obuilder                        .withShortName(""d"")                        .withDescription(""Overrides $CVSROOT as the root of the CVS tree."")                        .withArgument(abuilder.withName(""CVS_root"").create())                        .create())                .withOption(                    obuilder                        .withShortName(""f"")                        .withDescription(""Do not use the ~/.cvsrc file."")                        .create())                .withOption(                    obuilder                        .withShortName(""z"")                        .withDescription(""Use compression level '#' for net traffic."")                        .withArgument(abuilder.withName(""#"").create())                        .create())                .withOption(                    obuilder                        .withShortName(""a"")                        .withDescription(""Authenticate all net traffic."")                        .create())                .withOption(                    obuilder                        .withShortName(""s"")                        .withDescription(""Set CVS user variable."")                        .withArgument(abuilder.withName(""VAR=VAL"").create())                        .create())                .withOption(commands)                .create();        assertNotNull(cvsOptions);    }}"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,17,ackage org.apache.commons.cli2.application;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,19,mport java.util.HashSet;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,20,mport java.util.Set;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,22,mport junit.framework.Test;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,23,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,24,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,26,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,27,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,28,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,29,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,30,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,31,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,32,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,33,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,34,mport org.apache.commons.cli2.validation.EnumValidator;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,37, <p>Test the <code>ls</code> command. Duplicated Option types are not
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,38, tested e.g. -a and -d are the same Option type.</p>
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,40, <p>The following is the man output for 'ls'. See
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,41," <a href=""http://www.rt.com/man/ls.1.html"">http://www.rt.com/man/ls.1.html</a>.</p>"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,43, <pre>
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,44,  LS(1) FSF LS(1)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,46,  NAME ls - list directory contents
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,48,  SYNOPSIS ls [OPTION]... [FILE]...
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,50,  DESCRIPTION List information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuSUX nor --sort.
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,52,"  -a, --all do not hide entries starting with ."
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,54,"  -A, --almost-all do not list implied . and .."
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,56,"  -b, --escape print octal escapes for nongraphic characters"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,58,  --block-size=SIZE use SIZE-byte blocks
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,60,"  -B, --ignore-backups do not list implied entries ending with ~ -c sort by change time; with -l: show ctime -C list entries by columns"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,62,"  --color[=WHEN] control whether color is used to distinguish file types. WHEN may be `never', `always', or `auto'"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,64,"  -d, --directory list directory entries instead of contents"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,66,"  -D, --dired generate output designed for Emacs' dired mode -f do not sort, enable -aU, disable -lst"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,68,"  -F, --classify append indicator (one of /=@|*) to entries"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,70,"  --format=WORD across -x, commas -m, horizontal -x, long -l, sin- gle-column -1, verbose -l, vertical -C"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,72,  --full-time list both full date and full time -g (ignored)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,74,"  -G, --no-group inhibit display of group information"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,76,"  -h, --human-readable print sizes in human readable format (e.g., 1K 234M 2G)"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,78,"  -H, --si likewise, but use powers of 1000 not 1024"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,80,"  --indicator-style=WORD append indicator with style WORD to entry names: none (default), classify (-F), file-type (-p)"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,82,"  -i, --inode print index number of each file"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,84,"  -I, --ignore=PATTERN do not list implied entries matching shell PATTERN"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,86,"  -k, --kilobytes like --block-size=1024 -l use a long listing format"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,88,"  -L, --dereference list entries pointed to by symbolic links -m fill width with a comma separated list of entries"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,90,"  -n, --numeric-uid-gid list numeric UIDs and GIDs instead of names"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,92,"  -N, --literal print raw entry names (don't treat e.g. control characters specially) -o use long listing format without group info"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,94,"  -p, --file-type append indicator (one of /=@|) to entries"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,96,"  -q, --hide-control-chars print ? instead of non graphic characters"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,98,  --show-control-chars show non graphic characters as-is (default)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,100,"  -Q, --quote-name enclose entry names in double quotes"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,102,"  --quoting-style=WORD use quoting style WORD for entry names: literal, shell, shell-always, c, escape"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,104,"  -r, --reverse reverse order while sorting"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,106,"  -R, --recursive list subdirectories recursively"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,108,"  -s, --size print size of each file, in blocks -S sort by file size"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,110,"  --sort=WORD extension -X, none -U, size -S, time -t, version -v status -c, time -t, atime -u, access -u, use -u"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,112,"  --time=WORD show time as WORD instead of modification time: atime, access, use, ctime or status; use specified time as sort key if --sort=time -t sort by modification time"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,114,"  -T, --tabsize=COLS assume tab stops at each COLS instead of 8 -u sort by last access time; with -l: show atime -U do not sort; list entries in directory order -v sort by version"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,116,"  -w, --width=COLS assume screen width instead of current value -x list entries by lines instead of by columns -X sort alphabetically by entry extension -1 list one file per line"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,118,  --help display this help and exit
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,120,  --version output version information and exit
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,122,"  By default, color is not used to distinguish types of files. That is equivalent to using --color=none. Using the --color option without the optional WHEN argument is equivalent to using --color=always. With --color=auto, color codes are output only if standard output is con- nected to a terminal (tty)."
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,123, </pre>
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,125, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,126, @author John Keyes
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,128,ublic class LsTest extends TestCase {
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,130,** Option Builder */
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,131,rivate static final DefaultOptionBuilder oBuilder =
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,132,ew DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,134,** Argument Builder */
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,135,rivate static final ArgumentBuilder aBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,137,** Group Builder */
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,138,rivate static final GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,140,rivate static Group options;
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,142,ublic static Test suite() {
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,143,eturn new TestSuite(LsTest.class);
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,147, Required ctor.
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,149, @param name
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,150,            the name of the TestCase
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,152,ublic LsTest(final String name) {
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,153,uper(name);
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,156,ublic void setUp() {
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,157,f (LsTest.options == null) {
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,158,inal Option a =
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,159,Builder
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,160,"withShortName(""a"")"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,161,"withLongName(""all"")"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,162,"withDescription(""do not hide entries starting with ."")"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,163,create();
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,165,inal Option blockSize =
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,166,Builder
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,167,"withLongName(""block-size"")"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,168,withRequired(false)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,169,"withDescription(""use SIZE-byte blocks"")"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,170,withArgument(
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,171,Builder
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,172,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,173,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,174,withInitialSeparator('=')
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,175,create())
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,176,create();
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,178,inal Option c =
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,179,Builder
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,180,"withShortName(""c"")"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,181,withRequired(false)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,182,"withDescription(""with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime"")"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,183,create();
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,185,inal Set colors = new HashSet();
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,186,"olors.add(""never"");"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,187,"olors.add(""always"");"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,188,"olors.add(""auto"");"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,189,inal Option color =
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,190,Builder
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,191,"withLongName(""color"")"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,192,withRequired(false)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,193,"withDescription(""control  whether  color is used to distinguish file types.  WHEN may be `never', `always', or `auto'"")"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,194,withArgument(
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,195,Builder
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,196,withMaximum(1)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,197,withMinimum(1)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,198,withInitialSeparator('=')
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,199,withValidator(new EnumValidator(colors))
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,200,create())
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,201,create();
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,203,sTest.options =
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,204,Builder
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,205,withOption(a)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,206,withOption(blockSize)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,207,withOption(c)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,208,withOption(color)
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,209,create();
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,213,ublic void testLs() throws OptionException {
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,214,/ create the command line parser
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,215,arser parser = new Parser();
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,216,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,217,ommandLine line =
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,218,"arser.parse(new String[] { ""--block-size=10"", ""--color=never"" });"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,220,"ssertTrue(line.hasOption(""--block-size""));"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,221,"ssertEquals(line.getValue(""--block-size""), ""10"");"
False,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,222,"ssertFalse(line.hasOption(""--ignore-backups""));"
True,src/test/org/apache/commons/cli2/application/LsTest.java,src/test/org/apache/commons/cli2/application/LsTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.application;import java.util.HashSet;import java.util.Set;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.validation.EnumValidator;/** * <p>Test the <code>ls</code> command. Duplicated Option types are not * tested e.g. -a and -d are the same Option type.</p> * * <p>The following is the man output for 'ls'. See * <a href=""http://www.rt.com/man/ls.1.html"">http://www.rt.com/man/ls.1.html</a>.</p> * * <pre> *  LS(1) FSF LS(1) * *  NAME ls - list directory contents * *  SYNOPSIS ls [OPTION]... [FILE]... * *  DESCRIPTION List information about the FILEs (the current directory by default). Sort entries alphabetically if none of -cftuSUX nor --sort. * *  -a, --all do not hide entries starting with . * *  -A, --almost-all do not list implied . and .. * *  -b, --escape print octal escapes for nongraphic characters * *  --block-size=SIZE use SIZE-byte blocks * *  -B, --ignore-backups do not list implied entries ending with ~ -c sort by change time; with -l: show ctime -C list entries by columns * *  --color[=WHEN] control whether color is used to distinguish file types. WHEN may be `never', `always', or `auto' * *  -d, --directory list directory entries instead of contents * *  -D, --dired generate output designed for Emacs' dired mode -f do not sort, enable -aU, disable -lst * *  -F, --classify append indicator (one of /=@|*) to entries * *  --format=WORD across -x, commas -m, horizontal -x, long -l, sin- gle-column -1, verbose -l, vertical -C * *  --full-time list both full date and full time -g (ignored) * *  -G, --no-group inhibit display of group information * *  -h, --human-readable print sizes in human readable format (e.g., 1K 234M 2G) * *  -H, --si likewise, but use powers of 1000 not 1024 * *  --indicator-style=WORD append indicator with style WORD to entry names: none (default), classify (-F), file-type (-p) * *  -i, --inode print index number of each file * *  -I, --ignore=PATTERN do not list implied entries matching shell PATTERN * *  -k, --kilobytes like --block-size=1024 -l use a long listing format * *  -L, --dereference list entries pointed to by symbolic links -m fill width with a comma separated list of entries * *  -n, --numeric-uid-gid list numeric UIDs and GIDs instead of names * *  -N, --literal print raw entry names (don't treat e.g. control characters specially) -o use long listing format without group info * *  -p, --file-type append indicator (one of /=@|) to entries * *  -q, --hide-control-chars print ? instead of non graphic characters * *  --show-control-chars show non graphic characters as-is (default) * *  -Q, --quote-name enclose entry names in double quotes * *  --quoting-style=WORD use quoting style WORD for entry names: literal, shell, shell-always, c, escape * *  -r, --reverse reverse order while sorting * *  -R, --recursive list subdirectories recursively * *  -s, --size print size of each file, in blocks -S sort by file size * *  --sort=WORD extension -X, none -U, size -S, time -t, version -v status -c, time -t, atime -u, access -u, use -u * *  --time=WORD show time as WORD instead of modification time: atime, access, use, ctime or status; use specified time as sort key if --sort=time -t sort by modification time * *  -T, --tabsize=COLS assume tab stops at each COLS instead of 8 -u sort by last access time; with -l: show atime -U do not sort; list entries in directory order -v sort by version * *  -w, --width=COLS assume screen width instead of current value -x list entries by lines instead of by columns -X sort alphabetically by entry extension -1 list one file per line * *  --help display this help and exit * *  --version output version information and exit * *  By default, color is not used to distinguish types of files. That is equivalent to using --color=none. Using the --color option without the optional WHEN argument is equivalent to using --color=always. With --color=auto, color codes are output only if standard output is con- nected to a terminal (tty). * </pre> * * @author Rob Oxspring * @author John Keyes */public class LsTest extends TestCase {    /** Option Builder */    private static final DefaultOptionBuilder oBuilder =        new DefaultOptionBuilder();    /** Argument Builder */    private static final ArgumentBuilder aBuilder = new ArgumentBuilder();    /** Group Builder */    private static final GroupBuilder gBuilder = new GroupBuilder();    private static Group options;    public static Test suite() {        return new TestSuite(LsTest.class);    }    /**     * Required ctor.     *     * @param name     *            the name of the TestCase     */    public LsTest(final String name) {        super(name);    }    public void setUp() {        if (LsTest.options == null) {            final Option a =                oBuilder                    .withShortName(""a"")                    .withLongName(""all"")                    .withDescription(""do not hide entries starting with ."")                    .create();            final Option blockSize =                oBuilder                    .withLongName(""block-size"")                    .withRequired(false)                    .withDescription(""use SIZE-byte blocks"")                    .withArgument(                        aBuilder                            .withMaximum(1)                            .withMinimum(1)                            .withInitialSeparator('=')                            .create())                    .create();            final Option c =                oBuilder                    .withShortName(""c"")                    .withRequired(false)                    .withDescription(""with -lt: sort by, and show, ctime (time of last modification of file status information) with -l:show ctime and sort by name otherwise: sort by ctime"")                    .create();            final Set colors = new HashSet();            colors.add(""never"");            colors.add(""always"");            colors.add(""auto"");            final Option color =                oBuilder                    .withLongName(""color"")                    .withRequired(false)                    .withDescription(""control  whether  color is used to distinguish file types.  WHEN may be `never', `always', or `auto'"")                    .withArgument(                        aBuilder                            .withMaximum(1)                            .withMinimum(1)                            .withInitialSeparator('=')                            .withValidator(new EnumValidator(colors))                            .create())                    .create();            LsTest.options =                gBuilder                    .withOption(a)                    .withOption(blockSize)                    .withOption(c)                    .withOption(color)                    .create();        }    }    public void testLs() throws OptionException {        // create the command line parser        Parser parser = new Parser();        parser.setGroup(options);        CommandLine line =            parser.parse(new String[] { ""--block-size=10"", ""--color=never"" });        assertTrue(line.hasOption(""--block-size""));        assertEquals(line.getValue(""--block-size""), ""10"");        assertFalse(line.hasOption(""--ignore-backups""));    }}"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,17,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,21,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,22,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,23,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,24,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,25,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,26,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,29, @author John Keyes
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,31,ublic class Bug13886Test extends TestCase {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,33,ublic Bug13886Test(final String name) {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,34,uper(name);
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,37,ublic void testMandatoryGroup() throws Exception {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,38,inal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,39,inal GroupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,41,"inal Option a = obuilder.withShortName(""a"").create();"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,43,"inal Option b = obuilder.withShortName(""b"").create();"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,45,inal Group options =
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,46,builder
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,47,withOption(a)
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,48,withOption(b)
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,49,withMaximum(1)
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,50,withMinimum(1)
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,51,create();
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,53,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,54,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,56,ry {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,57,arser.parse(new String[] {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,59,"ail(""Expected MissingOptionException not caught"");"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,61,atch (final OptionException exp) {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,62,"ssertEquals(""Missing option -a|-b"", exp.getMessage());"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,65,ry {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,66,"arser.parse(new String[] { ""-a"" });"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,68,atch (final OptionException exp) {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,69,"ail(""Unexpected MissingOptionException caught"");"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,72,ry {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,73,"arser.parse(new String[] { ""-b"" });"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,75,atch (final OptionException exp) {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,76,"ail(""Unexpected MissingOptionException caught"");"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,79,ry {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,80,"arser.parse(new String[] { ""-a"", ""-b"" });"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,81,"ail(""Expected UnexpectedOptionException not caught"");"
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,83,atch (final OptionException exp) {
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,84,ssertEquals(
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,85,"Unexpected -b while processing -a|-b"","
False,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,86,xp.getMessage());
True,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,src/test/org/apache/commons/cli2/bug/Bug13886Test.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;/** * @author John Keyes */public class Bug13886Test extends TestCase {    public Bug13886Test(final String name) {        super(name);    }    public void testMandatoryGroup() throws Exception {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Option a = obuilder.withShortName(""a"").create();        final Option b = obuilder.withShortName(""b"").create();        final Group options =            gbuilder                .withOption(a)                .withOption(b)                .withMaximum(1)                .withMinimum(1)                .create();        final Parser parser = new Parser();        parser.setGroup(options);        try {            parser.parse(new String[] {            });            fail(""Expected MissingOptionException not caught"");        }        catch (final OptionException exp) {            assertEquals(""Missing option -a|-b"", exp.getMessage());        }        try {            parser.parse(new String[] { ""-a"" });        }        catch (final OptionException exp) {            fail(""Unexpected MissingOptionException caught"");        }        try {            parser.parse(new String[] { ""-b"" });        }        catch (final OptionException exp) {            fail(""Unexpected MissingOptionException caught"");        }        try {            parser.parse(new String[] { ""-a"", ""-b"" });            fail(""Expected UnexpectedOptionException not caught"");        }        catch (final OptionException exp) {            assertEquals(                ""Unexpected -b while processing -a|-b"",                exp.getMessage());        }    }}"
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,17,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,21,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,22,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,23,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,24,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,25,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,26,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,27,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,30, @author John Keyes
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,32,ublic class Bug13935Test extends TestCase {
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,34,ublic Bug13935Test(final String name) {
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,35,uper(name);
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,38,ublic void testRequiredGroup() throws Exception {
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,39,inal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,40,inal ArgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,41,inal GroupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,43,inal Option testOption =
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,44,builder
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,45,"withShortName(""a"")"
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,46,"withArgument(abuilder.withName(""quoted string"").create())"
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,47,create();
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,49,inal Group options = gbuilder.withOption(testOption).create();
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,51,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,52,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,54,inal CommandLine cmdLine =
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,55,"arser.parse(new String[] { ""-a"", ""\""two tokens\"""" });"
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,57,"ssertTrue(cmdLine.hasOption(""-a""));"
False,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,58,"ssertEquals(""two tokens"", cmdLine.getValue(""-a""));"
True,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,src/test/org/apache/commons/cli2/bug/Bug13935Test.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;/** * @author John Keyes */public class Bug13935Test extends TestCase {    public Bug13935Test(final String name) {        super(name);    }    public void testRequiredGroup() throws Exception {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Option testOption =            obuilder                .withShortName(""a"")                .withArgument(abuilder.withName(""quoted string"").create())                .create();        final Group options = gbuilder.withOption(testOption).create();        final Parser parser = new Parser();        parser.setGroup(options);        final CommandLine cmdLine =            parser.parse(new String[] { ""-a"", ""\""two tokens\"""" });        assertTrue(cmdLine.hasOption(""-a""));        assertEquals(""two tokens"", cmdLine.getValue(""-a""));    }}"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,17,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,21,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,22,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,23,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,24,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,25,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,26,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,27,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,30, @author John Keyes
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,32,ublic class Bug15046Test extends TestCase {
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,34,ublic Bug15046Test(String name) {
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,35,uper(name);
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,38,ublic void testParamNamedAsOption() throws Exception {
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,39,"inal String[] CLI_ARGS = new String[] { ""-z"", ""c"" };"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,41,efaultOptionBuilder obuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,42,rgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,44,ption option =
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,45,builder
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,46,"withShortName(""z"")"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,47,"withLongName(""timezone"")"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,48,"withDescription(""affected option"")"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,49,"withArgument(abuilder.withName(""timezone"").create())"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,50,create();
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,52,roupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,53,roup options =
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,54,"builder.withName(""bug15046"").withOption(option).create();"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,56,arser parser = new Parser();
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,57,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,58,ommandLine line = parser.parse(CLI_ARGS);
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,60,"ssertEquals(""c"", line.getValue(""-z""));"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,62,ption c =
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,63,builder
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,64,"withShortName(""c"")"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,65,"withLongName(""conflict"")"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,66,"withDescription(""conflicting option"")"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,67,"withArgument(abuilder.withName(""conflict"").create())"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,68,create();
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,70,ptions =
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,71,builder
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,72,"withName(""bug15046"")"
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,73,withOption(option)
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,74,withOption(c)
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,75,create();
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,77,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,78,ine = parser.parse(CLI_ARGS);
False,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,80,"ssertEquals(""c"", line.getValue(""-z""));"
True,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,src/test/org/apache/commons/cli2/bug/Bug15046Test.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;/** * @author John Keyes */public class Bug15046Test extends TestCase {    public Bug15046Test(String name) {        super(name);    }    public void testParamNamedAsOption() throws Exception {        final String[] CLI_ARGS = new String[] { ""-z"", ""c"" };        DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        ArgumentBuilder abuilder = new ArgumentBuilder();        Option option =            obuilder                .withShortName(""z"")                .withLongName(""timezone"")                .withDescription(""affected option"")                .withArgument(abuilder.withName(""timezone"").create())                .create();        GroupBuilder gbuilder = new GroupBuilder();        Group options =            gbuilder.withName(""bug15046"").withOption(option).create();        Parser parser = new Parser();        parser.setGroup(options);        CommandLine line = parser.parse(CLI_ARGS);        assertEquals(""c"", line.getValue(""-z""));        Option c =            obuilder                .withShortName(""c"")                .withLongName(""conflict"")                .withDescription(""conflicting option"")                .withArgument(abuilder.withName(""conflict"").create())                .create();        options =            gbuilder                .withName(""bug15046"")                .withOption(option)                .withOption(c)                .create();        parser.setGroup(options);        line = parser.parse(CLI_ARGS);        assertEquals(""c"", line.getValue(""-z""));    }}"
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,17,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,21,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,22,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,23,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,24,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,25,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,26,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,27,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,30, @author John Keyes
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,32,ublic class Bug15648Test extends TestCase {
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,34,ublic Bug15648Test(final String name) {
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,35,uper(name);
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,38,ublic void testQuotedArgumentValue() throws Exception {
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,39,inal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,40,inal ArgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,41,inal GroupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,43,inal Option testOption =
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,44,builder
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,45,"withShortName(""a"")"
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,46,"withArgument(abuilder.withName(""quoted string"").create())"
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,47,create();
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,49,inal Group options = gbuilder.withOption(testOption).create();
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,51,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,52,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,54,inal CommandLine cmdLine =
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,55,"arser.parse(new String[] { ""-a"", ""\""two tokens\"""" });"
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,57,"ssertTrue(cmdLine.hasOption(""-a""));"
False,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,58,"ssertEquals(""two tokens"", cmdLine.getValue(""-a""));"
True,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,src/test/org/apache/commons/cli2/bug/Bug15648Test.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;/** * @author John Keyes */public class Bug15648Test extends TestCase {    public Bug15648Test(final String name) {        super(name);    }    public void testQuotedArgumentValue() throws Exception {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Option testOption =            obuilder                .withShortName(""a"")                .withArgument(abuilder.withName(""quoted string"").create())                .create();        final Group options = gbuilder.withOption(testOption).create();        final Parser parser = new Parser();        parser.setGroup(options);        final CommandLine cmdLine =            parser.parse(new String[] { ""-a"", ""\""two tokens\"""" });        assertTrue(cmdLine.hasOption(""-a""));        assertEquals(""two tokens"", cmdLine.getValue(""-a""));    }}"
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,17,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,19,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,21,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,23,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,24,mport org.apache.commons.cli2.builder.PatternBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,25,mport org.apache.commons.cli2.option.GroupImpl;
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,27,ublic class Bug27575Test extends TestCase {
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,29,ublic void testRequiredOptions(){
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,30,atternBuilder builder = new PatternBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,31,"uilder.withPattern(""hc!<"");"
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,32,ption option = builder.create();
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,33,ssertTrue(option instanceof GroupImpl);
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,35,roupImpl group = (GroupImpl)option;
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,36,terator i = group.getOptions().iterator();
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,37,"ssertEquals(""[-h]"",i.next().toString());"
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,38,"ssertEquals(""-c <arg>"",i.next().toString());"
False,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,39,ssertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,src/test/org/apache/commons/cli2/bug/Bug27575Test.java,2,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import java.util.Iterator;import junit.framework.TestCase;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.PatternBuilder;import org.apache.commons.cli2.option.GroupImpl;public class Bug27575Test extends TestCase {	public void testRequiredOptions(){		PatternBuilder builder = new PatternBuilder();		builder.withPattern(""hc!<"");		Option option = builder.create();		assertTrue(option instanceof GroupImpl);		GroupImpl group = (GroupImpl)option;		Iterator i = group.getOptions().iterator();		assertEquals(""[-h]"",i.next().toString());		assertEquals(""-c <arg>"",i.next().toString());		assertFalse(i.hasNext());	}}"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,17,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,19,mport org.apache.commons.cli2.Argument;
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,20,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,21,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,22,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,23,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,24,mport org.apache.commons.cli2.builder.CommandBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,25,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,26,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,27,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,28,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,30,ublic class Bug28005Test extends TestCase {
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,31,ublic void testInfiniteLoop() {
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,32,inal DefaultOptionBuilder optionBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,33,inal ArgumentBuilder argumentBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,34,inal GroupBuilder groupBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,35,inal CommandBuilder commandBuilder = new CommandBuilder();
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,37,inal Option inputFormatOption =
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,38,ptionBuilder
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,39,"withLongName(""input-format"")"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,40,/.withArgument(argumentBuilder.create())
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,41,create();
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,43,inal Argument argument =
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,44,rgumentBuilder
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,45,"withName(""file"")"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,46,create();
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,48,inal Group children =
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,49,roupBuilder
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,50,"withName(""options"")"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,51,withOption(inputFormatOption)
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,52,create();
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,54,inal Option command =
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,55,ommandBuilder
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,56,"withName(""convert"")"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,57,withChildren(children)
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,58,withArgument(argument)
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,59,create();
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,61,inal Group root =
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,62,roupBuilder
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,63,"withName(""commands"")"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,64,withOption(command)
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,65,create();
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,67,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,68,arser.setGroup(root);
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,69,"inal String[] args = new String[]{""convert"", ""test.txt"","
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,70,"--input-format"", ""a""};"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,72,ry {
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,73,arser.parse(args);
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,74,"ail(""a isn't valid!!"");"
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,75, catch (OptionException e) {
False,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,76,"ssertEquals(""Unexpected a while processing commands"",e.getMessage());"
True,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,src/test/org/apache/commons/cli2/bug/Bug28005Test.java,2,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.CommandBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import junit.framework.TestCase;public class Bug28005Test extends TestCase {    public void testInfiniteLoop() {        final DefaultOptionBuilder optionBuilder = new DefaultOptionBuilder();        final ArgumentBuilder argumentBuilder = new ArgumentBuilder();        final GroupBuilder groupBuilder = new GroupBuilder();        final CommandBuilder commandBuilder = new CommandBuilder();        final Option inputFormatOption =            optionBuilder                .withLongName(""input-format"")                //.withArgument(argumentBuilder.create())                .create();        final Argument argument =            argumentBuilder                .withName(""file"")                .create();        final Group children =            groupBuilder                .withName(""options"")                .withOption(inputFormatOption)                .create();        final Option command =            commandBuilder                .withName(""convert"")                .withChildren(children)                .withArgument(argument)                .create();        final Group root =            groupBuilder                .withName(""commands"")                .withOption(command)                .create();        final Parser parser = new Parser();        parser.setGroup(root);        final String[] args = new String[]{""convert"", ""test.txt"",                ""--input-format"", ""a""};        try {            parser.parse(args);            fail(""a isn't valid!!"");        } catch (OptionException e) {            assertEquals(""Unexpected a while processing commands"",e.getMessage());        }    }}"
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,17,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,19,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,20,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,21,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,22,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,23,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,24,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,26,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,29, @author roxspring
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,31,ublic class Bug32533Test extends TestCase {
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,33,ublic void testBlah() throws OptionException {
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,35,"ption a1 = new DefaultOptionBuilder().withLongName(""a1"").create();"
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,36,"ption b1 = new DefaultOptionBuilder().withLongName(""b1"").create();"
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,37,"ption c1 = new DefaultOptionBuilder().withLongName(""c1"").create();"
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,39,roup b = new GroupBuilder().withOption(b1).create();
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,40,roup c = new GroupBuilder().withOption(c1).create();
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,41,roup a = new GroupBuilder().withOption(a1).withOption(b).withOption(c).create();
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,43,arser parser = new Parser();
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,44,arser.setGroup(a);
False,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,45,"arser.parse(new String[]{""--a1"",""--b1""});"
True,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,src/test/org/apache/commons/cli2/bug/Bug32533Test.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import junit.framework.TestCase;/** * @author roxspring */public class Bug32533Test extends TestCase {    public void testBlah() throws OptionException {        Option a1 = new DefaultOptionBuilder().withLongName(""a1"").create();        Option b1 = new DefaultOptionBuilder().withLongName(""b1"").create();        Option c1 = new DefaultOptionBuilder().withLongName(""c1"").create();        Group b = new GroupBuilder().withOption(b1).create();        Group c = new GroupBuilder().withOption(c1).create();        Group a = new GroupBuilder().withOption(a1).withOption(b).withOption(c).create();        Parser parser = new Parser();        parser.setGroup(a);        parser.parse(new String[]{""--a1"",""--b1""});    }}"
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,1,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,3,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,4,mport org.apache.commons.cli2.*;
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,5,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,6,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,7,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,8,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,9,mport org.apache.commons.cli2.validation.FileValidator;
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,12, @author brianegge
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,14,ublic class BugCLI122Test extends TestCase {
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,15,ublic void testArgumentWhichStartsWithDash() throws OptionException {
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,16,rgument wdArg = new ArgumentBuilder()
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,17,"withName(""anything"")"
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,18,withMaximum(1)
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,19,withMinimum(1)
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,20,withInitialSeparator('=')
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,21,create();
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,23,ption wdOpt = new DefaultOptionBuilder().withArgument(wdArg)
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,24,"withDescription(""anything, foo or -foo"")"
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,25,"withLongName(""argument"")"
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,26,"withShortName(""a"")"
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,27,create();
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,29,roup group = new GroupBuilder().withOption(wdOpt).create();
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,31,arser p = new Parser();
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,32,.setGroup(group);
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,33,"ommandLine normal = p.parse (new String[]{""-a"", ""foo""});"
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,34,ssertNotNull(normal);
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,35,"ssertEquals(normal.getValue(wdOpt), ""foo"");"
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,37,"ommandLine withDash = p.parse (new String[]{""--argument"", ""\""-foo\""""});"
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,38,ssertNotNull(withDash);
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,39,"ssertEquals(""-foo"", withDash.getValue(wdOpt));"
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,41,"ommandLine withDashAndEquals = p.parse (new String[]{""--argument=-foo""});"
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,42,ssertNotNull(withDashAndEquals);
False,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,43,"ssertEquals(""-foo"", withDashAndEquals.getValue(wdOpt));"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,1,"package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.*;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.validation.FileValidator;/** * @author brianegge */public class BugCLI122Test extends TestCase {    public void testArgumentWhichStartsWithDash() throws OptionException {        Argument wdArg = new ArgumentBuilder()                .withName(""anything"")                .withMaximum(1)                .withMinimum(1)                .withInitialSeparator('=')                .create();        Option wdOpt = new DefaultOptionBuilder().withArgument(wdArg)                .withDescription(""anything, foo or -foo"")                .withLongName(""argument"")                .withShortName(""a"")                .create();        Group group = new GroupBuilder().withOption(wdOpt).create();        Parser p = new Parser();        p.setGroup(group);        CommandLine normal = p.parse (new String[]{""-a"", ""foo""});        assertNotNull(normal);        assertEquals(normal.getValue(wdOpt), ""foo"");        CommandLine withDash = p.parse (new String[]{""--argument"", ""\""-foo\""""});        assertNotNull(withDash);        assertEquals(""-foo"", withDash.getValue(wdOpt));        CommandLine withDashAndEquals = p.parse (new String[]{""--argument=-foo""});        assertNotNull(withDashAndEquals);        assertEquals(""-foo"", withDashAndEquals.getValue(wdOpt));    }}"
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,17,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,21,mport org.apache.commons.cli2.Argument;
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,22,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,23,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,24,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,25,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,26,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,27,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,28,mport org.apache.commons.cli2.option.PropertyOption;
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,31, http://issues.apache.org/jira/browse/CLI-12
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,33,ublic class BugCLI12Test extends TestCase {
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,35,ublic void testBug() {
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,36,"rgument arg = new ArgumentBuilder().withName(""file"").create();"
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,38,ption option = new PropertyOption();
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,40,roup group = new GroupBuilder().withOption(option).withOption(arg).create();
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,42,arser p = new Parser();
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,43,.setGroup(group);
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,45,"ommandLine cl = p.parseAndHelp( new String[] { ""-Dmyprop1=myval1"", ""-Dmyprop2=myval2"", ""myfile"" } );"
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,46,f(cl == null) {
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,47,"ssertTrue(""Couldn't parse valid commandLine"", false);"
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,50,"ssertEquals( ""myval1"", cl.getProperty(""myprop1""));"
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,51,"ssertEquals( ""myval2"", cl.getProperty(""myprop2""));"
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,53,tring extraArgs = (String) cl.getValue(arg);
False,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,54,"ssertEquals( ""myfile"", extraArgs);"
True,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,src/test/org/apache/commons/cli2/bug/BugCLI12Test.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.option.PropertyOption;/** * http://issues.apache.org/jira/browse/CLI-12 */public class BugCLI12Test extends TestCase {  public void testBug() {    Argument arg = new ArgumentBuilder().withName(""file"").create();    Option option = new PropertyOption();    Group group = new GroupBuilder().withOption(option).withOption(arg).create();    Parser p = new Parser();    p.setGroup(group);    CommandLine cl = p.parseAndHelp( new String[] { ""-Dmyprop1=myval1"", ""-Dmyprop2=myval2"", ""myfile"" } );    if(cl == null) {      assertTrue(""Couldn't parse valid commandLine"", false);    }    assertEquals( ""myval1"", cl.getProperty(""myprop1""));    assertEquals( ""myval2"", cl.getProperty(""myprop2""));    String extraArgs = (String) cl.getValue(arg);    assertEquals( ""myfile"", extraArgs);  }}"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,17,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,19,mport java.io.PrintWriter;
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,20,mport java.io.StringWriter;
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,22,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,23,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,24,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,25,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,26,mport org.apache.commons.cli2.util.HelpFormatter;
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,28,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,31, http://issues.apache.org/jira/browse/CLI-18
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,33,ublic class BugCLI18Test extends TestCase {
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,35,ublic BugCLI18Test() {
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,36,uper();
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,40,ublic void testBug() {
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,41,"ption a = new DefaultOptionBuilder().withLongName(""aaa"").withShortName(""a"").withDescription(""aaaaaaa"").create();"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,42,"ption b = new DefaultOptionBuilder().withLongName(""bbb"").withDescription(""bbbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f"").create();"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,43,"ption c = new DefaultOptionBuilder().withLongName(""ccc"").withShortName(""c"").withDescription(""ccccccc"").create();"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,45,roup g = new GroupBuilder().withOption(a).withOption(b).withOption(c).create();
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,47,elpFormatter formatter = new HelpFormatter();
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,48,tringWriter out = new StringWriter();
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,50,ormatter.setPrintWriter(new PrintWriter(out));
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,51,"ormatter.setHeader(""dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s"");"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,52,"ormatter.setFooter(""blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh"" + '\r' + '\n' + ""rarrr"");"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,53,ormatter.setGroup(g);
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,54,"ormatter.setShellCommand(""foobar"");"
False,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,56,ormatter.print();
True,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,src/test/org/apache/commons/cli2/bug/BugCLI18Test.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import java.io.PrintWriter;import java.io.StringWriter;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.util.HelpFormatter;import junit.framework.TestCase;/** * http://issues.apache.org/jira/browse/CLI-18 */public class BugCLI18Test extends TestCase {  public BugCLI18Test() {    super();  }  public void testBug() {    Option a = new DefaultOptionBuilder().withLongName(""aaa"").withShortName(""a"").withDescription(""aaaaaaa"").create();    Option b = new DefaultOptionBuilder().withLongName(""bbb"").withDescription(""bbbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f"").create();    Option c = new DefaultOptionBuilder().withLongName(""ccc"").withShortName(""c"").withDescription(""ccccccc"").create();    Group g = new GroupBuilder().withOption(a).withOption(b).withOption(c).create();    HelpFormatter formatter = new HelpFormatter();    StringWriter out = new StringWriter();    formatter.setPrintWriter(new PrintWriter(out));    formatter.setHeader(""dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s"");    formatter.setFooter(""blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh"" + '\r' + '\n' + ""rarrr"");    formatter.setGroup(g);    formatter.setShellCommand(""foobar"");    formatter.print();  }}"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,17,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,19,mport org.apache.commons.cli2.Argument;
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,20,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,21,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,22,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,23,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,24,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,25,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,26,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,27,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,29,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,32, http://issues.apache.org/jira/browse/CLI-80
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,34,ublic class BugCLI80Test extends TestCase {
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,36,ublic void testBug() {
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,37,"inal String optName = ""option"";"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,39,rgument arg = new ArgumentBuilder().withName(optName)
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,40,withMaximum(1)
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,41,create();
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,43,ption option = new DefaultOptionBuilder().withArgument(arg)
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,44,"withDescription(""singular option"")"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,45,withLongName(optName)
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,46,"withShortName(""o"")"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,47,create();
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,49,roup group = new GroupBuilder().withOption(option).create();
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,51,arser p = new Parser();
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,52,.setGroup(group);
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,54,"ommandLine cl = p.parseAndHelp( new String[] { ""-o"", ""yes"" } );"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,55,"ssertNotNull(""Couldn't parse valid commandLine"", cl);"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,57,"ssertEquals(""Couldn't look up value by short name"", ""yes"", cl.getValue(""-o"") );"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,59,ry {
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,60,"l = p.parse( new String[] { ""-o"", ""yes"", ""-o"", ""jam"" } );"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,61,"ail(""Parsed invalid commandLine"");"
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,62, catch(OptionException e) {
False,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,63,/ ok
True,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,src/test/org/apache/commons/cli2/bug/BugCLI80Test.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.bug;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import junit.framework.TestCase;/** * http://issues.apache.org/jira/browse/CLI-80 */public class BugCLI80Test extends TestCase {    public void testBug() {        final String optName = ""option"";        Argument arg = new ArgumentBuilder().withName(optName)                                            .withMaximum(1)                                            .create();        Option option = new DefaultOptionBuilder().withArgument(arg)                                                  .withDescription(""singular option"")                                                  .withLongName(optName)                                                  .withShortName(""o"")                                                  .create();        Group group = new GroupBuilder().withOption(option).create();        Parser p = new Parser();        p.setGroup(group);        CommandLine cl = p.parseAndHelp( new String[] { ""-o"", ""yes"" } );        assertNotNull(""Couldn't parse valid commandLine"", cl);        assertEquals(""Couldn't look up value by short name"", ""yes"", cl.getValue(""-o"") );        try {            cl = p.parse( new String[] { ""-o"", ""yes"", ""-o"", ""jam"" } );            fail(""Parsed invalid commandLine"");        } catch(OptionException e) {          // ok        }    }}"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,17, under the License.
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,19,ackage org.apache.commons.cli2.bug;
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,21,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,23,mport org.apache.commons.cli2.Argument;
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,24,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,25,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,26,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,27,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,28,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,29,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,30,mport org.apache.commons.cli2.option.SourceDestArgument;
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,33, The first is a loop in Parser.parse() if I set a non-declared option. This
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,34, code goes into a loop in Parser.java method parse this while loop runs
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,35, endless
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,37, @author Steve Alberty
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,39,ublic class BugLoopingOptionLookAlikeTest extends TestCase {
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,41,ublic void testLoopingOptionLookAlike() {
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,42,inal DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,43,inal ArgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,44,inal GroupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,45,inal Group options = gbuilder
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,46,"withName(""ant"")"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,47,"withOption(obuilder.withShortName(""help"").withDescription(""print this message"").create())"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,48,"withOption(obuilder.withShortName(""projecthelp"").withDescription(""print project help information"").create())"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,49,"withOption(abuilder.withName(""target"").create())"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,50,create();
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,52,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,53,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,54,ry {
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,55,"arser.parse(new String[] { ""-abcdef"","
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,56,"testfile.txt "", });"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,57,"ail(""OptionException"");"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,58, catch (OptionException e) {
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,59,"ssertEquals(""Unexpected -abcdef while processing ant"",e.getMessage());"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,63,ublic void testLoopingOptionLookAlike2() {
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,64,inal ArgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,65,inal GroupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,66,"inal Argument inputfile_opt = abuilder.withName(""input"").withMinimum(1).withMaximum(1).create();"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,67,"inal Argument outputfile_opt = abuilder.withName(""output"").withMinimum(1).withMaximum(1).create();"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,68,"inal Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,69,inal Group options = gbuilder.withOption(targets).create();
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,70,inal Parser parser = new Parser();
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,71,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,72,ry {
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,73,"arser.parse(new String[] { ""testfile.txt"", ""testfile.txt"", ""testfile.txt"", ""testfile.txt"" });"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,74,"ail(""OptionException"");"
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,75, catch (OptionException e) {
False,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,76,"ssertEquals(""Unexpected testfile.txt while processing "", e.getMessage());"
True,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * ""License""); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.cli2.bug;import junit.framework.TestCase;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.option.SourceDestArgument;/** * The first is a loop in Parser.parse() if I set a non-declared option. This * code goes into a loop in Parser.java method parse this while loop runs * endless * * @author Steve Alberty */public class BugLoopingOptionLookAlikeTest extends TestCase {    public void testLoopingOptionLookAlike() {        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Group options = gbuilder            .withName(""ant"")            .withOption(obuilder.withShortName(""help"").withDescription(""print this message"").create())            .withOption(obuilder.withShortName(""projecthelp"").withDescription(""print project help information"").create())            .withOption(abuilder.withName(""target"").create())            .create();        final Parser parser = new Parser();        parser.setGroup(options);        try {            parser.parse(new String[] { ""-abcdef"",                    ""testfile.txt "", });            fail(""OptionException"");        } catch (OptionException e) {            assertEquals(""Unexpected -abcdef while processing ant"",e.getMessage());        }    }    public void testLoopingOptionLookAlike2() {        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Argument inputfile_opt = abuilder.withName(""input"").withMinimum(1).withMaximum(1).create();        final Argument outputfile_opt = abuilder.withName(""output"").withMinimum(1).withMaximum(1).create();        final Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);        final Group options = gbuilder.withOption(targets).create();        final Parser parser = new Parser();        parser.setGroup(options);        try {            parser.parse(new String[] { ""testfile.txt"", ""testfile.txt"", ""testfile.txt"", ""testfile.txt"" });            fail(""OptionException"");        } catch (OptionException e) {            assertEquals(""Unexpected testfile.txt while processing "", e.getMessage());        }    }}"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,17, under the License.
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,19,ackage org.apache.commons.cli2.builder;
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,21,mport java.util.ArrayList;
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,22,mport java.util.List;
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,24,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,26,mport org.apache.commons.cli2.option.ArgumentImpl;
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,27,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,28,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,29,mport org.apache.commons.cli2.validation.DateValidator;
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,30,mport org.apache.commons.cli2.validation.Validator;
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,32,ublic class ArgumentBuilderTest
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,33,xtends TestCase {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,34,rivate static final ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,35,rivate ArgumentBuilder argumentBuilder;
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,38, @see TestCase#setUp()
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,40,rotected void setUp()
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,41,hrows Exception {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,42,his.argumentBuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,45,ublic void testConsumeRemaining() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,46,"his.argumentBuilder.withConsumeRemaining(""--"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,47,"his.argumentBuilder.withName(""arg"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,49,rgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,51,"ssertEquals(""incorrect consume remaining token"", ""--"", arg.getConsumeRemaining());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,54,ublic void testNullConsumeRemaining() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,55,ry {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,56,his.argumentBuilder.withConsumeRemaining(null);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,57,"ail(""cannot use null consume remaining token"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,58, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,59,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,60,"esources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING),"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,61,xp.getMessage());
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,65,ublic void testEmptyConsumeRemaining() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,66,ry {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,67,"his.argumentBuilder.withConsumeRemaining("""");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,68,"ail(""cannot use empty string consume remaining token"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,69, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,70,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,71,"esources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING),"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,72,xp.getMessage());
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,76,ublic void testDefault() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,77,"his.argumentBuilder.withDefault(""defaultString"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,78,"his.argumentBuilder.withName(""arg"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,80,rgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,82,"ssertEquals(""incorrect number of default values"", 1, arg.getDefaultValues().size());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,83,"ssertEquals(""incorrect default value"", ""defaultString"", arg.getDefaultValues().get(0));"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,86,ublic void testDefaultX2() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,87,"his.argumentBuilder.withDefault(""defaultString1"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,88,"his.argumentBuilder.withDefault(""defaultString2"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,89,"his.argumentBuilder.withName(""arg"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,91,rgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,93,"ssertEquals(""incorrect number of default values"", 2, arg.getDefaultValues().size());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,94,"ssertEquals(""incorrect default value-1"", ""defaultString1"", arg.getDefaultValues().get(0));"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,95,"ssertEquals(""incorrect default value-2"", ""defaultString2"", arg.getDefaultValues().get(1));"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,98,ublic void testNullDefault() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,99,ry {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,100,his.argumentBuilder.withDefault(null);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,101,"ail(""cannot use null default"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,102, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,103,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,104,"esources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT),"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,105,xp.getMessage());
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,109,ublic void testDefaults() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,110,inal List defaults = new ArrayList();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,111,"efaults.add(""one"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,112,"efaults.add(""two"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,114,his.argumentBuilder.withDefaults(defaults);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,115,"his.argumentBuilder.withName(""arg"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,117,rgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,119,"ssertEquals(""incorrect number of default values"", 2, arg.getDefaultValues().size());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,120,"ssertEquals(""incorrect default value-1"", ""one"", arg.getDefaultValues().get(0));"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,121,"ssertEquals(""incorrect default value-2"", ""two"", arg.getDefaultValues().get(1));"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,122,"ssertEquals(""incorrect default values list"", defaults, arg.getDefaultValues());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,126,ublic void testNullDefaults() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,127,ry {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,128,his.argumentBuilder.withDefaults(null);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,129,"ail(""cannot use null defaults"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,130, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,131,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,132,"esources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS),"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,133,xp.getMessage());
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,137,ublic void testId() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,138,his.argumentBuilder.withId(1);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,139,"his.argumentBuilder.withName(""arg"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,141,rgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,143,"ssertEquals(""incorrect id"", 1, arg.getId());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,146,ublic void testInitialSeparator() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,147,"his.argumentBuilder.withInitialSeparator(',');"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,148,"his.argumentBuilder.withName(""arg"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,150,rgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,152,"ssertEquals(""incorrect initial separator"", ',', arg.getInitialSeparator());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,155,ublic void testMaximum() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,156,his.argumentBuilder.withMaximum(1);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,157,"his.argumentBuilder.withName(""arg"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,159,rgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,161,"ssertEquals(""incorrect maximum"", 1, arg.getMaximum());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,164,ublic void testNegativeMaximum() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,165,ry {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,166,his.argumentBuilder.withMaximum(-1);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,167,"ail(""cannot use negative maximum"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,168, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,169,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,170,"esources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM),"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,171,xp.getMessage());
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,175,ublic void testMinimum() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,176,his.argumentBuilder.withMinimum(1);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,177,"his.argumentBuilder.withName(""arg"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,179,rgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,181,"ssertEquals(""incorrect maximum"", 1, arg.getMinimum());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,184,ublic void testNegativeMinimum() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,185,ry {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,186,his.argumentBuilder.withMinimum(-1);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,187,"ail(""cannot use negative minimum"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,188, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,189,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,190,"esources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM),"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,191,xp.getMessage());
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,195,ublic void testName() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,196,"his.argumentBuilder.withName(""arg"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,198,rgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,200,"ssertEquals(""incorrect preferred name"", ""arg"", arg.getPreferredName());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,203,ublic void testNullName() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,204,ry {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,205,his.argumentBuilder.withName(null);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,206,"ail(""cannot use null name"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,207, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,208,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,209,"esources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME),"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,210,xp.getMessage());
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,214,ublic void testEmptyName() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,215,ry {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,216,"his.argumentBuilder.withName("""");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,217,"ail(""cannot use empty name"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,218, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,219,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,220,"esources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME),"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,221,xp.getMessage());
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,225,ublic void testSubsequentSeparator() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,226,his.argumentBuilder.withSubsequentSeparator(':');
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,227,"his.argumentBuilder.withName(""arg"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,229,rgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,231,"ssertEquals(""incorrect subsequent separator"", ':', arg.getSubsequentSeparator());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,234,ublic void testValidator() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,235,alidator validator = DateValidator.getDateInstance();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,236,his.argumentBuilder.withValidator(validator);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,237,"his.argumentBuilder.withName(""arg"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,239,rgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,241,"ssertEquals(""incorrect validator"", validator, arg.getValidator());"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,244,ublic void testNullValidator() {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,245,ry {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,246,his.argumentBuilder.withValidator(null);
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,247,"ail(""cannot use null validator"");"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,248, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,249,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,250,"esources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR),"
False,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,251,xp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * ""License""); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.cli2.builder;import java.util.ArrayList;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.option.ArgumentImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;import org.apache.commons.cli2.validation.DateValidator;import org.apache.commons.cli2.validation.Validator;public class ArgumentBuilderTest    extends TestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    private ArgumentBuilder argumentBuilder;    /*     * @see TestCase#setUp()     */    protected void setUp()        throws Exception {        this.argumentBuilder = new ArgumentBuilder();    }    public void testConsumeRemaining() {        this.argumentBuilder.withConsumeRemaining(""--"");        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect consume remaining token"", ""--"", arg.getConsumeRemaining());    }    public void testNullConsumeRemaining() {        try {            this.argumentBuilder.withConsumeRemaining(null);            fail(""cannot use null consume remaining token"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING),                         exp.getMessage());        }    }    public void testEmptyConsumeRemaining() {        try {            this.argumentBuilder.withConsumeRemaining("""");            fail(""cannot use empty string consume remaining token"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING),                         exp.getMessage());        }    }    public void testDefault() {        this.argumentBuilder.withDefault(""defaultString"");        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect number of default values"", 1, arg.getDefaultValues().size());        assertEquals(""incorrect default value"", ""defaultString"", arg.getDefaultValues().get(0));    }    public void testDefaultX2() {        this.argumentBuilder.withDefault(""defaultString1"");        this.argumentBuilder.withDefault(""defaultString2"");        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect number of default values"", 2, arg.getDefaultValues().size());        assertEquals(""incorrect default value-1"", ""defaultString1"", arg.getDefaultValues().get(0));        assertEquals(""incorrect default value-2"", ""defaultString2"", arg.getDefaultValues().get(1));    }    public void testNullDefault() {        try {            this.argumentBuilder.withDefault(null);            fail(""cannot use null default"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT),                         exp.getMessage());        }    }    public void testDefaults() {        final List defaults = new ArrayList();        defaults.add(""one"");        defaults.add(""two"");        this.argumentBuilder.withDefaults(defaults);        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect number of default values"", 2, arg.getDefaultValues().size());        assertEquals(""incorrect default value-1"", ""one"", arg.getDefaultValues().get(0));        assertEquals(""incorrect default value-2"", ""two"", arg.getDefaultValues().get(1));        assertEquals(""incorrect default values list"", defaults, arg.getDefaultValues());    }    public void testNullDefaults() {        try {            this.argumentBuilder.withDefaults(null);            fail(""cannot use null defaults"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS),                         exp.getMessage());        }    }    public void testId() {        this.argumentBuilder.withId(1);        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect id"", 1, arg.getId());    }    public void testInitialSeparator() {        this.argumentBuilder.withInitialSeparator(',');        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect initial separator"", ',', arg.getInitialSeparator());    }    public void testMaximum() {        this.argumentBuilder.withMaximum(1);        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect maximum"", 1, arg.getMaximum());    }    public void testNegativeMaximum() {        try {            this.argumentBuilder.withMaximum(-1);            fail(""cannot use negative maximum"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM),                         exp.getMessage());        }    }    public void testMinimum() {        this.argumentBuilder.withMinimum(1);        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect maximum"", 1, arg.getMinimum());    }    public void testNegativeMinimum() {        try {            this.argumentBuilder.withMinimum(-1);            fail(""cannot use negative minimum"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM),                         exp.getMessage());        }    }    public void testName() {        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect preferred name"", ""arg"", arg.getPreferredName());    }    public void testNullName() {        try {            this.argumentBuilder.withName(null);            fail(""cannot use null name"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME),                         exp.getMessage());        }    }    public void testEmptyName() {        try {            this.argumentBuilder.withName("""");            fail(""cannot use empty name"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME),                         exp.getMessage());        }    }    public void testSubsequentSeparator() {        this.argumentBuilder.withSubsequentSeparator(':');        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect subsequent separator"", ':', arg.getSubsequentSeparator());    }    public void testValidator() {        Validator validator = DateValidator.getDateInstance();        this.argumentBuilder.withValidator(validator);        this.argumentBuilder.withName(""arg"");        ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();        assertEquals(""incorrect validator"", validator, arg.getValidator());    }    public void testNullValidator() {        try {            this.argumentBuilder.withValidator(null);            fail(""cannot use null validator"");        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR),                         exp.getMessage());        }    }}"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,17,ackage org.apache.commons.cli2.builder;
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,19,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,21,mport org.apache.commons.cli2.Argument;
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,22,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,23,mport org.apache.commons.cli2.option.DefaultOption;
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,24,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,25,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,27,ublic class DefaultOptionBuilderTest
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,28,xtends TestCase {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,29,rivate static final ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,30,rivate DefaultOptionBuilder defaultOptionBuilder;
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,33, @see TestCase#setUp()
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,35,rotected void setUp()
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,36,hrows Exception {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,37,his.defaultOptionBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,41," Class to test for void DefaultOptionBuilder(String, String, boolean)"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,43,ublic void testNew_NullShortPrefix() {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,44,ry {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,45,"ew DefaultOptionBuilder(null, null, false);"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,46,"ail(""null short prefix is not permitted"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,47, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,48,"ssertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX),"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,49,.getMessage());
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,54," Class to test for void DefaultOptionBuilder(String, String, boolean)"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,56,ublic void testNew_EmptyShortPrefix() {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,57,ry {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,58,"ew DefaultOptionBuilder("""", null, false);"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,59,"ail(""empty short prefix is not permitted"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,60, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,61,"ssertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX),"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,62,.getMessage());
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,67," Class to test for void DefaultOptionBuilder(String, String, boolean)"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,69,ublic void testNew_NullLongPrefix() {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,70,ry {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,71,"ew DefaultOptionBuilder(""-"", null, false);"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,72,"ail(""null long prefix is not permitted"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,73, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,74,"ssertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX),"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,75,.getMessage());
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,80," Class to test for void DefaultOptionBuilder(String, String, boolean)"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,82,ublic void testNew_EmptyLongPrefix() {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,83,ry {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,84,"ew DefaultOptionBuilder(""-"", """", false);"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,85,"ail(""empty long prefix is not permitted"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,86, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,87,"ssertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX),"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,88,.getMessage());
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,92,ublic void testCreate() {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,93,ry {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,94,his.defaultOptionBuilder.create();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,95,"ail(""options must have a name"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,96, catch (IllegalStateException e) {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,97,"ssertEquals(resources.getMessage(ResourceConstants.OPTION_NO_NAME), e.getMessage());"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,100,"his.defaultOptionBuilder.withShortName(""j"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,101,his.defaultOptionBuilder.create();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,102,"his.defaultOptionBuilder.withLongName(""jkeyes"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,103,his.defaultOptionBuilder.create();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,106,"efaultOptionBuilder builder = new DefaultOptionBuilder(""-"", ""--"", true);"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,107,"uilder.withShortName(""mx"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,111,ublic void testName() {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,112,/ withLongName && this.preferred != null
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,114,"his.defaultOptionBuilder.withShortName(""a"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,115,"his.defaultOptionBuilder.withLongName(""apples"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,117,/ withShortName && this.preferred != null
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,119,"his.defaultOptionBuilder.withLongName(""apples"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,120,"his.defaultOptionBuilder.withShortName(""a"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,122,/ withShortName && this.preferred != null
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,124,"his.defaultOptionBuilder.withLongName(""apples"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,125,"his.defaultOptionBuilder.withShortName(""a"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,129,ublic void testWithDescription() {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,130,"tring description = ""desc"";"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,131,"his.defaultOptionBuilder.withShortName(""a"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,132,his.defaultOptionBuilder.withDescription(description);
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,134,efaultOption opt = this.defaultOptionBuilder.create();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,135,"ssertEquals(""wrong description found"", description, opt.getDescription());"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,138,ublic void testWithRequired() {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,140,oolean required = false;
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,141,"his.defaultOptionBuilder.withShortName(""a"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,142,his.defaultOptionBuilder.withRequired(required);
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,144,efaultOption opt = this.defaultOptionBuilder.create();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,145,"ssertEquals(""wrong required found"", required, opt.isRequired());"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,149,oolean required = true;
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,150,"his.defaultOptionBuilder.withShortName(""a"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,151,his.defaultOptionBuilder.withRequired(required);
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,153,efaultOption opt = this.defaultOptionBuilder.create();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,154,"ssertEquals(""wrong required found"", required, opt.isRequired());"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,158,ublic void testWithChildren() {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,159,roupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,161,"his.defaultOptionBuilder.withShortName(""a"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,162,his.defaultOptionBuilder.withRequired(true);
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,164,efaultOption opt = this.defaultOptionBuilder.create();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,166,"roup group = gbuilder.withName(""withchildren"").withOption(opt).create();"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,169,"his.defaultOptionBuilder.withShortName(""b"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,170,his.defaultOptionBuilder.withChildren(group);
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,172,efaultOption option = this.defaultOptionBuilder.create();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,173,"ssertEquals(""wrong children found"", group, option.getChildren());"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,177,ublic void testWithArgument() {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,178,rgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,179,"builder.withName(""myarg"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,181,rgument arg = abuilder.create();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,183,"his.defaultOptionBuilder.withShortName(""a"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,184,his.defaultOptionBuilder.withRequired(true);
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,185,his.defaultOptionBuilder.withArgument(arg);
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,187,efaultOption opt = this.defaultOptionBuilder.create();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,189,"ssertEquals(""wrong argument found"", arg, opt.getArgument());"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,192,ublic void testWithId() {
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,193,"his.defaultOptionBuilder.withShortName(""a"");"
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,194,his.defaultOptionBuilder.withId(0);
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,196,efaultOption opt = this.defaultOptionBuilder.create();
False,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,198,"ssertEquals(""wrong id found"", 0, opt.getId());"
True,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,src/test/org/apache/commons/cli2/builder/DefaultOptionBuilderTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.builder;import junit.framework.TestCase;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.option.DefaultOption;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;public class DefaultOptionBuilderTest    extends TestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    private DefaultOptionBuilder defaultOptionBuilder;    /*     * @see TestCase#setUp()     */    protected void setUp()        throws Exception {        this.defaultOptionBuilder = new DefaultOptionBuilder();    }    /*     * Class to test for void DefaultOptionBuilder(String, String, boolean)     */    public void testNew_NullShortPrefix() {        try {            new DefaultOptionBuilder(null, null, false);            fail(""null short prefix is not permitted"");        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX),                         e.getMessage());        }    }    /*     * Class to test for void DefaultOptionBuilder(String, String, boolean)     */    public void testNew_EmptyShortPrefix() {        try {            new DefaultOptionBuilder("""", null, false);            fail(""empty short prefix is not permitted"");        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_SHORT_PREFIX),                         e.getMessage());        }    }    /*     * Class to test for void DefaultOptionBuilder(String, String, boolean)     */    public void testNew_NullLongPrefix() {        try {            new DefaultOptionBuilder(""-"", null, false);            fail(""null long prefix is not permitted"");        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX),                         e.getMessage());        }    }    /*     * Class to test for void DefaultOptionBuilder(String, String, boolean)     */    public void testNew_EmptyLongPrefix() {        try {            new DefaultOptionBuilder(""-"", """", false);            fail(""empty long prefix is not permitted"");        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.OPTION_ILLEGAL_LONG_PREFIX),                         e.getMessage());        }    }    public void testCreate() {        try {            this.defaultOptionBuilder.create();            fail(""options must have a name"");        } catch (IllegalStateException e) {            assertEquals(resources.getMessage(ResourceConstants.OPTION_NO_NAME), e.getMessage());        }        this.defaultOptionBuilder.withShortName(""j"");        this.defaultOptionBuilder.create();        this.defaultOptionBuilder.withLongName(""jkeyes"");        this.defaultOptionBuilder.create();        {            DefaultOptionBuilder builder = new DefaultOptionBuilder(""-"", ""--"", true);            builder.withShortName(""mx"");        }    }    public void testName() {        // withLongName && this.preferred != null        {            this.defaultOptionBuilder.withShortName(""a"");            this.defaultOptionBuilder.withLongName(""apples"");        }        // withShortName && this.preferred != null        {            this.defaultOptionBuilder.withLongName(""apples"");            this.defaultOptionBuilder.withShortName(""a"");        }        // withShortName && this.preferred != null        {            this.defaultOptionBuilder.withLongName(""apples"");            this.defaultOptionBuilder.withShortName(""a"");        }    }    public void testWithDescription() {        String description = ""desc"";        this.defaultOptionBuilder.withShortName(""a"");        this.defaultOptionBuilder.withDescription(description);        DefaultOption opt = this.defaultOptionBuilder.create();        assertEquals(""wrong description found"", description, opt.getDescription());    }    public void testWithRequired() {        {            boolean required = false;            this.defaultOptionBuilder.withShortName(""a"");            this.defaultOptionBuilder.withRequired(required);            DefaultOption opt = this.defaultOptionBuilder.create();            assertEquals(""wrong required found"", required, opt.isRequired());        }        {            boolean required = true;            this.defaultOptionBuilder.withShortName(""a"");            this.defaultOptionBuilder.withRequired(required);            DefaultOption opt = this.defaultOptionBuilder.create();            assertEquals(""wrong required found"", required, opt.isRequired());        }    }    public void testWithChildren() {        GroupBuilder gbuilder = new GroupBuilder();        this.defaultOptionBuilder.withShortName(""a"");        this.defaultOptionBuilder.withRequired(true);        DefaultOption opt = this.defaultOptionBuilder.create();        Group group = gbuilder.withName(""withchildren"").withOption(opt).create();        {            this.defaultOptionBuilder.withShortName(""b"");            this.defaultOptionBuilder.withChildren(group);            DefaultOption option = this.defaultOptionBuilder.create();            assertEquals(""wrong children found"", group, option.getChildren());        }    }    public void testWithArgument() {        ArgumentBuilder abuilder = new ArgumentBuilder();        abuilder.withName(""myarg"");        Argument arg = abuilder.create();        this.defaultOptionBuilder.withShortName(""a"");        this.defaultOptionBuilder.withRequired(true);        this.defaultOptionBuilder.withArgument(arg);        DefaultOption opt = this.defaultOptionBuilder.create();        assertEquals(""wrong argument found"", arg, opt.getArgument());    }    public void testWithId() {        this.defaultOptionBuilder.withShortName(""a"");        this.defaultOptionBuilder.withId(0);        DefaultOption opt = this.defaultOptionBuilder.create();        assertEquals(""wrong id found"", 0, opt.getId());    }}"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,17,ackage org.apache.commons.cli2.commandline;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,19,mport java.util.ArrayList;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,20,mport java.util.Collections;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,21,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,22,mport java.util.Set;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,24,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,25,mport org.apache.commons.cli2.CommandLineTestCase;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,26,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,27,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,28,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,31, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,33,ublic class DefaultingCommandLineTest
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,34,xtends CommandLineTestCase {
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,35,rivate CommandLine first;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,36,rivate CommandLine second;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,37,"rivate Option inFirst = new DefaultOptionBuilder().withLongName(""infirst"").create();"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,38,"rivate Option inBoth = new DefaultOptionBuilder().withLongName(""inboth"").create();"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,39,"rivate Option inSecond = new DefaultOptionBuilder().withLongName(""insecond"").create();"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,41,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,42, @see org.apache.commons.cli2.CommandLineTest#createCommandLine()
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,44,rotected final CommandLine createCommandLine() {
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,45,"inal WriteableCommandLine writeable = new WriteableCommandLineImpl(root, new ArrayList());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,46,riteable.addOption(present);
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,47,"riteable.addProperty(""present"", ""present property"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,48,"riteable.addSwitch(bool, true);"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,49,"riteable.addValue(present, ""present value"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,50,riteable.addOption(multiple);
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,51,"riteable.addValue(multiple, ""value 1"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,52,"riteable.addValue(multiple, ""value 2"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,53,"riteable.addValue(multiple, ""value 3"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,55,inal DefaultingCommandLine defaults = new DefaultingCommandLine();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,56,efaults.appendCommandLine(writeable);
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,58,eturn defaults;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,61,ublic void setUp()
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,62,hrows Exception {
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,63,uper.setUp();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,65,riteableCommandLine writeable;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,67,"riteable = new WriteableCommandLineImpl(root, new ArrayList());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,68,riteable.addOption(inFirst);
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,69,riteable.addOption(inBoth);
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,70,"riteable.addProperty(""infirst"", ""infirst first value"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,71,"riteable.addProperty(""inboth"", ""inboth first value"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,72,"riteable.addSwitch(inFirst, true);"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,73,"riteable.addSwitch(inBoth, true);"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,74,"riteable.addValue(inFirst, ""infirst first value 1"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,75,"riteable.addValue(inFirst, ""infirst first value 2"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,76,"riteable.addValue(inBoth, ""inboth first value 1"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,77,"riteable.addValue(inBoth, ""inboth first value 2"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,78,irst = writeable;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,80,"riteable = new WriteableCommandLineImpl(root, new ArrayList());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,81,riteable.addOption(inSecond);
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,82,riteable.addOption(inBoth);
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,83,"riteable.addProperty(""insecond"", ""insecond second value"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,84,"riteable.addProperty(""inboth"", ""inboth second value"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,85,"riteable.addSwitch(inSecond, true);"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,86,"riteable.addSwitch(inBoth, true);"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,87,"riteable.addValue(inSecond, ""insecond second value 1"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,88,"riteable.addValue(inSecond, ""insecond second value 2"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,89,"riteable.addValue(inBoth, ""inboth second value 1"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,90,"riteable.addValue(inBoth, ""inboth second value 2"");"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,91,econd = writeable;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,94,ublic final void testAppendCommandLine() {
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,95,inal DefaultingCommandLine defaults = new DefaultingCommandLine();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,96,terator i;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,98, = defaults.commandLines();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,99,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,101,efaults.appendCommandLine(first);
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,102, = defaults.commandLines();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,103,"ssertSame(first, i.next());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,104,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,106,efaults.appendCommandLine(second);
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,107, = defaults.commandLines();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,108,"ssertSame(first, i.next());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,109,"ssertSame(second, i.next());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,110,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,113,ublic final void testInsertCommandLine() {
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,114,inal DefaultingCommandLine defaults = new DefaultingCommandLine();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,115,terator i;
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,117, = defaults.commandLines();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,118,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,120,"efaults.insertCommandLine(0, first);"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,121, = defaults.commandLines();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,122,"ssertSame(first, i.next());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,123,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,125,"efaults.insertCommandLine(0, second);"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,126, = defaults.commandLines();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,127,"ssertSame(second, i.next());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,128,"ssertSame(first, i.next());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,129,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,132,ublic void testTriggers() {
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,133,inal DefaultingCommandLine defaults = new DefaultingCommandLine();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,134,efaults.appendCommandLine(first);
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,135,efaults.appendCommandLine(second);
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,137,et set = defaults.getOptionTriggers();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,138,terator iter = set.iterator();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,139,"ssertEquals(""wrong # of triggers"", 3, set.size());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,140,"ssertTrue(""cannot find trigger"", set.contains(""--insecond""));"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,141,"ssertTrue(""cannot find trigger"", set.contains(""--inboth""));"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,142,"ssertTrue(""cannot find trigger"", set.contains(""--infirst""));"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,145,ublic void testDefaults() {
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,146,inal DefaultingCommandLine defaults = new DefaultingCommandLine();
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,148,"ssertEquals(""wrong # of defaults"", 0, defaults.getValues(""--insecond"").size());"
False,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,149,"ssertEquals(""wrong Set of defaults"", Collections.EMPTY_LIST, defaults.getValues(""--insecond"", null));"
True,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/DefaultingCommandLineTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import java.util.Collections;import java.util.Iterator;import java.util.Set;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.CommandLineTestCase;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.builder.DefaultOptionBuilder;/** * @author Rob Oxspring */public class DefaultingCommandLineTest    extends CommandLineTestCase {    private CommandLine first;    private CommandLine second;    private Option inFirst = new DefaultOptionBuilder().withLongName(""infirst"").create();    private Option inBoth = new DefaultOptionBuilder().withLongName(""inboth"").create();    private Option inSecond = new DefaultOptionBuilder().withLongName(""insecond"").create();    /* (non-Javadoc)     * @see org.apache.commons.cli2.CommandLineTest#createCommandLine()     */    protected final CommandLine createCommandLine() {        final WriteableCommandLine writeable = new WriteableCommandLineImpl(root, new ArrayList());        writeable.addOption(present);        writeable.addProperty(""present"", ""present property"");        writeable.addSwitch(bool, true);        writeable.addValue(present, ""present value"");        writeable.addOption(multiple);        writeable.addValue(multiple, ""value 1"");        writeable.addValue(multiple, ""value 2"");        writeable.addValue(multiple, ""value 3"");        final DefaultingCommandLine defaults = new DefaultingCommandLine();        defaults.appendCommandLine(writeable);        return defaults;    }    public void setUp()        throws Exception {        super.setUp();        WriteableCommandLine writeable;        writeable = new WriteableCommandLineImpl(root, new ArrayList());        writeable.addOption(inFirst);        writeable.addOption(inBoth);        writeable.addProperty(""infirst"", ""infirst first value"");        writeable.addProperty(""inboth"", ""inboth first value"");        writeable.addSwitch(inFirst, true);        writeable.addSwitch(inBoth, true);        writeable.addValue(inFirst, ""infirst first value 1"");        writeable.addValue(inFirst, ""infirst first value 2"");        writeable.addValue(inBoth, ""inboth first value 1"");        writeable.addValue(inBoth, ""inboth first value 2"");        first = writeable;        writeable = new WriteableCommandLineImpl(root, new ArrayList());        writeable.addOption(inSecond);        writeable.addOption(inBoth);        writeable.addProperty(""insecond"", ""insecond second value"");        writeable.addProperty(""inboth"", ""inboth second value"");        writeable.addSwitch(inSecond, true);        writeable.addSwitch(inBoth, true);        writeable.addValue(inSecond, ""insecond second value 1"");        writeable.addValue(inSecond, ""insecond second value 2"");        writeable.addValue(inBoth, ""inboth second value 1"");        writeable.addValue(inBoth, ""inboth second value 2"");        second = writeable;    }    public final void testAppendCommandLine() {        final DefaultingCommandLine defaults = new DefaultingCommandLine();        Iterator i;        i = defaults.commandLines();        assertFalse(i.hasNext());        defaults.appendCommandLine(first);        i = defaults.commandLines();        assertSame(first, i.next());        assertFalse(i.hasNext());        defaults.appendCommandLine(second);        i = defaults.commandLines();        assertSame(first, i.next());        assertSame(second, i.next());        assertFalse(i.hasNext());    }    public final void testInsertCommandLine() {        final DefaultingCommandLine defaults = new DefaultingCommandLine();        Iterator i;        i = defaults.commandLines();        assertFalse(i.hasNext());        defaults.insertCommandLine(0, first);        i = defaults.commandLines();        assertSame(first, i.next());        assertFalse(i.hasNext());        defaults.insertCommandLine(0, second);        i = defaults.commandLines();        assertSame(second, i.next());        assertSame(first, i.next());        assertFalse(i.hasNext());    }    public void testTriggers() {        final DefaultingCommandLine defaults = new DefaultingCommandLine();        defaults.appendCommandLine(first);        defaults.appendCommandLine(second);        Set set = defaults.getOptionTriggers();        Iterator iter = set.iterator();        assertEquals(""wrong # of triggers"", 3, set.size());        assertTrue(""cannot find trigger"", set.contains(""--insecond""));        assertTrue(""cannot find trigger"", set.contains(""--inboth""));        assertTrue(""cannot find trigger"", set.contains(""--infirst""));    }    public void testDefaults() {        final DefaultingCommandLine defaults = new DefaultingCommandLine();        assertEquals(""wrong # of defaults"", 0, defaults.getValues(""--insecond"").size());        assertEquals(""wrong Set of defaults"", Collections.EMPTY_LIST, defaults.getValues(""--insecond"", null));    }}"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,17,ackage org.apache.commons.cli2.commandline;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,19,mport java.io.BufferedReader;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,20,mport java.io.IOException;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,21,mport java.io.PrintWriter;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,22,mport java.io.StringReader;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,23,mport java.io.StringWriter;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,25,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,26,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,27,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,28,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,29,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,30,mport org.apache.commons.cli2.option.DefaultOption;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,31,mport org.apache.commons.cli2.util.HelpFormatter;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,33,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,35,ublic class ParserTest extends TestCase {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,37,rivate Parser parser;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,38,rivate DefaultOption verboseOption;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,39,rivate DefaultOption helpOption;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,40,rivate Group options;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,41,rivate HelpFormatter helpFormatter;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,42,rivate StringWriter out;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,43,rivate BufferedReader in;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,45,ublic void setUp() {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,46,arser = new Parser();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,48,inal GroupBuilder gBuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,49,inal DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,51,"elpOption = oBuilder.withLongName(""help"").withShortName(""h"").create();"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,52,"erboseOption = oBuilder.withLongName(""verbose"").withShortName(""v"").create();"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,53,ptions = gBuilder.withOption(helpOption).withOption(verboseOption).create();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,54,arser.setGroup(options);
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,56,elpFormatter = new HelpFormatter();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,57,ut = new StringWriter();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,58,elpFormatter.setPrintWriter(new PrintWriter(out));
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,59,arser.setHelpFormatter(helpFormatter);
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,62,ublic void testParse_Successful() throws OptionException {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,63,"inal CommandLine cl = parser.parse(new String[]{""-hv""});"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,65,ssertTrue(cl.hasOption(helpOption));
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,66,ssertTrue(cl.hasOption(verboseOption));
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,68,"ssertEquals(""--help --verbose"",cl.toString());"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,70,inal WriteableCommandLineImpl wcli = (WriteableCommandLineImpl)cl;
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,71,"ssertEquals(""[--help, --verbose]"",wcli.getNormalised().toString());"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,74,ublic void testParse_WithUnexpectedOption() {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,75,ry {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,76,"arser.parse(new String[]{""--unexpected""});"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,77,"ail(""OptionException"");"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,79,atch(OptionException e) {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,80,"ssertEquals(options,e.getOption());"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,81,"ssertEquals(""Unexpected --unexpected while processing --help|--verbose"",e.getMessage());"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,85,ublic void testParseAndHelp_Successful() throws IOException {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,86,"inal CommandLine cl = parser.parseAndHelp(new String[]{""-v""});"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,88,ssertTrue(cl.hasOption(verboseOption));
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,89,"ssertEquals("""",out.getBuffer().toString());"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,92,ublic void testParseAndHelp_ByHelpOption() throws IOException {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,93,arser.setHelpOption(helpOption);
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,95,"ssertNull(parser.parseAndHelp(new String[]{""-hv""}));"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,97,nReader();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,98,ssertInReaderUsage();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,99,ssertInReaderEOF();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,102,ublic void testParseAndHelp_ByHelpTrigger() throws IOException {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,103,"arser.setHelpTrigger(""--help"");"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,105,"ssertNull(parser.parseAndHelp(new String[]{""-hv""}));"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,107,nReader();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,108,ssertInReaderUsage();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,109,ssertInReaderEOF();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,112,ublic void testParseAndHelp_WithUnexpectedOption() throws IOException {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,113,"ssertNull(parser.parseAndHelp(new String[]{""--unexpected""}));"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,115,nReader();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,116,"ssertInReaderLine(""Unexpected --unexpected while processing --help|--verbose"");"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,117,ssertInReaderUsage();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,118,ssertInReaderEOF();
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,121,rivate void assertInReaderUsage() throws IOException {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,122,"ssertInReaderLine(""Usage:"");"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,123,"ssertInReaderLine(""[--help --verbose]"");"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,124,"ssertInReaderLine(""--help|--verbose"");"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,125,"ssertInReaderLine(""--help (-h)"");"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,126,"ssertInReaderLine(""--verbose (-v)"");"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,129,rivate void assertInReaderLine(final String string) throws IOException {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,130,"ssertEquals(string,in.readLine().trim());"
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,133,rivate void assertInReaderEOF() throws IOException {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,134,ssertNull(in.readLine());
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,137,rivate void inReader() {
False,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,138,n = new BufferedReader(new StringReader(out.getBuffer().toString()));
True,src/test/org/apache/commons/cli2/commandline/ParserTest.java,src/test/org/apache/commons/cli2/commandline/ParserTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.io.BufferedReader;import java.io.IOException;import java.io.PrintWriter;import java.io.StringReader;import java.io.StringWriter;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.option.DefaultOption;import org.apache.commons.cli2.util.HelpFormatter;import junit.framework.TestCase;public class ParserTest extends TestCase {    private Parser parser;    private DefaultOption verboseOption;    private DefaultOption helpOption;    private Group options;    private HelpFormatter helpFormatter;    private StringWriter out;    private BufferedReader in;    public void setUp() {        parser = new Parser();        final GroupBuilder gBuilder = new GroupBuilder();        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();        helpOption = oBuilder.withLongName(""help"").withShortName(""h"").create();        verboseOption = oBuilder.withLongName(""verbose"").withShortName(""v"").create();        options = gBuilder.withOption(helpOption).withOption(verboseOption).create();        parser.setGroup(options);        helpFormatter = new HelpFormatter();        out = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(out));        parser.setHelpFormatter(helpFormatter);    }    public void testParse_Successful() throws OptionException {        final CommandLine cl = parser.parse(new String[]{""-hv""});        assertTrue(cl.hasOption(helpOption));        assertTrue(cl.hasOption(verboseOption));        assertEquals(""--help --verbose"",cl.toString());        final WriteableCommandLineImpl wcli = (WriteableCommandLineImpl)cl;        assertEquals(""[--help, --verbose]"",wcli.getNormalised().toString());    }    public void testParse_WithUnexpectedOption() {        try {            parser.parse(new String[]{""--unexpected""});            fail(""OptionException"");        }        catch(OptionException e) {            assertEquals(options,e.getOption());            assertEquals(""Unexpected --unexpected while processing --help|--verbose"",e.getMessage());        }    }    public void testParseAndHelp_Successful() throws IOException {        final CommandLine cl = parser.parseAndHelp(new String[]{""-v""});        assertTrue(cl.hasOption(verboseOption));        assertEquals("""",out.getBuffer().toString());    }    public void testParseAndHelp_ByHelpOption() throws IOException {        parser.setHelpOption(helpOption);        assertNull(parser.parseAndHelp(new String[]{""-hv""}));        inReader();        assertInReaderUsage();        assertInReaderEOF();    }    public void testParseAndHelp_ByHelpTrigger() throws IOException {        parser.setHelpTrigger(""--help"");        assertNull(parser.parseAndHelp(new String[]{""-hv""}));        inReader();        assertInReaderUsage();        assertInReaderEOF();    }    public void testParseAndHelp_WithUnexpectedOption() throws IOException {        assertNull(parser.parseAndHelp(new String[]{""--unexpected""}));        inReader();        assertInReaderLine(""Unexpected --unexpected while processing --help|--verbose"");        assertInReaderUsage();        assertInReaderEOF();    }    private void assertInReaderUsage() throws IOException {        assertInReaderLine(""Usage:"");        assertInReaderLine(""[--help --verbose]"");        assertInReaderLine(""--help|--verbose"");        assertInReaderLine(""--help (-h)"");        assertInReaderLine(""--verbose (-v)"");    }    private void assertInReaderLine(final String string) throws IOException {        assertEquals(string,in.readLine().trim());    }    private void assertInReaderEOF() throws IOException {        assertNull(in.readLine());    }    private void inReader() {        in = new BufferedReader(new StringReader(out.getBuffer().toString()));    }}"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,17,ackage org.apache.commons.cli2.commandline;
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,19,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,20,mport java.util.Set;
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,21,mport java.util.prefs.Preferences;
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,23,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,24,mport org.apache.commons.cli2.CommandLineTestCase;
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,27, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,29,ublic class PreferencesCommandLineTest extends CommandLineTestCase {
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,31,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,32, @see org.apache.commons.cli2.CommandLineTest#createCommandLine()
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,34,rotected CommandLine createCommandLine() {
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,35,/ TODO Auto-generated method stub
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,36,inal Preferences props = Preferences.userNodeForPackage(PreferencesCommandLineTest.class);
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,37,"rops.put(""--present"",""present value"");"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,38,"rops.put(""--alsopresent"","""");"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,39,"rops.put(""--multiple"",""value 1|value 2|value 3"");"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,40,"rops.put(""--bool"",""true"");"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,42,"rops.put(""present"",""present property"");"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,44,"eturn new PreferencesCommandLine(root,props,'|');"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,47,rotected CommandLine createCommandLineNoSep() {
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,48,/ TODO Auto-generated method stub
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,49,inal Preferences props = Preferences.userNodeForPackage(PreferencesCommandLineTest.class);
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,50,"rops.put(""--present"",""present value"");"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,51,"rops.put(""--alsopresent"","""");"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,52,"rops.put(""--multiple"",""value 1|value 2|value 3"");"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,53,"rops.put(""--bool"",""false"");"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,55,"rops.put(""present"",""present property"");"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,57,"eturn new PreferencesCommandLine(root,props);"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,60,ublic void testPropertyValues() {
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,61,/ nothing to test
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,62,ommandLine cmdline = createCommandLine();
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,64,"ssertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,65,"ssertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,66,"ssertEquals(""wrong # of values"", 3, cmdline.getValues(""--multiple"").size());"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,67,"ssertEquals(""wrong value 1"", ""value 1"", cmdline.getValues(""--multiple"").get(0));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,68,"ssertEquals(""wrong value 2"", ""value 2"", cmdline.getValues(""--multiple"").get(1));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,69,"ssertEquals(""wrong value 3"", ""value 3"", cmdline.getValues(""--multiple"").get(2));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,72,ublic void testNoSeparator() {
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,73,/ nothing to test
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,74,ommandLine cmdline = createCommandLineNoSep();
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,76,"ssertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,77,"ssertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,78,"ssertEquals(""wrong # of values"", 1, cmdline.getValues(""--multiple"").size());"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,79,"ssertEquals(""wrong value"", ""value 1|value 2|value 3"", cmdline.getValue(""--multiple""));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,80,"ssertFalse(""expected a false"", cmdline.getSwitch(""--bool"").booleanValue());"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,83,ublic void testNullOption() {
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,84,/ nothing to test
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,85,ommandLine cmdline = createCommandLine();
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,87,"ssertFalse(""should not find null option"", cmdline.hasOption((String) null));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,88,"ssertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,91,ublic void testPreferenceTriggers() {
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,92,/ nothing to test
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,93,ommandLine cmdline = createCommandLine();
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,95,et triggers = cmdline.getOptionTriggers();
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,96,terator iter = triggers.iterator();
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,97,"ssertEquals(""wrong # of triggers"", 4, triggers.size());"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,98,"ssertTrue(""cannot find trigger"", triggers.contains(""--bool""));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,99,"ssertTrue(""cannot find trigger"", triggers.contains(""--present""));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,100,"ssertTrue(""cannot find trigger"", triggers.contains(""--multiple""));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,101,"ssertTrue(""cannot find trigger"", triggers.contains(""--alsopresent""));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,103,"ssertFalse(""should not find null option"", cmdline.hasOption((String) null));"
False,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,104,"ssertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());"
True,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PreferencesCommandLineTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.Iterator;import java.util.Set;import java.util.prefs.Preferences;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.CommandLineTestCase;/** * @author Rob Oxspring */public class PreferencesCommandLineTest extends CommandLineTestCase {	/* (non-Javadoc)	 * @see org.apache.commons.cli2.CommandLineTest#createCommandLine()	 */	protected CommandLine createCommandLine() {		// TODO Auto-generated method stub		final Preferences props = Preferences.userNodeForPackage(PreferencesCommandLineTest.class);		props.put(""--present"",""present value"");		props.put(""--alsopresent"","""");		props.put(""--multiple"",""value 1|value 2|value 3"");		props.put(""--bool"",""true"");		props.put(""present"",""present property"");		return new PreferencesCommandLine(root,props,'|');	}	protected CommandLine createCommandLineNoSep() {		// TODO Auto-generated method stub		final Preferences props = Preferences.userNodeForPackage(PreferencesCommandLineTest.class);		props.put(""--present"",""present value"");		props.put(""--alsopresent"","""");		props.put(""--multiple"",""value 1|value 2|value 3"");		props.put(""--bool"",""false"");		props.put(""present"",""present property"");		return new PreferencesCommandLine(root,props);	}    public void testPropertyValues() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));    	assertEquals(""wrong # of values"", 3, cmdline.getValues(""--multiple"").size());    	assertEquals(""wrong value 1"", ""value 1"", cmdline.getValues(""--multiple"").get(0));    	assertEquals(""wrong value 2"", ""value 2"", cmdline.getValues(""--multiple"").get(1));    	assertEquals(""wrong value 3"", ""value 3"", cmdline.getValues(""--multiple"").get(2));    }    public void testNoSeparator() {        // nothing to test    	CommandLine cmdline = createCommandLineNoSep();    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));    	assertEquals(""wrong # of values"", 1, cmdline.getValues(""--multiple"").size());    	assertEquals(""wrong value"", ""value 1|value 2|value 3"", cmdline.getValue(""--multiple""));    	assertFalse(""expected a false"", cmdline.getSwitch(""--bool"").booleanValue());    }    public void testNullOption() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	assertFalse(""should not find null option"", cmdline.hasOption((String) null));    	assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());    }    public void testPreferenceTriggers() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	Set triggers = cmdline.getOptionTriggers();        Iterator iter = triggers.iterator();        assertEquals(""wrong # of triggers"", 4, triggers.size());        assertTrue(""cannot find trigger"", triggers.contains(""--bool""));        assertTrue(""cannot find trigger"", triggers.contains(""--present""));        assertTrue(""cannot find trigger"", triggers.contains(""--multiple""));        assertTrue(""cannot find trigger"", triggers.contains(""--alsopresent""));    	assertFalse(""should not find null option"", cmdline.hasOption((String) null));    	assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());    }}"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,17,ackage org.apache.commons.cli2.commandline;
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,19,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,20,mport java.util.Properties;
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,21,mport java.util.Set;
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,23,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,24,mport org.apache.commons.cli2.CommandLineTestCase;
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,27, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,29,ublic class PropertiesCommandLineTest
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,30,xtends CommandLineTestCase {
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,31,rivate Properties props = null;
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,33,rotected CommandLine createCommandLine() {
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,34,rops = new Properties();
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,35,"rops.setProperty(""--present"", ""present value"");"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,36,"rops.setProperty(""--alsopresent"", """");"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,37,"rops.setProperty(""--multiple"", ""value 1|value 2|value 3"");"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,38,"rops.setProperty(""--bool"", ""true"");"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,40,"rops.setProperty(""present"", ""present property"");"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,41,"eturn new PropertiesCommandLine(root, props, '|');"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,44,rotected CommandLine createCommandLineNoSep() {
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,45,rops = new Properties();
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,46,"rops.setProperty(""--present"", ""present value"");"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,47,"rops.setProperty(""--alsopresent"", """");"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,48,"rops.setProperty(""--multiple"", ""value 1|value 2|value 3"");"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,49,"rops.setProperty(""--bool"", ""false"");"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,51,"rops.setProperty(""present"", ""present property"");"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,52,"eturn new PropertiesCommandLine(root, props);"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,55,ublic void testPropertyValues() {
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,56,/ nothing to test
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,57,ommandLine cmdline = createCommandLine();
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,59,"ssertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,60,"ssertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,61,"ssertEquals(""wrong # of values"", 3, cmdline.getValues(""--multiple"").size());"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,62,"ssertEquals(""wrong value 1"", ""value 1"", cmdline.getValues(""--multiple"").get(0));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,63,"ssertEquals(""wrong value 2"", ""value 2"", cmdline.getValues(""--multiple"").get(1));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,64,"ssertEquals(""wrong value 3"", ""value 3"", cmdline.getValues(""--multiple"").get(2));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,67,ublic void testNoSeparator() {
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,68,/ nothing to test
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,69,ommandLine cmdline = createCommandLineNoSep();
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,71,"ssertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,72,"ssertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,73,"ssertEquals(""wrong # of values"", 1, cmdline.getValues(""--multiple"").size());"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,74,"ssertEquals(""wrong value"", ""value 1|value 2|value 3"", cmdline.getValue(""--multiple""));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,75,"ssertFalse(""expected a false"", cmdline.getSwitch(""--bool"").booleanValue());"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,78,ublic void testNullOption() {
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,79,/ nothing to test
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,80,ommandLine cmdline = createCommandLine();
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,82,"ssertFalse(""should not find null option"", cmdline.hasOption((String) null));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,83,"ssertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,86,ublic void testPropertyTriggers() {
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,87,/ nothing to test
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,88,ommandLine cmdline = createCommandLine();
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,90,et triggers = cmdline.getOptionTriggers();
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,91,terator iter = triggers.iterator();
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,92,"ssertEquals(""wrong # of triggers"", 4, triggers.size());"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,93,"ssertTrue(""cannot find trigger"", triggers.contains(""--bool""));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,94,"ssertTrue(""cannot find trigger"", triggers.contains(""--present""));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,95,"ssertTrue(""cannot find trigger"", triggers.contains(""--multiple""));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,96,"ssertTrue(""cannot find trigger"", triggers.contains(""--alsopresent""));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,98,"ssertFalse(""should not find null option"", cmdline.hasOption((String) null));"
False,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,99,"ssertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());"
True,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,src/test/org/apache/commons/cli2/commandline/PropertiesCommandLineTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.Iterator;import java.util.Properties;import java.util.Set;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.CommandLineTestCase;/** * @author Rob Oxspring */public class PropertiesCommandLineTest    extends CommandLineTestCase {    private Properties props = null;    protected CommandLine createCommandLine() {        props = new Properties();        props.setProperty(""--present"", ""present value"");        props.setProperty(""--alsopresent"", """");        props.setProperty(""--multiple"", ""value 1|value 2|value 3"");        props.setProperty(""--bool"", ""true"");        props.setProperty(""present"", ""present property"");    	return new PropertiesCommandLine(root, props, '|');    }    protected CommandLine createCommandLineNoSep() {        props = new Properties();        props.setProperty(""--present"", ""present value"");        props.setProperty(""--alsopresent"", """");        props.setProperty(""--multiple"", ""value 1|value 2|value 3"");        props.setProperty(""--bool"", ""false"");        props.setProperty(""present"", ""present property"");    	return new PropertiesCommandLine(root, props);    }    public void testPropertyValues() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));    	assertEquals(""wrong # of values"", 3, cmdline.getValues(""--multiple"").size());    	assertEquals(""wrong value 1"", ""value 1"", cmdline.getValues(""--multiple"").get(0));    	assertEquals(""wrong value 2"", ""value 2"", cmdline.getValues(""--multiple"").get(1));    	assertEquals(""wrong value 3"", ""value 3"", cmdline.getValues(""--multiple"").get(2));    }    public void testNoSeparator() {        // nothing to test    	CommandLine cmdline = createCommandLineNoSep();    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--present""));    	assertEquals(""wrong value"", ""present value"", cmdline.getValue(""--alsopresent""));    	assertEquals(""wrong # of values"", 1, cmdline.getValues(""--multiple"").size());    	assertEquals(""wrong value"", ""value 1|value 2|value 3"", cmdline.getValue(""--multiple""));    	assertFalse(""expected a false"", cmdline.getSwitch(""--bool"").booleanValue());    }    public void testNullOption() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	assertFalse(""should not find null option"", cmdline.hasOption((String) null));    	assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());    }    public void testPropertyTriggers() {        // nothing to test    	CommandLine cmdline = createCommandLine();    	Set triggers = cmdline.getOptionTriggers();        Iterator iter = triggers.iterator();        assertEquals(""wrong # of triggers"", 4, triggers.size());        assertTrue(""cannot find trigger"", triggers.contains(""--bool""));        assertTrue(""cannot find trigger"", triggers.contains(""--present""));        assertTrue(""cannot find trigger"", triggers.contains(""--multiple""));        assertTrue(""cannot find trigger"", triggers.contains(""--alsopresent""));    	assertFalse(""should not find null option"", cmdline.hasOption((String) null));    	assertTrue(""expected a true"", cmdline.getSwitch(""--bool"").booleanValue());    }}"
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,17,ackage org.apache.commons.cli2.commandline;
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,19,mport java.util.ArrayList;
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,21,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,22,mport org.apache.commons.cli2.WriteableCommandLineTestCase;
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,24,ublic class WriteableCommandLineImplTest
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,25,xtends WriteableCommandLineTestCase {
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,26,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,27, @see org.apache.commons.cli2.WriteableCommandLineTest#createWriteableCommandLine()
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,29,rotected WriteableCommandLine createWriteableCommandLine() {
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,30,"eturn new WriteableCommandLineImpl(root, new ArrayList());"
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,33,ublic void testToMakeEclipseSpotTheTestCase() {
False,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,34,/ nothing to test
True,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,src/test/org/apache/commons/cli2/commandline/WriteableCommandLineImplTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.commandline;import java.util.ArrayList;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.WriteableCommandLineTestCase;public class WriteableCommandLineImplTest    extends WriteableCommandLineTestCase {    /* (non-Javadoc)     * @see org.apache.commons.cli2.WriteableCommandLineTest#createWriteableCommandLine()     */    protected WriteableCommandLine createWriteableCommandLine() {        return new WriteableCommandLineImpl(root, new ArrayList());    }    public void testToMakeEclipseSpotTheTestCase() {        // nothing to test    }}"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,17,ackage org.apache.commons.cli2.jdepend;
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,19,mport java.io.IOException;
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,20,mport java.util.ArrayList;
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,21,mport java.util.Collection;
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,22,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,24,mport jdepend.framework.JDepend;
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,25,mport jdepend.framework.JavaPackage;
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,26,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,29, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,31,ublic class JDependTest extends TestCase {
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,33,rivate JDepend dependancies = null;
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,35,ublic void setUp() throws IOException {
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,36,ependancies = new JDepend();
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,37,"ependancies.addDirectory(""target/classes"");"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,38,ependancies.analyze();
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,41,ublic void testJUnitNotPresent() {
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,42,/ if junit dependancy is found then jdepend has been poluted
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,43,/ with test classes and all tests are meaningless
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,44,ssertNull(
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,45,"JUnit dependancy found"","
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,46,"ependancies.getPackage(""junit.framework""));"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,48,/ the same applies to jdepend
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,49,ssertNull(
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,50,"JDepend dependancy found"","
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,51,"ependancies.getPackage(""jdepend.framework""));"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,54,ublic void testAcceptableDistance() {
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,55,ollection packages = dependancies.getPackages();
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,56,/ only interested in cli2
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,57,ackages = cli2Packages(packages);
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,58,/ resources is well off the line
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,59,ackages =
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,60,"amedPackages(packages, ""org.apache.commons.cli2.resource"", false);"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,62,or (final Iterator i = packages.iterator(); i.hasNext();) {
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,63,inal JavaPackage pkg = (JavaPackage)i.next();
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,64,inal float distance = pkg.distance();
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,65,"inal String message = pkg.getName() + "" too far from line: "" + distance;"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,66,ssertTrue(
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,67,"essage,"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,68,istance < 0.21d);
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,72,ublic void testNoCyclesPresent() {
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,73,"ssertEquals(""Cycles exist"", false, dependancies.containsCycles());"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,76,ublic void testApiIndependance() {
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,77,ependancies.analyze();
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,79,inal JavaPackage apiPackage =
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,80,"ependancies.getPackage(""org.apache.commons.cli2"");"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,81,inal Collection dependsUpon = cli2Packages(apiPackage.getEfferents());
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,83,"ssertEquals(""Api should depend on one package"", 1, dependsUpon.size());"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,85,avaPackage pkg = (JavaPackage) dependsUpon.iterator().next();
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,86,ssertEquals(
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,87,"Wrong package name"","
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,88,"org.apache.commons.cli2.resource"","
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,89,kg.getName());
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,92,rivate Collection cli2Packages(final Collection incoming) {
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,93,"eturn namedPackages(incoming, ""org.apache.commons.cli2"", true);"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,96,rivate Collection namedPackages(
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,97,"inal Collection incoming,"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,98,"inal String name,"
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,99,inal boolean include) {
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,100,inal Collection outgoing = new ArrayList();
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,101,or (final Iterator i = incoming.iterator(); i.hasNext();) {
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,102,inal JavaPackage pkg = (JavaPackage)i.next();
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,103,f (include ^ !pkg.getName().startsWith(name)) {
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,104,utgoing.add(pkg);
False,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,107,eturn outgoing;
True,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,src/test/org/apache/commons/cli2/jdepend/JDependTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.jdepend;import java.io.IOException;import java.util.ArrayList;import java.util.Collection;import java.util.Iterator;import jdepend.framework.JDepend;import jdepend.framework.JavaPackage;import junit.framework.TestCase;/** * @author Rob Oxspring */public class JDependTest extends TestCase {    private JDepend dependancies = null;    public void setUp() throws IOException {        dependancies = new JDepend();        dependancies.addDirectory(""target/classes"");        dependancies.analyze();    }    public void testJUnitNotPresent() {        // if junit dependancy is found then jdepend has been poluted        // with test classes and all tests are meaningless        assertNull(            ""JUnit dependancy found"",            dependancies.getPackage(""junit.framework""));        // the same applies to jdepend        assertNull(            ""JDepend dependancy found"",            dependancies.getPackage(""jdepend.framework""));    }    public void testAcceptableDistance() {        Collection packages = dependancies.getPackages();        // only interested in cli2        packages = cli2Packages(packages);        // resources is well off the line        packages =            namedPackages(packages, ""org.apache.commons.cli2.resource"", false);        for (final Iterator i = packages.iterator(); i.hasNext();) {            final JavaPackage pkg = (JavaPackage)i.next();            final float distance = pkg.distance();            final String message = pkg.getName() + "" too far from line: "" + distance;            assertTrue(                message,                distance < 0.21d);        }    }    public void testNoCyclesPresent() {        assertEquals(""Cycles exist"", false, dependancies.containsCycles());    }    public void testApiIndependance() {        dependancies.analyze();        final JavaPackage apiPackage =            dependancies.getPackage(""org.apache.commons.cli2"");        final Collection dependsUpon = cli2Packages(apiPackage.getEfferents());        assertEquals(""Api should depend on one package"", 1, dependsUpon.size());        JavaPackage pkg = (JavaPackage) dependsUpon.iterator().next();        assertEquals(                ""Wrong package name"",                ""org.apache.commons.cli2.resource"",                pkg.getName());    }    private Collection cli2Packages(final Collection incoming) {        return namedPackages(incoming, ""org.apache.commons.cli2"", true);    }    private Collection namedPackages(        final Collection incoming,        final String name,        final boolean include) {        final Collection outgoing = new ArrayList();        for (final Iterator i = incoming.iterator(); i.hasNext();) {            final JavaPackage pkg = (JavaPackage)i.next();            if (include ^ !pkg.getName().startsWith(name)) {                outgoing.add(pkg);            }        }        return outgoing;    }}"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,19,mport java.text.ParseException;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,21,mport java.util.ArrayList;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,22,mport java.util.Arrays;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,23,mport java.util.Collections;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,24,mport java.util.HashSet;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,25,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,26,mport java.util.List;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,27,mport java.util.ListIterator;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,28,mport java.util.Set;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,30,mport org.apache.commons.cli2.Argument;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,31,mport org.apache.commons.cli2.DisplaySetting;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,32,mport org.apache.commons.cli2.HelpLine;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,33,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,34,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,35,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,36,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,37,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,38,mport org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,39,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,40,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,41,mport org.apache.commons.cli2.validation.DateValidator;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,42,mport org.apache.commons.cli2.validation.DateValidatorTest;
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,45, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,47,ublic class ArgumentTest
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,48,xtends ArgumentTestCase {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,49,rivate ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,51,ublic static Argument buildUsernameArgument() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,52,"eturn new ArgumentImpl(""username"", ""The user to connect as"", 1, 1, '\0', '\0', null,"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,53,"rgumentImpl.DEFAULT_CONSUME_REMAINING, null, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,56,ublic static Argument buildHostArgument() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,57,"eturn new ArgumentImpl(""host"", ""The host name"", 2, 3, '\0', ',', null, null, null, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,60,ublic static Argument buildPathArgument() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,61,"eturn new ArgumentImpl(""path"", ""The place to look for files"", 1, Integer.MAX_VALUE, '=',"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,62,";', null, ArgumentImpl.DEFAULT_CONSUME_REMAINING, null, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,65,ublic static Argument buildDateLimitArgument() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,66,"eturn new ArgumentImpl(""limit"", ""the last acceptable date"", 0, 1, '=', '\0',"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,67,"ew DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,70,ublic static Argument buildTargetsArgument() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,71,"eturn new ArgumentImpl(""target"", ""The targets ant should build"", 0, Integer.MAX_VALUE,"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,72,"\0', ',', null, null, null, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,75,ublic static Argument buildSizeArgument() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,76,ist defaults = new ArrayList();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,77,"efaults.add(""10"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,79,"eturn new ArgumentImpl(""size"", ""The number of units"", 1, 1, '\0', '\0', null,"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,80,"rgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,83,ublic static Argument buildBoundsArgument() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,84,ist defaults = new ArrayList();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,85,"efaults.add(""5"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,86,"efaults.add(""10"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,88,"eturn new ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,89,"rgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,92,ublic void testNew() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,93,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,94,"ew ArgumentImpl(""limit"", ""the last acceptable date"", 10, 5, '=', '\0',"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,95,"ew DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,96, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,97,"ssertEquals(resources.getMessage(""Argument.minimum.exceeds.maximum""), e.getMessage());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,101,rgumentImpl arg =
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,102,"ew ArgumentImpl(null, ""the last acceptable date"", 5, 5, '=', '\0',"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,103,"ew DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,104,"ssertEquals(""wrong arg name"", ""arg"", arg.getPreferredName());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,108,ist defaults = new ArrayList();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,110,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,111,"ew ArgumentImpl(null, ""the last acceptable date"", 1, 1, '=', '\0',"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,112,"ew DateValidator(DateValidatorTest.YYYY_MM_DD), null, defaults, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,113, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,114,"ssertEquals(resources.getMessage(""Argument.too.few.defaults""), exp.getMessage());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,118,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,119,ist defaults = new ArrayList();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,120,"efaults.add(""1"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,121,"efaults.add(""2"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,123,"ew ArgumentImpl(null, ""the last acceptable date"", 1, 1, '=', '\0',"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,124,"ew DateValidator(DateValidatorTest.YYYY_MM_DD), null, defaults, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,125, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,126,"ssertEquals(resources.getMessage(""Argument.too.many.defaults""), exp.getMessage());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,131, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,133, @see org.apache.commons.cli2.ArgumentTestCase#testProcessValues()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,135,ublic void testProcessValues()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,136,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,137,inal Argument option = buildUsernameArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,138,"inal List args = list(""rob"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,139,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,140,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,141,"ption.processValues(commandLine, iterator, option);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,143,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,144,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,145,"ssertTrue(commandLine.hasOption(""username""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,146,"ssertEquals(""rob"", commandLine.getValue(option));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,149,ublic void testProcessValues_BoundaryQuotes()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,150,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,151,inal Argument option = buildUsernameArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,152,"inal List args = list(""\""rob\"""");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,153,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,154,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,155,"ption.processValues(commandLine, iterator, option);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,157,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,158,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,159,"ssertTrue(commandLine.hasOption(""username""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,160,"ssertEquals(""rob"", commandLine.getValue(option));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,163,ublic void testProcessValues_SpareValues()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,164,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,165,inal Argument option = buildUsernameArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,166,"inal List args = list(""rob"", ""secret"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,167,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,168,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,169,"ption.processValues(commandLine, iterator, option);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,171,ssertTrue(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,172,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,173,"ssertTrue(commandLine.hasOption(""username""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,174,"ssertEquals(""rob"", commandLine.getValue(option));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,177,ublic void testProcessValues_Optional() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,178,inal Argument option = buildTargetsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,179,inal List args = list();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,180,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,181,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,183,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,184,"ption.processValues(commandLine, iterator, option);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,185, catch (final OptionException mve) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,186,"ssertEquals(option, mve.getOption());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,187,"ssertEquals(""Missing value(s) target [target ...]"", mve.getMessage());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,190,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,191,ssertFalse(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,192,"ssertFalse(commandLine.hasOption(""username""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,193,ssertTrue(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,196,ublic void testProcessValues_Multiple()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,197,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,198,inal Argument option = buildTargetsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,199,"inal List args = list(""compile"", ""test"", ""docs"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,200,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,201,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,202,"ption.processValues(commandLine, iterator, option);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,204,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,205,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,206,"ssertTrue(commandLine.hasOption(""target""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,207,ssertFalse(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,208,"ssertListContentsEqual(args, commandLine.getValues(option));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,211,ublic void testProcessValues_Contracted()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,212,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,213,inal Argument option = buildTargetsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,214,"inal List args = list(""compile,test,javadoc"", ""checkstyle,jdepend"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,215,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,216,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,217,"ption.processValues(commandLine, iterator, option);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,219,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,220,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,221,"ssertTrue(commandLine.hasOption(""target""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,222,"ssertListContentsEqual(list(""compile"", ""test"", ""javadoc"", ""checkstyle"", ""jdepend""),"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,223,ommandLine.getValues(option));
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,226,ublic void testProcessValues_ContractedTooFew() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,227,inal Argument option = buildHostArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,228,"inal List args = list(""box1"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,229,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,230,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,232,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,233,"ption.processValues(commandLine, iterator, option);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,234,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,235,"ail(""Expected MissingValueException"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,236, catch (OptionException mve) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,237,"ssertSame(option, mve.getOption());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,241,ublic void testProcessValues_ContractedTooMany() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,242,inal Argument option = buildHostArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,243,"inal List args = list(""box1,box2,box3,box4"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,244,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,245,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,247,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,248,"ption.processValues(commandLine, iterator, option);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,249,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,250,"ail(""Expected MissingValueException"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,251, catch (OptionException mve) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,252,"ssertSame(option, mve.getOption());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,257, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,259, @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,261,ublic void testCanProcess() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,262,inal Argument option = buildTargetsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,263,"ssertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""any value""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,267, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,269, @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,271,ublic void testPrefixes() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,272,inal Argument option = buildTargetsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,273,ssertTrue(option.getPrefixes().isEmpty());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,277, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,279, @see org.apache.commons.cli2.OptionTestCase#testProcess()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,281,ublic void testProcess()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,282,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,283,inal Argument option = buildPathArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,284,"inal List args = list(""-path=/lib;/usr/lib;/usr/local/lib"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,285,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,286,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,287,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,289,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,290,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,291,"ssertTrue(commandLine.hasOption(""path""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,292,"ssertListContentsEqual(list(""-path=/lib"", ""/usr/lib"", ""/usr/local/lib""),"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,293,ommandLine.getValues(option));
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,297, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,299, @see org.apache.commons.cli2.OptionTestCase#testTriggers()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,301,ublic void testTriggers() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,302,inal Argument option = buildTargetsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,303,ssertTrue(option.getTriggers().isEmpty());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,307, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,309, @see org.apache.commons.cli2.OptionTestCase#testValidate()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,311,ublic void testValidate()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,312,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,313,inal Argument option = buildUsernameArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,314,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,316,"ommandLine.addValue(option, ""rob"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,318,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,321,ublic void testValidate_Minimum() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,322,inal Argument option = buildUsernameArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,323,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,325,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,326,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,327,"ail(""UnexpectedValue"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,328, catch (OptionException mve) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,329,"ssertEquals(option, mve.getOption());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,333,ublic void testRequired() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,335,inal Argument arg = buildBoundsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,337,"ssertTrue(""not required"", arg.isRequired());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,341,inal Argument arg = buildTargetsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,343,"ssertFalse(""should not be required"", arg.isRequired());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,347,ublic void testValidate_Maximum() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,348,inal Argument option = buildUsernameArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,349,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,351,"ommandLine.addValue(option, ""rob"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,352,"ommandLine.addValue(option, ""oxspring"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,354,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,355,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,356,"ail(""UnexpectedValue"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,357, catch (OptionException uve) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,358,"ssertEquals(option, uve.getOption());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,362,ublic void testValidate_Validator()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,363,"hrows OptionException, ParseException {"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,364,inal Argument option = buildDateLimitArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,365,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,367,"ommandLine.addValue(option, ""2004-01-01"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,369,"ption.validate(commandLine, option);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,370,ssertContentsEqual(Arrays.asList(new Object[] {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,371,"ateValidatorTest.YYYY_MM_DD.parse(""2004-01-01"")"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,372,"), commandLine.getValues(option));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,375,ublic void testValidate_ValidatorInvalidDate()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,376,"hrows OptionException, ParseException {"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,377,inal Argument option = buildDateLimitArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,378,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,380,"ommandLine.addValue(option, ""12-12-2004"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,382,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,383,"ption.validate(commandLine, option);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,384, catch (OptionException exp) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,385,ptionException e =
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,386,"ew OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,387,"12-12-2004"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,388,"ssertEquals(""wrong exception message"", e.getMessage(), exp.getMessage());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,393, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,395, @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,397,ublic void testAppendUsage() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,398,inal Option option = buildUsernameArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,399,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,400,"ption.appendUsage(buffer, DisplaySetting.ALL, null);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,402,"ssertEquals(""<username>"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,405,ublic void testAppendUsage_Infinite() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,406,inal Option option = buildTargetsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,407,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,408,"ption.appendUsage(buffer, DisplaySetting.ALL, null);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,410,"ssertEquals(""[<target1> [<target2> ...]]"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,413,ublic void testAppendUsage_InfiniteNoOptional() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,414,inal Option option = buildTargetsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,415,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,416,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,417,ettings.remove(DisplaySetting.DISPLAY_OPTIONAL);
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,418,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,420,"ssertEquals(""<target1> [<target2> ...]"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,423,ublic void testAppendUsage_InfiniteNoNumbering() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,424,inal Option option = buildTargetsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,425,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,426,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,427,ettings.remove(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,428,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,430,"ssertEquals(""[<target> [<target> ...]]"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,433,ublic void testAppendUsage_Minimum() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,434,inal Option option = buildHostArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,435,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,436,"ption.appendUsage(buffer, DisplaySetting.ALL, null);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,438,"ssertEquals(""<host1> <host2> [<host3>]"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,442, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,444, @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,446,ublic void testGetPreferredName() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,447,inal Option option = buildPathArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,448,"ssertEquals(""path"", option.getPreferredName());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,452, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,454, @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,456,ublic void testGetDescription() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,457,inal Option option = buildHostArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,458,"ssertEquals(""The host name"", option.getDescription());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,462, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,464, @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,466,ublic void testHelpLines() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,467,inal Option option = buildHostArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,468,"inal List lines = option.helpLines(0, DisplaySetting.ALL, null);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,469,inal Iterator i = lines.iterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,471,inal HelpLine line1 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,472,"ssertEquals(0, line1.getIndent());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,473,"ssertEquals(option, line1.getOption());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,475,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,478,ublic void testCanProcess_ConsumeRemaining() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,479,inal Option option = buildUsernameArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,481,"ssertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""--""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,484,ublic void testProcess_ConsumeRemaining()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,485,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,486,inal Option option = buildPathArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,487,"inal List args = list(""options"", ""--"", ""--ignored"", ""-Dprop=val"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,488,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,489,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,491,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,493,inal List values = commandLine.getValues(option);
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,494,"ssertTrue(values.contains(""options""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,495,"ssertTrue(values.contains(""--ignored""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,496,"ssertTrue(values.contains(""-Dprop=val""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,497,"ssertEquals(3, values.size());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,498,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,501,ublic void testProcess_ConsumeNothing() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,502,inal Option option = buildPathArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,503,"inal List args = list(""--"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,504,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,505,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,507,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,508,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,509,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,510,"ail(""Missing Value!"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,511, catch (OptionException mve) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,512,"ssertEquals(option, mve.getOption());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,513,"ssertEquals(""Missing value(s) path [path ...]"", mve.getMessage());"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,516,ssertTrue(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,517,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,520,/    public void testProcess_DefinedDefaultValue() throws OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,521,/        final Option size = buildSizeArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,522,/        final List args = list();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,523,"/        final WriteableCommandLine commandLine = commandLine(size, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,524,/        final ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,526,"/        size.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,528,"/        assertEquals(""10"", commandLine.getValue(size));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,531,/    public void testProcess_DefinedDefaultValues() throws OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,532,/        final Option bounds = buildBoundsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,533,/        final List args = list();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,534,"/        final WriteableCommandLine commandLine = commandLine(bounds, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,535,/        final ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,537,"/        bounds.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,539,/        List values = new ArrayList();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,540,"/        values.add(""5"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,541,"/        values.add(""10"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,542,"/        assertEquals(values, commandLine.getValues(bounds));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,544,ublic void testProcess_InterrogatedDefaultValue()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,545,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,546,inal Option size = buildSizeArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,547,inal List args = list();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,548,"inal WriteableCommandLine commandLine = commandLine(size, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,549,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,551,"ize.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,553,"ssertEquals(new Integer(20), commandLine.getValue(size, new Integer(20)));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,556,ublic void testTooFewDefaults() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,557,ist defaults = new ArrayList();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,558,"efaults.add(""5"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,560,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,561,"ew ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,562,"rgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,563, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,564,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,565,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS),"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,566,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,570,ublic void testTooManyDefaults() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,571,ist defaults = new ArrayList();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,572,"efaults.add(""5"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,573,"efaults.add(""10"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,574,"efaults.add(""15"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,576,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,577,"ew ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,578,"rgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,579, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,580,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,581,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS),"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,582,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,586,ublic void testProcess_InterrogatedDefaultValues()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,587,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,588,inal Option bounds = buildBoundsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,589,inal List args = list();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,590,"inal WriteableCommandLine commandLine = commandLine(bounds, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,591,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,593,"ounds.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,595,/ test with values
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,596,ist values = new ArrayList();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,597,"alues.add(""50"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,598,"alues.add(""100"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,599,"ssertEquals(values, commandLine.getValues(bounds, values));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,601,/ test without values
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,602,"ssertEquals(Collections.EMPTY_LIST, commandLine.getValues(bounds, null));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,605,ublic void testProcess_StripBoundaryQuotes()
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,606,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,607,inal Option bounds = buildBoundsArgument();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,608,inal List args = list();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,609,"inal WriteableCommandLine commandLine = commandLine(bounds, args);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,610,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,612,"ounds.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,614,ist values = new ArrayList();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,615,"alues.add(""50\"""");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,616,"alues.add(""\""100"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,617,"ssertEquals(values, commandLine.getValues(bounds, values));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,620,ublic void testSourceDestArgument() {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,621,inal ArgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,622,inal GroupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,623,inal Argument inputfiles =
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,624,"builder.withName(""input"").withMinimum(0).withMaximum(0).create();"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,625,inal Argument bad_outputfile =
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,626,"builder.withName(""output"").withMinimum(1).withMaximum(2).create();"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,628,ry {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,629,"inal Argument targets = new SourceDestArgument(inputfiles, bad_outputfile);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,630, catch (final IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,631,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,632,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.SOURCE_DEST_MUST_ENFORCE_VALUES),"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,633,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,636,inal Argument outputfile =
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,637,"builder.withName(""output"").withMinimum(1).withMaximum(1).create();"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,639,"inal Argument targets = new SourceDestArgument(inputfiles, outputfile);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,640,"inal StringBuffer buffer = new StringBuffer(""test content"");"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,641,"argets.appendUsage(buffer, Collections.EMPTY_SET, null);"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,643,"ssertTrue(""buffer not added"", buffer.toString().startsWith(""test content""));"
False,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,644,"ssertFalse(""space added"", buffer.charAt(12) == ' ');"
True,src/test/org/apache/commons/cli2/option/ArgumentTest.java,src/test/org/apache/commons/cli2/option/ArgumentTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.text.ParseException;import java.util.ArrayList;import java.util.Arrays;import java.util.Collections;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;import org.apache.commons.cli2.validation.DateValidator;import org.apache.commons.cli2.validation.DateValidatorTest;/** * @author Rob Oxspring */public class ArgumentTest    extends ArgumentTestCase {    private ResourceHelper resources = ResourceHelper.getResourceHelper();    public static Argument buildUsernameArgument() {        return new ArgumentImpl(""username"", ""The user to connect as"", 1, 1, '\0', '\0', null,                                ArgumentImpl.DEFAULT_CONSUME_REMAINING, null, 0);    }    public static Argument buildHostArgument() {        return new ArgumentImpl(""host"", ""The host name"", 2, 3, '\0', ',', null, null, null, 0);    }    public static Argument buildPathArgument() {        return new ArgumentImpl(""path"", ""The place to look for files"", 1, Integer.MAX_VALUE, '=',                                ';', null, ArgumentImpl.DEFAULT_CONSUME_REMAINING, null, 0);    }    public static Argument buildDateLimitArgument() {        return new ArgumentImpl(""limit"", ""the last acceptable date"", 0, 1, '=', '\0',                                new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);    }    public static Argument buildTargetsArgument() {        return new ArgumentImpl(""target"", ""The targets ant should build"", 0, Integer.MAX_VALUE,                                '\0', ',', null, null, null, 0);    }    public static Argument buildSizeArgument() {        List defaults = new ArrayList();        defaults.add(""10"");        return new ArgumentImpl(""size"", ""The number of units"", 1, 1, '\0', '\0', null,                                ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);    }    public static Argument buildBoundsArgument() {        List defaults = new ArrayList();        defaults.add(""5"");        defaults.add(""10"");        return new ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,                                ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);    }    public void testNew() {        try {            new ArgumentImpl(""limit"", ""the last acceptable date"", 10, 5, '=', '\0',                             new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(""Argument.minimum.exceeds.maximum""), e.getMessage());        }        {            ArgumentImpl arg =                new ArgumentImpl(null, ""the last acceptable date"", 5, 5, '=', '\0',                                 new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);            assertEquals(""wrong arg name"", ""arg"", arg.getPreferredName());        }        {            List defaults = new ArrayList();            try {                new ArgumentImpl(null, ""the last acceptable date"", 1, 1, '=', '\0',                                 new DateValidator(DateValidatorTest.YYYY_MM_DD), null, defaults, 0);            } catch (IllegalArgumentException exp) {                assertEquals(resources.getMessage(""Argument.too.few.defaults""), exp.getMessage());            }        }        try {            List defaults = new ArrayList();            defaults.add(""1"");            defaults.add(""2"");            new ArgumentImpl(null, ""the last acceptable date"", 1, 1, '=', '\0',                             new DateValidator(DateValidatorTest.YYYY_MM_DD), null, defaults, 0);        } catch (IllegalArgumentException exp) {            assertEquals(resources.getMessage(""Argument.too.many.defaults""), exp.getMessage());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.ArgumentTestCase#testProcessValues()     */    public void testProcessValues()        throws OptionException {        final Argument option = buildUsernameArgument();        final List args = list(""rob"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processValues(commandLine, iterator, option);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""username""));        assertEquals(""rob"", commandLine.getValue(option));    }    public void testProcessValues_BoundaryQuotes()        throws OptionException {        final Argument option = buildUsernameArgument();        final List args = list(""\""rob\"""");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processValues(commandLine, iterator, option);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""username""));        assertEquals(""rob"", commandLine.getValue(option));    }    public void testProcessValues_SpareValues()        throws OptionException {        final Argument option = buildUsernameArgument();        final List args = list(""rob"", ""secret"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processValues(commandLine, iterator, option);        assertTrue(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""username""));        assertEquals(""rob"", commandLine.getValue(option));    }    public void testProcessValues_Optional() {        final Argument option = buildTargetsArgument();        final List args = list();        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.processValues(commandLine, iterator, option);        } catch (final OptionException mve) {            assertEquals(option, mve.getOption());            assertEquals(""Missing value(s) target [target ...]"", mve.getMessage());        }        assertFalse(iterator.hasNext());        assertFalse(commandLine.hasOption(option));        assertFalse(commandLine.hasOption(""username""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcessValues_Multiple()        throws OptionException {        final Argument option = buildTargetsArgument();        final List args = list(""compile"", ""test"", ""docs"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processValues(commandLine, iterator, option);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""target""));        assertFalse(commandLine.getValues(option).isEmpty());        assertListContentsEqual(args, commandLine.getValues(option));    }    public void testProcessValues_Contracted()        throws OptionException {        final Argument option = buildTargetsArgument();        final List args = list(""compile,test,javadoc"", ""checkstyle,jdepend"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processValues(commandLine, iterator, option);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""target""));        assertListContentsEqual(list(""compile"", ""test"", ""javadoc"", ""checkstyle"", ""jdepend""),                                commandLine.getValues(option));    }    public void testProcessValues_ContractedTooFew() {        final Argument option = buildHostArgument();        final List args = list(""box1"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.processValues(commandLine, iterator, option);            option.validate(commandLine);            fail(""Expected MissingValueException"");        } catch (OptionException mve) {            assertSame(option, mve.getOption());        }    }    public void testProcessValues_ContractedTooMany() {        final Argument option = buildHostArgument();        final List args = list(""box1,box2,box3,box4"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.processValues(commandLine, iterator, option);            option.validate(commandLine);            fail(""Expected MissingValueException"");        } catch (OptionException mve) {            assertSame(option, mve.getOption());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Argument option = buildTargetsArgument();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""any value""));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Argument option = buildTargetsArgument();        assertTrue(option.getPrefixes().isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess()        throws OptionException {        final Argument option = buildPathArgument();        final List args = list(""-path=/lib;/usr/lib;/usr/local/lib"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""path""));        assertListContentsEqual(list(""-path=/lib"", ""/usr/lib"", ""/usr/local/lib""),                                commandLine.getValues(option));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Argument option = buildTargetsArgument();        assertTrue(option.getTriggers().isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate()        throws OptionException {        final Argument option = buildUsernameArgument();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addValue(option, ""rob"");        option.validate(commandLine);    }    public void testValidate_Minimum() {        final Argument option = buildUsernameArgument();        final WriteableCommandLine commandLine = commandLine(option, list());        try {            option.validate(commandLine);            fail(""UnexpectedValue"");        } catch (OptionException mve) {            assertEquals(option, mve.getOption());        }    }    public void testRequired() {        {            final Argument arg = buildBoundsArgument();            assertTrue(""not required"", arg.isRequired());        }        {            final Argument arg = buildTargetsArgument();            assertFalse(""should not be required"", arg.isRequired());        }    }    public void testValidate_Maximum() {        final Argument option = buildUsernameArgument();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addValue(option, ""rob"");        commandLine.addValue(option, ""oxspring"");        try {            option.validate(commandLine);            fail(""UnexpectedValue"");        } catch (OptionException uve) {            assertEquals(option, uve.getOption());        }    }    public void testValidate_Validator()        throws OptionException, ParseException {        final Argument option = buildDateLimitArgument();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addValue(option, ""2004-01-01"");        option.validate(commandLine, option);        assertContentsEqual(Arrays.asList(new Object[] {                                              DateValidatorTest.YYYY_MM_DD.parse(""2004-01-01"")                                          }), commandLine.getValues(option));    }    public void testValidate_ValidatorInvalidDate()        throws OptionException, ParseException {        final Argument option = buildDateLimitArgument();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addValue(option, ""12-12-2004"");        try {            option.validate(commandLine, option);        } catch (OptionException exp) {            OptionException e =                new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,                                    ""12-12-2004"");            assertEquals(""wrong exception message"", e.getMessage(), exp.getMessage());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildUsernameArgument();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""<username>"", buffer.toString());    }    public void testAppendUsage_Infinite() {        final Option option = buildTargetsArgument();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""[<target1> [<target2> ...]]"", buffer.toString());    }    public void testAppendUsage_InfiniteNoOptional() {        final Option option = buildTargetsArgument();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_OPTIONAL);        option.appendUsage(buffer, settings, null);        assertEquals(""<target1> [<target2> ...]"", buffer.toString());    }    public void testAppendUsage_InfiniteNoNumbering() {        final Option option = buildTargetsArgument();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);        option.appendUsage(buffer, settings, null);        assertEquals(""[<target> [<target> ...]]"", buffer.toString());    }    public void testAppendUsage_Minimum() {        final Option option = buildHostArgument();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""<host1> <host2> [<host3>]"", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildPathArgument();        assertEquals(""path"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildHostArgument();        assertEquals(""The host name"", option.getDescription());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        final Option option = buildHostArgument();        final List lines = option.helpLines(0, DisplaySetting.ALL, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        assertFalse(i.hasNext());    }    public void testCanProcess_ConsumeRemaining() {        final Option option = buildUsernameArgument();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""--""));    }    public void testProcess_ConsumeRemaining()        throws OptionException {        final Option option = buildPathArgument();        final List args = list(""options"", ""--"", ""--ignored"", ""-Dprop=val"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        final List values = commandLine.getValues(option);        assertTrue(values.contains(""options""));        assertTrue(values.contains(""--ignored""));        assertTrue(values.contains(""-Dprop=val""));        assertEquals(3, values.size());        assertFalse(iterator.hasNext());    }    public void testProcess_ConsumeNothing() {        final Option option = buildPathArgument();        final List args = list(""--"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.process(commandLine, iterator);            option.validate(commandLine);            fail(""Missing Value!"");        } catch (OptionException mve) {            assertEquals(option, mve.getOption());            assertEquals(""Missing value(s) path [path ...]"", mve.getMessage());        }        assertTrue(commandLine.getValues(option).isEmpty());        assertFalse(iterator.hasNext());    }    //    public void testProcess_DefinedDefaultValue() throws OptionException {    //        final Option size = buildSizeArgument();    //        final List args = list();    //        final WriteableCommandLine commandLine = commandLine(size, args);    //        final ListIterator iterator = args.listIterator();    //    //        size.process(commandLine, iterator);    //    //        assertEquals(""10"", commandLine.getValue(size));    //    }    //    //    public void testProcess_DefinedDefaultValues() throws OptionException {    //        final Option bounds = buildBoundsArgument();    //        final List args = list();    //        final WriteableCommandLine commandLine = commandLine(bounds, args);    //        final ListIterator iterator = args.listIterator();    //    //        bounds.process(commandLine, iterator);    //    //        List values = new ArrayList();    //        values.add(""5"");    //        values.add(""10"");    //        assertEquals(values, commandLine.getValues(bounds));    //    }    public void testProcess_InterrogatedDefaultValue()        throws OptionException {        final Option size = buildSizeArgument();        final List args = list();        final WriteableCommandLine commandLine = commandLine(size, args);        final ListIterator iterator = args.listIterator();        size.process(commandLine, iterator);        assertEquals(new Integer(20), commandLine.getValue(size, new Integer(20)));    }    public void testTooFewDefaults() {        List defaults = new ArrayList();        defaults.add(""5"");        try {            new ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,                             ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS),                         exp.getMessage());        }    }    public void testTooManyDefaults() {        List defaults = new ArrayList();        defaults.add(""5"");        defaults.add(""10"");        defaults.add(""15"");        try {            new ArgumentImpl(""size"", ""The number of units"", 2, 2, '\0', '\0', null,                             ArgumentImpl.DEFAULT_CONSUME_REMAINING, defaults, 0);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS),                         exp.getMessage());        }    }    public void testProcess_InterrogatedDefaultValues()        throws OptionException {        final Option bounds = buildBoundsArgument();        final List args = list();        final WriteableCommandLine commandLine = commandLine(bounds, args);        final ListIterator iterator = args.listIterator();        bounds.process(commandLine, iterator);        // test with values        List values = new ArrayList();        values.add(""50"");        values.add(""100"");        assertEquals(values, commandLine.getValues(bounds, values));        // test without values        assertEquals(Collections.EMPTY_LIST, commandLine.getValues(bounds, null));    }    public void testProcess_StripBoundaryQuotes()        throws OptionException {        final Option bounds = buildBoundsArgument();        final List args = list();        final WriteableCommandLine commandLine = commandLine(bounds, args);        final ListIterator iterator = args.listIterator();        bounds.process(commandLine, iterator);        List values = new ArrayList();        values.add(""50\"""");        values.add(""\""100"");        assertEquals(values, commandLine.getValues(bounds, values));    }    public void testSourceDestArgument() {        final ArgumentBuilder abuilder = new ArgumentBuilder();        final GroupBuilder gbuilder = new GroupBuilder();        final Argument inputfiles =            abuilder.withName(""input"").withMinimum(0).withMaximum(0).create();        final Argument bad_outputfile =            abuilder.withName(""output"").withMinimum(1).withMaximum(2).create();        try {            final Argument targets = new SourceDestArgument(inputfiles, bad_outputfile);        } catch (final IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SOURCE_DEST_MUST_ENFORCE_VALUES),                         exp.getMessage());        }        final Argument outputfile =            abuilder.withName(""output"").withMinimum(1).withMaximum(1).create();        final Argument targets = new SourceDestArgument(inputfiles, outputfile);        final StringBuffer buffer = new StringBuffer(""test content"");        targets.appendUsage(buffer, Collections.EMPTY_SET, null);        assertTrue(""buffer not added"", buffer.toString().startsWith(""test content""));        assertFalse(""space added"", buffer.charAt(12) == ' ');    }}"
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,19,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,22, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,24,ublic abstract class ArgumentTestCase extends OptionTestCase {
False,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,26,ublic abstract void testProcessValues() throws OptionException;
True,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,src/test/org/apache/commons/cli2/option/ArgumentTestCase.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import org.apache.commons.cli2.OptionException;/** * @author Rob Oxspring */public abstract class ArgumentTestCase extends OptionTestCase {    public abstract void testProcessValues() throws OptionException;}"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,19,mport java.util.Collections;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,20,mport java.util.HashSet;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,21,mport java.util.List;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,22,mport java.util.ListIterator;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,23,mport java.util.Set;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,25,mport org.apache.commons.cli2.DisplaySetting;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,26,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,27,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,28,mport org.apache.commons.cli2.Parent;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,29,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,30,mport org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,31,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,32,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,35, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,37, To change the template for this generated type comment go to
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,38, Window>Preferences>Java>Code Generation>Code and Comments
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,40,ublic class CommandTest
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,41,xtends ParentTestCase {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,42,ublic static Command buildStartCommand() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,43,"eturn new Command(""start"", ""Begins the process"", Collections.singleton(""go""), false, null,"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,44,"ull, 0);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,47,ublic static Command buildCommitCommand() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,48,"eturn new Command(""commit"", ""Commit the changes to the database"", null, true, null, null, 0);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,51,ublic static Command buildLoginCommand() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,52,"eturn new Command(""login"", ""Initiates a session for the user"", null, false,"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,53,"rgumentTest.buildUsernameArgument(), null, 0);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,57, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,59, @see org.apache.commons.cli2.ParentTestCase#testProcessParent()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,61,ublic void testProcessParent()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,62,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,63,inal Command option = buildStartCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,64,"inal List args = list(""go"");"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,65,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,66,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,67,"ption.processParent(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,69,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,70,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,71,"ssertTrue(commandLine.hasOption(""start""));"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,72,"ssertTrue(commandLine.hasOption(""go""));"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,73,ssertTrue(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,76,ublic void testProcessParent_Spare()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,77,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,78,inal Command option = buildLoginCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,79,"inal List args = list(""login"", ""rob"");"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,80,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,81,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,82,"ption.processParent(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,84,"ssertEquals(""rob"", iterator.next());"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,85,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,86,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,87,"ssertTrue(commandLine.hasOption(""login""));"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,88,ssertTrue(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,92, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,94, @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,96,ublic void testCanProcess() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,97,inal Command option = buildStartCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,98,"ssertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""start""));"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,101,ublic void testCanProcess_BadMatch() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,102,inal Command option = buildStartCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,103,"ssertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""stop""));"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,106,ublic void testCanProcess_Alias() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,107,inal Command option = buildStartCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,108,"ssertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""go""));"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,112, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,114, @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,116,ublic void testPrefixes() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,117,inal Command option = buildStartCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,118,ssertTrue(option.getPrefixes().isEmpty());
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,122, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,124, @see org.apache.commons.cli2.OptionTestCase#testProcess()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,126,ublic void testProcess()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,127,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,128,inal Command option = buildLoginCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,129,"inal List args = list(""login"", ""rob"");"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,130,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,131,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,132,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,134,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,135,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,136,"ssertTrue(commandLine.hasOption(""login""));"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,137,"ssertEquals(""rob"", commandLine.getValue(option));"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,141, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,143, @see org.apache.commons.cli2.OptionTestCase#testTriggers()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,145,ublic void testTriggers() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,146,inal Command option = buildStartCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,147,inal Set triggers = option.getTriggers();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,148,"ssertContentsEqual(list(""start"", ""go""), triggers);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,152, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,154, @see org.apache.commons.cli2.OptionTestCase#testValidate()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,156,ublic void testValidate() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,157,inal Parent option = buildCommitCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,158,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,160,ry {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,161,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,162,"ail(""Missing an option"");"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,163, catch (OptionException moe) {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,164,"ssertSame(option, moe.getOption());"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,169, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,171, @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,173,ublic void testAppendUsage() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,174,inal Option option = buildStartCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,175,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,176,"ption.appendUsage(buffer, DisplaySetting.ALL, null);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,178,"ssertEquals(""[start (go)]"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,181,ublic void testNullPreferredName() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,182,ry {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,183,"ew Command(null, """", Collections.singleton(""go""), false, null, null, 0);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,184, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,185,"ssertEquals(""wrong exception name"","
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,186,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT),"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,187,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,191,ublic void testEmotyPreferredName() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,192,ry {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,193,"ew Command("""", """", Collections.singleton(""go""), false, null, null, 0);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,194, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,195,"ssertEquals(""wrong exception name"","
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,196,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT),"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,197,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,201,ublic void testAppendUsage_NoOptional() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,202,inal Option option = buildStartCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,203,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,204,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,205,ettings.remove(DisplaySetting.DISPLAY_OPTIONAL);
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,206,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,208,"ssertEquals(""start (go)"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,211,ublic void testAppendUsage_NoAlias() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,212,inal Option option = buildStartCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,213,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,214,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,215,ettings.remove(DisplaySetting.DISPLAY_ALIASES);
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,216,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,218,"ssertEquals(""[start]"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,222, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,224, @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,226,ublic void testGetPreferredName() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,227,inal Option option = buildStartCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,228,"ssertEquals(""start"", option.getPreferredName());"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,232, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,234, @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,236,ublic void testGetDescription() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,237,inal Option option = buildLoginCommand();
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,238,"ssertEquals(""Initiates a session for the user"", option.getDescription());"
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,242, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,244, @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,246,ublic void testHelpLines() {
False,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,247,/ TODO Auto-generated method stub
True,src/test/org/apache/commons/cli2/option/CommandTest.java,src/test/org/apache/commons/cli2/option/CommandTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.Collections;import java.util.HashSet;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.Parent;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * @author Rob Oxspring * * To change the template for this generated type comment go to * Window>Preferences>Java>Code Generation>Code and Comments */public class CommandTest    extends ParentTestCase {    public static Command buildStartCommand() {        return new Command(""start"", ""Begins the process"", Collections.singleton(""go""), false, null,                           null, 0);    }    public static Command buildCommitCommand() {        return new Command(""commit"", ""Commit the changes to the database"", null, true, null, null, 0);    }    public static Command buildLoginCommand() {        return new Command(""login"", ""Initiates a session for the user"", null, false,                           ArgumentTest.buildUsernameArgument(), null, 0);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()     */    public void testProcessParent()        throws OptionException {        final Command option = buildStartCommand();        final List args = list(""go"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""start""));        assertTrue(commandLine.hasOption(""go""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcessParent_Spare()        throws OptionException {        final Command option = buildLoginCommand();        final List args = list(""login"", ""rob"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertEquals(""rob"", iterator.next());        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""login""));        assertTrue(commandLine.getValues(option).isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Command option = buildStartCommand();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""start""));    }    public void testCanProcess_BadMatch() {        final Command option = buildStartCommand();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""stop""));    }    public void testCanProcess_Alias() {        final Command option = buildStartCommand();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""go""));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Command option = buildStartCommand();        assertTrue(option.getPrefixes().isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess()        throws OptionException {        final Command option = buildLoginCommand();        final List args = list(""login"", ""rob"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""login""));        assertEquals(""rob"", commandLine.getValue(option));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Command option = buildStartCommand();        final Set triggers = option.getTriggers();        assertContentsEqual(list(""start"", ""go""), triggers);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate() {        final Parent option = buildCommitCommand();        final WriteableCommandLine commandLine = commandLine(option, list());        try {            option.validate(commandLine);            fail(""Missing an option"");        } catch (OptionException moe) {            assertSame(option, moe.getOption());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildStartCommand();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""[start (go)]"", buffer.toString());    }    public void testNullPreferredName() {        try {            new Command(null, """", Collections.singleton(""go""), false, null, null, 0);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception name"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT),                         exp.getMessage());        }    }    public void testEmotyPreferredName() {        try {            new Command("""", """", Collections.singleton(""go""), false, null, null, 0);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception name"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.COMMAND_PREFERRED_NAME_TOO_SHORT),                         exp.getMessage());        }    }    public void testAppendUsage_NoOptional() {        final Option option = buildStartCommand();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_OPTIONAL);        option.appendUsage(buffer, settings, null);        assertEquals(""start (go)"", buffer.toString());    }    public void testAppendUsage_NoAlias() {        final Option option = buildStartCommand();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_ALIASES);        option.appendUsage(buffer, settings, null);        assertEquals(""[start]"", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildStartCommand();        assertEquals(""start"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildLoginCommand();        assertEquals(""Initiates a session for the user"", option.getDescription());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        // TODO Auto-generated method stub    }}"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,19,mport java.util.HashSet;
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,20,mport java.util.List;
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,21,mport java.util.ListIterator;
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,22,mport java.util.Set;
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,24,mport org.apache.commons.cli2.DisplaySetting;
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,25,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,26,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,27,mport org.apache.commons.cli2.Parent;
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,28,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,29,mport org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,32, @author roberto
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,34, To change the template for this generated type comment go to
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,35, Window>Preferences>Java>Code Generation>Code and Comments
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,37,ublic class DefaultOptionTest extends ParentTestCase {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,39,ublic static DefaultOption buildHelpOption() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,40,"inal Set aliases = new HashSet(list(""-h"", ""-?""));"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,41,eturn new DefaultOption(
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,44,"rue,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,45,"--help"","
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,46,"Displays the help"","
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,47,"liases,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,48,"liases,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,49,"alse,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,50,"ull,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,51,"ull,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,52,h');
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,55,ublic static DefaultOption buildXOption() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,56,eturn new DefaultOption(
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,59,"rue,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,60,"-X"","
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,61,"This is needed"","
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,62,"ull,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,63,"ull,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,64,"rue,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,65,"ull,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,66,"ull,"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,67,X');
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,71, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,73, @see org.apache.commons.cli2.ParentTestCase#testProcessParent()
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,75,ublic void testProcessParent() throws OptionException {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,76,inal DefaultOption option = buildHelpOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,77,"inal List args = list(""--help"");"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,78,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,79,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,80,"ption.processParent(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,82,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,83,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,84,"ssertTrue(commandLine.hasOption(""--help""));"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,85,"ssertTrue(commandLine.hasOption(""-?""));"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,86,ssertTrue(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,89,ublic void testProcessParent_Burst() throws OptionException {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,90,inal DefaultOption option = buildHelpOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,91,"inal List args = list(""-help"");"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,92,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,93,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,94,"ption.processParent(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,96,"ssertEquals(""-elp"", iterator.next());"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,97,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,98,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,99,"ssertTrue(commandLine.hasOption(""--help""));"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,100,"ssertTrue(commandLine.hasOption(""-?""));"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,101,ssertTrue(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,105, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,107, @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,109,ublic void testCanProcess() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,110,inal DefaultOption option = buildHelpOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,111,"ssertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), ""-?""));"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,114,ublic void testCanProcess_BadMatch() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,115,inal DefaultOption option = buildHelpOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,116,"ssertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), ""-H""));"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,120, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,122, @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,124,ublic void testPrefixes() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,125,inal DefaultOption option = buildHelpOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,126,"ssertContentsEqual(list(""-"", ""--""), option.getPrefixes());"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,130, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,132, @see org.apache.commons.cli2.OptionTestCase#testProcess()
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,134,ublic void testProcess() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,135,/ TODO Auto-generated method stub
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,140, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,142, @see org.apache.commons.cli2.OptionTestCase#testTriggers()
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,144,ublic void testTriggers() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,145,inal DefaultOption option = buildHelpOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,146,"ssertContentsEqual(list(""-?"", ""-h"", ""--help""), option.getTriggers());"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,150, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,152, @see org.apache.commons.cli2.OptionTestCase#testValidate()
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,154,ublic void testValidate() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,155,inal Parent option = buildXOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,156,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,158,ry {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,159,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,160,"ail(""Missing an option"");"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,162,atch (OptionException moe) {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,163,"ssertSame(option, moe.getOption());"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,168, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,170, @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,172,ublic void testAppendUsage() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,173,inal Option option = buildHelpOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,174,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,175,"ption.appendUsage(buffer, DisplaySetting.ALL, null);"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,177,"ssertEquals(""[--help (-?,-h)]"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,180,ublic void testAppendUsage_NoOptional() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,181,inal Option option = buildHelpOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,182,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,183,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,184,ettings.remove(DisplaySetting.DISPLAY_OPTIONAL);
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,185,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,187,"ssertEquals(""--help (-?,-h)"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,190,ublic void testAppendUsage_NoAlias() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,191,inal Option option = buildHelpOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,192,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,193,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,194,ettings.remove(DisplaySetting.DISPLAY_ALIASES);
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,195,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,197,"ssertEquals(""[--help]"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,201, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,203, @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,205,ublic void testGetPreferredName() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,206,inal Option option = buildHelpOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,207,"ssertEquals(""--help"", option.getPreferredName());"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,211, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,213, @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,215,ublic void testGetDescription() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,216,inal Option option = buildHelpOption();
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,217,"ssertEquals(""Displays the help"", option.getDescription());"
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,220, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,222, @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,224,ublic void testHelpLines() {
False,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,225,/ TODO Auto-generated method stub
True,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,src/test/org/apache/commons/cli2/option/DefaultOptionTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.HashSet;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.Parent;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;/** * @author roberto * * To change the template for this generated type comment go to * Window>Preferences>Java>Code Generation>Code and Comments */public class DefaultOptionTest extends ParentTestCase {    public static DefaultOption buildHelpOption() {        final Set aliases = new HashSet(list(""-h"", ""-?""));        return new DefaultOption(            ""-"",            ""--"",            true,            ""--help"",            ""Displays the help"",            aliases,            aliases,            false,            null,            null,            'h');    }    public static DefaultOption buildXOption() {        return new DefaultOption(            ""-"",            ""--"",            true,            ""-X"",            ""This is needed"",            null,            null,            true,            null,            null,            'X');    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()     */    public void testProcessParent() throws OptionException {        final DefaultOption option = buildHelpOption();        final List args = list(""--help"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""--help""));        assertTrue(commandLine.hasOption(""-?""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcessParent_Burst() throws OptionException {        final DefaultOption option = buildHelpOption();        final List args = list(""-help"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertEquals(""-elp"", iterator.next());        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""--help""));        assertTrue(commandLine.hasOption(""-?""));        assertTrue(commandLine.getValues(option).isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final DefaultOption option = buildHelpOption();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), ""-?""));    }    public void testCanProcess_BadMatch() {        final DefaultOption option = buildHelpOption();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), ""-H""));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final DefaultOption option = buildHelpOption();        assertContentsEqual(list(""-"", ""--""), option.getPrefixes());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess() {        // TODO Auto-generated method stub    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final DefaultOption option = buildHelpOption();        assertContentsEqual(list(""-?"", ""-h"", ""--help""), option.getTriggers());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate() {        final Parent option = buildXOption();        final WriteableCommandLine commandLine = commandLine(option, list());        try {            option.validate(commandLine);            fail(""Missing an option"");        }        catch (OptionException moe) {            assertSame(option, moe.getOption());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildHelpOption();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""[--help (-?,-h)]"", buffer.toString());    }    public void testAppendUsage_NoOptional() {        final Option option = buildHelpOption();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_OPTIONAL);        option.appendUsage(buffer, settings, null);        assertEquals(""--help (-?,-h)"", buffer.toString());    }    public void testAppendUsage_NoAlias() {        final Option option = buildHelpOption();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_ALIASES);        option.appendUsage(buffer, settings, null);        assertEquals(""[--help]"", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildHelpOption();        assertEquals(""--help"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildHelpOption();        assertEquals(""Displays the help"", option.getDescription());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        // TODO Auto-generated method stub    }}"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,19,mport java.util.ArrayList;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,20,mport java.util.HashSet;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,21,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,22,mport java.util.List;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,23,mport java.util.ListIterator;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,24,mport java.util.Set;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,26,mport org.apache.commons.cli2.DisplaySetting;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,27,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,28,mport org.apache.commons.cli2.HelpLine;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,29,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,30,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,31,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,32,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,33,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,34,mport org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,37, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,39,ublic class GroupTest
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,40,xtends GroupTestCase {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,41,ublic static final Command COMMAND_START =
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,42,"ew Command(""start"", ""Starts the server"", null, false, null, null, 0);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,43,ublic static final Command COMMAND_STOP =
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,44,"ew Command(""stop"", ""Stops the server"", null, false, null, null, 0);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,45,ublic static final Command COMMAND_RESTART =
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,46,"ew Command(""restart"", ""Stops and starts the server"", null, false, null, null, 0);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,47,ublic static final Command COMMAND_GRACEFUL =
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,48,"ew Command(""graceful"", ""Restarts the server without interruption"", null, false, null,"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,49,"ull, 0);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,51,ublic static Group buildApacheCommandGroup() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,52,inal List options = new ArrayList();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,53,ptions.add(COMMAND_GRACEFUL);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,54,ptions.add(COMMAND_RESTART);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,55,ptions.add(COMMAND_START);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,56,ptions.add(COMMAND_STOP);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,58,"eturn new GroupImpl(options, ""httpd-cmds"", ""The command to pass to the server"", 1, 1);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,61,ublic static Group buildApachectlGroup() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,62,inal List options = new ArrayList();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,63,ptions.add(DefaultOptionTest.buildHelpOption());
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,64,ptions.add(ParentTest.buildKParent());
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,66,"eturn new GroupImpl(options, ""apachectl"", ""Controls the apache http deamon"", 0,"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,67,nteger.MAX_VALUE);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,70,ublic static Group buildAntGroup() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,71,inal List options = new ArrayList();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,72,ptions.add(DefaultOptionTest.buildHelpOption());
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,73,ptions.add(ArgumentTest.buildTargetsArgument());
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,75,"eturn new GroupImpl(options, ""ant"", ""The options for ant"", 0, Integer.MAX_VALUE);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,79, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,81, @see org.apache.commons.cli2.GroupTestCase#testProcessAnonymousArguments()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,83,ublic void testProcessAnonymousArguments()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,84,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,85,inal Group option = buildAntGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,86,"inal List args = list(""compile,test"", ""dist"");"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,87,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,88,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,89,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,91,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,92,"ssertTrue(commandLine.hasOption(""target""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,93,"ssertListContentsEqual(commandLine.getValues(""target""), args);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,94,"ssertListContentsEqual(list(""compile"", ""test"", ""dist""), args);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,98, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,100, @see org.apache.commons.cli2.GroupTestCase#testProcessOptions()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,102,ublic void testProcessOptions()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,103,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,104,inal Group option = buildApachectlGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,105,"inal List args = list(""-?"", ""-k"");"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,106,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,107,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,108,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,110,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,111,"ssertTrue(commandLine.hasOption(""--help""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,112,"ssertTrue(commandLine.hasOption(""-k""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,113,"ssertFalse(commandLine.hasOption(""start""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,114,"ssertListContentsEqual(list(""--help"", ""-k""), args);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,118, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,120, @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,122,ublic void testCanProcess() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,123,inal Group option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,124,"ssertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""start""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,127,ublic void testCanProcess_BadMatch() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,128,inal Group option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,129,"ssertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""begin""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,132,ublic void testCanProcess_NullMatch() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,133,inal Group option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,134,"ssertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), (String) null));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,138, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,140, @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,142,ublic void testPrefixes() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,143,inal Group option = buildApachectlGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,144,"ssertContentsEqual(list(""-"", ""--""), option.getPrefixes());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,148, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,150, @see org.apache.commons.cli2.OptionTestCase#testProcess()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,152,ublic void testProcess()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,153,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,154,inal Group option = buildAntGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,155,"inal List args = list(""--help"", ""compile,test"", ""dist"");"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,156,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,157,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,158,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,160,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,161,"ssertTrue(commandLine.hasOption(""-?""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,162,"ssertListContentsEqual(list(""compile"", ""test"", ""dist""), commandLine.getValues(""target""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,165,ublic void testProcess_Nested()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,166,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,167,inal Group option = buildApachectlGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,168,"inal List args = list(""-h"", ""-k"", ""graceful"");"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,169,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,170,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,171,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,173,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,174,"ssertTrue(commandLine.hasOption(""-?""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,175,"ssertTrue(commandLine.hasOption(""-k""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,176,"ssertTrue(commandLine.hasOption(""graceful""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,177,"ssertFalse(commandLine.hasOption(""stop""));"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,178,"ssertTrue(commandLine.getValues(""start"").isEmpty());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,179,"ssertListContentsEqual(list(""--help"", ""-k"", ""graceful""), args);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,183, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,185, @see org.apache.commons.cli2.OptionTestCase#testTriggers()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,187,ublic void testTriggers() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,188,inal Group option = buildApachectlGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,189,"ssertContentsEqual(list(""--help"", ""-?"", ""-h"", ""-k""), option.getTriggers());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,193, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,195, @see org.apache.commons.cli2.OptionTestCase#testValidate()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,197,ublic void testValidate()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,198,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,199,inal Group option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,200,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,202,ommandLine.addOption(COMMAND_RESTART);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,204,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,207,ublic void testValidate_UnexpectedOption() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,208,inal Group option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,209,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,211,ommandLine.addOption(COMMAND_RESTART);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,212,ommandLine.addOption(COMMAND_GRACEFUL);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,214,ry {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,215,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,216,"ail(""Too many options"");"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,217, catch (OptionException uoe) {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,218,"ssertEquals(option, uoe.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,222,ublic void testValidate_MissingOption() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,223,inal Group option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,224,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,226,ry {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,227,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,228,"ail(""Missing an option"");"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,229, catch (OptionException moe) {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,230,"ssertEquals(option, moe.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,234,ublic void testValidate_RequiredChild()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,235,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,236,inal Option required =
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,237,"ew DefaultOptionBuilder().withLongName(""required"").withRequired(true).create();"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,238,inal Option optional =
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,239,"ew DefaultOptionBuilder().withLongName(""optional"").withRequired(false).create();"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,240,inal Group group =
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,241,ew GroupBuilder().withOption(required).withOption(optional).withMinimum(1).create();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,243,riteableCommandLine commandLine;
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,245,"ommandLine = commandLine(group, list());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,247,ry {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,248,roup.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,249,"ail(""Missing option 'required'"");"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,250, catch (OptionException moe) {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,251,"ssertEquals(required, moe.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,254,"ommandLine = commandLine(group, list());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,255,ommandLine.addOption(optional);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,257,ry {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,258,roup.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,259,"ail(""Missing option 'required'"");"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,260, catch (OptionException moe) {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,261,"ssertEquals(required, moe.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,264,"ommandLine = commandLine(group, list());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,265,ommandLine.addOption(required);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,266,roup.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,270, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,272, @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,274,ublic void testAppendUsage() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,275,inal Option option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,276,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,277,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,279,/settings.remove(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,280,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,282,"ssertEquals(""httpd-cmds (graceful|restart|start|stop)"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,285,ublic void testAppendUsage_NoOptional() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,286,inal Option option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,287,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,288,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,289,ettings.remove(DisplaySetting.DISPLAY_OPTIONAL);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,290,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,292,"ssertEquals(""httpd-cmds (graceful|restart|start|stop)"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,295,ublic void testAppendUsage_NoExpand() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,296,inal Option option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,297,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,298,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,299,ettings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,300,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,302,"ssertEquals(""httpd-cmds"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,305,ublic void testAppendUsage_NoExpandOrName() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,306,inal Option option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,307,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,308,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,309,ettings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,310,ettings.remove(DisplaySetting.DISPLAY_GROUP_NAME);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,311,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,313,"ssertEquals(""httpd-cmds"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,316,ublic void testAppendUsage_NoName() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,317,inal Option option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,318,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,319,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,320,ettings.remove(DisplaySetting.DISPLAY_GROUP_NAME);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,321,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,323,"ssertEquals(""graceful|restart|start|stop"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,326,ublic void testAppendUsage_WithArgs() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,327,inal Option option = buildAntGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,328,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,329,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,330,ettings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,331,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,333,"ssertEquals(""[ant (--help (-?,-h)) [<target1> [<target2> ...]]]"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,337, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,339, @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,341,ublic void testGetPreferredName() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,342,inal Option option = buildAntGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,343,"ssertEquals(""ant"", option.getPreferredName());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,347, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,349, @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,351,ublic void testGetDescription() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,352,inal Option option = buildApachectlGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,353,"ssertEquals(""Controls the apache http deamon"", option.getDescription());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,357, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,359, @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,361,ublic void testHelpLines() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,362,inal Option option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,363,"inal List lines = option.helpLines(0, DisplaySetting.ALL, null);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,364,inal Iterator i = lines.iterator();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,366,inal HelpLine line1 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,367,"ssertEquals(0, line1.getIndent());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,368,"ssertEquals(option, line1.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,370,inal HelpLine line2 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,371,"ssertEquals(1, line2.getIndent());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,372,"ssertEquals(COMMAND_GRACEFUL, line2.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,374,inal HelpLine line3 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,375,"ssertEquals(1, line3.getIndent());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,376,"ssertEquals(COMMAND_RESTART, line3.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,378,inal HelpLine line4 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,379,"ssertEquals(1, line4.getIndent());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,380,"ssertEquals(COMMAND_START, line4.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,382,inal HelpLine line5 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,383,"ssertEquals(1, line5.getIndent());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,384,"ssertEquals(COMMAND_STOP, line5.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,386,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,390, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,392, @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,394,ublic void testHelpLines_NoExpanded() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,395,inal Option option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,396,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,397,ettings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,399,"inal List lines = option.helpLines(0, settings, null);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,400,inal Iterator i = lines.iterator();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,402,inal HelpLine line1 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,403,"ssertEquals(0, line1.getIndent());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,404,"ssertEquals(option, line1.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,406,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,410, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,412, @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,414,ublic void testHelpLines_NoName() {
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,415,inal Option option = buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,416,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,417,ettings.remove(DisplaySetting.DISPLAY_GROUP_NAME);
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,419,"inal List lines = option.helpLines(0, settings, null);"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,420,inal Iterator i = lines.iterator();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,422,inal HelpLine line2 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,423,"ssertEquals(1, line2.getIndent());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,424,"ssertEquals(COMMAND_GRACEFUL, line2.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,426,inal HelpLine line3 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,427,"ssertEquals(1, line3.getIndent());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,428,"ssertEquals(COMMAND_RESTART, line3.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,430,inal HelpLine line4 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,431,"ssertEquals(1, line4.getIndent());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,432,"ssertEquals(COMMAND_START, line4.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,434,inal HelpLine line5 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,435,"ssertEquals(1, line5.getIndent());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,436,"ssertEquals(COMMAND_STOP, line5.getOption());"
False,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,438,ssertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/option/GroupTest.java,src/test/org/apache/commons/cli2/option/GroupTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.ArrayList;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;/** * @author Rob Oxspring */public class GroupTest    extends GroupTestCase {    public static final Command COMMAND_START =        new Command(""start"", ""Starts the server"", null, false, null, null, 0);    public static final Command COMMAND_STOP =        new Command(""stop"", ""Stops the server"", null, false, null, null, 0);    public static final Command COMMAND_RESTART =        new Command(""restart"", ""Stops and starts the server"", null, false, null, null, 0);    public static final Command COMMAND_GRACEFUL =        new Command(""graceful"", ""Restarts the server without interruption"", null, false, null,                    null, 0);    public static Group buildApacheCommandGroup() {        final List options = new ArrayList();        options.add(COMMAND_GRACEFUL);        options.add(COMMAND_RESTART);        options.add(COMMAND_START);        options.add(COMMAND_STOP);        return new GroupImpl(options, ""httpd-cmds"", ""The command to pass to the server"", 1, 1);    }    public static Group buildApachectlGroup() {        final List options = new ArrayList();        options.add(DefaultOptionTest.buildHelpOption());        options.add(ParentTest.buildKParent());        return new GroupImpl(options, ""apachectl"", ""Controls the apache http deamon"", 0,                             Integer.MAX_VALUE);    }    public static Group buildAntGroup() {        final List options = new ArrayList();        options.add(DefaultOptionTest.buildHelpOption());        options.add(ArgumentTest.buildTargetsArgument());        return new GroupImpl(options, ""ant"", ""The options for ant"", 0, Integer.MAX_VALUE);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.GroupTestCase#testProcessAnonymousArguments()     */    public void testProcessAnonymousArguments()        throws OptionException {        final Group option = buildAntGroup();        final List args = list(""compile,test"", ""dist"");        final ListIterator iterator = args.listIterator();        final WriteableCommandLine commandLine = commandLine(option, args);        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(""target""));        assertListContentsEqual(commandLine.getValues(""target""), args);        assertListContentsEqual(list(""compile"", ""test"", ""dist""), args);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.GroupTestCase#testProcessOptions()     */    public void testProcessOptions()        throws OptionException {        final Group option = buildApachectlGroup();        final List args = list(""-?"", ""-k"");        final ListIterator iterator = args.listIterator();        final WriteableCommandLine commandLine = commandLine(option, args);        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(""--help""));        assertTrue(commandLine.hasOption(""-k""));        assertFalse(commandLine.hasOption(""start""));        assertListContentsEqual(list(""--help"", ""-k""), args);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Group option = buildApacheCommandGroup();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""start""));    }    public void testCanProcess_BadMatch() {        final Group option = buildApacheCommandGroup();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""begin""));    }    public void testCanProcess_NullMatch() {        final Group option = buildApacheCommandGroup();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), (String) null));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Group option = buildApachectlGroup();        assertContentsEqual(list(""-"", ""--""), option.getPrefixes());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess()        throws OptionException {        final Group option = buildAntGroup();        final List args = list(""--help"", ""compile,test"", ""dist"");        final ListIterator iterator = args.listIterator();        final WriteableCommandLine commandLine = commandLine(option, args);        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(""-?""));        assertListContentsEqual(list(""compile"", ""test"", ""dist""), commandLine.getValues(""target""));    }    public void testProcess_Nested()        throws OptionException {        final Group option = buildApachectlGroup();        final List args = list(""-h"", ""-k"", ""graceful"");        final ListIterator iterator = args.listIterator();        final WriteableCommandLine commandLine = commandLine(option, args);        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(""-?""));        assertTrue(commandLine.hasOption(""-k""));        assertTrue(commandLine.hasOption(""graceful""));        assertFalse(commandLine.hasOption(""stop""));        assertTrue(commandLine.getValues(""start"").isEmpty());        assertListContentsEqual(list(""--help"", ""-k"", ""graceful""), args);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Group option = buildApachectlGroup();        assertContentsEqual(list(""--help"", ""-?"", ""-h"", ""-k""), option.getTriggers());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate()        throws OptionException {        final Group option = buildApacheCommandGroup();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addOption(COMMAND_RESTART);        option.validate(commandLine);    }    public void testValidate_UnexpectedOption() {        final Group option = buildApacheCommandGroup();        final WriteableCommandLine commandLine = commandLine(option, list());        commandLine.addOption(COMMAND_RESTART);        commandLine.addOption(COMMAND_GRACEFUL);        try {            option.validate(commandLine);            fail(""Too many options"");        } catch (OptionException uoe) {            assertEquals(option, uoe.getOption());        }    }    public void testValidate_MissingOption() {        final Group option = buildApacheCommandGroup();        final WriteableCommandLine commandLine = commandLine(option, list());        try {            option.validate(commandLine);            fail(""Missing an option"");        } catch (OptionException moe) {            assertEquals(option, moe.getOption());        }    }    public void testValidate_RequiredChild()        throws OptionException {        final Option required =            new DefaultOptionBuilder().withLongName(""required"").withRequired(true).create();        final Option optional =            new DefaultOptionBuilder().withLongName(""optional"").withRequired(false).create();        final Group group =            new GroupBuilder().withOption(required).withOption(optional).withMinimum(1).create();        WriteableCommandLine commandLine;        commandLine = commandLine(group, list());        try {            group.validate(commandLine);            fail(""Missing option 'required'"");        } catch (OptionException moe) {            assertEquals(required, moe.getOption());        }        commandLine = commandLine(group, list());        commandLine.addOption(optional);        try {            group.validate(commandLine);            fail(""Missing option 'required'"");        } catch (OptionException moe) {            assertEquals(required, moe.getOption());        }        commandLine = commandLine(group, list());        commandLine.addOption(required);        group.validate(commandLine);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildApacheCommandGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        //settings.remove(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);        option.appendUsage(buffer, settings, null);        assertEquals(""httpd-cmds (graceful|restart|start|stop)"", buffer.toString());    }    public void testAppendUsage_NoOptional() {        final Option option = buildApacheCommandGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_OPTIONAL);        option.appendUsage(buffer, settings, null);        assertEquals(""httpd-cmds (graceful|restart|start|stop)"", buffer.toString());    }    public void testAppendUsage_NoExpand() {        final Option option = buildApacheCommandGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);        option.appendUsage(buffer, settings, null);        assertEquals(""httpd-cmds"", buffer.toString());    }    public void testAppendUsage_NoExpandOrName() {        final Option option = buildApacheCommandGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);        settings.remove(DisplaySetting.DISPLAY_GROUP_NAME);        option.appendUsage(buffer, settings, null);        assertEquals(""httpd-cmds"", buffer.toString());    }    public void testAppendUsage_NoName() {        final Option option = buildApacheCommandGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_NAME);        option.appendUsage(buffer, settings, null);        assertEquals(""graceful|restart|start|stop"", buffer.toString());    }    public void testAppendUsage_WithArgs() {        final Option option = buildAntGroup();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);        option.appendUsage(buffer, settings, null);        assertEquals(""[ant (--help (-?,-h)) [<target1> [<target2> ...]]]"", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildAntGroup();        assertEquals(""ant"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildApachectlGroup();        assertEquals(""Controls the apache http deamon"", option.getDescription());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        final Option option = buildApacheCommandGroup();        final List lines = option.helpLines(0, DisplaySetting.ALL, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        final HelpLine line2 = (HelpLine) i.next();        assertEquals(1, line2.getIndent());        assertEquals(COMMAND_GRACEFUL, line2.getOption());        final HelpLine line3 = (HelpLine) i.next();        assertEquals(1, line3.getIndent());        assertEquals(COMMAND_RESTART, line3.getOption());        final HelpLine line4 = (HelpLine) i.next();        assertEquals(1, line4.getIndent());        assertEquals(COMMAND_START, line4.getOption());        final HelpLine line5 = (HelpLine) i.next();        assertEquals(1, line5.getIndent());        assertEquals(COMMAND_STOP, line5.getOption());        assertFalse(i.hasNext());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines_NoExpanded() {        final Option option = buildApacheCommandGroup();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_EXPANDED);        final List lines = option.helpLines(0, settings, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        assertFalse(i.hasNext());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines_NoName() {        final Option option = buildApacheCommandGroup();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_NAME);        final List lines = option.helpLines(0, settings, null);        final Iterator i = lines.iterator();        final HelpLine line2 = (HelpLine) i.next();        assertEquals(1, line2.getIndent());        assertEquals(COMMAND_GRACEFUL, line2.getOption());        final HelpLine line3 = (HelpLine) i.next();        assertEquals(1, line3.getIndent());        assertEquals(COMMAND_RESTART, line3.getOption());        final HelpLine line4 = (HelpLine) i.next();        assertEquals(1, line4.getIndent());        assertEquals(COMMAND_START, line4.getOption());        final HelpLine line5 = (HelpLine) i.next();        assertEquals(1, line5.getIndent());        assertEquals(COMMAND_STOP, line5.getOption());        assertFalse(i.hasNext());    }}"
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,19,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,22, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,24,ublic abstract class GroupTestCase
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,25,xtends OptionTestCase {
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,26,ublic abstract void testProcessOptions()
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,27,hrows OptionException;
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,29,ublic abstract void testProcessAnonymousArguments()
False,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,30,hrows OptionException;
True,src/test/org/apache/commons/cli2/option/GroupTestCase.java,src/test/org/apache/commons/cli2/option/GroupTestCase.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import org.apache.commons.cli2.OptionException;/** * @author Rob Oxspring */public abstract class GroupTestCase    extends OptionTestCase {    public abstract void testProcessOptions()        throws OptionException;    public abstract void testProcessAnonymousArguments()        throws OptionException;}"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,19,mport org.apache.commons.cli2.CLITestCase;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,20,mport org.apache.commons.cli2.CommandLine;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,21,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,22,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,23,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,24,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,25,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,26,mport org.apache.commons.cli2.commandline.Parser;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,27,mport org.apache.commons.cli2.util.HelpFormatter;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,29,mport java.io.BufferedReader;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,30,mport java.io.IOException;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,31,mport java.io.PrintWriter;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,32,mport java.io.StringReader;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,33,mport java.io.StringWriter;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,35,mport java.util.ArrayList;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,36,mport java.util.List;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,40, Test to exercise nested groups developed to demonstrate bug 32533
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,42,ublic class NestedGroupTest extends CLITestCase {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,43,inal static DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,44,inal static ArgumentBuilder abuilder = new ArgumentBuilder();
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,45,inal static GroupBuilder gbuilder = new GroupBuilder();
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,47,tatic Group buildActionGroup() {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,48,"eturn gbuilder.withName(""Action"").withDescription(""Action"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,49,withMinimum(1).withMaximum(1)
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,50,"withOption(obuilder.withId(5).withShortName(""e"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,51,"withLongName(""encrypt"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,52,"withDescription(""Encrypt input"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,53,create())
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,54,"withOption(obuilder.withId(6).withShortName(""d"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,55,"withLongName(""decrypt"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,56,"withDescription(""Decrypt input"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,57,create()).create();
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,60,tatic Group buildAlgorithmGroup() {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,61,"eturn gbuilder.withName(""Algorithm"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,62,"withDescription(""Encryption Algorithm"").withMaximum(1)"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,63,"withOption(obuilder.withId(0).withShortName(""b"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,64,"withLongName(""blowfish"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,65,"withDescription(""Blowfish"").create())"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,66,"withOption(obuilder.withId(1).withShortName(""3"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,67,"withLongName(""3DES"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,68,"withDescription(""Triple DES"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,69,create()).create();
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,72,tatic Group buildInputGroup() {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,73,"eturn gbuilder.withName(""Input"").withDescription(""Input"").withMinimum(1)"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,74,withMaximum(1)
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,75,"withOption(obuilder.withId(2).withShortName(""f"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,76,"withLongName(""file"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,77,"withDescription(""Input file"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,78,withArgument(abuilder.withName(
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,79,"file"").withMinimum(1).withMaximum(1).create()).create())"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,80,"withOption(obuilder.withId(3).withShortName(""s"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,81,"withLongName(""string"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,82,"withDescription(""Input string"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,83,withArgument(abuilder.withName(
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,84,"string"").withMinimum(1).withMaximum(1).create()).create())"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,85,create();
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,88,tatic Group buildEncryptionServiceGroup(Group[] nestedGroups) {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,89,"builder.withName(""encryptionService"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,90,"withOption(obuilder.withId(4).withShortName(""h"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,91,"withLongName(""help"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,92,"withDescription(""Print this message"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,93,create()).withOption(obuilder.withShortName(
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,94,"k"").withLongName(""key"").withDescription(""Encryption key"")"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,95,create());
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,97,or (int i = 0; i < nestedGroups.length; i++) {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,98,builder.withOption(nestedGroups[i]);
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,101,eturn gbuilder.create();
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,104,ublic void testNestedGroup()
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,105,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,106,inal String[] args = {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,107,"-eb"","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,108,"--file"","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,109,"/tmp/filename.txt"""
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,112,roup[] nestedGroups = {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,113,"uildActionGroup(),"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,114,"uildAlgorithmGroup(),"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,115,uildInputGroup()
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,118,arser parser = new Parser();
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,119,arser.setGroup(buildEncryptionServiceGroup(nestedGroups));
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,121,ommandLine commandLine = parser.parse(args);
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,123,"ssertTrue(""/tmp/filename.txt"".equals(commandLine.getValue(""-f"")));"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,124,"ssertTrue(commandLine.hasOption(""-e""));"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,125,"ssertTrue(commandLine.hasOption(""-b""));"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,126,"ssertFalse(commandLine.hasOption(""-d""));"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,129,ublic void testNestedGroupHelp() {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,130,roup[] nestedGroups = {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,131,"uildActionGroup(),"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,132,"uildAlgorithmGroup(),"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,133,uildInputGroup()
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,136,elpFormatter helpFormatter = new HelpFormatter();
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,137,elpFormatter.setGroup(buildEncryptionServiceGroup(nestedGroups));
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,139,inal StringWriter out = new StringWriter();
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,140,elpFormatter.setPrintWriter(new PrintWriter(out));
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,142,ry {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,143,elpFormatter.print();
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,145,inal BufferedReader bufferedReader = new BufferedReader(new StringReader(
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,146,ut.toString()));
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,147,inal String[] expected = new String[] {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,148,"Usage:                                                                          "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,149," [-h -k -e|-d -b|-3 -f <file>|-s <string>]                                      "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,150,"encryptionService                                                               "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,151,"  -h (--help)               Print this message                                  "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,152,"  -k (--key)                Encryption key                                      "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,153,"  Action                    Action                                              "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,154,"    -e (--encrypt)          Encrypt input                                       "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,155,"    -d (--decrypt)          Decrypt input                                       "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,156,"  Algorithm                 Encryption Algorithm                                "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,157,"    -b (--blowfish)         Blowfish                                            "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,158,"    -3 (--3DES)             Triple DES                                          "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,159,"  Input                     Input                                               "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,160,"    -f (--file) file        Input file                                          "","
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,161,"    -s (--string) string    Input string                                        """
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,164,ist actual = new ArrayList(expected.length);
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,165,tring input;
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,167,hile ((input = bufferedReader.readLine()) != null) {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,168,ctual.add(input);
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,171,/ Show they are the same number of lines
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,172,"ssertEquals(""Help text lines should be "" + expected.length,"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,173,"ctual.size(), expected.length);"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,175,or (int i = 0; i < expected.length; i++) {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,176,f (!expected[i].equals(actual.get(i))) {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,177,or (int x = 0; x < expected.length; i++) {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,178,"ystem.out.println(""   "" + expected[i]);"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,179,ystem.out.println((expected[i].equals(actual.get(i))
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,181," ""!= "") + actual.get(i));"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,185,"ssertEquals(expected[i], actual.get(i));"
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,188,atch (IOException e) {
False,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,189,ail(e.getLocalizedMessage());
True,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,src/test/org/apache/commons/cli2/option/NestedGroupTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import org.apache.commons.cli2.CLITestCase;import org.apache.commons.cli2.CommandLine;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.Parser;import org.apache.commons.cli2.util.HelpFormatter;import java.io.BufferedReader;import java.io.IOException;import java.io.PrintWriter;import java.io.StringReader;import java.io.StringWriter;import java.util.ArrayList;import java.util.List;/** * Test to exercise nested groups developed to demonstrate bug 32533 */public class NestedGroupTest extends CLITestCase {    final static DefaultOptionBuilder obuilder = new DefaultOptionBuilder();    final static ArgumentBuilder abuilder = new ArgumentBuilder();    final static GroupBuilder gbuilder = new GroupBuilder();    static Group buildActionGroup() {        return gbuilder.withName(""Action"").withDescription(""Action"")                       .withMinimum(1).withMaximum(1)                       .withOption(obuilder.withId(5).withShortName(""e"")                                           .withLongName(""encrypt"")                                           .withDescription(""Encrypt input"")                                           .create())                       .withOption(obuilder.withId(6).withShortName(""d"")                                           .withLongName(""decrypt"")                                           .withDescription(""Decrypt input"")                                           .create()).create();    }    static Group buildAlgorithmGroup() {        return gbuilder.withName(""Algorithm"")                       .withDescription(""Encryption Algorithm"").withMaximum(1)                       .withOption(obuilder.withId(0).withShortName(""b"")                                           .withLongName(""blowfish"")                                           .withDescription(""Blowfish"").create())                       .withOption(obuilder.withId(1).withShortName(""3"")                                           .withLongName(""3DES"")                                           .withDescription(""Triple DES"")                                           .create()).create();    }    static Group buildInputGroup() {        return gbuilder.withName(""Input"").withDescription(""Input"").withMinimum(1)                       .withMaximum(1)                       .withOption(obuilder.withId(2).withShortName(""f"")                                           .withLongName(""file"")                                           .withDescription(""Input file"")                                           .withArgument(abuilder.withName(                    ""file"").withMinimum(1).withMaximum(1).create()).create())                       .withOption(obuilder.withId(3).withShortName(""s"")                                           .withLongName(""string"")                                           .withDescription(""Input string"")                                           .withArgument(abuilder.withName(                    ""string"").withMinimum(1).withMaximum(1).create()).create())                       .create();    }    static Group buildEncryptionServiceGroup(Group[] nestedGroups) {        gbuilder.withName(""encryptionService"")                .withOption(obuilder.withId(4).withShortName(""h"")                                    .withLongName(""help"")                                    .withDescription(""Print this message"")                                    .create()).withOption(obuilder.withShortName(                ""k"").withLongName(""key"").withDescription(""Encryption key"")                                                                  .create());        for (int i = 0; i < nestedGroups.length; i++) {            gbuilder.withOption(nestedGroups[i]);        }        return gbuilder.create();    }    public void testNestedGroup()        throws OptionException {        final String[] args = {                ""-eb"",                ""--file"",                ""/tmp/filename.txt""            };        Group[] nestedGroups = {                buildActionGroup(),                buildAlgorithmGroup(),                buildInputGroup()            };        Parser parser = new Parser();        parser.setGroup(buildEncryptionServiceGroup(nestedGroups));        CommandLine commandLine = parser.parse(args);        assertTrue(""/tmp/filename.txt"".equals(commandLine.getValue(""-f"")));        assertTrue(commandLine.hasOption(""-e""));        assertTrue(commandLine.hasOption(""-b""));        assertFalse(commandLine.hasOption(""-d""));    }    public void testNestedGroupHelp() {        Group[] nestedGroups = {                buildActionGroup(),                buildAlgorithmGroup(),                buildInputGroup()            };        HelpFormatter helpFormatter = new HelpFormatter();        helpFormatter.setGroup(buildEncryptionServiceGroup(nestedGroups));        final StringWriter out = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(out));        try {            helpFormatter.print();            final BufferedReader bufferedReader = new BufferedReader(new StringReader(                        out.toString()));            final String[] expected = new String[] {                    ""Usage:                                                                          "",                    "" [-h -k -e|-d -b|-3 -f <file>|-s <string>]                                      "",                    ""encryptionService                                                               "",                    ""  -h (--help)               Print this message                                  "",                    ""  -k (--key)                Encryption key                                      "",                    ""  Action                    Action                                              "",                    ""    -e (--encrypt)          Encrypt input                                       "",                    ""    -d (--decrypt)          Decrypt input                                       "",                    ""  Algorithm                 Encryption Algorithm                                "",                    ""    -b (--blowfish)         Blowfish                                            "",                    ""    -3 (--3DES)             Triple DES                                          "",                    ""  Input                     Input                                               "",                    ""    -f (--file) file        Input file                                          "",                    ""    -s (--string) string    Input string                                        ""                };            List actual = new ArrayList(expected.length);            String input;            while ((input = bufferedReader.readLine()) != null) {                actual.add(input);            }            // Show they are the same number of lines            assertEquals(""Help text lines should be "" + expected.length,                actual.size(), expected.length);            for (int i = 0; i < expected.length; i++) {                if (!expected[i].equals(actual.get(i))) {                    for (int x = 0; x < expected.length; i++) {                        System.out.println(""   "" + expected[i]);                        System.out.println((expected[i].equals(actual.get(i))                            ? ""== ""                            : ""!= "") + actual.get(i));                    }                }                assertEquals(expected[i], actual.get(i));            }        }        catch (IOException e) {            fail(e.getLocalizedMessage());        }    }}"
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,19,mport java.util.List;
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,21,mport org.apache.commons.cli2.CLITestCase;
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,22,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,23,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,24,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,25,mport org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,28, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,30,ublic abstract class OptionTestCase extends CLITestCase {
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,32,ublic static WriteableCommandLine commandLine(
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,33,"inal Option option,"
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,34,inal List args) {
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,35,"eturn new WriteableCommandLineImpl(option, args);"
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,38,ublic abstract void testTriggers();
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,40,ublic abstract void testPrefixes();
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,42,ublic abstract void testCanProcess();
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,44,ublic abstract void testProcess() throws OptionException;
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,46,ublic abstract void testValidate() throws OptionException;
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,48,ublic abstract void testAppendUsage() throws OptionException;
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,50,ublic abstract void testGetPreferredName();
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,52,ublic abstract void testGetDescription();
False,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,54,ublic abstract void testHelpLines();
True,src/test/org/apache/commons/cli2/option/OptionTestCase.java,src/test/org/apache/commons/cli2/option/OptionTestCase.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.List;import org.apache.commons.cli2.CLITestCase;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;/** * @author Rob Oxspring */public abstract class OptionTestCase extends CLITestCase {    public static WriteableCommandLine commandLine(        final Option option,        final List args) {        return new WriteableCommandLineImpl(option, args);    }    public abstract void testTriggers();    public abstract void testPrefixes();    public abstract void testCanProcess();    public abstract void testProcess() throws OptionException;    public abstract void testValidate() throws OptionException;    public abstract void testAppendUsage() throws OptionException;    public abstract void testGetPreferredName();    public abstract void testGetDescription();    public abstract void testHelpLines();}"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,19,mport java.util.HashSet;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,20,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,21,mport java.util.List;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,22,mport java.util.ListIterator;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,23,mport java.util.Set;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,25,mport org.apache.commons.cli2.Argument;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,26,mport org.apache.commons.cli2.DisplaySetting;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,27,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,28,mport org.apache.commons.cli2.HelpLine;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,29,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,30,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,31,mport org.apache.commons.cli2.Parent;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,32,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,33,mport org.apache.commons.cli2.builder.ArgumentBuilder;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,34,mport org.apache.commons.cli2.builder.CommandBuilder;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,35,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,36,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,37,mport org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,38,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,39,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,42, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,44,ublic class ParentTest
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,45,xtends ParentTestCase {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,46,ublic static final Argument COMPLEX_ARGUMENT =
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,47,"ew ArgumentBuilder().withName(""username"").withMinimum(1).withMaximum(1).create();"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,48,ublic static final Option COMPLEX_CHILD_SSL =
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,49,"ew DefaultOptionBuilder().withLongName(""ssl"").withShortName(""s"").create();"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,50,ublic static final Option COMPLEX_CHILD_BASIC =
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,51,"ew DefaultOptionBuilder().withLongName(""basic"").withShortName(""b"").create();"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,52,ublic static final Option COMPLEX_CHILD_DIGEST =
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,53,"ew DefaultOptionBuilder().withLongName(""digest"").withShortName(""d"").create();"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,54,ublic static final Group COMPLEX_CHILDREN =
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,55,"ew GroupBuilder().withName(""login-opts"").withOption(COMPLEX_CHILD_BASIC)"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,56,withOption(COMPLEX_CHILD_DIGEST).withOption(COMPLEX_CHILD_SSL).create();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,58,ublic static Parent buildLibParent() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,59,inal Argument argument = ArgumentTest.buildPathArgument();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,61,"eturn new DefaultOption(""-"", ""--"", false, ""--lib"", ""Specifies library search path"", null,"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,62,"ull, false, argument, null, 'l');"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,65,ublic static Parent buildKParent() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,66,inal Group children = GroupTest.buildApacheCommandGroup();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,68,"eturn new DefaultOption(""-"", ""--"", false, ""-k"", ""desc"", null, null, false, null, children,"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,69,k');
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,72,ublic static Parent buildComplexParent() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,73,"eturn new CommandBuilder().withName(""login"").withName(""lo"").withName(""l"")"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,74,withArgument(COMPLEX_ARGUMENT).withChildren(COMPLEX_CHILDREN)
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,75,create();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,78,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,79, @see org.apache.commons.cli2.ParentTestCase#testProcessParent()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,81,ublic void testProcessParent()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,82,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,83,inal Parent option = buildKParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,84,"inal List args = list(""-k"", ""start"");"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,85,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,86,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,87,"ption.processParent(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,89,"ssertEquals(""start"", iterator.next());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,90,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,91,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,92,"ssertTrue(commandLine.hasOption(""-k""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,93,ssertTrue(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,96,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,97, @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,99,ublic void testCanProcess() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,100,inal Parent option = buildKParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,101,"ssertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""-k""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,104,ublic void testCanProcess_BadMatch() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,105,inal Parent option = buildKParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,106,"ssertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""-K""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,109,ublic void testCanProcess_ContractedArgument() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,110,inal Parent option = buildLibParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,111,"ssertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""--lib=/usr/lib""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,114,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,115, @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,117,ublic void testPrefixes() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,118,inal Parent option = buildKParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,119,"ssertContentsEqual(list(""-"", ""--""), option.getPrefixes());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,122,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,123, @see org.apache.commons.cli2.OptionTestCase#testProcess()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,125,ublic void testProcess()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,126,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,127,inal Parent option = CommandTest.buildStartCommand();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,128,"inal List args = list(""start"");"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,129,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,130,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,131,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,133,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,134,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,135,"ssertTrue(commandLine.hasOption(""start""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,136,"ssertFalse(commandLine.hasOption(""stop""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,137,ssertTrue(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,140,ublic void testProcess_NoMatch()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,141,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,142,inal Parent option = CommandTest.buildStartCommand();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,143,"inal List args = list(""whatever"");"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,144,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,145,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,147,ry {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,148,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,149,"ail(""unexpected token not thrown"");"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,150, catch (OptionException exp) {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,151,ptionException e =
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,152,"ew OptionException(option, ResourceConstants.UNEXPECTED_TOKEN, ""whatever"");"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,153,"ssertEquals(""wrong exception message"", e.getMessage(), exp.getMessage());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,157,ublic void testProcess_Children()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,158,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,159,inal Parent option = buildKParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,160,"inal List args = list(""-k"", ""start"");"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,161,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,162,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,163,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,165,"ssertNull(option.findOption(""whatever""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,166,"ssertNotNull(option.findOption(""start""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,168,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,169,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,170,"ssertTrue(commandLine.hasOption(""-k""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,171,"ssertTrue(commandLine.hasOption(""start""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,172,"ssertFalse(commandLine.hasOption(""stop""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,173,ssertTrue(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,176,ublic void testProcess_Argument()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,177,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,178,inal Parent option = buildLibParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,179,"inal List args = list(""--lib=C:\\WINDOWS;C:\\WINNT;C:\\"");"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,180,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,181,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,182,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,184,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,185,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,186,"ssertTrue(commandLine.hasOption(""--lib""));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,187,"ssertContentsEqual(list(""C:\\WINDOWS"", ""C:\\WINNT"", ""C:\\""), commandLine.getValues(option));"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,190,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,191, @see org.apache.commons.cli2.OptionTestCase#testTriggers()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,193,ublic void testTriggers() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,194,inal Parent option = buildKParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,195,"ssertContentsEqual(list(""-k""), option.getTriggers());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,198,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,199, @see org.apache.commons.cli2.OptionTestCase#testValidate()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,201,ublic void testValidate()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,202,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,203,inal Parent option = CommandTest.buildStartCommand();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,204,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,206,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,208,ommandLine.addOption(option);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,210,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,213,ublic void testValidate_Children()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,214,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,215,inal Parent option = buildKParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,216,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,218,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,219,ommandLine.addOption(option);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,221,ry {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,222,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,223,"ail(""Missing a command"");"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,224, catch (OptionException moe) {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,225,ssertNotNull(moe.getOption());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,226,"ssertNotSame(option, moe.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,230,ublic void testValidate_Argument()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,231,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,232,inal Command option = CommandTest.buildLoginCommand();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,233,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,235,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,237,ommandLine.addOption(option);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,239,ry {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,240,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,241,"ail(""Missing a value"");"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,242, catch (OptionException moe) {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,243,"ssertSame(option, moe.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,247,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,248, @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,250,ublic void testAppendUsage() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,251,inal Option option = buildComplexParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,252,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,253,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,254,ettings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,255,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,257,"ssertEquals(""[login (l,lo) <username> [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]"","
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,258,uffer.toString());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,261,ublic void testAppendUsage_NoArguments() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,262,inal Option option = buildComplexParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,263,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,264,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,265,ettings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,266,ettings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,267,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,269,"ssertEquals(""[login (l,lo) [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]"","
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,270,uffer.toString());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,273,ublic void testAppendUsage_NoChildren() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,274,inal Option option = buildComplexParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,275,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,276,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,277,ettings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,278,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,280,"ssertEquals(""[login (l,lo) <username>]"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,283,ublic void testAppendUsage_NoArgumentsOrChildren() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,284,inal Option option = buildComplexParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,285,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,286,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,287,ettings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,288,ettings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,289,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,291,"ssertEquals(""[login (l,lo)]"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,294,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,295, @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,297,ublic void testGetPreferredName() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,298,inal Option option = buildLibParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,299,"ssertEquals(""--lib"", option.getPreferredName());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,302,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,303, @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,305,ublic void testGetDescription() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,306,inal Option option = buildLibParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,307,"ssertEquals(""Specifies library search path"", option.getDescription());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,310,* (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,311, @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,313,ublic void testHelpLines() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,314,inal Option option = buildComplexParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,315,"inal List lines = option.helpLines(0, DisplaySetting.ALL, null);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,316,inal Iterator i = lines.iterator();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,318,inal HelpLine line1 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,319,"ssertEquals(0, line1.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,320,"ssertEquals(option, line1.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,322,inal HelpLine line2 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,323,"ssertEquals(1, line2.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,324,"ssertEquals(COMPLEX_ARGUMENT, line2.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,326,inal HelpLine line3 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,327,"ssertEquals(1, line3.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,328,"ssertEquals(COMPLEX_CHILDREN, line3.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,330,inal HelpLine line4 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,331,"ssertEquals(2, line4.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,332,"ssertEquals(COMPLEX_CHILD_BASIC, line4.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,334,inal HelpLine line5 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,335,"ssertEquals(2, line5.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,336,"ssertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,338,inal HelpLine line6 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,339,"ssertEquals(2, line6.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,340,"ssertEquals(COMPLEX_CHILD_SSL, line6.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,342,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,345,ublic void testHelpLines_NoArgument() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,346,inal Option option = buildComplexParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,347,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,348,ettings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,350,"inal List lines = option.helpLines(0, settings, null);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,351,inal Iterator i = lines.iterator();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,353,inal HelpLine line1 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,354,"ssertEquals(0, line1.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,355,"ssertEquals(option, line1.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,357,inal HelpLine line3 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,358,"ssertEquals(1, line3.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,359,"ssertEquals(COMPLEX_CHILDREN, line3.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,361,inal HelpLine line4 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,362,"ssertEquals(2, line4.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,363,"ssertEquals(COMPLEX_CHILD_BASIC, line4.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,365,inal HelpLine line5 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,366,"ssertEquals(2, line5.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,367,"ssertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,369,inal HelpLine line6 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,370,"ssertEquals(2, line6.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,371,"ssertEquals(COMPLEX_CHILD_SSL, line6.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,373,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,376,ublic void testHelpLines_NoChildren() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,377,inal Option option = buildComplexParent();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,378,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,379,ettings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,381,"inal List lines = option.helpLines(0, settings, null);"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,382,inal Iterator i = lines.iterator();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,384,inal HelpLine line1 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,385,"ssertEquals(0, line1.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,386,"ssertEquals(option, line1.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,388,inal HelpLine line2 = (HelpLine) i.next();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,389,"ssertEquals(1, line2.getIndent());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,390,"ssertEquals(COMPLEX_ARGUMENT, line2.getOption());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,392,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,395,ublic void testNullPreferredName() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,396,ry {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,397,ew CommandBuilder().create();
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,398, catch (IllegalStateException exp) {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,399,"ssertEquals(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME), exp.getMessage());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,403,ublic void testRequired() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,404,"ommand cmd = new CommandBuilder().withRequired(true).withName(""blah"").create();"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,405,"ssertTrue(""cmd is not required"", cmd.isRequired());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,406,"ssertEquals(""id is incorrect"", 0, cmd.getId());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,409,ublic void testID() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,410,"ommand cmd = new CommandBuilder().withId('c').withName(""blah"").create();"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,411,"ssertEquals(""id is incorrect"", 'c', cmd.getId());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,414,ublic void testGetId() {
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,415,"ssertEquals('h', DefaultOptionTest.buildHelpOption().getId());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,416,"ssertEquals('X', DefaultOptionTest.buildXOption().getId());"
False,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,417,"ssertEquals(0, CommandTest.buildStartCommand().getId());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.Argument;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.Parent;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.builder.ArgumentBuilder;import org.apache.commons.cli2.builder.CommandBuilder;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * @author Rob Oxspring */public class ParentTest    extends ParentTestCase {    public static final Argument COMPLEX_ARGUMENT =        new ArgumentBuilder().withName(""username"").withMinimum(1).withMaximum(1).create();    public static final Option COMPLEX_CHILD_SSL =        new DefaultOptionBuilder().withLongName(""ssl"").withShortName(""s"").create();    public static final Option COMPLEX_CHILD_BASIC =        new DefaultOptionBuilder().withLongName(""basic"").withShortName(""b"").create();    public static final Option COMPLEX_CHILD_DIGEST =        new DefaultOptionBuilder().withLongName(""digest"").withShortName(""d"").create();    public static final Group COMPLEX_CHILDREN =        new GroupBuilder().withName(""login-opts"").withOption(COMPLEX_CHILD_BASIC)                          .withOption(COMPLEX_CHILD_DIGEST).withOption(COMPLEX_CHILD_SSL).create();    public static Parent buildLibParent() {        final Argument argument = ArgumentTest.buildPathArgument();        return new DefaultOption(""-"", ""--"", false, ""--lib"", ""Specifies library search path"", null,                                 null, false, argument, null, 'l');    }    public static Parent buildKParent() {        final Group children = GroupTest.buildApacheCommandGroup();        return new DefaultOption(""-"", ""--"", false, ""-k"", ""desc"", null, null, false, null, children,                                 'k');    }    public static Parent buildComplexParent() {        return new CommandBuilder().withName(""login"").withName(""lo"").withName(""l"")                                   .withArgument(COMPLEX_ARGUMENT).withChildren(COMPLEX_CHILDREN)                                   .create();    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()     */    public void testProcessParent()        throws OptionException {        final Parent option = buildKParent();        final List args = list(""-k"", ""start"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertEquals(""start"", iterator.next());        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""-k""));        assertTrue(commandLine.getValues(option).isEmpty());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Parent option = buildKParent();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""-k""));    }    public void testCanProcess_BadMatch() {        final Parent option = buildKParent();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""-K""));    }    public void testCanProcess_ContractedArgument() {        final Parent option = buildLibParent();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""--lib=/usr/lib""));    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Parent option = buildKParent();        assertContentsEqual(list(""-"", ""--""), option.getPrefixes());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess()        throws OptionException {        final Parent option = CommandTest.buildStartCommand();        final List args = list(""start"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""start""));        assertFalse(commandLine.hasOption(""stop""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcess_NoMatch()        throws OptionException {        final Parent option = CommandTest.buildStartCommand();        final List args = list(""whatever"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.process(commandLine, iterator);            fail(""unexpected token not thrown"");        } catch (OptionException exp) {            OptionException e =                new OptionException(option, ResourceConstants.UNEXPECTED_TOKEN, ""whatever"");            assertEquals(""wrong exception message"", e.getMessage(), exp.getMessage());        }    }    public void testProcess_Children()        throws OptionException {        final Parent option = buildKParent();        final List args = list(""-k"", ""start"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertNull(option.findOption(""whatever""));        assertNotNull(option.findOption(""start""));        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""-k""));        assertTrue(commandLine.hasOption(""start""));        assertFalse(commandLine.hasOption(""stop""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcess_Argument()        throws OptionException {        final Parent option = buildLibParent();        final List args = list(""--lib=C:\\WINDOWS;C:\\WINNT;C:\\"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""--lib""));        assertContentsEqual(list(""C:\\WINDOWS"", ""C:\\WINNT"", ""C:\\""), commandLine.getValues(option));    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Parent option = buildKParent();        assertContentsEqual(list(""-k""), option.getTriggers());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate()        throws OptionException {        final Parent option = CommandTest.buildStartCommand();        final WriteableCommandLine commandLine = commandLine(option, list());        option.validate(commandLine);        commandLine.addOption(option);        option.validate(commandLine);    }    public void testValidate_Children()        throws OptionException {        final Parent option = buildKParent();        final WriteableCommandLine commandLine = commandLine(option, list());        option.validate(commandLine);        commandLine.addOption(option);        try {            option.validate(commandLine);            fail(""Missing a command"");        } catch (OptionException moe) {            assertNotNull(moe.getOption());            assertNotSame(option, moe.getOption());        }    }    public void testValidate_Argument()        throws OptionException {        final Command option = CommandTest.buildLoginCommand();        final WriteableCommandLine commandLine = commandLine(option, list());        option.validate(commandLine);        commandLine.addOption(option);        try {            option.validate(commandLine);            fail(""Missing a value"");        } catch (OptionException moe) {            assertSame(option, moe.getOption());        }    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildComplexParent();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);        option.appendUsage(buffer, settings, null);        assertEquals(""[login (l,lo) <username> [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]"",                     buffer.toString());    }    public void testAppendUsage_NoArguments() {        final Option option = buildComplexParent();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        settings.remove(DisplaySetting.DISPLAY_GROUP_OUTER);        option.appendUsage(buffer, settings, null);        assertEquals(""[login (l,lo) [login-opts (--basic (-b)|--digest (-d)|--ssl (-s))]]"",                     buffer.toString());    }    public void testAppendUsage_NoChildren() {        final Option option = buildComplexParent();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);        option.appendUsage(buffer, settings, null);        assertEquals(""[login (l,lo) <username>]"", buffer.toString());    }    public void testAppendUsage_NoArgumentsOrChildren() {        final Option option = buildComplexParent();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);        settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        option.appendUsage(buffer, settings, null);        assertEquals(""[login (l,lo)]"", buffer.toString());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildLibParent();        assertEquals(""--lib"", option.getPreferredName());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildLibParent();        assertEquals(""Specifies library search path"", option.getDescription());    }    /* (non-Javadoc)     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        final Option option = buildComplexParent();        final List lines = option.helpLines(0, DisplaySetting.ALL, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        final HelpLine line2 = (HelpLine) i.next();        assertEquals(1, line2.getIndent());        assertEquals(COMPLEX_ARGUMENT, line2.getOption());        final HelpLine line3 = (HelpLine) i.next();        assertEquals(1, line3.getIndent());        assertEquals(COMPLEX_CHILDREN, line3.getOption());        final HelpLine line4 = (HelpLine) i.next();        assertEquals(2, line4.getIndent());        assertEquals(COMPLEX_CHILD_BASIC, line4.getOption());        final HelpLine line5 = (HelpLine) i.next();        assertEquals(2, line5.getIndent());        assertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());        final HelpLine line6 = (HelpLine) i.next();        assertEquals(2, line6.getIndent());        assertEquals(COMPLEX_CHILD_SSL, line6.getOption());        assertFalse(i.hasNext());    }    public void testHelpLines_NoArgument() {        final Option option = buildComplexParent();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        final List lines = option.helpLines(0, settings, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        final HelpLine line3 = (HelpLine) i.next();        assertEquals(1, line3.getIndent());        assertEquals(COMPLEX_CHILDREN, line3.getOption());        final HelpLine line4 = (HelpLine) i.next();        assertEquals(2, line4.getIndent());        assertEquals(COMPLEX_CHILD_BASIC, line4.getOption());        final HelpLine line5 = (HelpLine) i.next();        assertEquals(2, line5.getIndent());        assertEquals(COMPLEX_CHILD_DIGEST, line5.getOption());        final HelpLine line6 = (HelpLine) i.next();        assertEquals(2, line6.getIndent());        assertEquals(COMPLEX_CHILD_SSL, line6.getOption());        assertFalse(i.hasNext());    }    public void testHelpLines_NoChildren() {        final Option option = buildComplexParent();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PARENT_CHILDREN);        final List lines = option.helpLines(0, settings, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine) i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        final HelpLine line2 = (HelpLine) i.next();        assertEquals(1, line2.getIndent());        assertEquals(COMPLEX_ARGUMENT, line2.getOption());        assertFalse(i.hasNext());    }    public void testNullPreferredName() {        try {        	new CommandBuilder().create();        } catch (IllegalStateException exp) {        	assertEquals(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME), exp.getMessage());        }    }    public void testRequired() {    	Command cmd = new CommandBuilder().withRequired(true).withName(""blah"").create();    	assertTrue(""cmd is not required"", cmd.isRequired());    	assertEquals(""id is incorrect"", 0, cmd.getId());    }    public void testID() {    	Command cmd = new CommandBuilder().withId('c').withName(""blah"").create();    	assertEquals(""id is incorrect"", 'c', cmd.getId());    }    public void testGetId() {        assertEquals('h', DefaultOptionTest.buildHelpOption().getId());        assertEquals('X', DefaultOptionTest.buildXOption().getId());        assertEquals(0, CommandTest.buildStartCommand().getId());    }}"
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,19,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,22, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,24,ublic abstract class ParentTestCase extends OptionTestCase {
False,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,25,ublic abstract void testProcessParent() throws OptionException;
True,src/test/org/apache/commons/cli2/option/ParentTestCase.java,src/test/org/apache/commons/cli2/option/ParentTestCase.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import org.apache.commons.cli2.OptionException;/** * @author Rob Oxspring */public abstract class ParentTestCase extends OptionTestCase {    public abstract void testProcessParent() throws OptionException;}"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,19,mport java.util.HashSet;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,20,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,21,mport java.util.List;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,22,mport java.util.ListIterator;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,23,mport java.util.Set;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,25,mport org.apache.commons.cli2.DisplaySetting;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,26,mport org.apache.commons.cli2.HelpLine;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,27,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,28,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,29,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,30,mport org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,33, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,35,ublic class PropertyOptionTest extends OptionTestCase {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,38, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,40, @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,42,ublic void testCanProcess() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,43,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,44,"ssertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), ""-Dmyprop=myval""));"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,47,ublic void testCanProcess_Null() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,48,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,49,"ssertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), (String) null));"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,52,ublic void testCanProcess_TooShort() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,53,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,54,"ssertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), ""-D""));"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,57,ublic void testCanProcess_BadMatch() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,58,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,59,"ssertFalse(option.canProcess(new WriteableCommandLineImpl(option,null),""-dump""));"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,63, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,65, @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,67,ublic void testPrefixes() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,68,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,69,"ssertContentsEqual(list(""-D""), option.getPrefixes());"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,73, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,75, @see org.apache.commons.cli2.OptionTestCase#testProcess()
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,77,ublic void testProcess() throws OptionException {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,78,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,79,"inal List args = list(""-Dmyprop=myvalue"");"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,80,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,81,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,83,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,84,"ssertEquals(""myvalue"", commandLine.getProperty(""myprop""));"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,85,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,86,"ssertEquals(1, commandLine.getProperties().size());"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,89,ublic void testProcess_UnexpectedOptionException() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,90,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,91,"inal List args = list(""--help"");"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,92,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,93,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,95,ry {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,96,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,97,"ail(""UnexpectedOption"");"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,99,atch (final OptionException uoe) {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,100,"ssertEquals(option, uoe.getOption());"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,101,ssertEquals(
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,102,"Unexpected --help while processing -Dproperty=value"","
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,103,oe.getMessage());
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,107,ublic void testProcess_BadPropertyException() throws OptionException {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,108,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,109,"inal List args = list(""-Dmyprop"");"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,110,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,111,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,113,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,115,"ssertEquals(""true"", commandLine.getProperty(""myprop""));"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,118,ublic void testProcess_SetToEmpty() throws OptionException {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,119,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,120,"inal List args = list(""-Dmyprop="");"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,121,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,122,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,124,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,125,"ssertEquals("""", commandLine.getProperty(""myprop""));"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,126,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,127,"ssertEquals(1, commandLine.getProperties().size());"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,131, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,133, @see org.apache.commons.cli2.OptionTestCase#testTriggers()
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,135,ublic void testTriggers() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,136,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,138,"ssertContentsEqual(list(""-D""), option.getTriggers());"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,142, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,144, @see org.apache.commons.cli2.OptionTestCase#testValidate()
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,146,ublic void testValidate() throws OptionException {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,147,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,148,"inal List args = list(""-Dproperty=value"");"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,149,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,150,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,152,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,154,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,158, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,160, @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,162,ublic void testAppendUsage() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,163,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,164,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,165,"ption.appendUsage(buffer, DisplaySetting.ALL, null);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,167,"ssertEquals(""-D<property>=<value>"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,170,ublic void testAppendUsage_Hidden() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,171,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,172,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,173,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,174,ettings.remove(DisplaySetting.DISPLAY_PROPERTY_OPTION);
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,175,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,177,"ssertEquals("""", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,181, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,183, @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,185,ublic void testGetPreferredName() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,186,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,187,"ssertEquals(""-D"", option.getPreferredName());"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,191, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,193, @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,195,ublic void testGetDescription() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,196,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,197,ssertEquals(
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,198,"Passes properties and values to the application"","
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,199,ption.getDescription());
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,203, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,205, @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,207,ublic void testHelpLines() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,208,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,209,"inal List lines = option.helpLines(0, DisplaySetting.ALL, null);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,210,inal Iterator i = lines.iterator();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,212,inal HelpLine line1 = (HelpLine)i.next();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,213,"ssertEquals(0, line1.getIndent());"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,214,"ssertEquals(option, line1.getOption());"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,216,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,220, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,222, @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,224,ublic void testHelpLines_NoDisplay() {
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,225,inal Option option = new PropertyOption();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,226,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,227,ettings.remove(DisplaySetting.DISPLAY_PROPERTY_OPTION);
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,228,"inal List lines = option.helpLines(0, settings, null);"
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,229,inal Iterator i = lines.iterator();
False,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,231,ssertFalse(i.hasNext());
True,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,src/test/org/apache/commons/cli2/option/PropertyOptionTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.HelpLine;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;/** * @author Rob Oxspring */public class PropertyOptionTest extends OptionTestCase {    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Option option = new PropertyOption();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null), ""-Dmyprop=myval""));    }    public void testCanProcess_Null() {        final Option option = new PropertyOption();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), (String) null));    }    public void testCanProcess_TooShort() {        final Option option = new PropertyOption();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null), ""-D""));    }    public void testCanProcess_BadMatch() {        final Option option = new PropertyOption();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null),""-dump""));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Option option = new PropertyOption();        assertContentsEqual(list(""-D""), option.getPrefixes());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess() throws OptionException {        final Option option = new PropertyOption();        final List args = list(""-Dmyprop=myvalue"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertEquals(""myvalue"", commandLine.getProperty(""myprop""));        assertFalse(iterator.hasNext());        assertEquals(1, commandLine.getProperties().size());    }    public void testProcess_UnexpectedOptionException() {        final Option option = new PropertyOption();        final List args = list(""--help"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        try {            option.process(commandLine, iterator);            fail(""UnexpectedOption"");        }        catch (final OptionException uoe) {            assertEquals(option, uoe.getOption());            assertEquals(                ""Unexpected --help while processing -Dproperty=value"",                uoe.getMessage());        }    }    public void testProcess_BadPropertyException() throws OptionException {        final Option option = new PropertyOption();        final List args = list(""-Dmyprop"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertEquals(""true"", commandLine.getProperty(""myprop""));    }    public void testProcess_SetToEmpty() throws OptionException {        final Option option = new PropertyOption();        final List args = list(""-Dmyprop="");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertEquals("""", commandLine.getProperty(""myprop""));        assertFalse(iterator.hasNext());        assertEquals(1, commandLine.getProperties().size());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Option option = new PropertyOption();        assertContentsEqual(list(""-D""), option.getTriggers());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate() throws OptionException {        final Option option = new PropertyOption();        final List args = list(""-Dproperty=value"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        option.validate(commandLine);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = new PropertyOption();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""-D<property>=<value>"", buffer.toString());    }    public void testAppendUsage_Hidden() {        final Option option = new PropertyOption();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PROPERTY_OPTION);        option.appendUsage(buffer, settings, null);        assertEquals("""", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = new PropertyOption();        assertEquals(""-D"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = new PropertyOption();        assertEquals(            ""Passes properties and values to the application"",            option.getDescription());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        final Option option = new PropertyOption();        final List lines = option.helpLines(0, DisplaySetting.ALL, null);        final Iterator i = lines.iterator();        final HelpLine line1 = (HelpLine)i.next();        assertEquals(0, line1.getIndent());        assertEquals(option, line1.getOption());        assertFalse(i.hasNext());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines_NoDisplay() {        final Option option = new PropertyOption();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_PROPERTY_OPTION);        final List lines = option.helpLines(0, settings, null);        final Iterator i = lines.iterator();        assertFalse(i.hasNext());    }}"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,17,ackage org.apache.commons.cli2.option;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,19,mport java.util.HashSet;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,20,mport java.util.List;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,21,mport java.util.ListIterator;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,22,mport java.util.Set;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,24,mport org.apache.commons.cli2.DisplaySetting;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,25,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,26,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,27,mport org.apache.commons.cli2.Parent;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,28,mport org.apache.commons.cli2.WriteableCommandLine;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,29,mport org.apache.commons.cli2.commandline.WriteableCommandLineImpl;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,30,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,31,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,34, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,36, To change the template for this generated type comment go to
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,37, Window>Preferences>Java>Code Generation>Code and Comments
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,39,ublic class SwitchTest
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,40,xtends ParentTestCase {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,41,ublic static Switch buildDisplaySwitch() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,42,inal Set aliases = new HashSet();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,43,"liases.add(""d"");"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,44,"liases.add(""disp"");"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,46,"eturn new Switch(""+"", ""-"", ""display"", aliases, ""Sets whether to display to screen"", true,"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,47,"ull, null, 'd', null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,51, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,53, @see org.apache.commons.cli2.ParentTestCase#testProcessParent()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,55,ublic void testProcessParent()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,56,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,57,inal Switch option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,58,"inal List args = list(""+d"");"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,59,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,60,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,61,"ption.processParent(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,63,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,64,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,65,"ssertTrue(commandLine.hasOption(""+d""));"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,66,"ssertTrue(commandLine.hasOption(""-display""));"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,67,"ssertEquals(Boolean.TRUE, commandLine.getSwitch(""-d""));"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,68,ssertTrue(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,71,ublic void testProcessParent_Disabled()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,72,hrows OptionException {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,73,inal Switch option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,74,"inal List args = list(""-disp"");"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,75,"inal WriteableCommandLine commandLine = commandLine(option, args);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,76,inal ListIterator iterator = args.listIterator();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,77,"ption.process(commandLine, iterator);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,79,ssertFalse(iterator.hasNext());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,80,ssertTrue(commandLine.hasOption(option));
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,81,"ssertTrue(commandLine.hasOption(""+d""));"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,82,"ssertTrue(commandLine.hasOption(""-display""));"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,83,"ssertEquals(Boolean.FALSE, commandLine.getSwitch(""-d""));"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,84,ssertTrue(commandLine.getValues(option).isEmpty());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,88, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,90, @see org.apache.commons.cli2.OptionTestCase#testCanProcess()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,92,ublic void testCanProcess() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,93,inal Switch option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,94,"ssertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""+d""));"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,97,ublic void testCanProcess_BadMatch() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,98,inal Switch option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,99,"ssertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""-dont""));"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,103, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,105, @see org.apache.commons.cli2.OptionTestCase#testPrefixes()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,107,ublic void testPrefixes() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,108,inal Switch option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,109,"ssertContentsEqual(list(""-"", ""+""), option.getPrefixes());"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,113, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,115, @see org.apache.commons.cli2.OptionTestCase#testProcess()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,117,ublic void testProcess() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,118,/ TODO Auto-generated method stub
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,122, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,124, @see org.apache.commons.cli2.OptionTestCase#testTriggers()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,126,ublic void testTriggers() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,127,inal Switch option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,128,"ssertContentsEqual(list(""-d"", ""+d"", ""-disp"", ""+disp"", ""+display"", ""-display""),"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,129,ption.getTriggers());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,133, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,135, @see org.apache.commons.cli2.OptionTestCase#testValidate()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,137,ublic void testValidate() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,138,inal Parent option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,139,"inal WriteableCommandLine commandLine = commandLine(option, list());"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,141,ry {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,142,ption.validate(commandLine);
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,143,"ail(""Missing an option"");"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,144, catch (OptionException moe) {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,145,"ssertSame(option, moe.getOption());"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,150, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,152, @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,154,ublic void testAppendUsage() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,155,inal Option option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,156,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,157,"ption.appendUsage(buffer, DisplaySetting.ALL, null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,159,"ssertEquals(""+display|-display (+d|-d,+disp|-disp)"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,162,ublic void testAppendUsage_NoAlias() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,163,inal Option option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,164,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,165,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,166,ettings.remove(DisplaySetting.DISPLAY_ALIASES);
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,167,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,169,"ssertEquals(""+display|-display"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,172,ublic void testAppendUsage_NoDisabled() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,173,inal Option option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,174,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,175,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,176,ettings.remove(DisplaySetting.DISPLAY_SWITCH_DISABLED);
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,177,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,179,"ssertEquals(""+display (+d,+disp)"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,182,ublic void testAppendUsage_NoEnabled() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,183,inal Option option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,184,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,185,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,186,ettings.remove(DisplaySetting.DISPLAY_SWITCH_ENABLED);
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,187,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,189,"ssertEquals(""-display (-d,-disp)"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,192,ublic void testAppendUsage_NoDisabledOrEnabled() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,193,inal Option option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,194,inal StringBuffer buffer = new StringBuffer();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,195,inal Set settings = new HashSet(DisplaySetting.ALL);
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,196,ettings.remove(DisplaySetting.DISPLAY_SWITCH_DISABLED);
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,197,ettings.remove(DisplaySetting.DISPLAY_SWITCH_ENABLED);
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,198,"ption.appendUsage(buffer, settings, null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,200,"ssertEquals(""+display (+d,+disp)"", buffer.toString());"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,204, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,206, @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,208,ublic void testGetPreferredName() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,209,inal Option option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,210,"ssertEquals(""+display"", option.getPreferredName());"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,214, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,216, @see org.apache.commons.cli2.OptionTestCase#testGetDescription()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,218,ublic void testGetDescription() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,219,inal Option option = buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,220,"ssertEquals(""Sets whether to display to screen"", option.getDescription());"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,223,ublic void testNullPreferredName() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,224,ry {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,225,"ew Switch(""+"", ""-"", null, null, ""Sets whether to display to screen"", true, null, null,"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,226,"d', null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,227, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,228,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,229,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,230,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,234,ublic void testEmptyPreferredName() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,235,ry {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,236,"ew Switch(""+"", ""-"", """", null, ""Sets whether to display to screen"", true, null, null,"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,237,"d', null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,238, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,239,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,240,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,241,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,245,ublic void testNullAliases() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,246,ry {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,247,"ew Switch(""+"", ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,248,"ull, 'd', null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,249, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,250,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,251,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,252,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,256,ublic void testNullEnablePrefix() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,257,ry {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,258,"ew Switch(null, ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,259,"ull, 'd', null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,260, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,261,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,262,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_NO_ENABLED_PREFIX),"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,263,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,267,ublic void testNullDisablePrefix() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,268,ry {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,269,"ew Switch(""+"", null, ""display"", null, ""Sets whether to display to screen"", true, null,"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,270,"ull, 'd', null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,271, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,272,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,273,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_NO_DISABLED_PREFIX),"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,274,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,278,ublic void testEnabledPrefixStartsWithDisabledPrefix() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,279,ry {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,280,"ew Switch(""-"", ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,281,"ull, 'd', null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,282, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,283,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,284,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ENABLED_STARTS_WITH_DISABLED),"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,285,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,289,ublic void testDisabledPrefixStartsWithEnabledPrefix() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,290,ry {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,291,"ew Switch(""o"", ""on"", ""display"", null, ""Sets whether to display to screen"", true, null,"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,292,"ull, 'd', null);"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,293, catch (IllegalArgumentException exp) {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,294,"ssertEquals(""wrong exception message"","
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,295,"esourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_DISABLED_STARTWS_WITH_ENABLED),"
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,296,xp.getMessage());
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,301, (non-Javadoc)
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,303, @see org.apache.commons.cli2.OptionTestCase#testHelpLines()
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,305,ublic void testHelpLines() {
False,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,306,/ TODO Auto-generated method stub
True,src/test/org/apache/commons/cli2/option/SwitchTest.java,src/test/org/apache/commons/cli2/option/SwitchTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.option;import java.util.HashSet;import java.util.List;import java.util.ListIterator;import java.util.Set;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.Parent;import org.apache.commons.cli2.WriteableCommandLine;import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * @author Rob Oxspring * * To change the template for this generated type comment go to * Window>Preferences>Java>Code Generation>Code and Comments */public class SwitchTest    extends ParentTestCase {    public static Switch buildDisplaySwitch() {        final Set aliases = new HashSet();        aliases.add(""d"");        aliases.add(""disp"");        return new Switch(""+"", ""-"", ""display"", aliases, ""Sets whether to display to screen"", true,                          null, null, 'd', null);    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()     */    public void testProcessParent()        throws OptionException {        final Switch option = buildDisplaySwitch();        final List args = list(""+d"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.processParent(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""+d""));        assertTrue(commandLine.hasOption(""-display""));        assertEquals(Boolean.TRUE, commandLine.getSwitch(""-d""));        assertTrue(commandLine.getValues(option).isEmpty());    }    public void testProcessParent_Disabled()        throws OptionException {        final Switch option = buildDisplaySwitch();        final List args = list(""-disp"");        final WriteableCommandLine commandLine = commandLine(option, args);        final ListIterator iterator = args.listIterator();        option.process(commandLine, iterator);        assertFalse(iterator.hasNext());        assertTrue(commandLine.hasOption(option));        assertTrue(commandLine.hasOption(""+d""));        assertTrue(commandLine.hasOption(""-display""));        assertEquals(Boolean.FALSE, commandLine.getSwitch(""-d""));        assertTrue(commandLine.getValues(option).isEmpty());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()     */    public void testCanProcess() {        final Switch option = buildDisplaySwitch();        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), ""+d""));    }    public void testCanProcess_BadMatch() {        final Switch option = buildDisplaySwitch();        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), ""-dont""));    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()     */    public void testPrefixes() {        final Switch option = buildDisplaySwitch();        assertContentsEqual(list(""-"", ""+""), option.getPrefixes());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testProcess()     */    public void testProcess() {        // TODO Auto-generated method stub    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testTriggers()     */    public void testTriggers() {        final Switch option = buildDisplaySwitch();        assertContentsEqual(list(""-d"", ""+d"", ""-disp"", ""+disp"", ""+display"", ""-display""),                            option.getTriggers());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testValidate()     */    public void testValidate() {        final Parent option = buildDisplaySwitch();        final WriteableCommandLine commandLine = commandLine(option, list());        try {            option.validate(commandLine);            fail(""Missing an option"");        } catch (OptionException moe) {            assertSame(option, moe.getOption());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()     */    public void testAppendUsage() {        final Option option = buildDisplaySwitch();        final StringBuffer buffer = new StringBuffer();        option.appendUsage(buffer, DisplaySetting.ALL, null);        assertEquals(""+display|-display (+d|-d,+disp|-disp)"", buffer.toString());    }    public void testAppendUsage_NoAlias() {        final Option option = buildDisplaySwitch();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_ALIASES);        option.appendUsage(buffer, settings, null);        assertEquals(""+display|-display"", buffer.toString());    }    public void testAppendUsage_NoDisabled() {        final Option option = buildDisplaySwitch();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_SWITCH_DISABLED);        option.appendUsage(buffer, settings, null);        assertEquals(""+display (+d,+disp)"", buffer.toString());    }    public void testAppendUsage_NoEnabled() {        final Option option = buildDisplaySwitch();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_SWITCH_ENABLED);        option.appendUsage(buffer, settings, null);        assertEquals(""-display (-d,-disp)"", buffer.toString());    }    public void testAppendUsage_NoDisabledOrEnabled() {        final Option option = buildDisplaySwitch();        final StringBuffer buffer = new StringBuffer();        final Set settings = new HashSet(DisplaySetting.ALL);        settings.remove(DisplaySetting.DISPLAY_SWITCH_DISABLED);        settings.remove(DisplaySetting.DISPLAY_SWITCH_ENABLED);        option.appendUsage(buffer, settings, null);        assertEquals(""+display (+d,+disp)"", buffer.toString());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()     */    public void testGetPreferredName() {        final Option option = buildDisplaySwitch();        assertEquals(""+display"", option.getPreferredName());    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()     */    public void testGetDescription() {        final Option option = buildDisplaySwitch();        assertEquals(""Sets whether to display to screen"", option.getDescription());    }    public void testNullPreferredName() {        try {            new Switch(""+"", ""-"", null, null, ""Sets whether to display to screen"", true, null, null,                       'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),                         exp.getMessage());        }    }    public void testEmptyPreferredName() {        try {            new Switch(""+"", ""-"", """", null, ""Sets whether to display to screen"", true, null, null,                       'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),                         exp.getMessage());        }    }    public void testNullAliases() {        try {            new Switch(""+"", ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,                       null, 'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),                         exp.getMessage());        }    }    public void testNullEnablePrefix() {        try {            new Switch(null, ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,                       null, 'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_NO_ENABLED_PREFIX),                         exp.getMessage());        }    }    public void testNullDisablePrefix() {        try {            new Switch(""+"", null, ""display"", null, ""Sets whether to display to screen"", true, null,                       null, 'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_NO_DISABLED_PREFIX),                         exp.getMessage());        }    }    public void testEnabledPrefixStartsWithDisabledPrefix() {        try {            new Switch(""-"", ""-"", ""display"", null, ""Sets whether to display to screen"", true, null,                       null, 'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ENABLED_STARTS_WITH_DISABLED),                         exp.getMessage());        }    }    public void testDisabledPrefixStartsWithEnabledPrefix() {        try {            new Switch(""o"", ""on"", ""display"", null, ""Sets whether to display to screen"", true, null,                       null, 'd', null);        } catch (IllegalArgumentException exp) {            assertEquals(""wrong exception message"",                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_DISABLED_STARTWS_WITH_ENABLED),                         exp.getMessage());        }    }    /*     * (non-Javadoc)     *     * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()     */    public void testHelpLines() {        // TODO Auto-generated method stub    }}"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,17, under the License.
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,19,ackage org.apache.commons.cli2.resource;
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,21,mport java.util.Locale;
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,22,mport java.util.MissingResourceException;
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,23,mport java.util.ResourceBundle;
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,25,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,28, A utility class used to provide internationalisation support.
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,30, @author John Keyes
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,32,ublic class ResourceHelperTest extends TestCase {
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,33,** system property */
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,34,"rivate static final String PROP_LOCALE = ""org.apache.commons.cli2.resource.bundle"";"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,36,rivate static ResourceHelper helper;
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,38,** resource bundle */
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,39,rivate ResourceBundle bundle;
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,41,ublic void setUp() {
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,42,"ystem.setProperty(PROP_LOCALE, ""org.apache.commons.cli2.resource.TestBundle"");"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,43,elper = ResourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,46,ublic void tearDown() {
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,47,"ystem.setProperty(PROP_LOCALE, ""org.apache.commons.cli2.resource.CLIMessageBundle_en_US.properties"");"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,51, Create a new ResourceHelper for the specified class.
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,53, @param clazz the Class that requires some resources
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,55,ublic ResourceHelperTest() {
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,56,"uper(""ResourceHelperTest"");"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,59,ublic void testOverridden() {
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,60,"ssertEquals(""wrong message"", ""The class name \""ResourceHelper\"" is invalid."", helper.getMessage(""ClassValidator.bad.classname"", ""ResourceHelper""));"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,63,ublic void testNewMessage1Param() {
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,64,"ssertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message""));"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,67,ublic void testNewMessage2Params() {
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,68,"ssertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some""));"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,71,ublic void testNewMessage3Params() {
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,72,"ssertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some"", ""might""));"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,75,ublic void testNewMessage4Params() {
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,76,"ssertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some"", ""might"", ""say""));"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,79,ublic void testDefaultBundle() {
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,80,"ystem.setProperty(PROP_LOCALE, ""madeupname.properties"");"
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,81,elper = ResourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,82,"ssertEquals(""wrong message"", ""The class name \""ResourceHelper\"" is invalid."", helper.getMessage(""ClassValidator.bad.classname"", ""ResourceHelper""));"
True,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,src/test/org/apache/commons/cli2/resource/ResourceHelperTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * ""License""); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.cli2.resource;import java.util.Locale;import java.util.MissingResourceException;import java.util.ResourceBundle;import junit.framework.TestCase;/** * A utility class used to provide internationalisation support. * * @author John Keyes */public class ResourceHelperTest extends TestCase {    /** system property */    private static final String PROP_LOCALE = ""org.apache.commons.cli2.resource.bundle"";    private static ResourceHelper helper;    /** resource bundle */    private ResourceBundle bundle;    public void setUp() {    	System.setProperty(PROP_LOCALE, ""org.apache.commons.cli2.resource.TestBundle"");    	helper = ResourceHelper.getResourceHelper();    }    public void tearDown() {    	System.setProperty(PROP_LOCALE, ""org.apache.commons.cli2.resource.CLIMessageBundle_en_US.properties"");    }    /**     * Create a new ResourceHelper for the specified class.     *     * @param clazz the Class that requires some resources     */    public ResourceHelperTest() {    	super(""ResourceHelperTest"");    }    public void testOverridden() {    	assertEquals(""wrong message"", ""The class name \""ResourceHelper\"" is invalid."", helper.getMessage(""ClassValidator.bad.classname"", ""ResourceHelper""));    }    public void testNewMessage1Param() {    	assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message""));    }    public void testNewMessage2Params() {    	assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some""));    }    public void testNewMessage3Params() {    	assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some"", ""might""));    }    public void testNewMessage4Params() {    	assertEquals(""wrong message"", ""Some might say we will find a brighter day."", helper.getMessage(""test.message"", ""Some"", ""might"", ""say""));    }    public void testDefaultBundle() {    	System.setProperty(PROP_LOCALE, ""madeupname.properties"");    	helper = ResourceHelper.getResourceHelper();    	assertEquals(""wrong message"", ""The class name \""ResourceHelper\"" is invalid."", helper.getMessage(""ClassValidator.bad.classname"", ""ResourceHelper""));    }}"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,17,ackage org.apache.commons.cli2.util;
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,19,mport java.util.Collections;
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,20,mport java.util.List;
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,22,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,24,mport org.apache.commons.cli2.CLITestCase;
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,25,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,26,mport org.apache.commons.cli2.option.CommandTest;
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,27,mport org.apache.commons.cli2.option.DefaultOptionTest;
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,28,mport org.apache.commons.cli2.option.GroupTest;
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,29,mport org.apache.commons.cli2.option.ParentTest;
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,30,mport org.apache.commons.cli2.option.SwitchTest;
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,33, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,35,ublic class ComparatorsTest extends TestCase {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,36,ublic void testGroupFirst() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,37,inal Option o1 = GroupTest.buildAntGroup();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,38,inal Option o2 = ParentTest.buildLibParent();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,39,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,41,"ollections.sort(list, Comparators.groupFirst());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,43,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,44,"LITestCase.list(o1, o2),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,45,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,48,ublic void testGroupLast() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,49,inal Option o1 = GroupTest.buildAntGroup();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,50,inal Option o2 = ParentTest.buildLibParent();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,51,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,53,"ollections.sort(list, Comparators.groupLast());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,55,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,56,"LITestCase.list(o2, o1),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,57,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,60,ublic void testSwitchFirst() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,61,inal Option o1 = SwitchTest.buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,62,inal Option o2 = ParentTest.buildLibParent();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,63,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,65,"ollections.sort(list, Comparators.switchFirst());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,67,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,68,"LITestCase.list(o1, o2),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,69,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,72,ublic void testSwitchLast() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,73,inal Option o1 = SwitchTest.buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,74,inal Option o2 = ParentTest.buildLibParent();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,75,"/final Option o3 = new SwitchBuilder().withName(""hidden"").create();"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,76,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,78,"ollections.sort(list, Comparators.switchLast());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,80,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,81,"LITestCase.list(o2, o1),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,82,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,85,ublic void testCommandFirst() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,86,inal Option o1 = CommandTest.buildCommitCommand();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,87,inal Option o2 = ParentTest.buildLibParent();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,88,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,90,"ollections.sort(list, Comparators.commandFirst());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,92,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,93,"LITestCase.list(o1, o2),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,94,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,97,ublic void testCommandLast() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,98,inal Option o1 = CommandTest.buildCommitCommand();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,99,inal Option o2 = ParentTest.buildLibParent();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,100,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,102,"ollections.sort(list, Comparators.commandLast());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,104,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,105,"LITestCase.list(o2, o1),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,106,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,109,ublic void testDefaultOptionFirst() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,110,inal Option o1 = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,111,inal Option o2 = CommandTest.buildCommitCommand();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,112,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,114,"ollections.sort(list, Comparators.defaultOptionFirst());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,116,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,117,"LITestCase.list(o1, o2),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,118,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,121,ublic void testDefaultOptionLast() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,122,inal Option o1 = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,123,inal Option o2 = CommandTest.buildCommitCommand();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,124,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,126,"ollections.sort(list, Comparators.defaultOptionLast());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,128,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,129,"LITestCase.list(o2, o1),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,130,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,133,ublic void testNamedFirst() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,134,inal Option o1 = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,135,inal Option o2 = ParentTest.buildLibParent();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,136,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,138,"ollections.sort(list, Comparators.namedFirst(""--help""));"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,140,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,141,"LITestCase.list(o1, o2),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,142,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,145,ublic void testNamedLast() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,146,inal Option o1 = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,147,inal Option o2 = ParentTest.buildLibParent();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,148,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,150,"ollections.sort(list, Comparators.namedLast(""--help""));"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,152,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,153,"LITestCase.list(o2, o1),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,154,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,157,ublic void testPreferredNameFirst() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,158,inal Option o1 = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,159,inal Option o2 = ParentTest.buildLibParent();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,160,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,162,"ollections.sort(list, Comparators.preferredNameFirst());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,164,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,165,"LITestCase.list(o1, o2),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,166,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,169,ublic void testPreferredNameLast() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,170,inal Option o1 = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,171,inal Option o2 = ParentTest.buildLibParent();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,172,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,174,"ollections.sort(list, Comparators.preferredNameLast());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,176,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,177,"LITestCase.list(o2, o1),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,178,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,181,ublic void testRequiredFirst() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,182,inal Option o1 = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,183,inal Option o2 = DefaultOptionTest.buildXOption();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,184,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,186,"ollections.sort(list, Comparators.requiredFirst());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,188,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,189,"LITestCase.list(o2, o1),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,190,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,193,ublic void testRequiredLast() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,194,inal Option o1 = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,195,inal Option o2 = DefaultOptionTest.buildXOption();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,196,"inal List list = CLITestCase.list(o1, o2);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,198,"ollections.sort(list, Comparators.requiredLast());"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,200,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,201,"LITestCase.list(o1, o2),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,202,ist);
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,205,ublic void testChained() {
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,206,inal Option o1 = CommandTest.buildCommitCommand();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,207,inal Option o2 = SwitchTest.buildDisplaySwitch();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,208,inal Option o3 = DefaultOptionTest.buildHelpOption();
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,209,"inal List list = CLITestCase.list(o1, o2, o3);"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,211,ollections.sort(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,212,"ist,"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,213,omparators.chain(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,214,"omparators.namedFirst(""--help""),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,215,omparators.commandFirst()));
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,217,LITestCase.assertListContentsEqual(
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,218,"LITestCase.list(o3, o1, o2),"
False,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,219,ist);
True,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,src/test/org/apache/commons/cli2/util/ComparatorsTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.util;import java.util.Collections;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.CLITestCase;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.option.CommandTest;import org.apache.commons.cli2.option.DefaultOptionTest;import org.apache.commons.cli2.option.GroupTest;import org.apache.commons.cli2.option.ParentTest;import org.apache.commons.cli2.option.SwitchTest;/** * @author Rob Oxspring */public class ComparatorsTest extends TestCase {    public void testGroupFirst() {        final Option o1 = GroupTest.buildAntGroup();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.groupFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testGroupLast() {        final Option o1 = GroupTest.buildAntGroup();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.groupLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testSwitchFirst() {        final Option o1 = SwitchTest.buildDisplaySwitch();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.switchFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testSwitchLast() {        final Option o1 = SwitchTest.buildDisplaySwitch();        final Option o2 = ParentTest.buildLibParent();        //final Option o3 = new SwitchBuilder().withName(""hidden"").create();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.switchLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testCommandFirst() {        final Option o1 = CommandTest.buildCommitCommand();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.commandFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testCommandLast() {        final Option o1 = CommandTest.buildCommitCommand();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.commandLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testDefaultOptionFirst() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = CommandTest.buildCommitCommand();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.defaultOptionFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testDefaultOptionLast() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = CommandTest.buildCommitCommand();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.defaultOptionLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testNamedFirst() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.namedFirst(""--help""));        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testNamedLast() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.namedLast(""--help""));        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testPreferredNameFirst() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.preferredNameFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testPreferredNameLast() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = ParentTest.buildLibParent();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.preferredNameLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testRequiredFirst() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = DefaultOptionTest.buildXOption();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.requiredFirst());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o2, o1),            list);    }    public void testRequiredLast() {        final Option o1 = DefaultOptionTest.buildHelpOption();        final Option o2 = DefaultOptionTest.buildXOption();        final List list = CLITestCase.list(o1, o2);        Collections.sort(list, Comparators.requiredLast());        CLITestCase.assertListContentsEqual(            CLITestCase.list(o1, o2),            list);    }    public void testChained() {        final Option o1 = CommandTest.buildCommitCommand();        final Option o2 = SwitchTest.buildDisplaySwitch();        final Option o3 = DefaultOptionTest.buildHelpOption();        final List list = CLITestCase.list(o1, o2, o3);        Collections.sort(            list,            Comparators.chain(                Comparators.namedFirst(""--help""),                Comparators.commandFirst()));        CLITestCase.assertListContentsEqual(            CLITestCase.list(o3, o1, o2),            list);    }}"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,2, Licensed to the Apache Software Foundation (ASF) under one
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,3, or more contributor license agreements.  See the NOTICE file
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,4, distributed with this work for additional information
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,5, regarding copyright ownership.  The ASF licenses this file
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,6," to you under the Apache License, Version 2.0 (the"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,7," ""License""); you may not use this file except in compliance"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,8, with the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,10, http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,12," Unless required by applicable law or agreed to in writing,"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,13, software distributed under the License is distributed on an
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,14," ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,15," KIND, either express or implied.  See the License for the"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,16, specific language governing permissions and limitations
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,17, under the License.
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,19,ackage org.apache.commons.cli2.util;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,21,mport java.io.BufferedReader;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,22,mport java.io.IOException;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,23,mport java.io.PrintWriter;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,24,mport java.io.StringReader;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,25,mport java.io.StringWriter;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,27,mport java.util.Collections;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,28,mport java.util.Comparator;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,29,mport java.util.HashSet;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,30,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,31,mport java.util.List;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,32,mport java.util.Set;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,34,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,36,mport org.apache.commons.cli2.DisplaySetting;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,37,mport org.apache.commons.cli2.Group;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,38,mport org.apache.commons.cli2.Option;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,39,mport org.apache.commons.cli2.OptionException;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,40,mport org.apache.commons.cli2.builder.DefaultOptionBuilder;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,41,mport org.apache.commons.cli2.builder.GroupBuilder;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,42,mport org.apache.commons.cli2.option.ArgumentTest;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,43,mport org.apache.commons.cli2.option.DefaultOptionTest;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,44,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,45,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,47,ublic class HelpFormatterTest
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,48,xtends TestCase {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,49,rivate ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,50,rivate HelpFormatter helpFormatter;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,51,rivate Option verbose;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,52,rivate Group options;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,54,ublic void setUp() {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,55,"elpFormatter = new HelpFormatter(""|*"", ""*-*"", ""*|"", 80);"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,56,"elpFormatter.setDivider(""+------------------------------------------------------------------------------+"");"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,57,"elpFormatter.setHeader(""Apache Commons CLI"");"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,58,"elpFormatter.setFooter(""Copyright 2003\nApache Software Foundation"");"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,59,"elpFormatter.setShellCommand(""ant"");"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,61,erbose =
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,62,"ew DefaultOptionBuilder().withLongName(""verbose"")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,63,"withDescription(""print the version information and exit"")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,64,create();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,66,ptions =
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,67,"ew GroupBuilder().withName(""options"").withOption(DefaultOptionTest.buildHelpOption())"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,68,withOption(ArgumentTest.buildTargetsArgument())
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,69,"withOption(new DefaultOptionBuilder().withLongName(""diagnostics"")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,70,"withDescription(""print information that might be helpful to diagnose or report problems."")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,71,create())
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,72,"withOption(new DefaultOptionBuilder().withLongName(""projecthelp"")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,73,"withDescription(""print project help information"")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,74,create()).withOption(verbose)
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,75,create();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,77,elpFormatter.setGroup(options);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,80,ublic void testPrint()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,81,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,82,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,83,inal PrintWriter pw = new PrintWriter(writer);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,84,elpFormatter.setPrintWriter(pw);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,85,elpFormatter.print();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,87,/ test shell
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,88,"ssertEquals(""incorrect shell command"", ""ant"", helpFormatter.getShellCommand());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,90,/ test group
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,91,"ssertEquals(""incorrect group"", this.options, helpFormatter.getGroup());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,93,/ test pagewidth
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,94,"ssertEquals(""incorrect page width"", 76, helpFormatter.getPageWidth());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,96,/ test pw
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,97,"ssertEquals(""incorrect print writer"", pw, helpFormatter.getPrintWriter());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,99,/ test divider
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,100,"ssertEquals(""incorrect divider"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,102,elpFormatter.getDivider());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,104,/ test header
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,105,"ssertEquals(""incorrect header"", ""Apache Commons CLI"", helpFormatter.getHeader());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,107,/ test footer
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,108,"ssertEquals(""incorrect footer"", ""Copyright 2003\nApache Software Foundation"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,109,elpFormatter.getFooter());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,111,/ test gutters
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,112,"ssertEquals(""incorrect left gutter"", ""|*"", helpFormatter.getGutterLeft());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,113,"ssertEquals(""incorrect right gutter"", ""*|"", helpFormatter.getGutterRight());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,114,"ssertEquals(""incorrect center gutter"", ""*-*"", helpFormatter.getGutterCenter());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,116,inal BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,117,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,118,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,119,"ssertEquals(""|*Apache Commons CLI                                                          *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,120,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,121,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,122,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,123,"ssertEquals(""|*Usage:                                                                      *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,124,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,125,"ssertEquals(""|*ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2>    *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,126,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,127,"ssertEquals(""|*...]]                                                                       *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,128,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,129,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,130,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,131,"ssertEquals(""|*options              *-*                                                    *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,132,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,133,"ssertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,134,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,135,"ssertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,136,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,137,"ssertEquals(""|*                     *-*or report problems.                                 *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,138,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,139,"ssertEquals(""|*  --projecthelp      *-*print project help information                      *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,140,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,141,"ssertEquals(""|*  --verbose          *-*print the version information and exit              *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,142,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,143,"ssertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,144,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,145,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,146,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,147,"ssertEquals(""|*Copyright 2003                                                              *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,148,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,149,"ssertEquals(""|*Apache Software Foundation                                                  *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,150,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,151,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,152,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,153,ssertNull(reader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,156,ublic void testComparator()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,157,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,158,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,159,inal PrintWriter pw = new PrintWriter(writer);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,160,elpFormatter.setPrintWriter(pw);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,162,inal Comparator comparator = new OptionComparator();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,163,elpFormatter.setComparator(comparator);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,164,elpFormatter.print();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,166,/ test comparator
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,167,"ssertEquals(""invalid comparator"", comparator, helpFormatter.getComparator());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,169,inal BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,170,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,171,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,172,"ssertEquals(""|*Apache Commons CLI                                                          *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,173,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,174,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,175,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,176,"ssertEquals(""|*Usage:                                                                      *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,177,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,178,"ssertEquals(""|*ant [--verbose --projecthelp --help --diagnostics] [<target1> [<target2>    *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,179,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,180,"ssertEquals(""|*...]]                                                                       *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,181,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,182,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,183,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,184,"ssertEquals(""|*options              *-*                                                    *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,185,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,186,"ssertEquals(""|*  --verbose          *-*print the version information and exit              *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,187,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,188,"ssertEquals(""|*  --projecthelp      *-*print project help information                      *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,189,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,190,"ssertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,191,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,192,"ssertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,193,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,194,"ssertEquals(""|*                     *-*or report problems.                                 *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,195,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,196,"ssertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,197,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,198,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,199,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,200,"ssertEquals(""|*Copyright 2003                                                              *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,201,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,202,"ssertEquals(""|*Apache Software Foundation                                                  *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,203,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,204,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,205,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,206,ssertNull(reader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,209,ublic void testPrintHelp()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,210,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,211,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,212,elpFormatter.setPrintWriter(new PrintWriter(writer));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,213,elpFormatter.printHelp();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,215,inal BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,216,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,217,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,218,"ssertEquals(""|*options              *-*                                                    *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,219,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,220,"ssertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,221,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,222,"ssertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,223,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,224,"ssertEquals(""|*                     *-*or report problems.                                 *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,225,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,226,"ssertEquals(""|*  --projecthelp      *-*print project help information                      *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,227,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,228,"ssertEquals(""|*  --verbose          *-*print the version information and exit              *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,229,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,230,"ssertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,231,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,232,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,233,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,234,ssertNull(reader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,237,ublic void testPrintHelp_WithException()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,238,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,239,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,240,elpFormatter.setPrintWriter(new PrintWriter(writer));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,241,elpFormatter.setException(new OptionException(verbose));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,242,elpFormatter.printHelp();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,244,/System.out.println(writer);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,245,inal BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,246,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,247,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,248,"ssertEquals(""|*--verbose*-*print the version information and exit                          *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,249,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,250,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,251,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,252,ssertNull(reader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,255,ublic void testPrintHelp_TooNarrow()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,256,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,257,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,258,"elpFormatter = new HelpFormatter(""<"", ""="", "">"", 4);"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,259,elpFormatter.setGroup(options);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,260,elpFormatter.setPrintWriter(new PrintWriter(writer));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,261,elpFormatter.printHelp();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,263,inal BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,264,"ssertEquals(""<options              = >"", reader.readLine());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,265,"ssertEquals(""<  --help (-?,-h)     =D>"", reader.readLine());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,266,"ssertEquals(""<                     =i>"", reader.readLine());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,268,/ lots more lines unchecked
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,271,ublic void testPrintException()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,272,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,273,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,274,elpFormatter.setPrintWriter(new PrintWriter(writer));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,275,"elpFormatter.setException(new OptionException(verbose, ResourceConstants.MISSING_OPTION));"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,276,elpFormatter.printException();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,278,/System.out.println(writer);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,279,inal BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,280,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,281,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,282,"ssertEquals(""|*Missing option --verbose                                                    *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,283,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,284,ssertNull(reader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,287,ublic void testPrintUsage()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,288,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,289,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,290,elpFormatter.setPrintWriter(new PrintWriter(writer));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,291,elpFormatter.printUsage();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,293,inal BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,294,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,295,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,296,"ssertEquals(""|*Usage:                                                                      *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,297,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,298,"ssertEquals(""|*ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2>    *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,299,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,300,"ssertEquals(""|*...]]                                                                       *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,301,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,302,ssertNull(reader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,305,ublic void testPrintHeader()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,306,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,307,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,308,elpFormatter.setPrintWriter(new PrintWriter(writer));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,309,elpFormatter.printHeader();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,311,inal BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,312,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,313,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,314,"ssertEquals(""|*Apache Commons CLI                                                          *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,315,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,316,ssertNull(reader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,319,ublic void testPrintFooter()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,320,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,321,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,322,elpFormatter.setPrintWriter(new PrintWriter(writer));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,323,elpFormatter.printFooter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,325,inal BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,326,"ssertEquals(""|*Copyright 2003                                                              *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,327,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,328,"ssertEquals(""|*Apache Software Foundation                                                  *|"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,329,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,330,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,331,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,332,ssertNull(reader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,335,ublic void testPrintDivider()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,336,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,337,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,338,elpFormatter.setPrintWriter(new PrintWriter(writer));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,339,elpFormatter.printDivider();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,341,inal BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,342,"ssertEquals(""+------------------------------------------------------------------------------+"","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,343,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,344,ssertNull(reader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,347,ublic void testWrap() {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,348,"inal Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 30).iterator();"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,349,"ssertEquals(""Apache Software Foundation"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,350,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,353,ublic void testWrap_WrapNeeded() {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,354,"inal Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 20).iterator();"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,355,"ssertEquals(""Apache Software"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,356,"ssertEquals(""Foundation"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,357,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,360,ublic void testWrap_BeforeSpace() {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,361,"inal Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 16).iterator();"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,362,"ssertEquals(""Apache Software"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,363,"ssertEquals(""Foundation"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,364,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,367,ublic void testWrap_AfterSpace() {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,368,"inal Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 17).iterator();"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,369,"ssertEquals(""Apache Software"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,370,"ssertEquals(""Foundation"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,371,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,374,ublic void testWrap_InWord() {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,375,"inal Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 8).iterator();"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,376,"ssertEquals(""Apache"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,377,"ssertEquals(""Software"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,378,"ssertEquals(""Foundati"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,379,"ssertEquals(""on"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,380,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,383,ublic void testWrap_NewLine() {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,384,"inal Iterator i = HelpFormatter.wrap(""\nApache Software Foundation\n"", 30).iterator();"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,385,"ssertEquals("""", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,386,"ssertEquals(""Apache Software Foundation"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,387,"ssertEquals("""", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,388,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,391,ublic void testWrap_NewLine2() {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,392,ist wrapped =
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,393,"elpFormatter.wrap(""A really quite long general description of the option with specific alternatives documented:\n"" +"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,394,"  Indented special case\n"" + ""  Alternative scenario"", 30);"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,396,inal Iterator i = wrapped.iterator();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,398,"ssertEquals(""A really quite long general"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,399,"ssertEquals(""description of the option"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,400,"ssertEquals(""with specific alternatives"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,401,"ssertEquals(""documented:"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,402,"ssertEquals(""  Indented special case"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,403,"ssertEquals(""  Alternative scenario"", i.next());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,404,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,407,ublic void testWrap_Below1Length() {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,408,ry {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,409,"elpFormatter.wrap(""Apache Software Foundation"", -1);"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,410,"ail(""IllegalArgumentException"");"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,411, catch (IllegalArgumentException e) {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,412,"ssertEquals(resources.getMessage(ResourceConstants.HELPFORMATTER_WIDTH_TOO_NARROW,"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,413,"ew Object[] { new Integer(-1) }), e.getMessage());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,417,ublic void testPad()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,418,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,419,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,420,"elpFormatter.pad(""hello"", 10, new PrintWriter(writer));"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,421,"ssertEquals(""hello     "", writer.toString());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,424,ublic void testPad_Null()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,425,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,426,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,427,"elpFormatter.pad(null, 10, new PrintWriter(writer));"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,428,"ssertEquals(""          "", writer.toString());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,431,ublic void testPad_TooLong()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,432,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,433,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,434,"elpFormatter.pad(""hello world"", 10, new PrintWriter(writer));"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,435,"ssertEquals(""hello world"", writer.toString());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,438,ublic void testPad_TooShort()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,439,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,440,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,441,"elpFormatter.pad(""hello world"", -5, new PrintWriter(writer));"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,442,"ssertEquals(""hello world"", writer.toString());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,445,ublic void testGutters()
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,446,hrows IOException {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,447,"elpFormatter = new HelpFormatter(null, null, null, 80);"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,448,"elpFormatter.setShellCommand(""ant"");"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,450,inal Set lusage = new HashSet();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,451,usage.add(DisplaySetting.DISPLAY_ALIASES);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,452,usage.add(DisplaySetting.DISPLAY_GROUP_NAME);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,453,elpFormatter.setLineUsageSettings(lusage);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,455,/ test line usage
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,456,"ssertEquals(""incorrect line usage"", lusage, helpFormatter.getLineUsageSettings());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,458,inal Set fusage = new HashSet();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,459,usage.add(DisplaySetting.DISPLAY_PARENT_CHILDREN);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,460,usage.add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,461,usage.add(DisplaySetting.DISPLAY_GROUP_OUTER);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,462,usage.add(DisplaySetting.DISPLAY_GROUP_EXPANDED);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,463,usage.add(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,464,usage.add(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,465,usage.add(DisplaySetting.DISPLAY_SWITCH_ENABLED);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,466,usage.add(DisplaySetting.DISPLAY_SWITCH_DISABLED);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,467,usage.add(DisplaySetting.DISPLAY_PROPERTY_OPTION);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,468,usage.add(DisplaySetting.DISPLAY_PARENT_CHILDREN);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,469,usage.add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,470,usage.add(DisplaySetting.DISPLAY_OPTIONAL);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,471,elpFormatter.setFullUsageSettings(fusage);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,473,/ test line usage
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,474,"ssertEquals(""incorrect full usage"", fusage, helpFormatter.getFullUsageSettings());"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,476,inal Set dsettings = new HashSet();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,477,settings.add(DisplaySetting.DISPLAY_GROUP_NAME);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,478,settings.add(DisplaySetting.DISPLAY_GROUP_EXPANDED);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,479,settings.add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,481,elpFormatter.setDisplaySettings(dsettings);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,483,erbose =
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,484,"ew DefaultOptionBuilder().withLongName(""verbose"")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,485,"withDescription(""print the version information and exit"")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,486,create();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,488,ptions =
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,489,"ew GroupBuilder().withName(""options"").withOption(DefaultOptionTest.buildHelpOption())"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,490,withOption(ArgumentTest.buildTargetsArgument())
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,491,"withOption(new DefaultOptionBuilder().withLongName(""diagnostics"")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,492,"withDescription(""print information that might be helpful to diagnose or report problems."")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,493,create())
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,494,"withOption(new DefaultOptionBuilder().withLongName(""projecthelp"")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,495,"withDescription(""print project help information"")"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,496,create()).withOption(verbose)
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,497,create();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,499,elpFormatter.setGroup(options);
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,501,/ test default gutters
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,502,"ssertEquals(""incorrect left gutter"", HelpFormatter.DEFAULT_GUTTER_LEFT,"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,503,elpFormatter.getGutterLeft());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,504,"ssertEquals(""incorrect right gutter"", HelpFormatter.DEFAULT_GUTTER_RIGHT,"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,505,elpFormatter.getGutterRight());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,506,"ssertEquals(""incorrect center gutter"", HelpFormatter.DEFAULT_GUTTER_CENTER,"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,507,elpFormatter.getGutterCenter());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,509,inal StringWriter writer = new StringWriter();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,510,elpFormatter.setPrintWriter(new PrintWriter(writer));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,511,elpFormatter.print();
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,513,inal BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,514,"ssertEquals(""Usage:                                                                          "","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,515,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,516,"ssertEquals(""ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2> ...]]  "","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,517,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,518,"ssertEquals(""options                                                                         "","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,519,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,520,"ssertEquals(""  --help (-?,-h)         Displays the help                                      "","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,521,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,522,"ssertEquals(""  --diagnostics          print information that might be helpful to diagnose or "","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,523,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,524,"ssertEquals(""                         report problems.                                       "","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,525,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,526,"ssertEquals(""  --projecthelp          print project help information                         "","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,527,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,528,"ssertEquals(""  --verbose              print the version information and exit                 "","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,529,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,530,"ssertEquals(""  target [target ...]    The targets ant should build                           "","
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,531,eader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,532,ssertNull(reader.readLine());
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,537,lass OptionComparator implements Comparator {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,538,"ublic int compare(Object o1,"
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,539,bject o2) {
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,540,ption opt1 = (Option) o1;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,541,ption opt2 = (Option) o2;
False,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,543,eturn -opt1.getPreferredName().compareTo(opt2.getPreferredName());
True,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,src/test/org/apache/commons/cli2/util/HelpFormatterTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * ""License""); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */package org.apache.commons.cli2.util;import java.io.BufferedReader;import java.io.IOException;import java.io.PrintWriter;import java.io.StringReader;import java.io.StringWriter;import java.util.Collections;import java.util.Comparator;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import junit.framework.TestCase;import org.apache.commons.cli2.DisplaySetting;import org.apache.commons.cli2.Group;import org.apache.commons.cli2.Option;import org.apache.commons.cli2.OptionException;import org.apache.commons.cli2.builder.DefaultOptionBuilder;import org.apache.commons.cli2.builder.GroupBuilder;import org.apache.commons.cli2.option.ArgumentTest;import org.apache.commons.cli2.option.DefaultOptionTest;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;public class HelpFormatterTest    extends TestCase {    private ResourceHelper resources = ResourceHelper.getResourceHelper();    private HelpFormatter helpFormatter;    private Option verbose;    private Group options;    public void setUp() {        helpFormatter = new HelpFormatter(""|*"", ""*-*"", ""*|"", 80);        helpFormatter.setDivider(""+------------------------------------------------------------------------------+"");        helpFormatter.setHeader(""Apache Commons CLI"");        helpFormatter.setFooter(""Copyright 2003\nApache Software Foundation"");        helpFormatter.setShellCommand(""ant"");        verbose =            new DefaultOptionBuilder().withLongName(""verbose"")                                      .withDescription(""print the version information and exit"")                                      .create();        options =            new GroupBuilder().withName(""options"").withOption(DefaultOptionTest.buildHelpOption())                              .withOption(ArgumentTest.buildTargetsArgument())                              .withOption(new DefaultOptionBuilder().withLongName(""diagnostics"")                                                                    .withDescription(""print information that might be helpful to diagnose or report problems."")                                                                    .create())                              .withOption(new DefaultOptionBuilder().withLongName(""projecthelp"")                                                                    .withDescription(""print project help information"")                                                                    .create()).withOption(verbose)                              .create();        helpFormatter.setGroup(options);    }    public void testPrint()        throws IOException {        final StringWriter writer = new StringWriter();        final PrintWriter pw = new PrintWriter(writer);        helpFormatter.setPrintWriter(pw);        helpFormatter.print();        // test shell        assertEquals(""incorrect shell command"", ""ant"", helpFormatter.getShellCommand());        // test group        assertEquals(""incorrect group"", this.options, helpFormatter.getGroup());        // test pagewidth        assertEquals(""incorrect page width"", 76, helpFormatter.getPageWidth());        // test pw        assertEquals(""incorrect print writer"", pw, helpFormatter.getPrintWriter());        // test divider        assertEquals(""incorrect divider"",                     ""+------------------------------------------------------------------------------+"",                     helpFormatter.getDivider());        // test header        assertEquals(""incorrect header"", ""Apache Commons CLI"", helpFormatter.getHeader());        // test footer        assertEquals(""incorrect footer"", ""Copyright 2003\nApache Software Foundation"",                     helpFormatter.getFooter());        // test gutters        assertEquals(""incorrect left gutter"", ""|*"", helpFormatter.getGutterLeft());        assertEquals(""incorrect right gutter"", ""*|"", helpFormatter.getGutterRight());        assertEquals(""incorrect center gutter"", ""*-*"", helpFormatter.getGutterCenter());        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Apache Commons CLI                                                          *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Usage:                                                                      *|"",                     reader.readLine());        assertEquals(""|*ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2>    *|"",                     reader.readLine());        assertEquals(""|*...]]                                                                       *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*options              *-*                                                    *|"",                     reader.readLine());        assertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"",                     reader.readLine());        assertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"",                     reader.readLine());        assertEquals(""|*                     *-*or report problems.                                 *|"",                     reader.readLine());        assertEquals(""|*  --projecthelp      *-*print project help information                      *|"",                     reader.readLine());        assertEquals(""|*  --verbose          *-*print the version information and exit              *|"",                     reader.readLine());        assertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Copyright 2003                                                              *|"",                     reader.readLine());        assertEquals(""|*Apache Software Foundation                                                  *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testComparator()        throws IOException {        final StringWriter writer = new StringWriter();        final PrintWriter pw = new PrintWriter(writer);        helpFormatter.setPrintWriter(pw);        final Comparator comparator = new OptionComparator();        helpFormatter.setComparator(comparator);        helpFormatter.print();        // test comparator        assertEquals(""invalid comparator"", comparator, helpFormatter.getComparator());        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Apache Commons CLI                                                          *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Usage:                                                                      *|"",                     reader.readLine());        assertEquals(""|*ant [--verbose --projecthelp --help --diagnostics] [<target1> [<target2>    *|"",                     reader.readLine());        assertEquals(""|*...]]                                                                       *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*options              *-*                                                    *|"",                     reader.readLine());        assertEquals(""|*  --verbose          *-*print the version information and exit              *|"",                     reader.readLine());        assertEquals(""|*  --projecthelp      *-*print project help information                      *|"",                     reader.readLine());        assertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"",                     reader.readLine());        assertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"",                     reader.readLine());        assertEquals(""|*                     *-*or report problems.                                 *|"",                     reader.readLine());        assertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Copyright 2003                                                              *|"",                     reader.readLine());        assertEquals(""|*Apache Software Foundation                                                  *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintHelp()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printHelp();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*options              *-*                                                    *|"",                     reader.readLine());        assertEquals(""|*  --help (-?,-h)     *-*Displays the help                                   *|"",                     reader.readLine());        assertEquals(""|*  --diagnostics      *-*print information that might be helpful to diagnose *|"",                     reader.readLine());        assertEquals(""|*                     *-*or report problems.                                 *|"",                     reader.readLine());        assertEquals(""|*  --projecthelp      *-*print project help information                      *|"",                     reader.readLine());        assertEquals(""|*  --verbose          *-*print the version information and exit              *|"",                     reader.readLine());        assertEquals(""|*  target [target ...]*-*The targets ant should build                        *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintHelp_WithException()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.setException(new OptionException(verbose));        helpFormatter.printHelp();        //System.out.println(writer);        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*--verbose*-*print the version information and exit                          *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintHelp_TooNarrow()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter = new HelpFormatter(""<"", ""="", "">"", 4);        helpFormatter.setGroup(options);        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printHelp();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""<options              = >"", reader.readLine());        assertEquals(""<  --help (-?,-h)     =D>"", reader.readLine());        assertEquals(""<                     =i>"", reader.readLine());        // lots more lines unchecked    }    public void testPrintException()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.setException(new OptionException(verbose, ResourceConstants.MISSING_OPTION));        helpFormatter.printException();        //System.out.println(writer);        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Missing option --verbose                                                    *|"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintUsage()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printUsage();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Usage:                                                                      *|"",                     reader.readLine());        assertEquals(""|*ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2>    *|"",                     reader.readLine());        assertEquals(""|*...]]                                                                       *|"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintHeader()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printHeader();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertEquals(""|*Apache Commons CLI                                                          *|"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintFooter()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printFooter();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""|*Copyright 2003                                                              *|"",                     reader.readLine());        assertEquals(""|*Apache Software Foundation                                                  *|"",                     reader.readLine());        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testPrintDivider()        throws IOException {        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.printDivider();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""+------------------------------------------------------------------------------+"",                     reader.readLine());        assertNull(reader.readLine());    }    public void testWrap() {        final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 30).iterator();        assertEquals(""Apache Software Foundation"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_WrapNeeded() {        final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 20).iterator();        assertEquals(""Apache Software"", i.next());        assertEquals(""Foundation"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_BeforeSpace() {        final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 16).iterator();        assertEquals(""Apache Software"", i.next());        assertEquals(""Foundation"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_AfterSpace() {        final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 17).iterator();        assertEquals(""Apache Software"", i.next());        assertEquals(""Foundation"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_InWord() {        final Iterator i = HelpFormatter.wrap(""Apache Software Foundation"", 8).iterator();        assertEquals(""Apache"", i.next());        assertEquals(""Software"", i.next());        assertEquals(""Foundati"", i.next());        assertEquals(""on"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_NewLine() {        final Iterator i = HelpFormatter.wrap(""\nApache Software Foundation\n"", 30).iterator();        assertEquals("""", i.next());        assertEquals(""Apache Software Foundation"", i.next());        assertEquals("""", i.next());        assertFalse(i.hasNext());    }    public void testWrap_NewLine2() {        List wrapped =            HelpFormatter.wrap(""A really quite long general description of the option with specific alternatives documented:\n"" +                               ""  Indented special case\n"" + ""  Alternative scenario"", 30);        final Iterator i = wrapped.iterator();        assertEquals(""A really quite long general"", i.next());        assertEquals(""description of the option"", i.next());        assertEquals(""with specific alternatives"", i.next());        assertEquals(""documented:"", i.next());        assertEquals(""  Indented special case"", i.next());        assertEquals(""  Alternative scenario"", i.next());        assertFalse(i.hasNext());    }    public void testWrap_Below1Length() {        try {            HelpFormatter.wrap(""Apache Software Foundation"", -1);            fail(""IllegalArgumentException"");        } catch (IllegalArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.HELPFORMATTER_WIDTH_TOO_NARROW,                                              new Object[] { new Integer(-1) }), e.getMessage());        }    }    public void testPad()        throws IOException {        final StringWriter writer = new StringWriter();        HelpFormatter.pad(""hello"", 10, new PrintWriter(writer));        assertEquals(""hello     "", writer.toString());    }    public void testPad_Null()        throws IOException {        final StringWriter writer = new StringWriter();        HelpFormatter.pad(null, 10, new PrintWriter(writer));        assertEquals(""          "", writer.toString());    }    public void testPad_TooLong()        throws IOException {        final StringWriter writer = new StringWriter();        HelpFormatter.pad(""hello world"", 10, new PrintWriter(writer));        assertEquals(""hello world"", writer.toString());    }    public void testPad_TooShort()        throws IOException {        final StringWriter writer = new StringWriter();        HelpFormatter.pad(""hello world"", -5, new PrintWriter(writer));        assertEquals(""hello world"", writer.toString());    }    public void testGutters()        throws IOException {        helpFormatter = new HelpFormatter(null, null, null, 80);        helpFormatter.setShellCommand(""ant"");        final Set lusage = new HashSet();        lusage.add(DisplaySetting.DISPLAY_ALIASES);        lusage.add(DisplaySetting.DISPLAY_GROUP_NAME);        helpFormatter.setLineUsageSettings(lusage);        // test line usage        assertEquals(""incorrect line usage"", lusage, helpFormatter.getLineUsageSettings());        final Set fusage = new HashSet();        fusage.add(DisplaySetting.DISPLAY_PARENT_CHILDREN);        fusage.add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);        fusage.add(DisplaySetting.DISPLAY_GROUP_OUTER);        fusage.add(DisplaySetting.DISPLAY_GROUP_EXPANDED);        fusage.add(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);        fusage.add(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);        fusage.add(DisplaySetting.DISPLAY_SWITCH_ENABLED);        fusage.add(DisplaySetting.DISPLAY_SWITCH_DISABLED);        fusage.add(DisplaySetting.DISPLAY_PROPERTY_OPTION);        fusage.add(DisplaySetting.DISPLAY_PARENT_CHILDREN);        fusage.add(DisplaySetting.DISPLAY_PARENT_ARGUMENT);        fusage.add(DisplaySetting.DISPLAY_OPTIONAL);        helpFormatter.setFullUsageSettings(fusage);        // test line usage        assertEquals(""incorrect full usage"", fusage, helpFormatter.getFullUsageSettings());        final Set dsettings = new HashSet();        dsettings.add(DisplaySetting.DISPLAY_GROUP_NAME);        dsettings.add(DisplaySetting.DISPLAY_GROUP_EXPANDED);        dsettings.add(DisplaySetting.DISPLAY_GROUP_ARGUMENT);        helpFormatter.setDisplaySettings(dsettings);        verbose =            new DefaultOptionBuilder().withLongName(""verbose"")                                      .withDescription(""print the version information and exit"")                                      .create();        options =            new GroupBuilder().withName(""options"").withOption(DefaultOptionTest.buildHelpOption())                              .withOption(ArgumentTest.buildTargetsArgument())                              .withOption(new DefaultOptionBuilder().withLongName(""diagnostics"")                                                                    .withDescription(""print information that might be helpful to diagnose or report problems."")                                                                    .create())                              .withOption(new DefaultOptionBuilder().withLongName(""projecthelp"")                                                                    .withDescription(""print project help information"")                                                                    .create()).withOption(verbose)                              .create();        helpFormatter.setGroup(options);        // test default gutters        assertEquals(""incorrect left gutter"", HelpFormatter.DEFAULT_GUTTER_LEFT,                     helpFormatter.getGutterLeft());        assertEquals(""incorrect right gutter"", HelpFormatter.DEFAULT_GUTTER_RIGHT,                     helpFormatter.getGutterRight());        assertEquals(""incorrect center gutter"", HelpFormatter.DEFAULT_GUTTER_CENTER,                     helpFormatter.getGutterCenter());        final StringWriter writer = new StringWriter();        helpFormatter.setPrintWriter(new PrintWriter(writer));        helpFormatter.print();        final BufferedReader reader = new BufferedReader(new StringReader(writer.toString()));        assertEquals(""Usage:                                                                          "",                     reader.readLine());        assertEquals(""ant [--help --diagnostics --projecthelp --verbose] [<target1> [<target2> ...]]  "",                     reader.readLine());        assertEquals(""options                                                                         "",                     reader.readLine());        assertEquals(""  --help (-?,-h)         Displays the help                                      "",                     reader.readLine());        assertEquals(""  --diagnostics          print information that might be helpful to diagnose or "",                     reader.readLine());        assertEquals(""                         report problems.                                       "",                     reader.readLine());        assertEquals(""  --projecthelp          print project help information                         "",                     reader.readLine());        assertEquals(""  --verbose              print the version information and exit                 "",                     reader.readLine());        assertEquals(""  target [target ...]    The targets ant should build                           "",                     reader.readLine());        assertNull(reader.readLine());    }}class OptionComparator implements Comparator {    public int compare(Object o1,                       Object o2) {        Option opt1 = (Option) o1;        Option opt2 = (Option) o2;        return -opt1.getPreferredName().compareTo(opt2.getPreferredName());    }}"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,17,ackage org.apache.commons.cli2.validation;
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,19,mport java.net.URL;
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,20,mport java.net.URLClassLoader;
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,21,mport java.util.Arrays;
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,22,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,23,mport java.util.List;
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,25,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,27,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,29,ublic class ClassValidatorTest extends TestCase {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,31,rivate final static ResourceHelper resources =
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,32,esourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,34,rivate ClassValidator validator;
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,36,rotected void setUp() {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,37,alidator = new ClassValidator();
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,40,ublic void testValidName() throws InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,41,"inal Object[] array = new Object[] { ""MyApp"", ""org.apache.ant.Main"" };"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,42,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,44,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,46,"ssertEquals(""Name is incorrect"", ""MyApp"", list.get(0));"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,47,"ssertEquals(""Name is incorrect"", ""org.apache.ant.Main"", list.get(1));"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,50,ublic void testNameBadStart() {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,51,"inal String className = ""1stClass"";"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,52,inal Object[] array = new Object[] { className };
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,53,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,55,ry {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,56,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,57,"ail(""Class name cannot start with a number."");"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,58, catch (InvalidArgumentException ive) {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,59,ssertEquals(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,60,esources.getMessage(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,61,"ClassValidator.bad.classname"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,62,"lassName),"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,63,ve.getMessage());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,67,ublic void testNameBadEnd() {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,68,"inal String className = ""My.Class."";"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,70,inal Object[] array = new Object[] { className };
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,71,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,73,ry {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,74,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,75,"ail(""Trailing period not permitted."");"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,76, catch (InvalidArgumentException ive) {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,77,ssertEquals(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,78,esources.getMessage(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,79,"ClassValidator.bad.classname"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,80,"lassName),"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,81,ve.getMessage());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,85,ublic void testNameBadMiddle() {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,86,"inal String className = ""My..Class"";"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,88,inal Object[] array = new Object[] { className };
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,89,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,91,ry {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,92,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,93,"ail(""Two consecutive periods is not permitted."");"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,94, catch (InvalidArgumentException ive) {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,95,ssertEquals(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,96,esources.getMessage(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,97,"ClassValidator.bad.classname"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,98,"lassName),"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,99,ve.getMessage());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,103,ublic void testIllegalNameChar() {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,104,"inal String className = ""My?Class"";"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,106,inal Object[] array = new Object[] { className };
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,107,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,109,ry {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,110,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,111,"ail(""Illegal character not allowed in Class name."");"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,112, catch (InvalidArgumentException ive) {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,113,ssertEquals(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,114,esources.getMessage(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,115,"ClassValidator.bad.classname"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,116,"lassName),"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,117,ve.getMessage());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,121,ublic void testLoadable() {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,122,"ssertFalse(""Validator is loadable"", validator.isLoadable());"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,123,alidator.setLoadable(true);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,124,"ssertTrue(""Validator is NOT loadable"", validator.isLoadable());"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,125,alidator.setLoadable(false);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,126,"ssertFalse(""Validator is loadable"", validator.isLoadable());"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,129,ublic void testLoadValid() throws InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,130,inal Object[] array =
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,131,ew Object[] {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,132,"org.apache.commons.cli2.Option"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,133,"java.util.Vector"" };"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,134,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,136,alidator.setLoadable(true);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,137,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,139,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,140,ssertEquals(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,141,"org.apache.commons.cli2.Option"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,142,(Class) i.next()).getName());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,143,"ssertEquals(""java.util.Vector"", ((Class) i.next()).getName());"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,144,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,147,ublic void testLoadInvalid() {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,148,"inal String className = ""org.apache.commons.cli2.NonOption"";"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,150,"inal Object[] array = new Object[] { className, ""java.util.Vectors"" };"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,151,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,153,alidator.setLoadable(true);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,155,ry {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,156,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,157,"ail(""Class Not Found"");"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,158, catch (InvalidArgumentException ive) {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,159,ssertEquals(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,160,esources.getMessage(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,161,"ClassValidator.class.notfound"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,162,"lassName),"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,163,ve.getMessage());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,167,ublic void testInstantiate() {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,168,"ssertFalse(""Validator creates instances"", validator.isInstance());"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,169,alidator.setInstance(true);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,170,ssertTrue(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,171,"Validator does NOT create instances"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,172,alidator.isInstance());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,173,alidator.setInstance(false);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,174,"ssertFalse(""Validator creates instances"", validator.isInstance());"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,177,ublic void testCreateClassInstance() throws InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,178,"inal Object[] array = new Object[] { ""java.util.Vector"" };"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,179,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,181,alidator.setInstance(true);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,183,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,184,ssertTrue(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,185,"Vector instance NOT found"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,186,ist.get(0) instanceof java.util.Vector);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,189,ublic void testCreateInterfaceInstance() {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,190,"inal String className = ""java.util.Map"";"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,191,inal Object[] array = new Object[] { className };
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,192,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,194,alidator.setInstance(true);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,196,ry {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,197,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,198,"ail(""It's not possible to create a '"" + className + ""'"");"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,200,atch (final InvalidArgumentException ive) {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,201,ssertEquals(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,202,esources.getMessage(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,203,"ClassValidator.class.create"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,204,"lassName),"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,205,ve.getMessage());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,209,ublic void testCreateProtectedInstance() {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,210,"inal String className = ""org.apache.commons.cli2.validation.protect.ProtectedClass"";"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,211,inal Object[] array = new Object[] { className };
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,212,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,214,alidator.setInstance(true);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,216,ry {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,217,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,218,"ail(""It's not possible to create a '"" + className + ""'"");"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,220,atch (final InvalidArgumentException ive) {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,221,ssertEquals(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,222,esources.getMessage(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,223,"ClassValidator.class.access"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,224,"lassName,"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,225,"Class org.apache.commons.cli2.validation.ClassValidator "" +"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,226,"can not access a member of class "" +"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,227,"org.apache.commons.cli2.validation.protect.ProtectedClass "" +"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,228,"with modifiers \""protected\""""),"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,229,ve.getMessage());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,233,ublic void testClassloader() {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,234,ssertEquals(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,235,"Wrong classloader found"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,236,"alidator.getClass().getClassLoader(),"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,237,alidator.getClassLoader());
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,239,RLClassLoader classloader = new URLClassLoader(new URL[] {
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,241,alidator.setClassLoader(classloader);
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,243,ssertEquals(
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,244,"Wrong classloader found"","
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,245,"lassloader,"
False,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,246,alidator.getClassLoader());
True,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,src/test/org/apache/commons/cli2/validation/ClassValidatorTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.net.URL;import java.net.URLClassLoader;import java.util.Arrays;import java.util.Iterator;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.resource.ResourceHelper;public class ClassValidatorTest extends TestCase {    private final static ResourceHelper resources =        ResourceHelper.getResourceHelper();    private ClassValidator validator;    protected void setUp() {        validator = new ClassValidator();    }    public void testValidName() throws InvalidArgumentException {        final Object[] array = new Object[] { ""MyApp"", ""org.apache.ant.Main"" };        final List list = Arrays.asList(array);        validator.validate(list);        assertEquals(""Name is incorrect"", ""MyApp"", list.get(0));        assertEquals(""Name is incorrect"", ""org.apache.ant.Main"", list.get(1));    }    public void testNameBadStart() {        final String className = ""1stClass"";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        try {            validator.validate(list);            fail(""Class name cannot start with a number."");        } catch (InvalidArgumentException ive) {            assertEquals(                resources.getMessage(                    ""ClassValidator.bad.classname"",                    className),                ive.getMessage());        }    }    public void testNameBadEnd() {        final String className = ""My.Class."";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        try {            validator.validate(list);            fail(""Trailing period not permitted."");        } catch (InvalidArgumentException ive) {            assertEquals(                resources.getMessage(                    ""ClassValidator.bad.classname"",                    className),                ive.getMessage());        }    }    public void testNameBadMiddle() {        final String className = ""My..Class"";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        try {            validator.validate(list);            fail(""Two consecutive periods is not permitted."");        } catch (InvalidArgumentException ive) {            assertEquals(                resources.getMessage(                    ""ClassValidator.bad.classname"",                    className),                ive.getMessage());        }    }    public void testIllegalNameChar() {        final String className = ""My?Class"";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        try {            validator.validate(list);            fail(""Illegal character not allowed in Class name."");        } catch (InvalidArgumentException ive) {            assertEquals(                resources.getMessage(                    ""ClassValidator.bad.classname"",                    className),                ive.getMessage());        }    }    public void testLoadable() {        assertFalse(""Validator is loadable"", validator.isLoadable());        validator.setLoadable(true);        assertTrue(""Validator is NOT loadable"", validator.isLoadable());        validator.setLoadable(false);        assertFalse(""Validator is loadable"", validator.isLoadable());    }    public void testLoadValid() throws InvalidArgumentException {        final Object[] array =            new Object[] {                ""org.apache.commons.cli2.Option"",                ""java.util.Vector"" };        final List list = Arrays.asList(array);        validator.setLoadable(true);        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(            ""org.apache.commons.cli2.Option"",            ((Class) i.next()).getName());        assertEquals(""java.util.Vector"", ((Class) i.next()).getName());        assertFalse(i.hasNext());    }    public void testLoadInvalid() {        final String className = ""org.apache.commons.cli2.NonOption"";        final Object[] array = new Object[] { className, ""java.util.Vectors"" };        final List list = Arrays.asList(array);        validator.setLoadable(true);        try {            validator.validate(list);            fail(""Class Not Found"");        } catch (InvalidArgumentException ive) {            assertEquals(                resources.getMessage(                    ""ClassValidator.class.notfound"",                    className),                ive.getMessage());        }    }    public void testInstantiate() {        assertFalse(""Validator creates instances"", validator.isInstance());        validator.setInstance(true);        assertTrue(            ""Validator does NOT create instances"",            validator.isInstance());        validator.setInstance(false);        assertFalse(""Validator creates instances"", validator.isInstance());    }    public void testCreateClassInstance() throws InvalidArgumentException {        final Object[] array = new Object[] { ""java.util.Vector"" };        final List list = Arrays.asList(array);        validator.setInstance(true);        validator.validate(list);        assertTrue(            ""Vector instance NOT found"",            list.get(0) instanceof java.util.Vector);    }    public void testCreateInterfaceInstance() {        final String className = ""java.util.Map"";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        validator.setInstance(true);        try {            validator.validate(list);            fail(""It's not possible to create a '"" + className + ""'"");        }        catch (final InvalidArgumentException ive) {            assertEquals(                    resources.getMessage(                            ""ClassValidator.class.create"",                            className),                            ive.getMessage());        }    }    public void testCreateProtectedInstance() {        final String className = ""org.apache.commons.cli2.validation.protect.ProtectedClass"";        final Object[] array = new Object[] { className };        final List list = Arrays.asList(array);        validator.setInstance(true);        try {            validator.validate(list);            fail(""It's not possible to create a '"" + className + ""'"");        }        catch (final InvalidArgumentException ive) {            assertEquals(                    resources.getMessage(                            ""ClassValidator.class.access"",                            className,                            ""Class org.apache.commons.cli2.validation.ClassValidator "" +                            ""can not access a member of class "" +                            ""org.apache.commons.cli2.validation.protect.ProtectedClass "" +                            ""with modifiers \""protected\""""),                            ive.getMessage());        }    }    public void testClassloader() {        assertEquals(            ""Wrong classloader found"",            validator.getClass().getClassLoader(),            validator.getClassLoader());        URLClassLoader classloader = new URLClassLoader(new URL[] {        });        validator.setClassLoader(classloader);        assertEquals(            ""Wrong classloader found"",            classloader,            validator.getClassLoader());    }}"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,17,ackage org.apache.commons.cli2.validation;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,19,mport java.text.DateFormat;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,20,mport java.text.DateFormatSymbols;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,21,mport java.text.SimpleDateFormat;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,22,mport java.util.Arrays;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,23,mport java.util.Calendar;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,24,mport java.util.Date;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,25,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,26,mport java.util.List;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,28,mport junit.framework.Test;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,29,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,30,mport junit.framework.TestSuite;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,32,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,33,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,36, JUnit test case for DateValidator.
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,38, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,39, @author John Keyes
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,41,ublic class DateValidatorTest
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,42,xtends TestCase {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,43,rivate static final ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,44,"ublic static final DateFormat D_M_YY = new SimpleDateFormat(""d/M/yy"");"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,45,"ublic static final DateFormat YYYY_MM_DD = new SimpleDateFormat(""yyyy-MM-dd"");"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,46,"rivate List formats = Arrays.asList(new Object[] { D_M_YY, YYYY_MM_DD });"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,48,ublic void testSingleFormatValidate()
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,49,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,50,"inal Object[] array = new Object[] { ""23/12/03"" };"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,51,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,52,inal Validator validator = new DateValidator(D_M_YY);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,54,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,56,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,57,"ssertEquals(""2003-12-23"", YYYY_MM_DD.format((Date) i.next()));"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,58,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,61,ublic void testDefaultDateFormatValidate()
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,62,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,63,ateFormatSymbols symbols =  new DateFormatSymbols();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,64,"inal Object[] array = new Object[] { ""23-"" + symbols.getShortMonths()[11] + ""-2003"" };"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,65,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,66,"inal Validator validator = new DateValidator( new SimpleDateFormat(""dd-MMM-yyyy"") );"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,68,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,70,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,71,"/ CLI-40: For some reason, the YYYY_MM_DD object gets quite"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,72,/ confused here and returns 2003-12-22. If we make a new one
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,73,/ there is no problem.
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,74,"ssertEquals(""2003-12-23"", new SimpleDateFormat(""yyyy-MM-dd"").format((Date) i.next()));"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,75,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,78,ublic void testDefaultTimeFormatValidate()
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,79,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,80,"inal Object[] array = new Object[] { ""18:00:00"" };"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,81,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,82,"inal Validator validator = new DateValidator( new SimpleDateFormat(""HH:mm:ss"") );"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,84,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,86,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,87,"inal DateFormat df = new SimpleDateFormat(""HH:mm:ss"");"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,88,"ssertEquals(""18:00:00"", df.format((Date) i.next()));"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,89,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,92,ublic void testDefaultDateTimeFormatValidate()
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,93,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,94,ateFormatSymbols symbols =  new DateFormatSymbols();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,95,"inal Object[] array = new Object[] { ""23-"" + symbols.getShortMonths()[0] + ""-2003 18:00:00"" };"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,96,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,97,"inal Validator validator = new DateValidator( new SimpleDateFormat(""dd-MMM-yyyy HH:mm:ss"") );"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,99,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,101,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,102,"inal DateFormat df = new SimpleDateFormat(""yyyy/M/dd HH:mm:ss"");"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,103,"ssertEquals(""2003/1/23 18:00:00"", df.format((Date) i.next()));"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,104,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,107,ublic void testDefaultValidator()
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,108,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,109,"inal Object[] array = new Object[] { ""23/01/03 18:00"" };"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,110,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,111,"inal Validator validator = new DateValidator(new SimpleDateFormat(""dd/MM/yy HH:mm""));"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,113,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,115,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,116,"inal DateFormat df = new SimpleDateFormat(""yyyy/M/dd HH:mm:ss"");"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,117,"ssertEquals(""2003/1/23 18:00:00"", df.format((Date) i.next()));"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,118,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,121,ublic void testValidate()
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,122,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,123,"inal Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,124,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,125,inal Validator validator = new DateValidator(formats);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,127,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,129,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,130,"ssertEquals(""2003-12-23"", YYYY_MM_DD.format((Date) i.next()));"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,131,"ssertEquals(""2002-10-12"", YYYY_MM_DD.format((Date) i.next()));"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,132,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,135,ublic void testMinimumBounds()
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,136,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,137,inal DateValidator validator = new DateValidator(formats);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,138,inal Calendar cal = Calendar.getInstance();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,141,"inal Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,142,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,143,"al.set(2002, 1, 12);"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,145,inal Date min = cal.getTime();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,146,alidator.setMinimum(min);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,147,"ssertTrue(""maximum bound is set"", validator.getMaximum() == null);"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,148,"ssertEquals(""minimum bound is incorrect"", min, validator.getMinimum());"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,149,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,153,"inal Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,154,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,155,"al.set(2003, 1, 12);"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,157,inal Date min = cal.getTime();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,158,alidator.setMinimum(min);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,160,ry {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,161,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,162,"ail(""minimum out of bounds exception not caught"");"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,163, catch (final InvalidArgumentException exp) {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,164,"ssertEquals(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,165,"ew Object[] { ""2002-10-12"" }), exp.getMessage());"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,170,ublic void testFormats()
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,171,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,172,inal DateValidator validator = new DateValidator(formats);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,173,"ssertEquals(""date format is incorrect"", ((SimpleDateFormat) formats.get(0)).toPattern(),"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,174,(SimpleDateFormat) validator.getFormats()[0]).toPattern());
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,175,"ssertEquals(""date format is incorrect"", ((SimpleDateFormat) formats.get(1)).toPattern(),"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,176,(SimpleDateFormat) validator.getFormats()[1]).toPattern());
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,179,ublic void testMaximumBounds()
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,180,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,181,inal DateValidator validator = new DateValidator(formats);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,182,inal Calendar cal = Calendar.getInstance();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,185,"inal Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,186,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,187,"al.set(2004, 1, 12);"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,189,inal Date max = cal.getTime();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,190,alidator.setMaximum(max);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,191,"ssertTrue(""minimum bound is set"", validator.getMinimum() == null);"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,192,"ssertEquals(""maximum bound is incorrect"", max, validator.getMaximum());"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,193,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,197,"inal Object[] array = new Object[] { ""23/12/03"", ""2004-10-12"" };"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,198,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,199,"al.set(2004, 1, 12);"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,201,inal Date max = cal.getTime();
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,202,alidator.setMaximum(max);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,204,ry {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,205,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,206,"ail(""maximum out of bounds exception not caught"");"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,207, catch (final InvalidArgumentException exp) {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,208,"ssertEquals(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,209,"ew Object[] { ""2004-10-12"" }), exp.getMessage());"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,214,ublic static Test suite() {
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,215,est result = new TestSuite(DateValidatorTest.class); // default behavior
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,216,"esult = new TimeZoneTestSuite(""EST"", result); // ensure it runs in EST timezone"
False,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,218,eturn result;
True,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,src/test/org/apache/commons/cli2/validation/DateValidatorTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.text.DateFormat;import java.text.DateFormatSymbols;import java.text.SimpleDateFormat;import java.util.Arrays;import java.util.Calendar;import java.util.Date;import java.util.Iterator;import java.util.List;import junit.framework.Test;import junit.framework.TestCase;import junit.framework.TestSuite;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * JUnit test case for DateValidator. * * @author Rob Oxspring * @author John Keyes */public class DateValidatorTest    extends TestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    public static final DateFormat D_M_YY = new SimpleDateFormat(""d/M/yy"");    public static final DateFormat YYYY_MM_DD = new SimpleDateFormat(""yyyy-MM-dd"");    private List formats = Arrays.asList(new Object[] { D_M_YY, YYYY_MM_DD });    public void testSingleFormatValidate()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""23/12/03"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator(D_M_YY);        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(""2003-12-23"", YYYY_MM_DD.format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testDefaultDateFormatValidate()        throws InvalidArgumentException {        DateFormatSymbols symbols =  new DateFormatSymbols();        final Object[] array = new Object[] { ""23-"" + symbols.getShortMonths()[11] + ""-2003"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator( new SimpleDateFormat(""dd-MMM-yyyy"") );        validator.validate(list);        final Iterator i = list.iterator();        // CLI-40: For some reason, the YYYY_MM_DD object gets quite        // confused here and returns 2003-12-22. If we make a new one        // there is no problem.        assertEquals(""2003-12-23"", new SimpleDateFormat(""yyyy-MM-dd"").format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testDefaultTimeFormatValidate()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""18:00:00"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator( new SimpleDateFormat(""HH:mm:ss"") );        validator.validate(list);        final Iterator i = list.iterator();        final DateFormat df = new SimpleDateFormat(""HH:mm:ss"");        assertEquals(""18:00:00"", df.format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testDefaultDateTimeFormatValidate()        throws InvalidArgumentException {        DateFormatSymbols symbols =  new DateFormatSymbols();        final Object[] array = new Object[] { ""23-"" + symbols.getShortMonths()[0] + ""-2003 18:00:00"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator( new SimpleDateFormat(""dd-MMM-yyyy HH:mm:ss"") );        validator.validate(list);        final Iterator i = list.iterator();        final DateFormat df = new SimpleDateFormat(""yyyy/M/dd HH:mm:ss"");        assertEquals(""2003/1/23 18:00:00"", df.format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testDefaultValidator()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""23/01/03 18:00"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator(new SimpleDateFormat(""dd/MM/yy HH:mm""));        validator.validate(list);        final Iterator i = list.iterator();        final DateFormat df = new SimpleDateFormat(""yyyy/M/dd HH:mm:ss"");        assertEquals(""2003/1/23 18:00:00"", df.format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testValidate()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };        final List list = Arrays.asList(array);        final Validator validator = new DateValidator(formats);        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(""2003-12-23"", YYYY_MM_DD.format((Date) i.next()));        assertEquals(""2002-10-12"", YYYY_MM_DD.format((Date) i.next()));        assertFalse(i.hasNext());    }    public void testMinimumBounds()        throws InvalidArgumentException {        final DateValidator validator = new DateValidator(formats);        final Calendar cal = Calendar.getInstance();        {            final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };            final List list = Arrays.asList(array);            cal.set(2002, 1, 12);            final Date min = cal.getTime();            validator.setMinimum(min);            assertTrue(""maximum bound is set"", validator.getMaximum() == null);            assertEquals(""minimum bound is incorrect"", min, validator.getMinimum());            validator.validate(list);        }        {            final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };            final List list = Arrays.asList(array);            cal.set(2003, 1, 12);            final Date min = cal.getTime();            validator.setMinimum(min);            try {                validator.validate(list);                fail(""minimum out of bounds exception not caught"");            } catch (final InvalidArgumentException exp) {                assertEquals(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,                                                  new Object[] { ""2002-10-12"" }), exp.getMessage());            }        }    }    public void testFormats()        throws InvalidArgumentException {        final DateValidator validator = new DateValidator(formats);        assertEquals(""date format is incorrect"", ((SimpleDateFormat) formats.get(0)).toPattern(),                     ((SimpleDateFormat) validator.getFormats()[0]).toPattern());        assertEquals(""date format is incorrect"", ((SimpleDateFormat) formats.get(1)).toPattern(),                     ((SimpleDateFormat) validator.getFormats()[1]).toPattern());    }    public void testMaximumBounds()        throws InvalidArgumentException {        final DateValidator validator = new DateValidator(formats);        final Calendar cal = Calendar.getInstance();        {            final Object[] array = new Object[] { ""23/12/03"", ""2002-10-12"" };            final List list = Arrays.asList(array);            cal.set(2004, 1, 12);            final Date max = cal.getTime();            validator.setMaximum(max);            assertTrue(""minimum bound is set"", validator.getMinimum() == null);            assertEquals(""maximum bound is incorrect"", max, validator.getMaximum());            validator.validate(list);        }        {            final Object[] array = new Object[] { ""23/12/03"", ""2004-10-12"" };            final List list = Arrays.asList(array);            cal.set(2004, 1, 12);            final Date max = cal.getTime();            validator.setMaximum(max);            try {                validator.validate(list);                fail(""maximum out of bounds exception not caught"");            } catch (final InvalidArgumentException exp) {                assertEquals(resources.getMessage(ResourceConstants.DATEVALIDATOR_DATE_OUTOFRANGE,                                                  new Object[] { ""2004-10-12"" }), exp.getMessage());            }        }    }    public static Test suite() {        Test result = new TestSuite(DateValidatorTest.class); // default behavior        result = new TimeZoneTestSuite(""EST"", result); // ensure it runs in EST timezone        return result;    }}"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,17,ackage org.apache.commons.cli2.validation;
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,19,mport java.util.Arrays;
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,20,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,21,mport java.util.List;
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,22,mport java.util.Set;
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,23,mport java.util.TreeSet;
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,25,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,27,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,28,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,30,ublic class EnumValidatorTest
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,31,xtends TestCase {
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,32,rivate final static ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,33,"rivate final Set enumSet = new TreeSet(Arrays.asList(new Object[] { ""red"", ""green"", ""blue"" }));"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,35,ublic void testValidate()
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,36,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,37,"inal Object[] array = new Object[] { ""red"", ""green"" };"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,40,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,41,inal EnumValidator validator = new EnumValidator(enumSet);
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,42,"ssertEquals(""valid values are incorrect"", enumSet, validator.getValidValues());"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,43,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,45,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,46,"ssertEquals(""red"", i.next());"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,47,"ssertEquals(""green"", i.next());"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,48,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,52,ublic void testNonMember() {
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,53,"inal Object[] array = new Object[] { ""red"", ""pink"" };"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,54,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,55,inal EnumValidator validator = new EnumValidator(enumSet);
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,57,ry {
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,58,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,59,"ail(""InvalidArgumentException"");"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,60, catch (InvalidArgumentException e) {
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,61,"ssertEquals(resources.getMessage(ResourceConstants.ENUM_ILLEGAL_VALUE,"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,62,"ew Object[] { ""pink"", validator.getValuesAsString() }),"
False,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,63,.getMessage());
True,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,src/test/org/apache/commons/cli2/validation/EnumValidatorTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.util.Arrays;import java.util.Iterator;import java.util.List;import java.util.Set;import java.util.TreeSet;import junit.framework.TestCase;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;public class EnumValidatorTest    extends TestCase {    private final static ResourceHelper resources = ResourceHelper.getResourceHelper();    private final Set enumSet = new TreeSet(Arrays.asList(new Object[] { ""red"", ""green"", ""blue"" }));    public void testValidate()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""red"", ""green"" };        {            final List list = Arrays.asList(array);            final EnumValidator validator = new EnumValidator(enumSet);            assertEquals(""valid values are incorrect"", enumSet, validator.getValidValues());            validator.validate(list);            final Iterator i = list.iterator();            assertEquals(""red"", i.next());            assertEquals(""green"", i.next());            assertFalse(i.hasNext());        }    }    public void testNonMember() {        final Object[] array = new Object[] { ""red"", ""pink"" };        final List list = Arrays.asList(array);        final EnumValidator validator = new EnumValidator(enumSet);        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.ENUM_ILLEGAL_VALUE,                                              new Object[] { ""pink"", validator.getValuesAsString() }),                         e.getMessage());        }    }}"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,17,ackage org.apache.commons.cli2.validation;
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,19,mport java.io.File;
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,20,mport java.io.IOException;
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,21,mport java.util.Arrays;
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,22,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,23,mport java.util.List;
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,25,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,28, JUnit test case for the FileValidator.
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,30, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,31, @author John Keyes
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,33,ublic class FileValidatorTest extends TestCase {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,35,ublic void testValidate() throws InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,36,"inal Object[] array = new Object[] { ""src"", ""project.xml"","
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,37,"veryunlikelyfilename"" };"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,38,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,39,inal FileValidator validator = new FileValidator();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,41,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,43,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,44,"ssertEquals(new File(""src""), i.next());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,45,"ssertEquals(new File(""project.xml""), i.next());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,46,"ssertEquals(new File(""veryunlikelyfilename""), i.next());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,47,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,50,ublic void testValidate_Directory() {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,51,"inal Object[] array = new Object[] { ""src"", ""project.xml"" };"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,52,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,53,inal FileValidator validator = FileValidator
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,54,getExistingDirectoryInstance();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,56,"ssertTrue(""is a directory validator"", validator.isDirectory());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,57,"ssertFalse(""is not a file validator"", validator.isFile());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,58,"ssertTrue(""is an existing file validator"", validator.isExisting());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,59,"ssertFalse(""is not a hidden file validator"", validator.isHidden());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,61,ry {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,62,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,63,"ail(""InvalidArgumentException"");"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,64, catch (InvalidArgumentException e) {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,65,"ssertEquals(""project.xml"", e.getMessage());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,69,ublic void testValidate_ReadableFile() {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,70,/ make file readonly
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,71,"ile file = new File(""src/test/data/readable.txt"");"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,72,ile.setReadOnly();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,74,"inal Object[] array = new Object[] { ""src/test/data/readable.txt"","
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,75,"src/test/data/notreadable.txt"" };"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,76,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,77,inal FileValidator validator = FileValidator.getExistingFileInstance();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,78,alidator.setReadable(true);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,80,"ssertFalse(""is not a directory validator"", validator.isDirectory());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,81,"ssertTrue(""is a file validator"", validator.isFile());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,82,"ssertTrue(""is an existing file validator"", validator.isExisting());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,83,"ssertFalse(""is not a hidden file validator"", validator.isHidden());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,84,"ssertTrue(""is a readable file validator"", validator.isReadable());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,85,"ssertFalse(""is not a writable file validator"", validator.isWritable());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,87,ry {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,88,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,89,"ail(""InvalidArgumentException"");"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,90, catch (InvalidArgumentException e) {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,91,"ssertEquals(""src/test/data/notreadable.txt"", e.getMessage());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,95,ublic void testValidate_WritableFile() {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,96,/ make file readonly
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,97,"ile file = new File(""src/test/data/readable.txt"");"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,98,ile.setReadOnly();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,100,"inal Object[] array = new Object[] { ""src/test/data/writable.txt"","
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,101,"src/test/data/readable.txt"" };"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,102,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,103,inal FileValidator validator = FileValidator.getExistingFileInstance();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,104,alidator.setWritable(true);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,106,"ssertFalse(""is not a directory validator"", validator.isDirectory());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,107,"ssertTrue(""is a file validator"", validator.isFile());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,108,"ssertTrue(""is an existing file validator"", validator.isExisting());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,109,"ssertFalse(""is not a hidden file validator"", validator.isHidden());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,110,"ssertFalse(""is not a readable file validator"", validator.isReadable());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,111,"ssertTrue(""is a writable file validator"", validator.isWritable());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,113,ry {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,114,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,115,"ail(""InvalidArgumentException"");"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,116, catch (InvalidArgumentException e) {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,117,"ssertEquals(""src/test/data/readable.txt"", e.getMessage());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,121,ublic void testValidate_HiddenFile() throws InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,122,/ make file hidden on Windows
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,123,"ttribute(""H"");"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,125,"inal Object[] array = new Object[] { ""src/test/data/.hidden.txt"", ""src"" };"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,126,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,127,inal FileValidator validator = FileValidator.getExistingFileInstance();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,128,alidator.setHidden(true);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,130,"ssertFalse(""is not a directory validator"", validator.isDirectory());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,131,"ssertTrue(""is a file validator"", validator.isFile());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,132,"ssertTrue(""is an existing file validator"", validator.isExisting());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,133,"ssertTrue(""is a hidden file validator"", validator.isHidden());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,135,ry {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,136,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,137,"ail(""InvalidArgumentException"");"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,138, catch (InvalidArgumentException e) {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,139,"ssertEquals(""src"", e.getMessage());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,143,rivate void attribute(String attr) {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,144,"inal String os = System.getProperty(""os.name"").toLowerCase();"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,146,"/ if the test is run on windows, run the attrib program"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,147,/ to set the hidden attribute
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,148,"f (os.indexOf(""windows"") != -1) {"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,149,/ windows
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,150,ry {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,151,rocess proc = Runtime.getRuntime().exec(
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,152,"attrib.exe +"" + attr + "" src/test/data/.hidden.txt"","
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,153,"ull, new File("".""));"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,154,roc.waitFor();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,155, catch (InterruptedException e) {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,156,ystem.out.println(e.getMessage());
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,157,.printStackTrace();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,158, catch (IOException e) {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,159,ystem.out.println(e.getMessage());
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,160,.printStackTrace();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,165,ublic void testValidate_Existing() {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,166,"inal Object[] array = new Object[] { ""project.xml"","
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,167,"veryunlikelyfilename"" };"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,168,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,169,inal FileValidator validator = FileValidator.getExistingInstance();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,171,"ssertFalse(""is not a directory validator"", validator.isDirectory());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,172,"ssertFalse(""is not a file validator"", validator.isFile());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,173,"ssertTrue(""is an existing file validator"", validator.isExisting());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,174,"ssertFalse(""is not a hidden file validator"", validator.isHidden());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,176,ry {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,177,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,178,"ail(""InvalidArgumentException"");"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,179, catch (InvalidArgumentException e) {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,180,"ssertEquals(""veryunlikelyfilename"", e.getMessage());"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,184,ublic void testValidate_File() {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,185,"inal Object[] array = new Object[] { ""project.xml"", ""src"" };"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,186,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,187,inal Validator validator = FileValidator.getExistingFileInstance();
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,189,ry {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,190,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,191,"ail(""InvalidArgumentException"");"
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,192, catch (InvalidArgumentException e) {
False,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,193,"ssertEquals(""src"", e.getMessage());"
True,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.io.File;import java.io.IOException;import java.util.Arrays;import java.util.Iterator;import java.util.List;import junit.framework.TestCase;/** * JUnit test case for the FileValidator. * * @author Rob Oxspring * @author John Keyes */public class FileValidatorTest extends TestCase {    public void testValidate() throws InvalidArgumentException {        final Object[] array = new Object[] { ""src"", ""project.xml"",                ""veryunlikelyfilename"" };        final List list = Arrays.asList(array);        final FileValidator validator = new FileValidator();        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(new File(""src""), i.next());        assertEquals(new File(""project.xml""), i.next());        assertEquals(new File(""veryunlikelyfilename""), i.next());        assertFalse(i.hasNext());    }    public void testValidate_Directory() {        final Object[] array = new Object[] { ""src"", ""project.xml"" };        final List list = Arrays.asList(array);        final FileValidator validator = FileValidator                .getExistingDirectoryInstance();        assertTrue(""is a directory validator"", validator.isDirectory());        assertFalse(""is not a file validator"", validator.isFile());        assertTrue(""is an existing file validator"", validator.isExisting());        assertFalse(""is not a hidden file validator"", validator.isHidden());        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""project.xml"", e.getMessage());        }    }    public void testValidate_ReadableFile() {        // make file readonly        File file = new File(""src/test/data/readable.txt"");        file.setReadOnly();        final Object[] array = new Object[] { ""src/test/data/readable.txt"",                ""src/test/data/notreadable.txt"" };        final List list = Arrays.asList(array);        final FileValidator validator = FileValidator.getExistingFileInstance();        validator.setReadable(true);        assertFalse(""is not a directory validator"", validator.isDirectory());        assertTrue(""is a file validator"", validator.isFile());        assertTrue(""is an existing file validator"", validator.isExisting());        assertFalse(""is not a hidden file validator"", validator.isHidden());        assertTrue(""is a readable file validator"", validator.isReadable());        assertFalse(""is not a writable file validator"", validator.isWritable());        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""src/test/data/notreadable.txt"", e.getMessage());        }    }    public void testValidate_WritableFile() {        // make file readonly        File file = new File(""src/test/data/readable.txt"");        file.setReadOnly();        final Object[] array = new Object[] { ""src/test/data/writable.txt"",                ""src/test/data/readable.txt"" };        final List list = Arrays.asList(array);        final FileValidator validator = FileValidator.getExistingFileInstance();        validator.setWritable(true);        assertFalse(""is not a directory validator"", validator.isDirectory());        assertTrue(""is a file validator"", validator.isFile());        assertTrue(""is an existing file validator"", validator.isExisting());        assertFalse(""is not a hidden file validator"", validator.isHidden());        assertFalse(""is not a readable file validator"", validator.isReadable());        assertTrue(""is a writable file validator"", validator.isWritable());        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""src/test/data/readable.txt"", e.getMessage());        }    }    public void testValidate_HiddenFile() throws InvalidArgumentException {        // make file hidden on Windows        attribute(""H"");        final Object[] array = new Object[] { ""src/test/data/.hidden.txt"", ""src"" };        final List list = Arrays.asList(array);        final FileValidator validator = FileValidator.getExistingFileInstance();        validator.setHidden(true);        assertFalse(""is not a directory validator"", validator.isDirectory());        assertTrue(""is a file validator"", validator.isFile());        assertTrue(""is an existing file validator"", validator.isExisting());        assertTrue(""is a hidden file validator"", validator.isHidden());        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""src"", e.getMessage());        }    }    private void attribute(String attr) {        final String os = System.getProperty(""os.name"").toLowerCase();        // if the test is run on windows, run the attrib program        // to set the hidden attribute        if (os.indexOf(""windows"") != -1) {            // windows            try {                Process proc = Runtime.getRuntime().exec(                        ""attrib.exe +"" + attr + "" src/test/data/.hidden.txt"",                        null, new File("".""));                proc.waitFor();            } catch (InterruptedException e) {                System.out.println(e.getMessage());                e.printStackTrace();            } catch (IOException e) {                System.out.println(e.getMessage());                e.printStackTrace();            }        }    }    public void testValidate_Existing() {        final Object[] array = new Object[] { ""project.xml"",                ""veryunlikelyfilename"" };        final List list = Arrays.asList(array);        final FileValidator validator = FileValidator.getExistingInstance();        assertFalse(""is not a directory validator"", validator.isDirectory());        assertFalse(""is not a file validator"", validator.isFile());        assertTrue(""is an existing file validator"", validator.isExisting());        assertFalse(""is not a hidden file validator"", validator.isHidden());        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""veryunlikelyfilename"", e.getMessage());        }    }    public void testValidate_File() {        final Object[] array = new Object[] { ""project.xml"", ""src"" };        final List list = Arrays.asList(array);        final Validator validator = FileValidator.getExistingFileInstance();        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""src"", e.getMessage());        }    }}"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,17,ackage org.apache.commons.cli2.validation;
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,19,mport java.text.NumberFormat;
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,21,mport java.util.Arrays;
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,22,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,23,mport java.util.List;
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,25,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,27,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,28,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,31, JUnit test case for NumberValidator.
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,33, @author Rob Oxspring
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,34, @author John Keyes
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,36,ublic class NumberValidatorTest
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,37,xtends TestCase {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,38,rivate static final ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,40,ublic void testValidate_Number()
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,41,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,42,inal NumberFormat format = NumberFormat.getNumberInstance();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,44,inal Object[] array =
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,45,"ew Object[] { format.format(1d), format.format(1.07d), format.format(-.45d) };"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,48,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,49,inal Validator validator = NumberValidator.getNumberInstance();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,51,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,53,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,54,"ssertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,55,"ssertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,56,"ssertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,57,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,61,ublic void testValidate_Currency()
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,62,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,63,umberFormat format = NumberFormat.getCurrencyInstance();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,64,inal Object[] array =
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,65,"ew Object[] { format.format(1d), format.format(1.07), format.format(-0.45) };"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,66,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,68,inal NumberValidator validator = NumberValidator.getCurrencyInstance();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,69,"ssertEquals(""incorrect currency format"", format, validator.getFormat());"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,71,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,73,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,74,"ssertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,75,"ssertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,76,"ssertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,77,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,80,ublic void testValidate_Percent()
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,81,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,82,inal NumberFormat format = NumberFormat.getPercentInstance();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,84,inal Object[] array =
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,85,ew Object[] {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,86,"ormat.format(.01), format.format(1.07), format.format(-.45),"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,87,ormat.format(0.001)
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,89,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,90,inal Validator validator = NumberValidator.getPercentInstance();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,92,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,94,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,95,"ssertEquals(0.01d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,96,"ssertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,97,"ssertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,98,"ssertEquals(0.00001d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,99,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,102,ublic void testValidate_Integer()
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,103,hrows InvalidArgumentException {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,104,"inal Object[] array = new Object[] { ""1"", ""107"", ""-45"" };"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,105,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,106,inal Validator validator = NumberValidator.getIntegerInstance();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,108,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,110,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,111,"ssertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,112,"ssertEquals(107d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,113,"ssertEquals(-45d, ((Number) i.next()).doubleValue(), 0.0001);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,114,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,117,ublic void testValidate_ExcessChars() {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,118,"inal Object[] array = new Object[] { ""10DowningStreet"" };"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,119,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,120,inal Validator validator = NumberValidator.getIntegerInstance();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,122,ry {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,123,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,124,"ail(""InvalidArgumentException"");"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,125, catch (InvalidArgumentException e) {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,126,"ssertEquals(""10DowningStreet"", e.getMessage());"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,130,ublic void testValidate_Maximum() {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,131,"inal Object[] array = new Object[] { ""1"", ""107"" };"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,132,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,133,inal NumberValidator validator = NumberValidator.getIntegerInstance();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,134,nteger max = new Integer(100);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,136,alidator.setMaximum(max);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,138,"ssertTrue(""no minimum set"", validator.getMinimum() == null);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,139,"ssertEquals(""incorrect maximum value"", max, validator.getMaximum());"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,141,ry {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,142,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,143,"ail(""107 too big"");"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,144, catch (InvalidArgumentException ive) {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,145,"ssertEquals(resources.getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,146,"107""), ive.getMessage());"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,150,ublic void testValidate_Minimum() {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,151,"inal Object[] array = new Object[] { ""107"", ""1"" };"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,152,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,153,inal NumberValidator validator = NumberValidator.getIntegerInstance();
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,154,nteger min = new Integer(100);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,155,alidator.setMinimum(min);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,157,"ssertTrue(""no maximum set"", validator.getMaximum() == null);"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,158,"ssertEquals(""incorrect minimum value"", min, validator.getMinimum());"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,160,ry {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,161,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,162,"ail(""1 too small"");"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,163, catch (InvalidArgumentException ive) {
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,164,"ssertEquals(resources.getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,"
False,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,165,"1""), ive.getMessage());"
True,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,src/test/org/apache/commons/cli2/validation/NumberValidatorTest.java,1,"/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.text.NumberFormat;import java.util.Arrays;import java.util.Iterator;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;/** * JUnit test case for NumberValidator. * * @author Rob Oxspring * @author John Keyes */public class NumberValidatorTest    extends TestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    public void testValidate_Number()        throws InvalidArgumentException {        final NumberFormat format = NumberFormat.getNumberInstance();        final Object[] array =            new Object[] { format.format(1d), format.format(1.07d), format.format(-.45d) };        {            final List list = Arrays.asList(array);            final Validator validator = NumberValidator.getNumberInstance();            validator.validate(list);            final Iterator i = list.iterator();            assertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);            assertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);            assertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);            assertFalse(i.hasNext());        }    }    public void testValidate_Currency()        throws InvalidArgumentException {        NumberFormat format = NumberFormat.getCurrencyInstance();        final Object[] array =            new Object[] { format.format(1d), format.format(1.07), format.format(-0.45) };        final List list = Arrays.asList(array);        final NumberValidator validator = NumberValidator.getCurrencyInstance();        assertEquals(""incorrect currency format"", format, validator.getFormat());        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);        assertFalse(i.hasNext());    }    public void testValidate_Percent()        throws InvalidArgumentException {        final NumberFormat format = NumberFormat.getPercentInstance();        final Object[] array =            new Object[] {                             format.format(.01), format.format(1.07), format.format(-.45),                             format.format(0.001)            };        final List list = Arrays.asList(array);        final Validator validator = NumberValidator.getPercentInstance();        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(0.01d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(1.07d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(-.45d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(0.00001d, ((Number) i.next()).doubleValue(), 0.0001);        assertFalse(i.hasNext());    }    public void testValidate_Integer()        throws InvalidArgumentException {        final Object[] array = new Object[] { ""1"", ""107"", ""-45"" };        final List list = Arrays.asList(array);        final Validator validator = NumberValidator.getIntegerInstance();        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(1d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(107d, ((Number) i.next()).doubleValue(), 0.0001);        assertEquals(-45d, ((Number) i.next()).doubleValue(), 0.0001);        assertFalse(i.hasNext());    }    public void testValidate_ExcessChars() {        final Object[] array = new Object[] { ""10DowningStreet"" };        final List list = Arrays.asList(array);        final Validator validator = NumberValidator.getIntegerInstance();        try {            validator.validate(list);            fail(""InvalidArgumentException"");        } catch (InvalidArgumentException e) {            assertEquals(""10DowningStreet"", e.getMessage());        }    }    public void testValidate_Maximum() {        final Object[] array = new Object[] { ""1"", ""107"" };        final List list = Arrays.asList(array);        final NumberValidator validator = NumberValidator.getIntegerInstance();        Integer max = new Integer(100);        validator.setMaximum(max);        assertTrue(""no minimum set"", validator.getMinimum() == null);        assertEquals(""incorrect maximum value"", max, validator.getMaximum());        try {            validator.validate(list);            fail(""107 too big"");        } catch (InvalidArgumentException ive) {            assertEquals(resources.getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,                                              ""107""), ive.getMessage());        }    }    public void testValidate_Minimum() {        final Object[] array = new Object[] { ""107"", ""1"" };        final List list = Arrays.asList(array);        final NumberValidator validator = NumberValidator.getIntegerInstance();        Integer min = new Integer(100);        validator.setMinimum(min);        assertTrue(""no maximum set"", validator.getMaximum() == null);        assertEquals(""incorrect minimum value"", min, validator.getMinimum());        try {            validator.validate(list);            fail(""1 too small"");        } catch (InvalidArgumentException ive) {            assertEquals(resources.getMessage(ResourceConstants.NUMBERVALIDATOR_NUMBER_OUTOFRANGE,                                              ""1""), ive.getMessage());        }    }}"
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,17,ackage org.apache.commons.cli2.validation;
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,19,mport java.util.TimeZone;
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,21,mport junit.extensions.TestDecorator;
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,23,mport junit.framework.Test;
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,24,mport junit.framework.TestResult;
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,26,ublic class TimeZoneTestSuite
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,27,xtends TestDecorator {
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,28,rivate final TimeZone timeZone;
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,29,rivate final TimeZone originalTimeZone;
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,31,"ublic TimeZoneTestSuite(String timeZone,"
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,32,est test) {
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,33,uper(test);
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,34,his.timeZone = TimeZone.getTimeZone(timeZone);
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,35,his.originalTimeZone = TimeZone.getDefault();
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,38,ublic void run(TestResult testResult) {
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,39,ry {
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,40,imeZone.setDefault(timeZone);
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,41,uper.run(testResult);
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,42, finally {
False,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,43,imeZone.setDefault(originalTimeZone); // cleanup
True,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,src/test/org/apache/commons/cli2/validation/TimeZoneTestSuite.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.util.TimeZone;import junit.extensions.TestDecorator;import junit.framework.Test;import junit.framework.TestResult;public class TimeZoneTestSuite    extends TestDecorator {    private final TimeZone timeZone;    private final TimeZone originalTimeZone;    public TimeZoneTestSuite(String timeZone,                             Test test) {        super(test);        this.timeZone = TimeZone.getTimeZone(timeZone);        this.originalTimeZone = TimeZone.getDefault();    }    public void run(TestResult testResult) {        try {            TimeZone.setDefault(timeZone);            super.run(testResult);        } finally {            TimeZone.setDefault(originalTimeZone); // cleanup        }    }}"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,17,ackage org.apache.commons.cli2.validation;
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,19,mport java.net.MalformedURLException;
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,20,mport java.net.URL;
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,22,mport java.util.Arrays;
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,23,mport java.util.Iterator;
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,24,mport java.util.List;
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,26,mport junit.framework.TestCase;
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,28,mport org.apache.commons.cli2.resource.ResourceConstants;
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,29,mport org.apache.commons.cli2.resource.ResourceHelper;
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,31,ublic class UrlValidatorTest
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,32,xtends TestCase {
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,33,rivate static final ResourceHelper resources = ResourceHelper.getResourceHelper();
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,35,ublic void testValidate()
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,36,"hrows InvalidArgumentException, MalformedURLException {"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,37,"inal Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,38,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,39,inal Validator validator = new UrlValidator();
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,41,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,43,inal Iterator i = list.iterator();
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,44,"ssertEquals(new URL(""http://www.apache.org/""), i.next());"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,45,"ssertEquals(new URL(""file:///etc""), i.next());"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,46,ssertFalse(i.hasNext());
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,49,ublic void testMalformedURL()
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,50,"hrows InvalidArgumentException, MalformedURLException {"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,51,"inal Object[] array = new Object[] { ""www.apache.org"" };"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,52,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,53,inal Validator validator = new UrlValidator();
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,55,ry {
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,56,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,57, catch (InvalidArgumentException e) {
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,58,"ssertEquals(resources.getMessage(ResourceConstants.URLVALIDATOR_MALFORMED_URL,"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,59,"ew Object[] { ""www.apache.org"" }), e.getMessage());"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,63,ublic void testBadProtocol() {
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,65,"inal Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,66,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,67,inal UrlValidator validator = new UrlValidator();
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,68,"alidator.setProtocol(""http"");"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,70,"ssertEquals(""incorrect protocol"", ""http"", validator.getProtocol());"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,72,ry {
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,73,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,74,"ail(""Expected InvalidArgumentException"");"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,75, catch (InvalidArgumentException e) {
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,76,"ssertEquals(""file:///etc"", e.getMessage());"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,81,"inal Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,82,inal List list = Arrays.asList(array);
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,83,"inal UrlValidator validator = new UrlValidator(""http"");"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,85,ry {
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,86,alidator.validate(list);
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,87,"ail(""Expected InvalidArgumentException"");"
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,88, catch (InvalidArgumentException e) {
False,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,89,"ssertEquals(""file:///etc"", e.getMessage());"
True,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,src/test/org/apache/commons/cli2/validation/UrlValidatorTest.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation;import java.net.MalformedURLException;import java.net.URL;import java.util.Arrays;import java.util.Iterator;import java.util.List;import junit.framework.TestCase;import org.apache.commons.cli2.resource.ResourceConstants;import org.apache.commons.cli2.resource.ResourceHelper;public class UrlValidatorTest    extends TestCase {    private static final ResourceHelper resources = ResourceHelper.getResourceHelper();    public void testValidate()        throws InvalidArgumentException, MalformedURLException {        final Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };        final List list = Arrays.asList(array);        final Validator validator = new UrlValidator();        validator.validate(list);        final Iterator i = list.iterator();        assertEquals(new URL(""http://www.apache.org/""), i.next());        assertEquals(new URL(""file:///etc""), i.next());        assertFalse(i.hasNext());    }    public void testMalformedURL()        throws InvalidArgumentException, MalformedURLException {        final Object[] array = new Object[] { ""www.apache.org"" };        final List list = Arrays.asList(array);        final Validator validator = new UrlValidator();        try {            validator.validate(list);        } catch (InvalidArgumentException e) {            assertEquals(resources.getMessage(ResourceConstants.URLVALIDATOR_MALFORMED_URL,                                              new Object[] { ""www.apache.org"" }), e.getMessage());        }    }    public void testBadProtocol() {        {            final Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };            final List list = Arrays.asList(array);            final UrlValidator validator = new UrlValidator();            validator.setProtocol(""http"");            assertEquals(""incorrect protocol"", ""http"", validator.getProtocol());            try {                validator.validate(list);                fail(""Expected InvalidArgumentException"");            } catch (InvalidArgumentException e) {                assertEquals(""file:///etc"", e.getMessage());            }        }        {            final Object[] array = new Object[] { ""http://www.apache.org/"", ""file:///etc"" };            final List list = Arrays.asList(array);            final UrlValidator validator = new UrlValidator(""http"");            try {                validator.validate(list);                fail(""Expected InvalidArgumentException"");            } catch (InvalidArgumentException e) {                assertEquals(""file:///etc"", e.getMessage());            }        }    }}"
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,4, this work for additional information regarding copyright ownership.
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,7, the License.  You may obtain a copy of the License at
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,9,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,14, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,15, limitations under the License.
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,17,ackage org.apache.commons.cli2.validation.protect;
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,19,lass ProtectedClass {
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,20,rotected ProtectedClass() {
False,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,21,/ used to test something???
True,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,src/test/org/apache/commons/cli2/validation/protect/ProtectedClass.java,1,"/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the ""License""); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an ""AS IS"" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.apache.commons.cli2.validation.protect;class ProtectedClass {    protected ProtectedClass() {        // used to test something???    }}"

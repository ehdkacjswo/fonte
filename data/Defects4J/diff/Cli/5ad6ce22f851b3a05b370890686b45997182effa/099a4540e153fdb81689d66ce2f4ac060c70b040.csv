is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,23,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,24,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,32,/** i18n */
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,33,private final static ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,126,if (newName == null) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,127,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,129,"if ("""".equals(newName)) {"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,130,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,156,if (newMinimum < 0) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,157,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,170,if (newMaximum < 0) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,171,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,217,if (newValidator == null) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,218,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,233,if (newConsumeRemaining == null) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,234,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,236,"if ( """".equals(newConsumeRemaining)) {"
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,237,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,250,if (defaultValue == null) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,251,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT));
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,268,if (newDefaultValues == null) {
True,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,src/java/org/apache/commons/cli2/builder/ArgumentBuilder.java,269,throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS));
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,65,rivate final char subsequentSepatator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,65,private final char subsequentSeparator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,115,his.subsequentSepatator = subsequentSeparator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,115,this.subsequentSeparator = subsequentSeparator;
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,165,"ew StringTokenizer(allValues, String.valueOf(subsequentSepatator));"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,165,"new StringTokenizer(allValues, String.valueOf(subsequentSeparator));"
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,209,public char getSubsequentSeparator() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,210,return this.subsequentSeparator;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,217,public String getConsumeRemaining() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,218,return this.consumeRemaining;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,221,public List getDefaultValues() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,222,return this.defaultValues;
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,225,public Validator getValidator() {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,226,return this.validator;
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,57,"public static final String ARGUMENT_BUILDER_NULL_CONSUME_REMAINING = ""ArgumentBuilder.null.consume.remaining"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,58,"public static final String ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING = ""ArgumentBuilder.empty.consume.remaining"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,59,"public static final String ARGUMENT_BUILDER_NULL_DEFAULT = ""ArgumentBuilder.null.default"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,60,"public static final String ARGUMENT_BUILDER_NULL_DEFAULTS = ""ArgumentBuilder.null.defaults"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,61,"public static final String ARGUMENT_BUILDER_NEGATIVE_MAXIMUM = ""ArgumentBuilder.negative.maximum"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,62,"public static final String ARGUMENT_BUILDER_NEGATIVE_MINIMUM = ""ArgumentBuilder.negative.minimum"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,63,"public static final String ARGUMENT_BUILDER_NULL_NAME = ""ArgumentBuilder.null.name"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,64,"public static final String ARGUMENT_BUILDER_EMPTY_NAME = ""ArgumentBuilder.empty.name"";"
True,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,src/java/org/apache/commons/cli2/resource/ResourceConstants.java,65,"public static final String ARGUMENT_BUILDER_NULL_VALIDATOR = ""ArgumentBuilder.null.validator"";"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,2,* Copyright 2004-2005 The Apache Software Foundation
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,16,package org.apache.commons.cli2.builder;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,18,import java.util.ArrayList;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,19,import java.util.List;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,23,import org.apache.commons.cli2.option.ArgumentImpl;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,24,import org.apache.commons.cli2.resource.ResourceConstants;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,25,import org.apache.commons.cli2.resource.ResourceHelper;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,26,import org.apache.commons.cli2.validation.DateValidator;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,27,import org.apache.commons.cli2.validation.Validator;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,29,public class ArgumentBuilderTest
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,30,extends TestCase {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,31,private static final ResourceHelper resources = ResourceHelper.getResourceHelper();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,32,private ArgumentBuilder argumentBuilder;
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,35,* @see TestCase#setUp()
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,37,protected void setUp()
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,38,throws Exception {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,39,this.argumentBuilder = new ArgumentBuilder();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,42,public void testConsumeRemaining() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,43,"this.argumentBuilder.withConsumeRemaining(""--"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,44,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,46,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,48,"assertEquals(""incorrect consume remaining token"", ""--"", arg.getConsumeRemaining());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,51,public void testNullConsumeRemaining() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,52,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,53,this.argumentBuilder.withConsumeRemaining(null);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,54,"fail(""cannot use null consume remaining token"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,55,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,56,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,57,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_CONSUME_REMAINING),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,58,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,62,public void testEmptyConsumeRemaining() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,63,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,64,"this.argumentBuilder.withConsumeRemaining("""");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,65,"fail(""cannot use empty string consume remaining token"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,66,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,67,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,68,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_CONSUME_REMAINING),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,69,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,73,public void testDefault() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,74,"this.argumentBuilder.withDefault(""defaultString"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,75,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,77,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,79,"assertEquals(""incorrect number of default values"", 1, arg.getDefaultValues().size());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,80,"assertEquals(""incorrect default value"", ""defaultString"", arg.getDefaultValues().get(0));"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,83,public void testDefaultX2() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,84,"this.argumentBuilder.withDefault(""defaultString1"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,85,"this.argumentBuilder.withDefault(""defaultString2"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,86,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,88,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,90,"assertEquals(""incorrect number of default values"", 2, arg.getDefaultValues().size());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,91,"assertEquals(""incorrect default value-1"", ""defaultString1"", arg.getDefaultValues().get(0));"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,92,"assertEquals(""incorrect default value-2"", ""defaultString2"", arg.getDefaultValues().get(1));"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,95,public void testNullDefault() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,96,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,97,this.argumentBuilder.withDefault(null);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,98,"fail(""cannot use null default"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,99,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,100,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,101,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULT),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,102,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,106,public void testDefaults() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,107,final List defaults = new ArrayList();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,108,"defaults.add(""one"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,109,"defaults.add(""two"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,111,this.argumentBuilder.withDefaults(defaults);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,112,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,114,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,116,"assertEquals(""incorrect number of default values"", 2, arg.getDefaultValues().size());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,117,"assertEquals(""incorrect default value-1"", ""one"", arg.getDefaultValues().get(0));"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,118,"assertEquals(""incorrect default value-2"", ""two"", arg.getDefaultValues().get(1));"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,119,"assertEquals(""incorrect default values list"", defaults, arg.getDefaultValues());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,123,public void testNullDefaults() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,124,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,125,this.argumentBuilder.withDefaults(null);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,126,"fail(""cannot use null defaults"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,127,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,128,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,129,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_DEFAULTS),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,130,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,134,public void testId() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,135,this.argumentBuilder.withId(1);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,136,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,138,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,140,"assertEquals(""incorrect id"", 1, arg.getId());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,143,public void testInitialSeparator() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,144,"this.argumentBuilder.withInitialSeparator(',');"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,145,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,147,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,149,"assertEquals(""incorrect initial separator"", ',', arg.getInitialSeparator());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,152,public void testMaximum() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,153,this.argumentBuilder.withMaximum(1);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,154,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,156,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,158,"assertEquals(""incorrect maximum"", 1, arg.getMaximum());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,161,public void testNegativeMaximum() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,162,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,163,this.argumentBuilder.withMaximum(-1);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,164,"fail(""cannot use negative maximum"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,165,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,166,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,167,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MAXIMUM),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,168,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,172,public void testMinimum() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,173,this.argumentBuilder.withMinimum(1);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,174,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,176,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,178,"assertEquals(""incorrect maximum"", 1, arg.getMinimum());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,181,public void testNegativeMinimum() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,182,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,183,this.argumentBuilder.withMinimum(-1);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,184,"fail(""cannot use negative minimum"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,185,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,186,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,187,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NEGATIVE_MINIMUM),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,188,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,192,public void testName() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,193,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,195,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,197,"assertEquals(""incorrect preferred name"", ""arg"", arg.getPreferredName());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,200,public void testNullName() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,201,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,202,this.argumentBuilder.withName(null);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,203,"fail(""cannot use null name"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,204,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,205,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,206,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_NAME),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,207,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,211,public void testEmptyName() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,212,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,213,"this.argumentBuilder.withName("""");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,214,"fail(""cannot use empty name"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,215,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,216,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,217,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_EMPTY_NAME),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,218,exp.getMessage());
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,222,public void testSubsequentSeparator() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,223,this.argumentBuilder.withSubsequentSeparator(':');
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,224,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,226,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,228,"assertEquals(""incorrect subsequent separator"", ':', arg.getSubsequentSeparator());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,231,public void testValidator() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,232,Validator validator = DateValidator.getDateInstance();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,233,this.argumentBuilder.withValidator(validator);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,234,"this.argumentBuilder.withName(""arg"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,236,ArgumentImpl arg = (ArgumentImpl) this.argumentBuilder.create();
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,238,"assertEquals(""incorrect validator"", validator, arg.getValidator());"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,241,public void testNullValidator() {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,242,try {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,243,this.argumentBuilder.withValidator(null);
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,244,"fail(""cannot use null validator"");"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,245,} catch (IllegalArgumentException exp) {
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,246,"assertEquals(""wrong exception message"","
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,247,"resources.getMessage(ResourceConstants.ARGUMENT_BUILDER_NULL_VALIDATOR),"
True,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,src/test/org/apache/commons/cli2/builder/ArgumentBuilderTest.java,248,exp.getMessage());
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,394,public void testNullPreferredName() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,395,try {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,396,new CommandBuilder().create();
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,397,} catch (IllegalStateException exp) {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,398,"assertEquals(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.OPTION_NO_NAME), exp.getMessage());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,402,public void testRequired() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,403,"Command cmd = new CommandBuilder().withRequired(true).withName(""blah"").create();"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,404,"assertTrue(""cmd is not required"", cmd.isRequired());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,405,"assertEquals(""id is incorrect"", 0, cmd.getId());"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,408,public void testID() {
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,409,"Command cmd = new CommandBuilder().withId('c').withName(""blah"").create();"
True,src/test/org/apache/commons/cli2/option/ParentTest.java,src/test/org/apache/commons/cli2/option/ParentTest.java,410,"assertEquals(""id is incorrect"", 'c', cmd.getId());"

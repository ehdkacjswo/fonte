is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,1,package org.apache.commons.cli;
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,4,* @author John Keyes (jbjk at mac.com)
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,6,public class BasicParser extends Parser {
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,8,"protected String[] flatten( Options options,"
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,9,"String[] arguments,"
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,10,boolean stopAtNonOption )
True,src/java/org/apache/commons/cli/BasicParser.java,src/java/org/apache/commons/cli/BasicParser.java,12,return arguments;
False,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Attic/CommandLineParserFactory.java,v 1.2 2002/07/25 21:40:08 jkeyes Exp $"
False,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,3, $Revision: 1.2 $
False,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,4, $Date: 2002/07/25 21:40:08 $
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,2,"* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Attic/CommandLineParserFactory.java,v 1.3 2002/08/24 22:15:31 jkeyes Exp $"
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,3,* $Revision: 1.3 $
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,4,* $Date: 2002/08/24 22:15:31 $
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,83,* @return the CommandLineParser specified by <code>classname</code>.
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,87,// return the new CommandLineParser
True,src/java/org/apache/commons/cli/CommandLineParserFactory.java,src/java/org/apache/commons/cli/CommandLineParserFactory.java,100,// must return something
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.6 2002/08/15 22:05:18 jkeyes Exp $"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,3, $Revision: 1.6 $
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,4, $Date: 2002/08/15 22:05:18 $
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,8," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,10, Copyright (c) 1999-2001 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,11, reserved.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,13," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,14," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,15, are met:
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,17, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,18,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,20, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,21,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,22,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,23,    distribution.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,25," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,26,"    any, must include the following acknowlegement:"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,27,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,28,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,29,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,30,    if and wherever such third-party acknowlegements normally appear.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,32," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,33,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,34,    from this software without prior written permission. For written
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,35,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,37," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,38,"    nor may ""Apache"" appear in their names without prior written"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,39,    permission of the Apache Group.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,41, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,42," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,43, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,44, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,45," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,46," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,47," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,48," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,49," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,50, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,51," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,52, SUCH DAMAGE.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,55, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,56, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,57," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,58, <http://www.apache.org/>.
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,4,import java.util.ArrayList;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,66,mport java.util.ListIterator;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,8,import java.util.Iterator;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,70, GnuParser parses the command line arguments using the GNU style.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,71," For example, -buildfile can only be interpreted as the option"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,72, 'buildfile'.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,76,ublic class GnuParser implements CommandLineParser {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,78,** current options instance */
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,79,rivate Options options;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,81,** convience member for the command line */
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,82,rivate CommandLine cmd;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,13,public class GnuParser extends Parser {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,84,** required options subset of options */
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,85,rivate Map requiredOptions;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,15,private ArrayList tokens = new ArrayList();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,88, Parse the arguments according to the specified options.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,90, @param options the specified Options
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,91, @param arguments the command line arguments
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,92, @return the list of atomic option and value tokens
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,93, @throws ParseException if there are any problems encountered
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,94, while parsing the command line tokens.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,96,"ublic CommandLine parse( Options options, String[] arguments )"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,97,hrows ParseException
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,99,"eturn parse( options, arguments, false );"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,17,private void init() {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,18,tokens.clear();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,103, Parse the arguments according to the specified options.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,105, @param opts the specified Options
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,106, @param arguments the command line arguments
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,107, @param stopAtNonOption specifies whether to continue parsing the
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,108, arguments if a non option is encountered.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,109, @return the CommandLine
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,110, @throws ParseException if there are any problems encountered
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,111, while parsing the command line tokens.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,113,"ublic CommandLine parse( Options opts, String[] arguments, boolean stopAtNonOption )"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,114,hrows ParseException
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,21,"protected String[] flatten( Options options,"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,22,"String[] arguments,"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,23,boolean stopAtNonOption )
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,116,/ set the member instances
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,117,ptions = opts;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,118,md = new CommandLine();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,119,equiredOptions = options.getRequiredOptions();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,121,istIterator iter = Arrays.asList( arguments ).listIterator();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,122,tring token = null;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,124,/ flag to indicate whether the remainder of the tokens should
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,125,/ be added to the other arguments list
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,126,oolean eatTheRest = false;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,128,hile ( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,129,oken = (String) iter.next();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,130,"f ( token.equals(""--"") ) {"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,131,atTheRest = true;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,133,"lse if ( token.startsWith(""--"") ) {"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,134,/process the long-option
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,135,"rocessOption( token, iter );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,137,"lse if ( token.startsWith(""-"") ) {"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,138,f ( token.length() == 1) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,139,"/ It's not really an option, so"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,140,/ just drop it on the list
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,141,f ( stopAtNonOption ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,142,atTheRest = true;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,144,lse {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,145,md.addArg( token );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,25,init();
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,26,for( int i = 0; i < arguments.length; i++ ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,27,Option option = options.getOption( arguments[i] );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,28,try {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,29,"Option specialOption = options.getOption( arguments[i].substring(0,2) );"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,30,if( specialOption != null && option == null ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,31,"tokens.add( arguments[i].substring(0,2) );"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,32,tokens.add( arguments[i].substring(2) );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,149,"rocessOption( token, iter );"
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,35,tokens.add( arguments[i] );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,152,lse {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,153,"/ It's just a normal non-option arg,"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,154,/ so dump it into the list of returned
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,155,/ values.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,157,md.addArg( token );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,159,f ( stopAtNonOption ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,160,atTheRest = true;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,164,f ( eatTheRest ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,165,hile ( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,166,md.addArg( (String)iter.next() );
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,38,catch( IndexOutOfBoundsException exp ) {
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,39,tokens.add( arguments[i] );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,171,/ see if all required options have been processed
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,172,heckRequiredOptions( );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,174,eturn cmd;
True,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,42,return (String[])tokens.toArray( new String[] {} );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,178, It the option can accept multiple argument values then
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,179, keep adding values until the next option token is encountered.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,181, @param opt the specified option
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,182, @param iter the iterator over the command line tokens
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,184,"ublic void processArgs( Option opt, ListIterator iter )"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,185,hrows ParseException
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,187,f( !iter.hasNext() && !opt.hasOptionalArg() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,188,"hrow new MissingArgumentException( ""no argument for:"" + opt.getOpt() );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,190,/ loop until an option is found
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,191,hile( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,192,tring var = (String)iter.next();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,194,/ its an option
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,195,"f( !var.equals( ""-"" ) && var.startsWith( ""-"" ) ) {"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,196,/ set the iterator pointer back a position
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,197,ter.previous();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,198,reak;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,200,/ its a value
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,201,lse if( !opt.addValue( var ) ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,202,ter.previous();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,203,eturn;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,209, Process the option represented by <code>arg</code>.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,211, @param arg the string representation of an option
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,212, @param iter the command line token iterator
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,214,"rivate void processOption( String arg, ListIterator iter )"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,215,hrows ParseException
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,217,tring value = null;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,219,/ see if it is a single character special option
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,220,ption opt = (Option) options.getOption( arg );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,221,"ption specialOption = (Option) options.getOption( arg.substring(0,2 ) );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,222,f( specialOption != null && opt == null) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,223,pt = specialOption;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,224,alue = arg.substring( 2 );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,225,har sep = opt.getValueSeparator();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,227,f( sep > 0 ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,228,nt findex;
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,229,hile( ( findex = value.indexOf( sep ) ) != -1 ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,230,"tring val = value.substring( 0, findex );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,231,alue = value.substring( findex + 1);
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,232,f( !opt.addValue( val ) ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,233,md.addArg( val );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,236,f( !opt.addValue( value ) ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,237,md.addArg( value );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,240,lse {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,241,/ add the argument value
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,242,pt.addValue( value );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,246,/ if there is no option throw an UnrecognisedOptionException
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,247,f( opt == null ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,248,"hrow new UnrecognizedOptionException(""Unrecognized option: "" + arg);"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,251,/ if the option is a required option remove the option from
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,252,/ the requiredOptions list
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,253,f ( opt.isRequired() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,254,equiredOptions.remove( opt );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,257,/ if the option is in an OptionGroup make that option the selected
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,258,/ option of the group
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,259,f ( options.getOptionGroup( opt ) != null ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,260, (OptionGroup)( options.getOptionGroup( opt ) ) ).setSelected( opt );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,263,/ if the option takes an argument value
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,264,f ( opt.hasArg() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,265,"rocessArgs( opt, iter );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,268,/ set the option on the command line
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,269,md.setOpt( opt );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,273, Ensures that all required options are present.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,275, @throws ParseException if all of the required options
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,276, are not present.
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,278,rivate void checkRequiredOptions( )
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,279,hrows ParseException {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,281,/ if there are required options that have not been
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,282,/ processsed
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,283,f( requiredOptions.size() > 0 ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,284,terator iter = requiredOptions.values().iterator();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,285,tringBuffer buff = new StringBuffer();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,287,/ loop through the required options
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,288,hile( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,289,ption missing = (Option)iter.next();
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,290,"uff.append( ""-"" );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,291,uff.append( missing.getOpt() );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,292,"uff.append( "" "" );"
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,293,uff.append( missing.getDescription() );
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,296,/ throw the MissingOptionException
False,src/java/org/apache/commons/cli/GnuParser.java,src/java/org/apache/commons/cli/GnuParser.java,297,hrow new MissingOptionException( buff.toString() );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,1,package org.apache.commons.cli;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,3,import java.util.Arrays;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,4,import java.util.Iterator;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,5,import java.util.List;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,6,import java.util.ListIterator;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,7,import java.util.Map;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,9,public abstract class Parser implements CommandLineParser {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,11,private CommandLine cmd;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,12,private Options options;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,13,private Map requiredOptions;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,15,"abstract protected String[] flatten( Options opts,"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,16,"String[] args,"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,17,boolean stopAtNonOption );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,19,"public CommandLine parse( Options opts, String[] args )"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,20,throws ParseException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,22,"return parse( opts, args, false );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,25,"public CommandLine parse( Options opts,"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,26,"String[] args,"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,27,boolean stopAtNonOption )
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,28,throws ParseException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,30,options = opts;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,31,requiredOptions = options.getRequiredOptions();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,32,"String[] tokens = flatten( opts, args, stopAtNonOption );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,33,List tokenList = Arrays.asList( tokens );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,34,ListIterator iterator = tokenList.listIterator();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,35,cmd = new CommandLine();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,36,boolean eatTheRest = false;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,37,while( iterator.hasNext() ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,38,String t = (String)iterator.next();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,39,"if( ""--"".equals( t ) ) {"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,40,eatTheRest = true;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,42,"else if( t.startsWith( ""-"" ) ) {"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,43,if( t.length() == 1 ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,44,"// not an option, so just drop it on the argument list"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,45,if ( stopAtNonOption ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,46,eatTheRest = true;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,48,else {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,49,cmd.addArg( t );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,52,else {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,53,"processOption( t, iterator );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,56,else {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,57,cmd.addArg( t );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,58,if( stopAtNonOption ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,59,eatTheRest = true;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,63,if( eatTheRest ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,64,while( iterator.hasNext() ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,65,cmd.addArg( (String)iterator.next() );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,69,checkRequiredOptions();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,70,return cmd;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,73,private void checkRequiredOptions( )
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,74,throws ParseException {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,76,// if there are required options that have not been
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,77,// processsed
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,78,if( requiredOptions.size() > 0 ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,79,Iterator iter = requiredOptions.values().iterator();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,80,StringBuffer buff = new StringBuffer();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,82,// loop through the required options
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,83,while( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,84,Option missing = (Option)iter.next();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,85,"buff.append( ""-"" );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,86,buff.append( missing.getOpt() );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,87,"buff.append( "" "" );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,88,buff.append( missing.getDescription() );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,91,// throw the MissingOptionException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,92,throw new MissingOptionException( buff.toString() );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,96,"public void processArgs( Option opt, ListIterator iter )"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,97,throws ParseException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,99,if( !iter.hasNext() && !opt.hasOptionalArg() ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,100,"throw new MissingArgumentException( ""no argument for:"" + opt.getOpt() );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,102,// loop until an option is found
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,103,while( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,104,String var = (String)iter.next();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,105,if( options.hasOption( var ) ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,106,iter.previous();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,107,break;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,110,// its a value
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,111,else {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,112,if( !opt.addValue( var ) ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,113,iter.previous();
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,114,break;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,120,"private void processOption( String arg, ListIterator iter )"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,121,throws ParseException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,123,// get the option represented by arg
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,124,Option opt = null;
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,126,boolean hasOption = options.hasOption( arg );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,128,// if there is no option throw an UnrecognisedOptionException
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,129,if( !hasOption ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,130,"throw new UnrecognizedOptionException(""Unrecognized option: "" + arg);"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,132,else {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,133,opt = (Option) options.getOption( arg );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,136,// if the option is a required option remove the option from
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,137,// the requiredOptions list
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,138,if ( opt.isRequired() ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,139,"requiredOptions.remove( ""-"" + opt.getOpt() );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,142,// if the option is in an OptionGroup make that option the selected
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,143,// option of the group
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,144,if ( options.getOptionGroup( opt ) != null ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,145,( (OptionGroup)( options.getOptionGroup( opt ) ) ).setSelected( opt );
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,148,// if the option takes an argument value
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,149,if ( opt.hasArg() ) {
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,150,"processArgs( opt, iter );"
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,153,// set the option on the command line
True,src/java/org/apache/commons/cli/Parser.java,src/java/org/apache/commons/cli/Parser.java,154,cmd.setOpt( opt );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,2," $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.7 2002/08/15 22:05:18 jkeyes Exp $"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,3, $Revision: 1.7 $
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,4, $Date: 2002/08/15 22:05:18 $
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,8," The Apache Software License, Version 1.1"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,10, Copyright (c) 1999-2001 The Apache Software Foundation.  All rights
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,11, reserved.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,13," Redistribution and use in source and binary forms, with or without"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,14," modification, are permitted provided that the following conditions"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,15, are met:
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,17, 1. Redistributions of source code must retain the above copyright
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,18,"    notice, this list of conditions and the following disclaimer."
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,20, 2. Redistributions in binary form must reproduce the above copyright
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,21,"    notice, this list of conditions and the following disclaimer in"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,22,    the documentation and/or other materials provided with the
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,23,    distribution.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,25," 3. The end-user documentation included with the redistribution, if"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,26,"    any, must include the following acknowlegement:"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,27,"       ""This product includes software developed by the"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,28,"        Apache Software Foundation (http://www.apache.org/)."""
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,29,"    Alternately, this acknowlegement may appear in the software itself,"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,30,    if and wherever such third-party acknowlegements normally appear.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,32," 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,33,"    Foundation"" must not be used to endorse or promote products derived"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,34,    from this software without prior written permission. For written
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,35,"    permission, please contact apache@apache.org."
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,37," 5. Products derived from this software may not be called ""Apache"""
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,38,"    nor may ""Apache"" appear in their names without prior written"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,39,    permission of the Apache Group.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,41, THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,42," WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,43, OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,44, DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,45," ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,46," SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,47," LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,48," USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,49," ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,50, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,51," OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,52, SUCH DAMAGE.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,55, This software consists of voluntary contributions made by many
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,56, individuals on behalf of the Apache Software Foundation.  For more
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,57," information on the Apache Software Foundation, please see"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,58, <http://www.apache.org/>.
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,4,import java.util.ArrayList;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,65,mport java.util.ListIterator;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,66,mport java.util.Map;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,7,import java.util.Map;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,70, PosixParser parses the command line arguments using the Posix style.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,71," For example, -buildfile can only be interpreted as the option"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,72, 'b' with value 'uildfile' or it could be interpreted as the options
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,73," 'b','u','i','l','d','f','i','l','e'."
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,77,ublic class PosixParser implements CommandLineParser {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,12,public class PosixParser extends Parser {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,79,** current options instance */
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,14,private ArrayList tokens = new ArrayList();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,15,private boolean eatTheRest;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,16,private Option currentOption;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,82,** convience member for the command line */
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,83,rivate CommandLine cmd;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,85,** required options subset of options */
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,86,rivate Map requiredOptions;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,89, Parse the arguments according to the specified options.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,91, @param options the specified Options
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,92, @param arguments the command line arguments
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,93, @return the list of atomic option and value tokens
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,94, @throws ParseException if there are any problems encountered
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,95, while parsing the command line tokens.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,97,"ublic CommandLine parse( Options options, String[] arguments )"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,98,hrows ParseException
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,100,"eturn parse( options, arguments, false );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,19,private void init() {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,20,eatTheRest = false;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,21,tokens.clear();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,22,currentOption = null;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,104, Parse the arguments according to the specified options.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,106, @param opts the specified Options
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,107, @param arguments the command line arguments
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,108, @param stopAtNonOption specifies whether to continue parsing the
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,109, arguments if a non option is encountered.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,110, @return the CommandLine
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,111, @throws ParseException if there are any problems encountered
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,112, while parsing the command line tokens.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,114,"ublic CommandLine parse( Options opts, String[] arguments, boolean stopAtNonOption )"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,115,hrows ParseException
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,25,"protected String[] flatten( Options options,"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,26,"String[] arguments,"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,27,boolean stopAtNonOption )
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,117,/ set the member instances
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,118,ptions = opts;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,119,md = new CommandLine();
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,120,equiredOptions = options.getRequiredOptions();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,29,init();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,30,this.options = options;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,123,istIterator iter = Arrays.asList( arguments ).listIterator();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,33,Iterator iter = Arrays.asList( arguments ).iterator();
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,126,/ flag to indicate whether the remainder of the tokens should
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,127,/ be added to the other arguments list
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,128,oolean eatTheRest = false;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,136,"/ Look for -- to indicate end-of-options, and"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,137,"/ just stuff it, along with everything past it"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,138,/ into the returned list.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,139,"f ( token.equals(""--"") ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,140,atTheRest = true;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,42,// handle SPECIAL TOKEN
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,43,"if( token.startsWith( ""--"" ) ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,44,tokens.add( token );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,142,"lse if ( token.startsWith(""--"") ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,143,/ process the long-option
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,144,"rocessOption( token, iter );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,46,// single hyphen
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,47,"else if( ""-"".equals( token ) ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,48,processSingleHyphen( token );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,146,"lse if ( token.startsWith(""-"") ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,147,/ it might be a short arg needing some bursting
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,148,f ( token.length() == 1) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,149,"/ not an option, so just drop it on the argument list"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,150,f ( stopAtNonOption ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,151,atTheRest = true;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,153,lse {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,154,md.addArg( token );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,157,lse if ( token.length() == 2 ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,158,"rocessOption( token, iter );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,50,"else if( token.startsWith( ""-"" ) ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,51,int tokenLength = token.length();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,52,if( tokenLength == 2 ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,53,"processOptionToken( token, stopAtNonOption );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,55,// requires bursting
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,161,/ Needs bursting.  Figure out if we have multiple
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,162,"/ options, or maybe an option plus an arg, or some"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,163,/ combination thereof.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,165,/ iterate over each character in the token
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,166,or ( int i = 1 ; i < token.length() ; ++i ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,168,tring argname = String.valueOf( token.charAt(i) );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,169,/ retrieve the associated option
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,170,oolean hasOption = options.hasOption( argname );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,172,ption opt = null;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,174,/ if there is an associated option
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,175,f ( hasOption ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,176,pt = options.getOption( argname );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,178,/ if the option requires an argument value
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,179,f ( opt.hasArg() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,180,/ consider the rest of the token
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,181,/ to be the argument value
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,183,/ if there is no argument value
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,184,f( token.substring(i+1).length() == 0 && !opt.hasOptionalArg() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,185,"hrow new MissingArgumentException( ""Missing argument value for "" + opt.getOpt() );"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,187,lse {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,188,pt.addValue( token.substring(i+1) );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,191,/ set the option
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,192,md.setOpt( opt );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,194,/ don't process any more characters
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,195,reak;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,198,/ if the option does not require an argument
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,199,md.setOpt( opt );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,201,/ this is an unrecognized option
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,202,lse {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,203,hrow new UnrecognizedOptionException( String.valueOf( token.charAt(i) ) );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,57,"burstToken( token, stopAtNonOption );"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,209,"/ It's just a normal non-option arg, so dump it into the"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,210,/ list of returned values.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,211,md.addArg( token );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,213,f ( stopAtNonOption ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,214,atTheRest = true;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,61,if( stopAtNonOption ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,62,process( token );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,218,/ add all unprocessed tokens to the arg list
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,219,f ( eatTheRest ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,220,hile ( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,221,md.addArg( (String)iter.next() );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,64,else {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,65,tokens.add( token );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,69,gobble( iter );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,226,/ see if all required options have been processed
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,227,heckRequiredOptions( );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,229,/ return the CommandLine instance
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,230,eturn cmd;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,72,return (String[])tokens.toArray( new String[] {} );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,234, Process the option represented by <code>arg</code>.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,236, @param arg the string representation of an option
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,237, @param iter the command line token iterator
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,239,"rivate void processOption( String arg, ListIterator iter )"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,240,hrows ParseException
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,242,/ get the option represented by arg
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,243,ption opt = null;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,245,oolean hasOption = options.hasOption( arg );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,75,private void gobble( Iterator iter ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,76,if( eatTheRest ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,77,while( iter.hasNext() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,78,tokens.add( iter.next() );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,247,/ if there is no option throw an UnrecognisedOptionException
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,248,f( !hasOption ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,249,"hrow new UnrecognizedOptionException(""Unrecognized option: "" + arg);"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,83,private void process( String value ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,84,if( currentOption != null && currentOption.hasArg() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,85,if( currentOption.hasArg() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,86,tokens.add( value );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,87,currentOption = null;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,89,else if (currentOption.hasArgs() ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,90,tokens.add( value );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,252,pt = (Option) options.getOption( arg );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,94,eatTheRest = true;
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,95,"tokens.add( ""--"" );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,96,tokens.add( value );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,255,/ if the option is a required option remove the option from
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,256,/ the requiredOptions list
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,257,f ( opt.isRequired() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,258,"equiredOptions.remove( ""-"" + opt.getOpt() );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,100,private void processSingleHyphen( String hyphen ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,101,tokens.add( hyphen );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,261,/ if the option is in an OptionGroup make that option the selected
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,262,/ option of the group
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,263,f ( options.getOptionGroup( opt ) != null ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,264, (OptionGroup)( options.getOptionGroup( opt ) ) ).setSelected( opt );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,104,"private void processOptionToken( String token, boolean stop ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,105,if( this.options.hasOption( token ) ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,106,currentOption = this.options.getOption( token );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,107,tokens.add( token );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,267,/ if the option takes an argument value
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,268,f ( opt.hasArg() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,269,"rocessArgs( opt, iter );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,109,else if( stop ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,110,eatTheRest = true;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,272,/ set the option on the command line
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,273,md.setOpt( opt );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,277, It the option can accept multiple argument values then
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,278, keep adding values until the next option token is encountered.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,280, @param opt the specified option
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,281, @param iter the iterator over the command line tokens
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,283,"ublic void processArgs( Option opt, ListIterator iter )"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,284,hrows ParseException
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,286,f( !iter.hasNext() && !opt.hasOptionalArg() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,287,"hrow new MissingArgumentException( ""no argument for:"" + opt.getOpt() );"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,289,/ loop until an option is found
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,290,hile( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,291,tring var = (String)iter.next();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,114,"private void burstToken( String token, boolean stop ) {"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,115,int tokenLength = token.length();
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,293,/ its an option
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,294,"f( !var.equals( ""-"" ) && var.startsWith( ""-"" ) ) {"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,295,/ set the iterator pointer back a position
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,296,ter.previous();
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,297,reak;
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,299,/ its a value
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,300,lse {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,301,f( !opt.addValue( var ) ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,302,ter.previous();
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,117,for( int i = 1; i < tokenLength; i++) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,118,String ch = String.valueOf( token.charAt( i ) );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,119,boolean hasOption = options.hasOption( ch );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,121,if( hasOption ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,122,"tokens.add( ""-"" + ch );"
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,123,currentOption = options.getOption( ch );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,124,if( currentOption.hasArg() && token.length()!=i+1 ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,125,tokens.add( token.substring( i+1 ) );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,310, Ensures that all required options are present.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,312, @throws ParseException if all of the required options
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,313, are not present.
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,315,rivate void checkRequiredOptions( )
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,316,hrows ParseException {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,318,/ if there are required options that have not been
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,319,/ processsed
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,320,f( requiredOptions.size() > 0 ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,321,terator iter = requiredOptions.values().iterator();
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,322,tringBuffer buff = new StringBuffer();
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,324,/ loop through the required options
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,325,hile( iter.hasNext() ) {
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,326,ption missing = (Option)iter.next();
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,327,"uff.append( ""-"" );"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,328,uff.append( missing.getOpt() );
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,329,"uff.append( "" "" );"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,330,uff.append( missing.getDescription() );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,129,else if( stop ) {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,130,process( token.substring( i ) );
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,132,else {
True,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,133,"tokens.add( ""-"" + ch );"
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,333,/ throw the MissingOptionException
False,src/java/org/apache/commons/cli/PosixParser.java,src/java/org/apache/commons/cli/PosixParser.java,334,hrow new MissingOptionException( buff.toString() );

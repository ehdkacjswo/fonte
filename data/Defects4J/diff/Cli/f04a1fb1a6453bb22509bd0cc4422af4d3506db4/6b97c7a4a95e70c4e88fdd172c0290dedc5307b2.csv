is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,146,inal String allValues = stripBoundaryQuotes((String) arguments.next());
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,146,final String allValuesQuoted = (String) arguments.next();
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,147,final String allValues = stripBoundaryQuotes(allValuesQuoted);
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,149,f (allValues.equals(consumeRemaining)) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,150,if (allValuesQuoted.equals(consumeRemaining)) {
False,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,156,lse if (commandLine.looksLikeOption(allValues)) {
True,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,src/java/org/apache/commons/cli2/option/ArgumentImpl.java,157,else if (commandLine.looksLikeOption(allValuesQuoted)) {
False,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,220,rguments.add(newArgument.substring(initialIndex + 1));
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,220,String value = newArgument.substring(initialIndex + 1);
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,221,"// The value obviously isn't an option, so we need to quote it if looks like an option."
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,222,// The quotes will be removed later
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,223,"if (value.startsWith(""-"")) {"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,224,"value = '""' + value + '""';"
True,src/java/org/apache/commons/cli2/option/ParentImpl.java,src/java/org/apache/commons/cli2/option/ParentImpl.java,226,arguments.add(value);
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,1,package org.apache.commons.cli2.bug;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,3,import junit.framework.TestCase;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,4,import org.apache.commons.cli2.*;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,5,import org.apache.commons.cli2.builder.ArgumentBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,6,import org.apache.commons.cli2.builder.DefaultOptionBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,7,import org.apache.commons.cli2.builder.GroupBuilder;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,8,import org.apache.commons.cli2.commandline.Parser;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,9,import org.apache.commons.cli2.validation.FileValidator;
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,12,* @author brianegge
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,14,public class BugCLI122Test extends TestCase {
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,15,public void testArgumentWhichStartsWithDash() throws OptionException {
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,16,Argument wdArg = new ArgumentBuilder()
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,17,".withName(""anything"")"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,18,.withMaximum(1)
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,19,.withMinimum(1)
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,20,.withInitialSeparator('=')
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,21,.create();
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,23,Option wdOpt = new DefaultOptionBuilder().withArgument(wdArg)
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,24,".withDescription(""anything, foo or -foo"")"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,25,".withLongName(""argument"")"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,26,".withShortName(""a"")"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,27,.create();
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,29,Group group = new GroupBuilder().withOption(wdOpt).create();
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,31,Parser p = new Parser();
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,32,p.setGroup(group);
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,33,"CommandLine normal = p.parse (new String[]{""-a"", ""foo""});"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,34,assertNotNull(normal);
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,35,"assertEquals(normal.getValue(wdOpt), ""foo"");"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,37,"CommandLine withDash = p.parse (new String[]{""--argument"", ""\""-foo\""""});"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,38,assertNotNull(withDash);
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,39,"assertEquals(""-foo"", withDash.getValue(wdOpt));"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,41,"CommandLine withDashAndEquals = p.parse (new String[]{""--argument=-foo""});"
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,42,assertNotNull(withDashAndEquals);
True,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,src/test/org/apache/commons/cli2/bug/BugCLI122Test.java,43,"assertEquals(""-foo"", withDashAndEquals.getValue(wdOpt));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,122,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,123,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,124,* <p>This default implementation is copied from Apache Harmony
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,125,* java.util.Random (r929253).</p>
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,127,* <p>Implementation notes: <ul>
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,128,"* <li>If n is a power of 2, this method returns"
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,129,* {@code (int) ((n * (long) next(31)) >> 31)}.</li>
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,131,"* <li>If n is not a power of 2, what is returned is {@code next(31) % n}"
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,132,* with {@code next(31)} values rejected (i.e. regenerated) until a
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,133,* value that is larger than the remainder of {@code Integer.MAX_VALUE / n}
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,134,* is generated. Rejection of this initial segment is necessary to ensure
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,135,* a uniform distribution.</li></ul></p>
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,125,f (n < 1) {
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,126,hrow new NotStrictlyPositiveException(n);
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,129,/ find bit mask for n
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,130,nt mask = n;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,131,ask |= mask >> 1;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,132,ask |= mask >> 2;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,133,ask |= mask >> 4;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,134,ask |= mask >> 8;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,135,ask |= mask >> 16;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,137,hile (true) {
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,138,inal int random = next(32) & mask;
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,139,f (random < n) {
False,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,140,eturn random;
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,138,if (n > 0) {
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,139,if ((n & -n) == n) {
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,140,return (int) ((n * (long) next(31)) >> 31);
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,142,int bits;
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,143,int val;
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,144,do {
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,145,bits = next(31);
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,146,val = bits % n;
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,147,} while (bits - val + (n - 1) < 0);
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,148,return val;
True,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/main/java/org/apache/commons/math/random/BitsStreamGenerator.java,150,throw new NotStrictlyPositiveException(n);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,19,import java.util.Arrays;
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,80,ublic void testNextIntDirect() {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,83,* Tests uniformity of nextInt(int) distribution by generating 1000
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,84,* samples for each of 10 test values and for each sample performing
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,85,* a chi-square test of homogeneity of the observed distribution with
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,86,* the expected uniform distribution.  Tests are performed at the .01
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,87,* level and an average failure rate higher than 2% (i.e. more than 20
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,88,* null hypothesis rejections) causes the test case to fail.
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,90,* All random values are generated using the generator instance used by
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,91,"* other tests and the generator is not reseeded, so this is a fixed seed"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,92,* test.
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,94,public void testNextIntDirect() throws Exception {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,95,// Set up test values - end of the array filled randomly
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,96,"int[] testValues = new int[] {4, 10, 12, 32, 100, 10000, 0, 0, 0, 0};"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,97,for (int i = 6; i < 10; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,98,final int val = generator.nextInt();
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,99,testValues[i] = val < 0 ? -val : val + 1;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,102,final int numTests = 1000;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,103,for (int i = 0; i < testValues.length; i++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,104,final int n = testValues[i];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,105,// Set up bins
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,106,int[] binUpperBounds;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,107,if (n < 32) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,108,binUpperBounds = new int[n];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,109,for (int k = 0; k < n; k++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,110,binUpperBounds[k] = k;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,112,} else {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,113,binUpperBounds = new int[10];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,114,final int step = n / 10;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,115,for (int k = 0; k < 9; k++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,116,binUpperBounds[k] = (k + 1) * step;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,118,binUpperBounds[9] = n - 1;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,120,// Run the tests
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,121,int numFailures = 0;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,122,final int binCount = binUpperBounds.length;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,123,final long[] observed = new long[binCount];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,124,final double[] expected = new double[binCount];
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,125,expected[0] = binUpperBounds[0] == 0 ? (double) smallSampleSize / (double) n :
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,126,(double) ((binUpperBounds[0] + 1) * smallSampleSize) / (double) n;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,127,for (int k = 1; k < binCount; k++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,128,expected[k] = (double) smallSampleSize *
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,129,(double) (binUpperBounds[k] - binUpperBounds[k - 1]) / (double) n;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,131,for (int j = 0; j < numTests; j++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,132,"Arrays.fill(observed, 0);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,133,for (int k = 0; k < smallSampleSize; k++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,134,final int value = generator.nextInt(n);
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,135,"Assert.assertTrue(""nextInt range"",(value >= 0) && (value < n));"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,136,for (int l = 0; l < binCount; l++) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,137,if (binUpperBounds[l] >= value) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,138,observed[l]++;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,139,break;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,143,"if (testStatistic.chiSquareTest(expected, observed) < 0.01) {"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,144,numFailures++;
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,147,if ((double) numFailures / (double) numTests > 0.02) {
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,148,"Assert.fail(""Too many failures for n = "" + n +"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,149,""" "" + numFailures + "" out of "" + numTests + "" tests failed."");"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,154,@Test(expected=MathIllegalArgumentException.class)
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,155,public void testNextIntIAE() {
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,87,requency freq = new Frequency();
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,88,nt value = 0;
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,89,or (int i=0; i<smallSampleSize; i++) {
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,90,alue = generator.nextInt(4);
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,91,"ssert.assertTrue(""nextInt range"",(value >= 0) && (value <= 3));"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,92,req.addValue(value);
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,94,ong[] observed = new long[4];
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,95,or (int i=0; i<4; i++) {
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,96,bserved[i] = freq.getCount(i);
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,99,"* Use ChiSquare dist with df = 4-1 = 3, alpha = .001"
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,100, Change to 11.34 for alpha = .01
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,102,"ssert.assertTrue(""chi-square test -- will fail about 1 in 1000 times"","
False,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,103,"estStatistic.chiSquare(expected,observed) < 16.27);"
True,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,src/test/java/org/apache/commons/math/random/RandomGeneratorAbstractTest.java,162,generator.nextInt(0);

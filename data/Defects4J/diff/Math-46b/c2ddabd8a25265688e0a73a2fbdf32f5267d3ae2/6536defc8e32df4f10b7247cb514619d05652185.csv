is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,17,package org.apache.commons.math.stat.regression;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,19,import java.util.Arrays;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,20,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,21,import org.apache.commons.math.exception.util.DummyLocalizable;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,22,import org.apache.commons.math.exception.util.Localizable;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,23,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,24,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,27,* <p>This class is a concrete implementation of the {@link UpdatingMultipleLinearRegression} interface.</p>
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,29,* <p>The algorithm is described in: <pre>
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,30,* Algorithm AS 274: Least Squares Routines to Supplement Those of Gentleman
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,31,* Author(s): Alan J. Miller
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,32,* Source: Journal of the Royal Statistical Society.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,33,"* Series C (Applied Statistics), Vol. 41, No. 2"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,34,"* (1992), pp. 458-478"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,35,* Published by: Blackwell Publishing for the Royal Statistical Society
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,36,* Stable URL: http://www.jstor.org/stable/2347583 </pre></p>
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,38,* <p>This method for multiple regression forms the solution to the OLS problem
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,39,* by updating the QR decomposition as described by Gentleman.</p>
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,41,* @version $Id$
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,42,* @since 3.0
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,44,public class MillerUpdatingRegression implements UpdatingMultipleLinearRegression {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,46,private final int nvars;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,47,private final double[] d;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,48,private final double[] rhs;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,49,private final double[] r;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,50,private final double[] tol;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,51,private final double[] rss;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,52,private final int[] vorder;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,53,private final double[] work_tolset;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,54,private long nobs = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,55,private double sserr = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,56,private boolean rss_set = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,57,private boolean tol_set = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,58,private final boolean[] lindep;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,59,private final double[] x_sing;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,60,private final double[] work_sing;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,61,private double sumy = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,62,private double sumsqy = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,63,private boolean hasIntercept;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,64,private final double epsilon;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,67,*  Set the default constructor to private access
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,68,*  to prevent inadvertent instantiation
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,70,"@SuppressWarnings(""unused"")"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,71,private MillerUpdatingRegression() {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,72,this.d = null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,73,this.hasIntercept = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,74,this.lindep = null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,75,this.nobs = -1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,76,this.nvars = -1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,77,this.r = null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,78,this.rhs = null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,79,this.rss = null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,80,this.rss_set = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,81,this.sserr = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,82,this.sumsqy = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,83,this.sumy = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,84,this.tol = null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,85,this.tol_set = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,86,this.vorder = null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,87,this.work_sing = null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,88,this.work_tolset = null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,89,this.x_sing = null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,90,this.epsilon = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,93,"public MillerUpdatingRegression(int numberOfVariables, boolean includeConstant, double errorTolerance) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,94,if (numberOfVariables < 1) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,95,"throw new IllegalArgumentException(""NumberOfVariables must be greater than or equal to one"");"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,97,if (includeConstant) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,98,this.nvars = numberOfVariables + 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,99,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,100,this.nvars = numberOfVariables;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,102,this.hasIntercept = includeConstant;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,103,this.nobs = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,104,this.d = new double[this.nvars];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,105,this.rhs = new double[this.nvars];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,106,this.r = new double[this.nvars * (this.nvars - 1) / 2];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,107,this.tol = new double[this.nvars];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,108,this.rss = new double[this.nvars];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,109,this.vorder = new int[this.nvars];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,110,this.x_sing = new double[this.nvars];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,111,this.work_sing = new double[this.nvars];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,112,this.work_tolset = new double[this.nvars];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,113,this.lindep = new boolean[this.nvars];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,114,for (int i = 0; i < this.nvars; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,115,vorder[i] = i;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,117,if (errorTolerance > 0) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,118,this.epsilon = errorTolerance;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,119,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,120,this.epsilon = -errorTolerance;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,122,return;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,125,"public MillerUpdatingRegression(int numberOfVariables, boolean includeConstant) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,126,"this(numberOfVariables, includeConstant, MathUtils.EPSILON);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,129,public boolean hasIntercept() {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,130,return this.hasIntercept;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,133,public long getN() {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,134,return this.nobs;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,137,"public void addObservation(final double[] x, final double y) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,139,if ((!this.hasIntercept && x.length != nvars) ||
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,140,(this.hasIntercept && x.length + 1 != nvars)) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,141,"throw new IllegalArgumentException(""Length of regressor list is less that numberOfVariables"");"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,143,if (!this.hasIntercept) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,144,"include(Arrays.copyOf(x, x.length), 1.0, y);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,145,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,146,double[] tmp = new double[x.length + 1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,147,"System.arraycopy(x, 0, tmp, 1, x.length);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,148,tmp[0] = 1.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,149,"include(tmp, 1.0, y);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,151,++nobs;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,152,return;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,156,"public void addObservations(double[][] x, double[] y) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,157,if (x.length != y.length) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,158,"throw new IllegalArgumentException(""Lengths of x and y matrices must be equal"");"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,160,for (int i = 0; i < x.length; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,161,"this.addObservation(x[i], y[i]);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,163,return;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,167,* The include method is where the QR decomposition occurs. This statement forms all
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,168,* intermediate data which will be used for all derivative measures.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,169,"* According to the miller paper, note that in the original implementation the x vector"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,170,"* is overwritten. In this implementation, the include method is passed a copy of the"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,171,"* original data vector so that there is no contamination of the data. Additionally,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,172,"* this method differs slighlty from gentleman's method, in that the assumption is"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,173,"* of dense design matrices, there is some advantage in using the original gentleman algorithm"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,174,* on sparse matrices.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,176,"private void include(final double[] x, final double wi, final double yi) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,177,int nextr = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,178,double w = wi;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,179,double y = yi;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,180,double xi;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,181,double di;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,182,double wxi;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,183,double dpi;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,184,double xk;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,185,double _w;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,186,this.rss_set = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,187,"sumy = smartAdd(yi, sumy);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,188,"sumsqy = smartAdd(sumsqy, yi * yi);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,189,for (int i = 0; i < x.length; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,190,if (w == 0.0) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,191,return;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,193,xi = x[i];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,195,if (xi == 0.0) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,196,nextr += nvars - i - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,197,continue;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,199,di = d[i];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,200,wxi = w * xi;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,201,_w = w;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,202,if (di != 0.0) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,203,"dpi = smartAdd(di, wxi * xi);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,204,double tmp = wxi * xi / di;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,205,if (FastMath.abs(tmp) > MathUtils.EPSILON) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,206,w = (di * w) / dpi;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,208,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,209,dpi = wxi * xi;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,210,w = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,212,d[i] = dpi;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,213,for (int k = i + 1; k < nvars; k++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,214,xk = x[k];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,216,"x[k] = smartAdd(xk, -xi * r[nextr]);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,217,if (di != 0.0) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,218,"r[nextr] = smartAdd(di * r[nextr], (_w * xi) * xk) / dpi;"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,219,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,220,r[nextr] = xk / xi;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,222,++nextr;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,224,xk = y;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,225,"y = smartAdd(xk, -xi * rhs[i]);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,226,if (di != 0.0) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,227,"rhs[i] = smartAdd(di * rhs[i], wxi * xk) / dpi;"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,228,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,229,rhs[i] = xk / xi;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,232,"sserr = smartAdd(sserr, w * y * y);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,233,return;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,236,"private double smartAdd(double a, double b) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,237,double _a = FastMath.abs(a);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,238,double _b = FastMath.abs(b);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,239,if (_a > _b) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,240,double eps = _a * MathUtils.EPSILON;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,241,if (_b > eps) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,242,return a + b;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,244,return a;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,245,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,246,double eps = _b * MathUtils.EPSILON;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,247,if (_a > eps) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,248,return a + b;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,250,return b;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,255,"* As the name suggest clear, wipes the internals and reoders everything in the"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,256,* canonical order.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,258,public void clear() {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,259,"Arrays.fill(d, 0.0);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,260,"Arrays.fill(rhs, 0.0);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,261,"Arrays.fill(r, 0.0);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,262,"Arrays.fill(tol, 0.0);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,263,"Arrays.fill(rss, 0.0);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,264,"Arrays.fill(this.work_tolset, 0.0);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,265,"Arrays.fill(this.work_sing, 0.0);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,266,"Arrays.fill(this.x_sing, 0.0);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,267,"Arrays.fill(lindep, false);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,268,for (int i = 0; i < nvars; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,269,vorder[i] = i;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,272,nobs = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,273,sserr = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,274,sumy = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,275,sumsqy = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,276,rss_set = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,277,tol_set = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,278,return;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,282,* This sets up tolerances for singularity testing
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,284,private void tolset() {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,285,int pos;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,286,double total;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,287,final double eps = this.epsilon;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,288,for (int i = 0; i < nvars; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,289,this.work_tolset[i] = Math.sqrt(d[i]);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,291,tol[0] = eps * this.work_tolset[0];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,292,for (int col = 1; col < nvars; col++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,293,pos = col - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,294,total = work_tolset[col];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,295,for (int row = 0; row < col; row++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,296,total += Math.abs(r[pos]) * work_tolset[row];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,297,pos += nvars - row - 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,299,tol[col] = eps * total;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,301,tol_set = true;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,302,return;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,306,* The regcf methods conducts the linear regression and extracts the
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,307,* parameter vector. Notice that the algorithm can do subset regression
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,308,* with no alteration.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,310,private double[] regcf(int nreq) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,311,int nextr;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,312,if (nreq < 1 || nreq > this.nvars) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,313,"throw new IllegalArgumentException(""Number of regressors not correct"");"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,315,if (!this.tol_set) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,316,tolset();
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,318,double[] ret = new double[nreq];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,319,boolean rankProblem = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,320,for (int i = nreq - 1; i > -1; i--) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,321,if (Math.sqrt(d[i]) < tol[i]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,322,ret[i] = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,323,d[i] = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,324,rankProblem = true;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,325,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,326,ret[i] = rhs[i];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,327,nextr = i * (nvars + nvars - i - 1) / 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,328,for (int j = i + 1; j < nreq; j++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,330,"ret[i] = smartAdd(ret[i], -r[nextr] * ret[j]);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,332,++nextr;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,336,if (rankProblem) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,337,for (int i = 0; i < nreq; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,338,if (this.lindep[i]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,339,ret[i] = Double.NaN;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,343,return ret;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,347,* The method which checks for singularities and then eliminates the offending
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,348,* columns
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,350,private void singcheck() {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,351,double temp;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,352,double y;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,353,double weight;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,354,int pos;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,356,for (int i = 0; i < nvars; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,357,work_sing[i] = Math.sqrt(d[i]);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,360,for (int col = 0; col < nvars; col++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,361,// Set elements within R to zero if they are less than tol(col) in
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,362,// absolute value after being scaled by the square root of their row
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,363,// multiplier
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,364,temp = tol[col];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,365,pos = col - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,366,for (int row = 0; row < col - 1; row++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,367,if (Math.abs(r[pos]) * work_sing[row] < temp) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,368,r[pos] = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,370,pos += nvars - row - 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,372,"// If diagonal element is near zero, set it to zero, set appropriate"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,373,"// element of LINDEP, and use INCLUD to augment the projections in"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,374,// the lower rows of the orthogonalization.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,375,lindep[col] = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,376,if (work_sing[col] < temp) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,377,lindep[col] = true;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,378,if (col < nvars - 1) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,379,"Arrays.fill(x_sing, 0.0);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,380,int _pi = col * (nvars + nvars - col - 1) / 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,381,"for (int _xi = col + 1; _xi < nvars; _xi++, _pi++) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,382,x_sing[_xi] = r[_pi];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,383,r[_pi] = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,385,y = rhs[col];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,386,weight = d[col];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,387,d[col] = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,388,rhs[col] = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,389,"this.include(x_sing, weight, y);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,390,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,391,sserr += d[col] * rhs[col] * rhs[col];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,395,return;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,399,* Calculates the sum of squared errors for the full regression
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,400,* and all subsets in the following manner:
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,401,* rss[] ={
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,402,"* ResidualSumOfSquares_allNvars,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,403,"* ResidualSumOfSquares_FirstNvars-1,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,404,"* ResidualSumOfSquares_FirstNvars-2,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,405,"* ..., ResidualSumOfSquares_FirstVariable}"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,407,private void ss() {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,408,double total = sserr;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,409,rss[nvars - 1] = sserr;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,410,for (int i = nvars - 1; i > 0; i--) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,411,total += d[i] * rhs[i] * rhs[i];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,412,rss[i - 1] = total;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,414,rss_set = true;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,415,return;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,419,* Calculates the cov matrix assuming only the first nreq variables are
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,420,* included in the calculation. The returned array contains a symmetric
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,421,* matrix stored in lower triangular form. The matrix will have
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,422,* ( nreq + 1 ) * nreq / 2 elements. For illustration
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,423,* cov =
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,425,"*  cov_00,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,426,"*  cov_10, cov_11,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,427,"*  cov_20, cov_21, cov22,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,431,private double[] cov(int nreq) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,432,if (this.nobs <= nreq) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,433,return null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,435,double rnk = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,436,for (int i = 0; i < nreq; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,437,if (!this.lindep[i]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,438,rnk += 1.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,441,double var = rss[nreq - 1] / (nobs - rnk);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,442,double[] rinv = new double[nreq * (nreq - 1) / 2];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,443,"inverse(rinv, nreq);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,444,double[] covmat = new double[nreq * (nreq + 1) / 2];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,445,"Arrays.fill(covmat, Double.NaN);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,446,int pos2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,447,int pos1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,448,int start = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,449,double total = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,450,for (int row = 0; row < nreq; row++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,451,pos2 = start;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,452,if (!this.lindep[row]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,453,for (int col = row; col < nreq; col++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,454,if (!this.lindep[col]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,455,pos1 = start + col - row;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,456,if (row == col) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,457,total = 1.0 / d[col];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,458,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,459,total = rinv[pos1 - 1] / d[col];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,461,for (int k = col + 1; k < nreq; k++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,462,if (!this.lindep[k]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,463,total += rinv[pos1] * rinv[pos2] / d[k];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,465,++pos1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,466,++pos2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,468,covmat[ (col + 1) * col / 2 + row] = total * var;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,469,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,470,pos2 += nreq - col - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,474,start += nreq - row - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,476,return covmat;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,480,* This internal method calculates the inverse of the upper-triangular portion
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,481,* of the R matrix.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,483,"private void inverse(double[] rinv, int nreq) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,484,int pos = nreq * (nreq - 1) / 2 - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,485,int pos1 = -1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,486,int pos2 = -1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,487,double total = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,488,int start;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,489,"Arrays.fill(rinv, Double.NaN);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,490,for (int row = nreq - 1; row > 0; --row) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,491,if (!this.lindep[row]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,492,start = (row - 1) * (nvars + nvars - row) / 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,493,for (int col = nreq; col > row; --col) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,494,pos1 = start;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,495,pos2 = pos;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,496,total = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,497,for (int k = row; k < col - 1; k++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,498,pos2 += nreq - k - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,499,if (!this.lindep[k]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,500,total += -r[pos1] * rinv[pos2];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,502,++pos1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,504,rinv[pos] = total - r[pos1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,505,--pos;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,507,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,508,pos -= nreq - row;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,511,return;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,515,* In the original algorithm only the partial correlations of the regressors
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,516,"* is returned to the user. In this implementation, we have"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,517,* corr =
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,519,*   corrxx - lower triangular
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,520,*   corrxy - bottom row of the matrix
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,523,public double[] getPartialCorrelations(int in) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,525,Replaces subroutines PCORR and COR of:
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,526,"ALGORITHM AS274  APPL. STATIST. (1992) VOL.41, NO. 2"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,528,Calculate partial correlations after the variables in rows
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,529,"1, 2, ..., IN have been forced into the regression."
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,530,"If IN = 1, and the first row of R represents a constant in the"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,531,"model, then the usual simple correlations are returned."
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,533,"If IN = 0, the value returned in array CORMAT for the correlation"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,534,of variables Xi & Xj is:
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,535,sum ( Xi.Xj ) / Sqrt ( sum (Xi^2) . sum (Xj^2) )
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,537,"On return, array CORMAT contains the upper triangle of the matrix of"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,538,"partial correlations stored by rows, excluding the 1's on the diagonal."
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,539,"e.g. if IN = 2, the consecutive elements returned are:"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,540,"(3,4) (3,5) ... (3,ncol), (4,5) (4,6) ... (4,ncol), etc."
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,541,Array YCORR stores the partial correlations with the Y-variable
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,542,starting with YCORR(IN+1) = partial correlation with the variable in
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,543,position (IN+1).
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,546,double[] output = new double[(nvars - in + 1) * (nvars - in) / 2];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,547,int base_pos;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,548,int pos;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,549,int pos1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,550,int pos2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,551,int rms_off = -in;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,552,int wrk_off = -(in + 1);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,553,double[] rms = new double[nvars - in];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,554,double[] work = new double[nvars - in - 1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,555,double sumxx;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,556,double sumxy;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,557,double sumyy;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,558,int offXX = (nvars - in) * (nvars - in - 1) / 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,559,if (in < -1 || in >= nvars) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,560,return null;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,562,int nvm = nvars - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,563,base_pos = r.length - (nvm - in) * (nvm - in + 1) / 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,564,if (d[in] > 0.0) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,565,rms[in + rms_off] = 1.0 / Math.sqrt(d[in]);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,567,for (int col = in + 1; col < nvars; col++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,568,pos = base_pos + col - 1 - in;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,569,sumxx = d[col];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,570,for (int row = in; row < col; row++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,571,sumxx += d[row] * r[pos] * r[pos];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,572,pos += nvars - row - 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,574,if (sumxx > 0.0) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,575,rms[col + rms_off] = 1.0 / Math.sqrt(sumxx);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,576,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,577,rms[col + rms_off] = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,580,sumyy = sserr;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,581,for (int row = in; row < nvars; row++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,582,sumyy += d[row] * rhs[row] * rhs[row];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,584,if (sumyy > 0.0) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,585,sumyy = 1.0 / Math.sqrt(sumyy);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,587,pos = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,588,for (int col1 = in; col1 < nvars; col1++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,589,sumxy = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,590,"Arrays.fill(work, 0.0);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,591,pos1 = base_pos + col1 - in - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,592,for (int row = in; row < col1; row++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,593,pos2 = pos1 + 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,594,for (int col2 = col1 + 1; col2 < nvars; col2++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,595,work[col2 + wrk_off] += d[row] * r[pos1] * r[pos2];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,596,pos2++;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,598,sumxy += d[row] * r[pos1] * rhs[row];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,599,pos1 += nvars - row - 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,601,pos2 = pos1 + 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,602,for (int col2 = col1 + 1; col2 < nvars; col2++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,603,work[col2 + wrk_off] += d[col1] * r[pos2];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,604,++pos2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,605,output[ (col2 - 1 - in) * (col2 - in) / 2 + col1 - in] =
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,606,work[col2 + wrk_off] * rms[col1 + rms_off] * rms[col2 + rms_off];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,607,++pos;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,609,sumxy += d[col1] * rhs[col1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,610,output[col1 + rms_off + offXX] = sumxy * rms[col1 + rms_off] * sumyy;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,613,return output;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,617,"* ALGORITHM AS274 APPL. STATIST. (1992) VOL.41, NO. 2"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,618,* Move variable from position FROM to position TO in an
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,619,* orthogonal reduction produced by AS75.1.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,621,* @param from initial position
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,622,* @param to destination
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,624,"private void vmove(int from, int to) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,625,double d1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,626,double d2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,627,double X;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,628,double d1new;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,629,double d2new;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,630,double cbar;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,631,double sbar;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,632,double Y;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,633,int first;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,634,int inc;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,635,int m1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,636,int m2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,637,int mp1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,638,int pos;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,639,boolean bSkipTo40 = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,640,if (from == to) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,641,return;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,643,if (!this.rss_set) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,644,ss();
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,646,int count = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,647,if (from < to) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,648,first = from;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,649,inc = 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,650,count = to - from;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,651,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,652,first = from - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,653,inc = -1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,654,count = from - to;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,657,int m = first;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,658,int idx = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,659,while (idx < count) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,660,m1 = m * (nvars + nvars - m - 1) / 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,661,m2 = m1 + nvars - m - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,662,mp1 = m + 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,664,d1 = d[m];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,665,d2 = d[mp1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,666,// Special cases.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,667,if (d1 > this.epsilon || d2 > this.epsilon) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,668,X = r[m1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,669,if (Math.abs(X) * Math.sqrt(d1) < tol[mp1]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,670,X = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,672,if (d1 < this.epsilon || Math.abs(X) < this.epsilon) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,673,d[m] = d2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,674,d[mp1] = d1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,675,r[m1] = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,676,for (int col = m + 2; col < nvars; col++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,677,++m1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,678,X = r[m1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,679,r[m1] = r[m2];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,680,r[m2] = X;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,681,++m2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,683,X = rhs[m];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,684,rhs[m] = rhs[mp1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,685,rhs[mp1] = X;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,686,bSkipTo40 = true;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,687,break;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,688,} else if (d2 < this.epsilon) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,689,d[m] = d1 * X * X;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,690,r[m1] = 1.0 / X;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,691,for (int _i = m1 + 1; _i < m1 + nvars - m - 1; _i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,692,r[_i] /= X;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,694,rhs[m] = rhs[m] / X;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,695,bSkipTo40 = true;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,696,break;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,698,if (!bSkipTo40) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,699,d1new = d2 + d1 * X * X;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,700,cbar = d2 / d1new;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,701,sbar = X * d1 / d1new;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,702,d2new = d1 * cbar;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,703,d[m] = d1new;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,704,d[mp1] = d2new;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,705,r[m1] = sbar;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,706,for (int col = m + 2; col < nvars; col++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,707,++m1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,708,Y = r[m1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,709,r[m1] = cbar * r[m2] + sbar * Y;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,710,r[m2] = Y - X * r[m2];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,711,++m2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,713,Y = rhs[m];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,714,rhs[m] = cbar * rhs[mp1] + sbar * Y;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,715,rhs[mp1] = Y - X * rhs[mp1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,718,if (m > 0) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,719,pos = m;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,720,for (int row = 0; row < m; row++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,721,X = r[pos];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,722,r[pos] = r[pos - 1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,723,r[pos - 1] = X;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,724,pos += nvars - row - 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,727,"// Adjust variable order (VORDER), the tolerances (TOL) and"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,728,// the vector of residual sums of squares (RSS).
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,729,m1 = vorder[m];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,730,vorder[m] = vorder[mp1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,731,vorder[mp1] = m1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,732,X = tol[m];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,733,tol[m] = tol[mp1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,734,tol[mp1] = X;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,735,rss[m] = rss[mp1] + d[mp1] * rhs[mp1] * rhs[mp1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,737,m += inc;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,738,++idx;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,742,"private int reorderRegressors(int[] list, int pos1) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,744,"//     ALGORITHM AS274  APPL. STATIST. (1992) VOL.41, NO. 2"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,746,//     Re-order the variables in an orthogonal reduction produced by
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,747,"//     AS75.1 so that the N variables in LIST start at position POS1,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,748,//     though will not necessarily be in the same order as in LIST.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,749,//     Any variables in VORDER before position POS1 are not moved.
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,751,//     Auxiliary routine called: VMOVE
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,755,int next;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,756,int i;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,757,int l;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,758,if (list.length < 1 || list.length > nvars + 1 - pos1) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,759,return -1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,761,next = pos1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,762,i = pos1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,763,while (i < nvars) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,764,l = vorder[i];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,765,for (int j = 0; j < list.length; j++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,766,if (l == list[j]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,767,if (i > next) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,768,"this.vmove(i, next);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,769,++next;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,770,if (next >= list.length + pos1) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,771,return 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,772,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,773,break;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,778,++i;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,780,return 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,784,* Gets the diagonal of the Hat matrix also known as the leverage matrix
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,787,* @returns the diagonal element of the hatmatrix
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,789,public double getDiagonalOfHatMatrix(double[] row_data) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,790,double[] wk = new double[this.nvars];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,791,int pos;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,792,double total;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,794,if (row_data.length > nvars) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,795,return Double.NaN;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,797,double[] xrow;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,798,if (this.hasIntercept) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,799,xrow = new double[row_data.length + 1];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,800,xrow[0] = 1.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,801,"System.arraycopy(row_data, 0, xrow, 1, row_data.length);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,802,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,803,xrow = row_data;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,805,double hii = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,806,for (int col = 0; col < xrow.length; col++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,807,if (Math.sqrt(d[col]) < tol[col]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,808,wk[col] = 0.0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,809,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,810,pos = col - 1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,811,total = xrow[col];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,812,for (int row = 0; row < col; row++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,813,"total = smartAdd(total, -wk[row] * r[pos]);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,814,pos += nvars - row - 2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,816,wk[col] = total;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,817,"hii = smartAdd(hii, (total * total) / d[col]);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,820,return hii;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,824,"* Gets the order of the regressors, useful if sometype of reording"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,825,* has been called. Calling regress with int[]{} args will trigger
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,826,* a reordering
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,827,* @returns int[] with the current order of the regressors
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,829,public int[] getOrderOfRegressors() {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,830,return MathUtils.copyOf(vorder);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,834,public RegressionResults regress() throws MathException {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,835,return regress(this.nvars);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,838,public RegressionResults regress(int numberOfRegressors) throws MathException {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,839,if (this.nobs <= numberOfRegressors) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,840,"Localizable outMsg = new DummyLocalizable(""Number of observations not "" +"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,841,"""greater than the number of number of variables"");"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,842,"throw new MathException(outMsg, (Object) null);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,844,if( numberOfRegressors > this.nvars ){
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,845,"Localizable outMsg = new DummyLocalizable(""Number of variables requested "" +"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,846,"""in regression greater than the number of number of variables"");"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,847,"throw new MathException(outMsg, (Object) null);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,849,this.tolset();
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,851,this.singcheck();
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,853,double[] beta = this.regcf(numberOfRegressors);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,855,this.ss();
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,857,double[] cov = this.cov(numberOfRegressors);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,859,int rnk = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,860,for (int i = 0; i < this.lindep.length; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,861,if (!this.lindep[i]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,862,++rnk;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,866,boolean needsReorder = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,867,for (int i = 0; i < numberOfRegressors; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,868,if (this.vorder[i] != i) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,869,needsReorder = true;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,870,break;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,873,if (!needsReorder) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,874,return new RegressionResults(
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,875,"beta, new double[][]{cov}, true, this.nobs, rnk,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,876,"this.sumy, this.sumsqy, this.sserr, this.hasIntercept, false);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,877,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,878,double[] betaNew = new double[beta.length];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,879,double[] covNew = new double[cov.length];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,881,int[] newIndices = new int[beta.length];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,882,for (int i = 0; i < nvars; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,883,for (int j = 0; j < numberOfRegressors; j++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,884,if (this.vorder[j] == i) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,885,betaNew[i] = beta[ j];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,886,newIndices[i] = j;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,891,int idx1 = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,892,int idx2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,893,int _i;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,894,int _j;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,895,for (int i = 0; i < beta.length; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,896,_i = newIndices[i];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,897,"for (int j = 0; j <= i; j++, idx1++) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,898,_j = newIndices[j];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,899,if (_i > _j) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,900,idx2 = _i * (_i + 1) / 2 + _j;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,901,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,902,idx2 = _j * (_j + 1) / 2 + _i;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,904,covNew[idx1] = cov[idx2];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,907,return new RegressionResults(
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,908,"betaNew, new double[][]{covNew}, true, this.nobs, rnk,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,909,"this.sumy, this.sumsqy, this.sserr, this.hasIntercept, false);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,913,public RegressionResults regress(int[] variablesToInclude) throws MathException {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,914,if (variablesToInclude.length > this.nvars) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,915,"Localizable outMsg = new DummyLocalizable(""Number of variables in included list "" +"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,916,"""greater than the number of number of variables"");"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,917,"throw new MathException(outMsg, (Object) null);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,919,if (this.nobs <= this.nvars) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,920,"Localizable outMsg = new DummyLocalizable(""Number of observations not "" +"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,921,"""greater than the number of number of variables"");"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,922,"throw new MathException(outMsg, (Object) null);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,924,Arrays.sort(variablesToInclude);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,925,int iExclude = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,926,for (int i = 0; i < variablesToInclude.length; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,927,if (i >= this.nvars) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,928,"Localizable outMsg = new DummyLocalizable(""Requesting variable for inclusion "" +"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,929,"""which does not exist in data supplied"");"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,930,"throw new MathException(outMsg, (Object) null);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,932,if (i > 0 && variablesToInclude[i] == variablesToInclude[i - 1]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,933,variablesToInclude[i] = -1;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,934,++iExclude;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,937,int[] series;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,938,if (iExclude > 0) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,939,int j = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,940,series = new int[variablesToInclude.length - iExclude];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,941,for (int i = 0; i < variablesToInclude.length; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,942,if (variablesToInclude[i] > -1) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,943,series[j] = variablesToInclude[i];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,944,++j;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,947,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,948,series = variablesToInclude;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,951,"this.reorderRegressors(series, 0);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,953,this.tolset();
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,955,this.singcheck();
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,957,double[] beta = this.regcf(series.length);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,959,this.ss();
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,961,double[] cov = this.cov(series.length);
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,963,int rnk = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,964,for (int i = 0; i < this.lindep.length; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,965,if (!this.lindep[i]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,966,++rnk;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,970,boolean needsReorder = false;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,971,for (int i = 0; i < this.nvars; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,972,if (this.vorder[i] != series[i]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,973,needsReorder = true;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,974,break;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,977,if (!needsReorder) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,978,return new RegressionResults(
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,979,"beta, new double[][]{cov}, true, this.nobs, rnk,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,980,"this.sumy, this.sumsqy, this.sserr, this.hasIntercept, false);"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,981,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,982,double[] betaNew = new double[beta.length];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,983,int[] newIndices = new int[beta.length];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,984,for (int i = 0; i < series.length; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,985,for (int j = 0; j < this.vorder.length; j++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,986,if (this.vorder[j] == series[i]) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,987,betaNew[i] = beta[ j];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,988,newIndices[i] = j;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,992,double[] covNew = new double[cov.length];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,993,int idx1 = 0;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,994,int idx2;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,995,int _i;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,996,int _j;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,997,for (int i = 0; i < beta.length; i++) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,998,_i = newIndices[i];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,999,"for (int j = 0; j <= i; j++, idx1++) {"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,1000,_j = newIndices[j];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,1001,if (_i > _j) {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,1002,idx2 = _i * (_i + 1) / 2 + _j;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,1003,} else {
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,1004,idx2 = _j * (_j + 1) / 2 + _i;
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,1006,covNew[idx1] = cov[idx2];
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,1009,return new RegressionResults(
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,1010,"betaNew, new double[][]{covNew}, true, this.nobs, rnk,"
True,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java,1011,"this.sumy, this.sumsqy, this.sserr, this.hasIntercept, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,17,package org.apache.commons.math.stat.regression;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,19,import org.apache.commons.math.linear.RealMatrix;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,20,import org.apache.commons.math.stat.correlation.PearsonsCorrelation;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,21,import org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,22,import org.apache.commons.math.TestUtils;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,23,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,24,import org.junit.Test;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,25,import static org.junit.Assert.*;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,28,* MillerUpdatingRegression tests.
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,30,public class MillerUpdatingRegressionTest {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,32,public MillerUpdatingRegressionTest() {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,34,/* This is the Greene Airline Cost data.
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,35,* The data can be downloaded from http://www.indiana.edu/~statmath/stat/all/panel/airline.csv
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,37,private final static double[][] airdata = {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,38,"/*""I"",*/new double[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,39,"/*""T"",*/ new double[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,40,"/*""C"",*/ new double[]{1140640, 1215690, 1309570, 1511530, 1676730, 1823740, 2022890, 2314760, 2639160, 3247620, 3787750, 3867750, 3996020, 4282880, 4748320, 569292, 640614, 777655, 999294, 1203970, 1358100, 1501350, 1709270, 2025400, 2548370, 3137740, 3557700, 3717740, 3962370, 4209390, 286298, 309290, 342056, 374595, 450037, 510412, 575347, 669331, 783799, 913883, 1041520, 1125800, 1096070, 1198930, 1170470, 145167, 170192, 247506, 309391, 354338, 373941, 420915, 474017, 532590, 676771, 880438, 1052020, 1193680, 1303390, 1436970, 91361, 95428, 98187, 115967, 138382, 156228, 183169, 210212, 274024, 356915, 432344, 524294, 530924, 581447, 610257, 68978, 74904, 83829, 98148, 118449, 133161, 145062, 170711, 199775, 276797, 381478, 506969, 633388, 804388, 1009500},"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,41,"/*""Q"",*/ new double[]{0.952757, 0.986757, 1.09198, 1.17578, 1.16017, 1.17376, 1.29051, 1.39067, 1.61273, 1.82544, 1.54604, 1.5279, 1.6602, 1.82231, 1.93646, 0.520635, 0.534627, 0.655192, 0.791575, 0.842945, 0.852892, 0.922843, 1, 1.19845, 1.34067, 1.32624, 1.24852, 1.25432, 1.37177, 1.38974, 0.262424, 0.266433, 0.306043, 0.325586, 0.345706, 0.367517, 0.409937, 0.448023, 0.539595, 0.539382, 0.467967, 0.450544, 0.468793, 0.494397, 0.493317, 0.086393, 0.09674, 0.1415, 0.169715, 0.173805, 0.164272, 0.170906, 0.17784, 0.192248, 0.242469, 0.256505, 0.249657, 0.273923, 0.371131, 0.421411, 0.051028, 0.052646, 0.056348, 0.066953, 0.070308, 0.073961, 0.084946, 0.095474, 0.119814, 0.150046, 0.144014, 0.1693, 0.172761, 0.18667, 0.213279, 0.037682, 0.039784, 0.044331, 0.050245, 0.055046, 0.052462, 0.056977, 0.06149, 0.069027, 0.092749, 0.11264, 0.154154, 0.186461, 0.246847, 0.304013},"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,42,"/*""PF"",*/ new double[]{106650, 110307, 110574, 121974, 196606, 265609, 263451, 316411, 384110, 569251, 871636, 997239, 938002, 859572, 823411, 103795, 111477, 118664, 114797, 215322, 281704, 304818, 348609, 374579, 544109, 853356, 1003200, 941977, 856533, 821361, 118788, 123798, 122882, 131274, 222037, 278721, 306564, 356073, 378311, 555267, 850322, 1015610, 954508, 886999, 844079, 114987, 120501, 121908, 127220, 209405, 263148, 316724, 363598, 389436, 547376, 850418, 1011170, 951934, 881323, 831374, 118222, 116223, 115853, 129372, 243266, 277930, 317273, 358794, 397667, 566672, 848393, 1005740, 958231, 872924, 844622, 117112, 119420, 116087, 122997, 194309, 307923, 323595, 363081, 386422, 564867, 874818, 1013170, 930477, 851676, 819476},"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,43,"/*""LF"",*/ new double[]{0.534487, 0.532328, 0.547736, 0.540846, 0.591167, 0.575417, 0.594495, 0.597409, 0.638522, 0.676287, 0.605735, 0.61436, 0.633366, 0.650117, 0.625603, 0.490851, 0.473449, 0.503013, 0.512501, 0.566782, 0.558133, 0.558799, 0.57207, 0.624763, 0.628706, 0.58915, 0.532612, 0.526652, 0.540163, 0.528775, 0.524334, 0.537185, 0.582119, 0.579489, 0.606592, 0.60727, 0.582425, 0.573972, 0.654256, 0.631055, 0.56924, 0.589682, 0.587953, 0.565388, 0.577078, 0.432066, 0.439669, 0.488932, 0.484181, 0.529925, 0.532723, 0.549067, 0.55714, 0.611377, 0.645319, 0.611734, 0.580884, 0.572047, 0.59457, 0.585525, 0.442875, 0.462473, 0.519118, 0.529331, 0.557797, 0.556181, 0.569327, 0.583465, 0.631818, 0.604723, 0.587921, 0.616159, 0.605868, 0.594688, 0.635545, 0.448539, 0.475889, 0.500562, 0.500344, 0.528897, 0.495361, 0.510342, 0.518296, 0.546723, 0.554276, 0.517766, 0.580049, 0.556024, 0.537791, 0.525775}"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,47,"* Test of hasIntercept method, of class MillerUpdatingRegression."
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,49,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,50,public void testHasIntercept() {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,51,"MillerUpdatingRegression instance = new MillerUpdatingRegression(10, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,52,if (instance.hasIntercept()) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,53,"fail(""Should not have intercept"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,55,"instance = new MillerUpdatingRegression(10, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,56,if (!instance.hasIntercept()) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,57,"fail(""Should have intercept"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,62,"* Test of getN method, of class MillerUpdatingRegression."
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,64,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,65,public void testAddObsGetNClear() {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,66,"System.out.println(""getN - test add observation - clear"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,67,"MillerUpdatingRegression instance = new MillerUpdatingRegression(3, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,68,double[][] xAll = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,69,double[] y = new double[airdata[0].length];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,70,for (int i = 0; i < airdata[0].length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,71,xAll[i] = new double[3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,72,xAll[i][0] = Math.log(airdata[3][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,73,xAll[i][1] = Math.log(airdata[4][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,74,xAll[i][2] = airdata[5][i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,75,y[i] = Math.log(airdata[2][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,77,"instance.addObservations(xAll, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,78,if (instance.getN() != xAll.length) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,79,"fail(""Number of observations not correct in bulk addition"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,81,instance.clear();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,82,for (int i = 0; i < xAll.length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,83,"instance.addObservation(xAll[i], y[i]);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,85,if (instance.getN() != xAll.length) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,86,"fail(""Number of observations not correct in drip addition"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,88,return;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,91,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,92,public void testNegativeTestAddObs() {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,93,"System.out.println(""Test Add obs should fail if number of vars changes"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,94,"MillerUpdatingRegression instance = new MillerUpdatingRegression(3, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,95,try {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,96,"instance.addObservation(new double[]{1.0}, 0.0);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,97,"fail(""Should throw IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,98,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,99,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,100,"fail(""Should throw IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,102,try {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,103,"instance.addObservation(new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, 0.0);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,104,"fail(""Should throw IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,105,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,106,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,107,"fail(""Should throw IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,109,try {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,110,"instance.addObservation(new double[]{1.0, 1.0, 1.0}, 0.0);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,111,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,112,"fail(""Should throw IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,115,//now we try it without an intercept
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,116,"instance = new MillerUpdatingRegression(3, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,117,try {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,118,"instance.addObservation(new double[]{1.0}, 0.0);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,119,"fail(""Should throw IllegalArgumentException [NOINTERCEPT]"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,120,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,121,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,122,"fail(""Should throw IllegalArgumentException [NOINTERCEPT]"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,124,try {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,125,"instance.addObservation(new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, 0.0);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,126,"fail(""Should throw IllegalArgumentException [NOINTERCEPT]"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,127,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,128,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,129,"fail(""Should throw IllegalArgumentException [NOINTERCEPT]"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,131,try {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,132,"instance.addObservation(new double[]{1.0, 1.0, 1.0}, 0.0);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,133,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,134,"fail(""Should throw IllegalArgumentException [NOINTERCEPT]"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,138,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,139,public void testNegativeTestAddMultipleObs() {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,140,"System.out.println(""Test Add Multiple obs should fail if length of arrays is not same"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,141,"MillerUpdatingRegression instance = new MillerUpdatingRegression(3, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,142,try {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,143,"double[][] tst = {{1.0, 1.0, 1.0}, {1.20, 2.0, 2.1}};"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,144,double[] y = {1.0};
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,145,"instance.addObservations(tst, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,147,"fail(""Should throw IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,148,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,149,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,150,"fail(""Should throw IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,153,try {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,154,"double[][] tst = {{1.0, 1.0, 1.0}, {1.20, 2.0, 2.1}};"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,155,"double[] y = {1.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,156,"instance.addObservations(tst, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,158,"fail(""Should throw IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,159,} catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,160,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,161,"fail(""Should throw IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,165,/* Results can be found at http://www.indiana.edu/~statmath/stat/all/panel/panel4.html
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,166,* This test concerns a known data set
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,168,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,169,public void testRegressAirlineConstantExternal() {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,170,"MillerUpdatingRegression instance = new MillerUpdatingRegression(4, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,171,double[][] x = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,172,double[] y = new double[airdata[0].length];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,173,for (int i = 0; i < airdata[0].length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,174,x[i] = new double[4];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,175,x[i][0] = 1.0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,176,x[i][1] = Math.log(airdata[3][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,177,x[i][2] = Math.log(airdata[4][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,178,x[i][3] = airdata[5][i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,179,y[i] = Math.log(airdata[2][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,182,"instance.addObservations(x, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,183,try {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,184,RegressionResults result = instance.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,185,if (result == null) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,186,"fail(""The test case is a prototype."");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,188,TestUtils.assertEquals(
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,189,"new double[]{9.5169, 0.8827, 0.4540, -1.6275},"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,190,"result.getParameterEstimates(), 1e-4);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,193,TestUtils.assertEquals(
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,194,"new double[]{.2292445, .0132545, .0203042, .345302},"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,195,"result.getStdErrorOfEstimates(), 1.0e-4);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,197,"TestUtils.assertEquals(0.01552839, result.getMeanSquareError(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,198,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,199,"fail(""Should not throw exception but does"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,203,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,204,public void testRegressAirlineConstantInternal() {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,205,"MillerUpdatingRegression instance = new MillerUpdatingRegression(3, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,206,double[][] x = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,207,double[] y = new double[airdata[0].length];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,208,for (int i = 0; i < airdata[0].length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,209,x[i] = new double[3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,210,x[i][0] = Math.log(airdata[3][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,211,x[i][1] = Math.log(airdata[4][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,212,x[i][2] = airdata[5][i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,213,y[i] = Math.log(airdata[2][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,216,"instance.addObservations(x, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,217,try {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,218,RegressionResults result = instance.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,219,if (result == null) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,220,"fail(""The test case is a prototype."");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,222,TestUtils.assertEquals(
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,223,"new double[]{9.5169, 0.8827, 0.4540, -1.6275},"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,224,"result.getParameterEstimates(), 1e-4);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,227,TestUtils.assertEquals(
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,228,"new double[]{.2292445, .0132545, .0203042, .345302},"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,229,"result.getStdErrorOfEstimates(), 1.0e-4);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,231,"TestUtils.assertEquals(0.9883, result.getRSquared(), 1.0e-4);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,232,"TestUtils.assertEquals(0.01552839, result.getMeanSquareError(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,233,} catch (Exception e) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,234,"fail(""Should not throw exception but does"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,238,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,239,public void testFilippelli() throws MathException {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,240,double[] data = new double[]{
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,241,"0.8116, -6.860120914,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,242,"0.9072, -4.324130045,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,243,"0.9052, -4.358625055,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,244,"0.9039, -4.358426747,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,245,"0.8053, -6.955852379,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,246,"0.8377, -6.661145254,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,247,"0.8667, -6.355462942,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,248,"0.8809, -6.118102026,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,249,"0.7975, -7.115148017,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,250,"0.8162, -6.815308569,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,251,"0.8515, -6.519993057,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,252,"0.8766, -6.204119983,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,253,"0.8885, -5.853871964,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,254,"0.8859, -6.109523091,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,255,"0.8959, -5.79832982,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,256,"0.8913, -5.482672118,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,257,"0.8959, -5.171791386,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,258,"0.8971, -4.851705903,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,259,"0.9021, -4.517126416,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,260,"0.909, -4.143573228,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,261,"0.9139, -3.709075441,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,262,"0.9199, -3.499489089,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,263,"0.8692, -6.300769497,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,264,"0.8872, -5.953504836,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,265,"0.89, -5.642065153,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,266,"0.891, -5.031376979,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,267,"0.8977, -4.680685696,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,268,"0.9035, -4.329846955,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,269,"0.9078, -3.928486195,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,270,"0.7675, -8.56735134,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,271,"0.7705, -8.363211311,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,272,"0.7713, -8.107682739,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,273,"0.7736, -7.823908741,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,274,"0.7775, -7.522878745,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,275,"0.7841, -7.218819279,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,276,"0.7971, -6.920818754,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,277,"0.8329, -6.628932138,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,278,"0.8641, -6.323946875,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,279,"0.8804, -5.991399828,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,280,"0.7668, -8.781464495,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,281,"0.7633, -8.663140179,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,282,"0.7678, -8.473531488,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,283,"0.7697, -8.247337057,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,284,"0.77, -7.971428747,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,285,"0.7749, -7.676129393,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,286,"0.7796, -7.352812702,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,287,"0.7897, -7.072065318,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,288,"0.8131, -6.774174009,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,289,"0.8498, -6.478861916,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,290,"0.8741, -6.159517513,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,291,"0.8061, -6.835647144,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,292,"0.846, -6.53165267,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,293,"0.8751, -6.224098421,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,294,"0.8856, -5.910094889,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,295,"0.8919, -5.598599459,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,296,"0.8934, -5.290645224,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,297,"0.894, -4.974284616,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,298,"0.8957, -4.64454848,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,299,"0.9047, -4.290560426,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,300,"0.9129, -3.885055584,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,301,"0.9209, -3.408378962,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,302,"0.9219, -3.13200249,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,303,"0.7739, -8.726767166,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,304,"0.7681, -8.66695597,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,305,"0.7665, -8.511026475,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,306,"0.7703, -8.165388579,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,307,"0.7702, -7.886056648,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,308,"0.7761, -7.588043762,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,309,"0.7809, -7.283412422,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,310,"0.7961, -6.995678626,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,311,"0.8253, -6.691862621,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,312,"0.8602, -6.392544977,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,313,"0.8809, -6.067374056,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,314,"0.8301, -6.684029655,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,315,"0.8664, -6.378719832,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,316,"0.8834, -6.065855188,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,317,"0.8898, -5.752272167,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,318,"0.8964, -5.132414673,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,319,"0.8963, -4.811352704,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,320,"0.9074, -4.098269308,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,321,"0.9119, -3.66174277,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,322,"0.9228, -3.2644011"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,324,"MillerUpdatingRegression model = new MillerUpdatingRegression(10, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,325,int off = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,326,double[] tmp = new double[10];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,327,int nobs = 82;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,328,for (int i = 0; i < nobs; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,329,tmp[0] = data[off + 1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,330,//            tmp[1] = tmp[0] * tmp[0];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,331,//            tmp[2] = tmp[0] * tmp[1]; //^3
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,332,//            tmp[3] = tmp[1] * tmp[1]; //^4
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,333,//            tmp[4] = tmp[2] * tmp[1]; //^5
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,334,//            tmp[5] = tmp[2] * tmp[2]; //^6
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,335,//            tmp[6] = tmp[2] * tmp[3]; //^7
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,336,//            tmp[7] = tmp[3] * tmp[3]; //^8
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,337,//            tmp[8] = tmp[4] * tmp[3]; //^9
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,338,//            tmp[9] = tmp[4] * tmp[4]; //^10
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,339,tmp[1] = tmp[0] * tmp[0];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,340,tmp[2] = tmp[0] * tmp[1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,341,tmp[3] = tmp[0] * tmp[2];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,342,tmp[4] = tmp[0] * tmp[3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,343,tmp[5] = tmp[0] * tmp[4];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,344,tmp[6] = tmp[0] * tmp[5];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,345,tmp[7] = tmp[0] * tmp[6];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,346,tmp[8] = tmp[0] * tmp[7];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,347,tmp[9] = tmp[0] * tmp[8];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,348,"model.addObservation(tmp, data[off]);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,349,off += 2;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,351,RegressionResults result = model.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,352,double[] betaHat = result.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,353,"TestUtils.assertEquals(betaHat,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,354,new double[]{
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,355,"-1467.48961422980,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,356,"-2772.17959193342,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,357,"-2316.37108160893,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,358,"-1127.97394098372,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,359,"-354.478233703349,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,360,"-75.1242017393757,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,361,"-10.8753180355343,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,362,"-1.06221498588947,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,363,"-0.670191154593408E-01,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,364,"-0.246781078275479E-02,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,365,-0.402962525080404E-04
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,366,"}, 1E-5); //"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,368,double[] se = result.getStdErrorOfEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,369,"TestUtils.assertEquals(se,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,370,new double[]{
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,371,"298.084530995537,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,372,"559.779865474950,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,373,"466.477572127796,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,374,"227.204274477751,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,375,"71.6478660875927,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,376,"15.2897178747400,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,377,"2.23691159816033,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,378,"0.221624321934227,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,379,"0.142363763154724E-01,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,380,"0.535617408889821E-03,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,381,0.896632837373868E-05
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,382,"}, 1E-5); //"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,384,"TestUtils.assertEquals(0.996727416185620, result.getRSquared(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,385,"TestUtils.assertEquals(0.112091743968020E-04, result.getMeanSquareError(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,386,"TestUtils.assertEquals(0.795851382172941E-03, result.getErrorSumSquares(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,390,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,391,public void testWampler1() throws MathException {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,392,double[] data = new double[]{
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,393,"1, 0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,394,"6, 1,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,395,"63, 2,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,396,"364, 3,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,397,"1365, 4,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,398,"3906, 5,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,399,"9331, 6,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,400,"19608, 7,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,401,"37449, 8,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,402,"66430, 9,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,403,"111111, 10,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,404,"177156, 11,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,405,"271453, 12,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,406,"402234, 13,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,407,"579195, 14,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,408,"813616, 15,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,409,"1118481, 16,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,410,"1508598, 17,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,411,"2000719, 18,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,412,"2613660, 19,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,413,"3368421, 20};"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,415,"MillerUpdatingRegression model = new MillerUpdatingRegression(5, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,416,int off = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,417,double[] tmp = new double[5];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,418,int nobs = 21;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,419,for (int i = 0; i < nobs; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,420,tmp[0] = data[off + 1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,421,tmp[1] = tmp[0] * tmp[0];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,422,tmp[2] = tmp[0] * tmp[1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,423,tmp[3] = tmp[0] * tmp[2];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,424,tmp[4] = tmp[0] * tmp[3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,425,"model.addObservation(tmp, data[off]);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,426,off += 2;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,428,RegressionResults result = model.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,429,double[] betaHat = result.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,430,"TestUtils.assertEquals(betaHat,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,431,"new double[]{1.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,432,"1.0, 1.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,433,"1.0, 1.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,434,"1.0}, 1E-8); //"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,436,double[] se = result.getStdErrorOfEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,437,"TestUtils.assertEquals(se,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,438,"new double[]{0.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,439,"0.0, 0.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,440,"0.0, 0.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,441,"0.0}, 1E-8); //"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,443,"TestUtils.assertEquals(1.0, result.getRSquared(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,444,"TestUtils.assertEquals(0, result.getMeanSquareError(), 1.0e-7);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,445,"TestUtils.assertEquals(0.00, result.getErrorSumSquares(), 1.0e-6);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,447,return;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,450,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,451,public void testWampler2() throws MathException {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,452,double[] data = new double[]{
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,453,"1.00000, 0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,454,"1.11111, 1,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,455,"1.24992, 2,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,456,"1.42753, 3,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,457,"1.65984, 4,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,458,"1.96875, 5,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,459,"2.38336, 6,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,460,"2.94117, 7,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,461,"3.68928, 8,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,462,"4.68559, 9,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,463,"6.00000, 10,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,464,"7.71561, 11,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,465,"9.92992, 12,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,466,"12.75603, 13,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,467,"16.32384, 14,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,468,"20.78125, 15,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,469,"26.29536, 16,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,470,"33.05367, 17,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,471,"41.26528, 18,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,472,"51.16209, 19,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,473,"63.00000, 20};"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,475,"MillerUpdatingRegression model = new MillerUpdatingRegression(5, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,476,int off = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,477,double[] tmp = new double[5];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,478,int nobs = 21;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,479,for (int i = 0; i < nobs; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,480,tmp[0] = data[off + 1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,481,tmp[1] = tmp[0] * tmp[0];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,482,tmp[2] = tmp[0] * tmp[1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,483,tmp[3] = tmp[0] * tmp[2];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,484,tmp[4] = tmp[0] * tmp[3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,485,"model.addObservation(tmp, data[off]);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,486,off += 2;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,488,RegressionResults result = model.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,489,double[] betaHat = result.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,490,"TestUtils.assertEquals(betaHat,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,491,"new double[]{1.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,492,"1.0e-1, 1.0e-2,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,493,"1.0e-3, 1.0e-4,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,494,"1.0e-5}, 1E-8); //"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,496,double[] se = result.getStdErrorOfEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,497,"TestUtils.assertEquals(se,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,498,"new double[]{0.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,499,"0.0, 0.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,500,"0.0, 0.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,501,"0.0}, 1E-8); //"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,503,"TestUtils.assertEquals(1.0, result.getRSquared(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,504,"TestUtils.assertEquals(0, result.getMeanSquareError(), 1.0e-7);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,505,"TestUtils.assertEquals(0.00, result.getErrorSumSquares(), 1.0e-6);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,506,return;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,509,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,510,public void testWampler3() throws MathException {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,511,double[] data = new double[]{
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,512,"760, 0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,513,"-2042, 1,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,514,"2111, 2,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,515,"-1684, 3,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,516,"3888, 4,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,517,"1858, 5,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,518,"11379, 6,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,519,"17560, 7,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,520,"39287, 8,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,521,"64382, 9,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,522,"113159, 10,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,523,"175108, 11,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,524,"273291, 12,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,525,"400186, 13,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,526,"581243, 14,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,527,"811568, 15,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,528,"1121004, 16,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,529,"1506550, 17,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,530,"2002767, 18,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,531,"2611612, 19,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,532,"3369180, 20};"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,533,"MillerUpdatingRegression model = new MillerUpdatingRegression(5, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,534,int off = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,535,double[] tmp = new double[5];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,536,int nobs = 21;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,537,for (int i = 0; i < nobs; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,538,tmp[0] = data[off + 1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,539,tmp[1] = tmp[0] * tmp[0];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,540,tmp[2] = tmp[0] * tmp[1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,541,tmp[3] = tmp[0] * tmp[2];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,542,tmp[4] = tmp[0] * tmp[3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,543,"model.addObservation(tmp, data[off]);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,544,off += 2;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,546,RegressionResults result = model.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,547,double[] betaHat = result.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,548,"TestUtils.assertEquals(betaHat,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,549,"new double[]{1.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,550,"1.0, 1.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,551,"1.0, 1.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,552,"1.0}, 1E-8); //"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,553,double[] se = result.getStdErrorOfEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,554,"TestUtils.assertEquals(se,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,555,"new double[]{2152.32624678170,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,556,"2363.55173469681, 779.343524331583,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,557,"101.475507550350, 5.64566512170752,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,558,"0.112324854679312}, 1E-8); //"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,560,"TestUtils.assertEquals(.999995559025820, result.getRSquared(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,561,"TestUtils.assertEquals(5570284.53333333, result.getMeanSquareError(), 1.0e-7);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,562,"TestUtils.assertEquals(83554268.0000000, result.getErrorSumSquares(), 1.0e-6);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,563,return;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,566,//@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,567,public void testWampler4() throws MathException {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,568,double[] data = new double[]{
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,569,"75901, 0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,570,"-204794, 1,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,571,"204863, 2,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,572,"-204436, 3,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,573,"253665, 4,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,574,"-200894, 5,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,575,"214131, 6,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,576,"-185192, 7,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,577,"221249, 8,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,578,"-138370, 9,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,579,"315911, 10,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,580,"-27644, 11,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,581,"455253, 12,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,582,"197434, 13,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,583,"783995, 14,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,584,"608816, 15,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,585,"1370781, 16,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,586,"1303798, 17,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,587,"2205519, 18,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,588,"2408860, 19,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,589,"3444321, 20};"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,590,"MillerUpdatingRegression model = new MillerUpdatingRegression(5, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,591,int off = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,592,double[] tmp = new double[5];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,593,int nobs = 21;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,594,for (int i = 0; i < nobs; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,595,tmp[0] = data[off + 1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,596,tmp[1] = tmp[0] * tmp[0];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,597,tmp[2] = tmp[0] * tmp[1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,598,tmp[3] = tmp[0] * tmp[2];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,599,tmp[4] = tmp[0] * tmp[3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,600,"model.addObservation(tmp, data[off]);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,601,off += 2;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,603,RegressionResults result = model.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,604,double[] betaHat = result.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,605,"TestUtils.assertEquals(betaHat,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,606,"new double[]{1.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,607,"1.0, 1.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,608,"1.0, 1.0,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,609,"1.0}, 1E-8); //"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,611,double[] se = result.getStdErrorOfEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,612,"TestUtils.assertEquals(se,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,613,"new double[]{215232.624678170,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,614,"236355.173469681, 77934.3524331583,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,615,"10147.5507550350, 564.566512170752,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,616,"11.2324854679312}, 1E-8); //"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,618,"TestUtils.assertEquals(.957478440825662, result.getRSquared(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,619,"TestUtils.assertEquals(55702845333.3333, result.getMeanSquareError(), 1.0e-4);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,620,"TestUtils.assertEquals(835542680000.000, result.getErrorSumSquares(), 1.0e-3);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,622,return;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,626,* Test Longley dataset against certified values provided by NIST.
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,627,"* Data Source: J. Longley (1967) ""An Appraisal of Least Squares"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,628,"* Programs for the Electronic Computer from the Point of View of the User"""
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,629,"* Journal of the American Statistical Association, vol. 62. September,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,630,* pp. 819-841.
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,632,* Certified values (and data) are from NIST:
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,633,* http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,635,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,636,public void testLongly() throws Exception {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,637,"// Y values are first, then independent vars"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,638,// Each row is one observation
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,639,double[] design = new double[]{
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,640,"60323, 83.0, 234289, 2356, 1590, 107608, 1947,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,641,"61122, 88.5, 259426, 2325, 1456, 108632, 1948,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,642,"60171, 88.2, 258054, 3682, 1616, 109773, 1949,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,643,"61187, 89.5, 284599, 3351, 1650, 110929, 1950,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,644,"63221, 96.2, 328975, 2099, 3099, 112075, 1951,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,645,"63639, 98.1, 346999, 1932, 3594, 113270, 1952,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,646,"64989, 99.0, 365385, 1870, 3547, 115094, 1953,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,647,"63761, 100.0, 363112, 3578, 3350, 116219, 1954,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,648,"66019, 101.2, 397469, 2904, 3048, 117388, 1955,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,649,"67857, 104.6, 419180, 2822, 2857, 118734, 1956,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,650,"68169, 108.4, 442769, 2936, 2798, 120445, 1957,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,651,"66513, 110.8, 444546, 4681, 2637, 121950, 1958,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,652,"68655, 112.6, 482704, 3813, 2552, 123366, 1959,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,653,"69564, 114.2, 502601, 3931, 2514, 125368, 1960,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,654,"69331, 115.7, 518173, 4806, 2572, 127852, 1961,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,655,"70551, 116.9, 554894, 4007, 2827, 130081, 1962"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,658,final int nobs = 16;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,659,final int nvars = 6;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,661,// Estimate the model
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,662,"MillerUpdatingRegression model = new MillerUpdatingRegression(6, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,663,int off = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,664,double[] tmp = new double[6];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,665,for (int i = 0; i < nobs; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,666,"System.arraycopy(design, off + 1, tmp, 0, nvars);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,667,"model.addObservation(tmp, design[off]);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,668,off += nvars + 1;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,671,// Check expected beta values from NIST
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,672,RegressionResults result = model.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,673,double[] betaHat = result.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,674,"TestUtils.assertEquals(betaHat,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,675,"new double[]{-3482258.63459582, 15.0618722713733,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,676,"-0.358191792925910E-01, -2.02022980381683,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,677,"-1.03322686717359, -0.511041056535807E-01,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,678,"1829.15146461355}, 1E-8); //"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,680,// Check standard errors from NIST
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,681,double[] errors = result.getStdErrorOfEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,682,"TestUtils.assertEquals(new double[]{890420.383607373,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,683,"84.9149257747669,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,684,"0.334910077722432E-01,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,685,"0.488399681651699,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,686,"0.214274163161675,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,687,"0.226073200069370,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,688,"455.478499142212}, errors, 1E-6);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,690,// Check R-Square statistics against R
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,691,"TestUtils.assertEquals(0.995479004577296, result.getRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,692,"TestUtils.assertEquals(0.992465007628826, result.getAdjustedRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,695,//        // Estimate model without intercept
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,696,"model = new MillerUpdatingRegression(6, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,697,off = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,698,for (int i = 0; i < nobs; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,699,"System.arraycopy(design, off + 1, tmp, 0, nvars);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,700,"model.addObservation(tmp, design[off]);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,701,off += nvars + 1;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,703,// Check expected beta values from R
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,704,result = model.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,705,betaHat = result.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,706,"TestUtils.assertEquals(betaHat,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,707,"new double[]{-52.99357013868291, 0.07107319907358,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,708,"-0.42346585566399, -0.57256866841929,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,709,"-0.41420358884978, 48.41786562001326}, 1E-11);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,711,// Check standard errors from R
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,712,errors = result.getStdErrorOfEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,713,"TestUtils.assertEquals(new double[]{129.54486693117232, 0.03016640003786,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,714,"0.41773654056612, 0.27899087467676, 0.32128496193363,"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,715,"17.68948737819961}, errors, 1E-11);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,718,//        // Check R-Square statistics against R
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,719,"TestUtils.assertEquals(0.9999670130706, result.getRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,720,"TestUtils.assertEquals(0.999947220913, result.getAdjustedRSquared(), 1E-12);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,724,//    @Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,725,//    public void testRegressReorder() throws MathException {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,726,"//        // System.out.println(""testRegressReorder"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,727,"//        MillerUpdatingRegression instance = new MillerUpdatingRegression(4, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,728,//        double[][] x = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,729,//        double[] y = new double[airdata[0].length];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,730,//        for (int i = 0; i < airdata[0].length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,731,//            x[i] = new double[4];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,732,//            x[i][0] = 1.0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,733,//            x[i][1] = Math.log(airdata[3][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,734,//            x[i][2] = Math.log(airdata[4][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,735,//            x[i][3] = airdata[5][i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,736,//            y[i] = Math.log(airdata[2][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,739,"//        instance.addObservations(x, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,740,//        RegressionResults result = instance.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,741,//        if (result == null) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,742,"//            fail(""Null result...."");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,745,"//        instance.reorderRegressors(new int[]{3, 2}, 0);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,746,//        RegressionResults resultInverse = instance.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,748,//        double[] beta = result.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,749,//        double[] betar = resultInverse.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,750,//        if (Math.abs(beta[0] - betar[0]) > 1.0e-14) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,751,"//            fail(""Parameters not correct after reorder (0,3)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,753,//        if (Math.abs(beta[1] - betar[1]) > 1.0e-14) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,754,"//            fail(""Parameters not correct after reorder (1,2)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,756,//        if (Math.abs(beta[2] - betar[2]) > 1.0e-14) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,757,"//            fail(""Parameters not correct after reorder (2,1)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,759,//        if (Math.abs(beta[3] - betar[3]) > 1.0e-14) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,760,"//            fail(""Parameters not correct after reorder (3,0)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,764,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,765,public void testOneRedundantColumn() throws MathException {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,766,"MillerUpdatingRegression instance = new MillerUpdatingRegression(4, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,767,"MillerUpdatingRegression instance2 = new MillerUpdatingRegression(5, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,768,double[][] x = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,769,double[][] x2 = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,770,double[] y = new double[airdata[0].length];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,771,for (int i = 0; i < airdata[0].length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,772,x[i] = new double[4];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,773,x2[i] = new double[5];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,774,x[i][0] = 1.0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,775,x[i][1] = Math.log(airdata[3][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,776,x[i][2] = Math.log(airdata[4][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,777,x[i][3] = airdata[5][i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,779,x2[i][0] = x[i][0];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,780,x2[i][1] = x[i][1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,781,x2[i][2] = x[i][2];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,782,x2[i][3] = x[i][3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,783,x2[i][4] = x[i][3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,785,y[i] = Math.log(airdata[2][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,788,"instance.addObservations(x, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,789,RegressionResults result = instance.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,790,if (result == null) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,791,"fail(""Could not estimate initial regression"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,794,"instance2.addObservations(x2, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,795,RegressionResults resultRedundant = instance2.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,796,if (resultRedundant == null) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,797,"fail(""Could not estimate redundant regression"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,799,double[] beta = result.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,800,double[] betar = resultRedundant.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,801,double[] se = result.getStdErrorOfEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,802,double[] ser = resultRedundant.getStdErrorOfEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,804,for (int i = 0; i < beta.length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,805,if (Math.abs(beta[i] - betar[i]) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,806,"fail(""Parameters not correctly estimated"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,808,if (Math.abs(se[i] - ser[i]) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,809,"fail(""Standard errors not correctly estimated"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,811,for (int j = 0; j < i; j++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,812,"if (Math.abs(result.getCovarianceOfParameters(i, j)"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,813,"- resultRedundant.getCovarianceOfParameters(i, j)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,814,"fail(""Variance Covariance not correct"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,820,"TestUtils.assertEquals(result.getAdjustedRSquared(), resultRedundant.getAdjustedRSquared(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,821,"TestUtils.assertEquals(result.getErrorSumSquares(), resultRedundant.getErrorSumSquares(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,822,"TestUtils.assertEquals(result.getMeanSquareError(), resultRedundant.getMeanSquareError(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,823,"TestUtils.assertEquals(result.getRSquared(), resultRedundant.getRSquared(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,824,return;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,827,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,828,public void testThreeRedundantColumn() throws MathException {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,830,"MillerUpdatingRegression instance = new MillerUpdatingRegression(4, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,831,"MillerUpdatingRegression instance2 = new MillerUpdatingRegression(7, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,832,double[][] x = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,833,double[][] x2 = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,834,double[] y = new double[airdata[0].length];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,835,for (int i = 0; i < airdata[0].length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,836,x[i] = new double[4];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,837,x2[i] = new double[7];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,838,x[i][0] = 1.0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,839,x[i][1] = Math.log(airdata[3][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,840,x[i][2] = Math.log(airdata[4][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,841,x[i][3] = airdata[5][i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,843,x2[i][0] = x[i][0];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,844,x2[i][1] = x[i][0];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,845,x2[i][2] = x[i][1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,846,x2[i][3] = x[i][2];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,847,x2[i][4] = x[i][1];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,848,x2[i][5] = x[i][3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,849,x2[i][6] = x[i][2];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,851,y[i] = Math.log(airdata[2][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,854,"instance.addObservations(x, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,855,RegressionResults result = instance.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,856,if (result == null) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,857,"fail(""Could not estimate initial regression"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,860,"instance2.addObservations(x2, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,861,RegressionResults resultRedundant = instance2.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,862,if (resultRedundant == null) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,863,"fail(""Could not estimate redundant regression"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,865,double[] beta = result.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,866,double[] betar = resultRedundant.getParameterEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,867,double[] se = result.getStdErrorOfEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,868,double[] ser = resultRedundant.getStdErrorOfEstimates();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,870,if (Math.abs(beta[0] - betar[0]) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,871,"fail(""Parameters not correct after reorder (0,3)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,873,if (Math.abs(beta[1] - betar[2]) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,874,"fail(""Parameters not correct after reorder (1,2)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,876,if (Math.abs(beta[2] - betar[3]) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,877,"fail(""Parameters not correct after reorder (2,1)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,879,if (Math.abs(beta[3] - betar[5]) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,880,"fail(""Parameters not correct after reorder (3,0)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,883,if (Math.abs(se[0] - ser[0]) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,884,"fail(""Se not correct after reorder (0,3)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,886,if (Math.abs(se[1] - ser[2]) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,887,"fail(""Se not correct after reorder (1,2)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,889,if (Math.abs(se[2] - ser[3]) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,890,"fail(""Se not correct after reorder (2,1)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,892,if (Math.abs(se[3] - ser[5]) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,893,"fail(""Se not correct after reorder (3,0)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,896,"if (Math.abs(result.getCovarianceOfParameters(0, 0)"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,897,"- resultRedundant.getCovarianceOfParameters(0, 0)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,898,"fail(""VCV not correct after reorder (0,0)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,900,"if (Math.abs(result.getCovarianceOfParameters(0, 1)"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,901,"- resultRedundant.getCovarianceOfParameters(0, 2)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,902,"fail(""VCV not correct after reorder (0,1)<->(0,2)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,904,"if (Math.abs(result.getCovarianceOfParameters(0, 2)"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,905,"- resultRedundant.getCovarianceOfParameters(0, 3)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,906,"fail(""VCV not correct after reorder (0,2)<->(0,1)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,908,"if (Math.abs(result.getCovarianceOfParameters(0, 3)"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,909,"- resultRedundant.getCovarianceOfParameters(0, 5)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,910,"fail(""VCV not correct after reorder (0,3)<->(0,3)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,912,"if (Math.abs(result.getCovarianceOfParameters(1, 0)"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,913,"- resultRedundant.getCovarianceOfParameters(2, 0)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,914,"fail(""VCV not correct after reorder (1,0)<->(2,0)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,916,"if (Math.abs(result.getCovarianceOfParameters(1, 1)"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,917,"- resultRedundant.getCovarianceOfParameters(2, 2)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,918,"fail(""VCV not correct  (1,1)<->(2,1)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,920,"if (Math.abs(result.getCovarianceOfParameters(1, 2)"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,921,"- resultRedundant.getCovarianceOfParameters(2, 3)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,922,"fail(""VCV not correct  (1,2)<->(2,2)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,925,"if (Math.abs(result.getCovarianceOfParameters(2, 0)"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,926,"- resultRedundant.getCovarianceOfParameters(3, 0)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,927,"fail(""VCV not correct  (2,0)<->(1,0)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,929,"if (Math.abs(result.getCovarianceOfParameters(2, 1)"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,930,"- resultRedundant.getCovarianceOfParameters(3, 2)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,931,"fail(""VCV not correct  (2,1)<->(1,2)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,934,"if (Math.abs(result.getCovarianceOfParameters(3, 3)"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,935,"- resultRedundant.getCovarianceOfParameters(5, 5)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,936,"fail(""VCV not correct  (3,3)<->(3,2)"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,939,"TestUtils.assertEquals(result.getAdjustedRSquared(), resultRedundant.getAdjustedRSquared(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,940,"TestUtils.assertEquals(result.getErrorSumSquares(), resultRedundant.getErrorSumSquares(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,941,"TestUtils.assertEquals(result.getMeanSquareError(), resultRedundant.getMeanSquareError(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,942,"TestUtils.assertEquals(result.getRSquared(), resultRedundant.getRSquared(), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,943,return;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,946,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,947,public void testPCorr() {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,948,"MillerUpdatingRegression instance = new MillerUpdatingRegression(4, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,949,double[][] x = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,950,double[] y = new double[airdata[0].length];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,951,double[] cp = new double[10];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,952,double[] yxcorr = new double[4];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,953,double[] diag = new double[4];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,954,double sumysq = 0.0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,955,int off = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,956,for (int i = 0; i < airdata[0].length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,957,x[i] = new double[4];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,958,x[i][0] = 1.0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,959,x[i][1] = Math.log(airdata[3][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,960,x[i][2] = Math.log(airdata[4][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,961,x[i][3] = airdata[5][i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,962,y[i] = Math.log(airdata[2][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,963,off = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,964,for (int j = 0; j < 4; j++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,965,double tmp = x[i][j];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,966,"for (int k = 0; k <= j; k++, off++) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,967,cp[off] += tmp * x[i][k];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,969,yxcorr[j] += tmp * y[i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,971,sumysq += y[i] * y[i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,973,PearsonsCorrelation pearson = new PearsonsCorrelation(x);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,974,RealMatrix corr = pearson.getCorrelationMatrix();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,975,off = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,976,"for (int i = 0; i < 4; i++, off += (i + 1)) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,977,diag[i] = FastMath.sqrt(cp[off]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,980,"instance.addObservations(x, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,981,double[] pc = instance.getPartialCorrelations(0);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,982,int idx = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,983,off = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,984,int off2 = 6;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,985,for (int i = 0; i < 4; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,986,for (int j = 0; j < i; j++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,987,if (Math.abs(pc[idx] - cp[off] / (diag[i] * diag[j])) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,988,"fail(""Failed cross products... i = "" + i + "" j = "" + j);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,990,++idx;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,991,++off;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,993,++off;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,994,if (Math.abs(pc[i+off2] - yxcorr[ i] / (FastMath.sqrt(sumysq) * diag[i])) > 1.0e-8) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,995,"fail(""failed cross product i = "" + i + "" y"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,998,double[] pc2 = instance.getPartialCorrelations(1);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1000,idx = 0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1002,for (int i = 1; i < 4; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1003,for (int j = 1; j < i; j++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1004,"if (Math.abs(pc2[idx] - corr.getEntry(j, i)) > 1.0e-8) {"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1005,"fail(""Failed cross products... i = "" + i + "" j = "" + j);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1007,++idx;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1010,double[] pc3 = instance.getPartialCorrelations(2);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1011,if (pc3 == null) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1012,"fail(""Should not be null"");"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1014,return;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1017,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1018,public void testHdiag() {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1019,"MillerUpdatingRegression instance = new MillerUpdatingRegression(4, false);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1020,double[][] x = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1021,double[] y = new double[airdata[0].length];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1022,for (int i = 0; i < airdata[0].length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1023,x[i] = new double[4];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1024,x[i][0] = 1.0;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1025,x[i][1] = Math.log(airdata[3][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1026,x[i][2] = Math.log(airdata[4][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1027,x[i][3] = airdata[5][i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1028,y[i] = Math.log(airdata[2][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1030,"instance.addObservations(x, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1031,OLSMultipleLinearRegression ols = new OLSMultipleLinearRegression();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1032,ols.setNoIntercept(true);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1033,"ols.newSampleData(y, x);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1035,RealMatrix rm = ols.calculateHat();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1036,for (int i = 0; i < x.length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1037,"TestUtils.assertEquals(instance.getDiagonalOfHatMatrix(x[i]), rm.getEntry(i, i), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1039,return;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1041,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1042,public void testHdiagConstant() {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1043,"MillerUpdatingRegression instance = new MillerUpdatingRegression(3, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1044,double[][] x = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1045,double[] y = new double[airdata[0].length];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1046,for (int i = 0; i < airdata[0].length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1047,x[i] = new double[3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1048,x[i][0] = Math.log(airdata[3][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1049,x[i][1] = Math.log(airdata[4][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1050,x[i][2] = airdata[5][i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1051,y[i] = Math.log(airdata[2][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1053,"instance.addObservations(x, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1054,OLSMultipleLinearRegression ols = new OLSMultipleLinearRegression();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1055,ols.setNoIntercept(false);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1056,"ols.newSampleData(y, x);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1058,RealMatrix rm = ols.calculateHat();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1059,for (int i = 0; i < x.length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1060,"TestUtils.assertEquals(instance.getDiagonalOfHatMatrix(x[i]), rm.getEntry(i, i), 1.0e-8);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1062,return;
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1066,@Test
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1067,public void testSubsetRegression() throws MathException {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1069,"MillerUpdatingRegression instance = new MillerUpdatingRegression(3, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1070,"MillerUpdatingRegression redRegression = new MillerUpdatingRegression(2, true);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1071,double[][] x = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1072,double[][] xReduced = new double[airdata[0].length][];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1073,double[] y = new double[airdata[0].length];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1074,for (int i = 0; i < airdata[0].length; i++) {
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1075,x[i] = new double[3];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1076,x[i][0] = Math.log(airdata[3][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1077,x[i][1] = Math.log(airdata[4][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1078,x[i][2] = airdata[5][i];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1080,xReduced[i] = new double[2];
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1081,xReduced[i][0] = Math.log(airdata[3][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1082,xReduced[i][1] = Math.log(airdata[4][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1084,y[i] = Math.log(airdata[2][i]);
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1087,"instance.addObservations(x, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1088,"redRegression.addObservations(xReduced, y);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1090,"RegressionResults resultsInstance = instance.regress( new int[]{0,1,2} );"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1091,RegressionResults resultsReduced = redRegression.regress();
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1093,"TestUtils.assertEquals(resultsInstance.getParameterEstimates(), resultsReduced.getParameterEstimates(), 1.0e-12);"
True,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java,1094,"TestUtils.assertEquals(resultsInstance.getStdErrorOfEstimates(), resultsReduced.getStdErrorOfEstimates(), 1.0e-12);"

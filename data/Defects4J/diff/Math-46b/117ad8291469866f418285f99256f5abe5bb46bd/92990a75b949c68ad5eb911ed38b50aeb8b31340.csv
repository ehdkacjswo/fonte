is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,17,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,19,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,21,/** Base class for random number generators that generates bits streams.
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,23,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,24,* @since 2.0
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,27,public abstract class BitsStreamGenerator implements RandomGenerator {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,29,/** Next gaussian. */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,30,private double nextGaussian;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,32,/** Creates a new random number generator.
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,34,public BitsStreamGenerator() {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,35,nextGaussian = Double.NaN;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,38,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,39,public abstract void setSeed(int seed);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,41,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,42,public abstract void setSeed(int[] seed);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,44,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,45,public abstract void setSeed(long seed);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,47,/** Generate next pseudorandom number.
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,48,* <p>This method is the core generation algorithm. It is used by all the
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,49,* public generation methods for the various primitive types {@link
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,50,"* #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},"
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,51,"* {@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},"
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,52,* {@link #next(int)} and {@link #nextLong()}.</p>
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,53,* @param bits number of random bits to produce
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,55,protected abstract int next(int bits);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,57,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,58,public boolean nextBoolean() {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,59,return next(1) != 0;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,62,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,63,public void nextBytes(byte[] bytes) {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,64,int i = 0;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,65,final int iEnd = bytes.length - 3;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,66,while (i < iEnd) {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,67,final int random = next(32);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,68,bytes[i]     = (byte) (random & 0xff);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,69,bytes[i + 1] = (byte) ((random >>  8) & 0xff);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,70,bytes[i + 2] = (byte) ((random >> 16) & 0xff);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,71,bytes[i + 3] = (byte) ((random >> 24) & 0xff);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,72,i += 4;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,74,int random = next(32);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,75,while (i < bytes.length) {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,76,bytes[i++] = (byte) (random & 0xff);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,77,random     = random >> 8;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,81,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,82,public double nextDouble() {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,83,final long high = ((long) next(26)) << 26;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,84,final int  low  = next(26);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,85,return (high | low) * 0x1.0p-52d;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,88,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,89,public float nextFloat() {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,90,return next(23) * 0x1.0p-23f;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,93,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,94,public double nextGaussian() {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,96,final double random;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,97,if (Double.isNaN(nextGaussian)) {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,98,// generate a new pair of gaussian numbers
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,99,final double x = nextDouble();
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,100,final double y = nextDouble();
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,101,final double alpha = 2 * Math.PI * x;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,102,final double r      = Math.sqrt(-2 * Math.log(y));
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,103,random       = r * Math.cos(alpha);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,104,nextGaussian = r * Math.sin(alpha);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,105,} else {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,106,// use the second element of the pair already generated
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,107,random = nextGaussian;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,108,nextGaussian = Double.NaN;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,111,return random;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,115,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,116,public int nextInt() {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,117,return next(32);
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,120,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,121,public int nextInt(int n) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,123,if (n < 1) {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,124,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,125,"""upper bound must be positive ({0})"", n);"
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,128,// find bit mask for n
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,129,int mask = n;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,130,mask |= mask >> 1;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,131,mask |= mask >> 2;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,132,mask |= mask >> 4;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,133,mask |= mask >> 8;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,134,mask |= mask >> 16;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,136,while (true) {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,137,final int random = next(32) & mask;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,138,if (random < n) {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,139,return random;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,145,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,146,public long nextLong() {
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,147,final long high  = ((long) next(32)) << 32;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,148,final long  low  = ((long) next(32)) & 0xffffffffL;
True,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,src/java/org/apache/commons/math/random/BitsStreamGenerator.java,149,return high | low;

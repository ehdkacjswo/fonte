is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,307,"les statistiques bas\u00e9es sur des moments externes ne peuvent pas \u00eatre remises \u00e0 z\u00e9ro"" }"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,307,"""les statistiques bas\u00e9es sur des moments externes ne peuvent pas \u00eatre remises \u00e0 z\u00e9ro"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,309,// org.apache.commons.math.distribution.ZipfDistributionImpl
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,310,"{ ""invalid number of elements {0} (must be positive)"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,311,"""nombre d''\u00e9l\u00e9ments {0} invalide (doit \u00eatre positif)"" },"
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,312,"{ ""invalid exponent {0} (must be positive)"","
True,src/java/org/apache/commons/math/MessagesResources_fr.java,src/java/org/apache/commons/math/MessagesResources_fr.java,313,"""exposant {0} invalide (doit \u00eatre positif)"" }"
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,18,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,21,* The Zipf (or zeta) Distribution.
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,22,* <p>
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,23,* References:
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,24,* <ul>
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,25,"* <li><a href=""http://mathworld.wolfram.com/ZipfDistribution.html"">Zipf"
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,26,* Distribution</a></li>
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,27,* </ul>
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,28,* </p>
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,30,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,32,public interface ZipfDistribution extends IntegerDistribution {
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,34,* Get the number of elements (e.g. corpus size) for the distribution.
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,36,* @return the number of elements
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,38,public int getNumberOfElements();
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,41,* Set the number of elements (e.g. corpus size) for the distribution.
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,42,* The parameter value must be positive; otherwise an
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,43,* <code>IllegalArgumentException</code> is thrown.
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,45,* @param n the number of elements
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,46,* @throws IllegalArgumentException if n &le; 0
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,48,public void setNumberOfElements(int n);
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,51,* Get the exponent characterising the distribution.
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,53,* @return the exponent
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,55,public double getExponent();
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,58,* Set the exponent characterising the distribution.
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,59,* The parameter value must be positive; otherwise an
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,60,* <code>IllegalArgumentException</code> is thrown.
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,62,* @param s the exponent
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,63,* @throws IllegalArgumentException if s &le; 0.0
True,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,src/java/org/apache/commons/math/distribution/ZipfDistribution.java,65,public void setExponent(double s);
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,18,package org.apache.commons.math.distribution;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,20,import java.io.Serializable;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,22,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,25,* Implementation for the {@link ZipfDistribution}.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,27,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,29,public class ZipfDistributionImpl extends AbstractIntegerDistribution
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,30,"implements ZipfDistribution, Serializable {"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,31,private static final long serialVersionUID = -140627372283420404L;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,33,private int numberOfElements;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,34,private double exponent;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,37,* Create a new Zipf distribution with the given number of elements and
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,38,* exponent. Both values must be positive; otherwise an
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,39,* <code>IllegalArgumentException</code> is thrown.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,41,* @param n the number of elements
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,42,* @param s the exponent
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,43,* @exception IllegalArgumentException if n &le; 0 or s &le; 0.0
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,45,"public ZipfDistributionImpl(final int numberOfElements, final double exponent)"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,46,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,47,setNumberOfElements(numberOfElements);
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,48,setExponent(exponent);
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,52,* Get the number of elements (e.g. corpus size) for the distribution.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,54,* @return the number of elements
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,56,public int getNumberOfElements() {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,57,return numberOfElements;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,61,* Set the number of elements (e.g. corpus size) for the distribution.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,62,* The parameter value must be positive; otherwise an
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,63,* <code>IllegalArgumentException</code> is thrown.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,65,* @param n the number of elements
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,66,* @exception IllegalArgumentException if n &le; 0
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,68,public void setNumberOfElements(final int n)
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,69,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,70,if (n <= 0) {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,71,"throw MathRuntimeException.createIllegalArgumentException(""invalid number of elements {0}"" +"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,72,""" (must be positive)"","
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,73,new Object[] { n });
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,75,this.numberOfElements = n;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,79,* Get the exponent characterising the distribution.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,81,* @return the exponent
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,83,public double getExponent() {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,84,return exponent;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,88,* Set the exponent characterising the distribution.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,89,* The parameter value must be positive; otherwise an
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,90,* <code>IllegalArgumentException</code> is thrown.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,92,* @param s the exponent
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,93,* @exception IllegalArgumentException if s &le; 0.0
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,95,public void setExponent(final double s)
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,96,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,97,if (s <= 0.0) {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,98,"throw MathRuntimeException.createIllegalArgumentException(""invalid exponent {0} (must be positive)"","
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,99,new Object[] { s });
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,101,this.exponent = s;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,105,* The probability mass function P(X = x) for a Zipf distribution.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,107,* @param x the value at which the probability density function is evaluated.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,108,* @return the value of the probability mass function at x
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,110,public double probability(final int x) {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,111,if (x <= 0 || x > getNumberOfElements()) {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,112,return 0.0;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,115,"return (1.0 / Math.pow(x, exponent)) / generalizedHarmonic(numberOfElements, exponent);"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,120,* The probability distribution function P(X <= x) for a Zipf distribution.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,122,* @param x the value at which the PDF is evaluated.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,123,* @return Zipf distribution function evaluated at x
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,125,public double cumulativeProbability(final int x) {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,126,if (x <= 0) {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,127,return 0.0;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,128,} else if (x >= getNumberOfElements()) {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,129,return 1.0;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,132,"return generalizedHarmonic(x, exponent) / generalizedHarmonic(numberOfElements, exponent);"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,137,"* Access the domain value lower bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,138,* bracket a PDF root.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,140,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,141,"* @return domain value lower bound, i.e."
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,142,*         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,144,protected int getDomainLowerBound(final double p) {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,145,return 0;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,149,"* Access the domain value upper bound, based on <code>p</code>, used to"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,150,* bracket a PDF root.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,152,* @param p the desired probability for the critical value
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,153,"* @return domain value upper bound, i.e."
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,154,*         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,156,protected int getDomainUpperBound(final double p) {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,157,return numberOfElements;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,162,* Calculates the Nth generalized harmonic number. See
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,163,"* <a href=""http://mathworld.wolfram.com/HarmonicSeries.html"">Harmonic"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,164,* Series</a>.
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,166,* @param n the term in the series to calculate (must be &ge; 1)
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,167,* @param m the exponent; special case m == 1.0 is the harmonic series
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,168,* @return the nth generalized harmonic number
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,170,"private double generalizedHarmonic(final int n, final double m) {"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,171,double value = 0;
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,172,for (int k = n; k > 0; --k) {
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,173,"value += 1.0 / Math.pow(k, m);"
True,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,src/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java,175,return value;
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,18,package org.apache.commons.math.distribution;
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,21,* Test cases for {@link ZipfDistribution}.
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,22,* Extends IntegerDistributionAbstractTest.  See class javadoc for
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,23,* IntegerDistributionAbstractTest for details.
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,25,* @version $Revision$ $Date$
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,27,public class ZipfDistributionTest extends IntegerDistributionAbstractTest {
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,28,public ZipfDistributionTest(String name) {
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,29,super(name);
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,32,//-------------- Implementations for abstract methods -----------------------
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,34,/** Creates the default discrete distribution instance to use in tests. */
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,35,public IntegerDistribution makeDistribution() {
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,36,"return new ZipfDistributionImpl(10, 1);"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,39,/** Creates the default probability density test input values */
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,40,public int[] makeDensityTestPoints() {
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,41,"return new int[] {-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,44,/** Creates the default probability density test expected values */
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,45,public double[] makeDensityTestValues() {
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,46,"return new double[] {0d, 0d, 0.3414d, 0.1707d, 0.1138d, 0.0854d, 0.0683d,"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,47,"0.0569d, 0.0488d, 0.0427d, 0.0379d, 0.0341d, 0d};"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,50,/** Creates the default cumulative probability density test input values */
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,51,public int[] makeCumulativeTestPoints() {
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,52,return makeDensityTestPoints();
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,55,/** Creates the default cumulative probability density test expected values */
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,56,public double[] makeCumulativeTestValues() {
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,57,"return new double[] {0d, 0.0000d, 0.3414d, 0.5121d, 0.6259d, 0.7113d,"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,58,"0.7796d, 0.8365d, 0.8852d, 0.9279d, 0.9659d, 1d, 1d};"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,61,/** Creates the default inverse cumulative probability test input values */
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,62,public double[] makeInverseCumulativeTestPoints() {
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,63,"return new double[] {0, 0.001d, 0.010d, 0.025d, 0.050d, 0.3414d, 0.3415d, 0.999d,"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,64,"0.990d, 0.975d, 0.950d, 0.900d, 1};"
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,67,/** Creates the default inverse cumulative probability density test expected values */
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,68,public int[] makeInverseCumulativeTestValues() {
True,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,src/test/org/apache/commons/math/distribution/ZipfDistributionTest.java,69,"return new int[] {0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 8, 7, 10};"

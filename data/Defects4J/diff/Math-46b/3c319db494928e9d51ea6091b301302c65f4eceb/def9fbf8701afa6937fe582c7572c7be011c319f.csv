is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,316,"ouble u1u1 = Vector3D.dotProduct(u1, u1);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,317,"ouble u2u2 = Vector3D.dotProduct(u2, u2);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,318,"ouble v1v1 = Vector3D.dotProduct(v1, v1);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,319,"ouble v2v2 = Vector3D.dotProduct(v2, v2);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,316,double u1u1 = u1.getNormSq();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,317,double u2u2 = u2.getNormSq();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,318,double v1v1 = v1.getNormSq();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,319,double v2v2 = v2.getNormSq();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,324,ouble u1x = u1.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,325,ouble u1y = u1.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,326,ouble u1z = u1.getZ();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,328,ouble u2x = u2.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,329,ouble u2y = u2.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,330,ouble u2z = u2.getZ();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,333,ouble coeff = FastMath.sqrt (u1u1 / v1v1);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,334,ouble v1x   = coeff * v1.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,335,ouble v1y   = coeff * v1.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,336,ouble v1z   = coeff * v1.getZ();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,337,"1 = new Vector3D(v1x, v1y, v1z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,339,/ adjust v2 in order to have (u1|u2) = (v1|v2) and (v2'|v2') = (u2|u2)
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,340,"ouble u1u2   = Vector3D.dotProduct(u1, u2);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,341,"ouble v1v2   = Vector3D.dotProduct(v1, v2);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,325,"v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,327,// adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,328,double u1u2   = u1.dotProduct(u2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,329,double v1v2   = v1.dotProduct(v2);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,346,ouble v2x    = alpha * v1x + beta * v2.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,347,ouble v2y    = alpha * v1y + beta * v2.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,348,ouble v2z    = alpha * v1z + beta * v2.getZ();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,349,"2 = new Vector3D(v2x, v2y, v2z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,351,/ preliminary computation (we use explicit formulation instead
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,352,/ of relying on the Vector3D class in order to avoid building lots
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,353,/ of temporary objects)
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,354,ector3D uRef = u1;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,355,ector3D vRef = v1;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,356,ouble dx1 = v1x - u1.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,357,ouble dy1 = v1y - u1.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,358,ouble dz1 = v1z - u1.getZ();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,359,ouble dx2 = v2x - u2.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,360,ouble dy2 = v2y - u2.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,361,ouble dz2 = v2z - u2.getZ();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,362,"ector3D k = new Vector3D(dy1 * dz2 - dz1 * dy2,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,363,"z1 * dx2 - dx1 * dz2,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,364,x1 * dy2 - dy1 * dx2);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,365,ouble c = k.getX() * (u1y * u2z - u1z * u2y) +
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,366,.getY() * (u1z * u2x - u1x * u2z) +
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,367,.getZ() * (u1x * u2y - u1y * u2x);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,369,f (c == 0) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,370,"/ the (q1, q2, q3) vector is in the (u1, u2) plane"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,334,"v2 = new Vector3D(alpha, v1, beta, v2);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,336,// preliminary computation
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,337,Vector3D uRef  = u1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,338,Vector3D vRef  = v1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,339,Vector3D v1Su1 = v1.subtract(u1);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,340,Vector3D v2Su2 = v2.subtract(u2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,341,Vector3D k     = v1Su1.crossProduct(v2Su2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,342,Vector3D u3    = u1.crossProduct(u2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,343,double c       = k.dotProduct(u3);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,344,final double inPlaneThreshold = 0.001;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,345,if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,346,"// the (q1, q2, q3) vector is close to the (u1, u2) plane"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,372,"ector3D u3 = Vector3D.crossProduct(u1, u2);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,374,ouble u3x  = u3.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,375,ouble u3y  = u3.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,376,ouble u3z  = u3.getZ();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,377,ouble v3x  = v3.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,378,ouble v3y  = v3.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,379,ouble v3z  = v3.getZ();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,381,ouble dx3 = v3x - u3x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,382,ouble dy3 = v3y - u3y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,383,ouble dz3 = v3z - u3z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,384," = new Vector3D(dy1 * dz3 - dz1 * dy3,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,385,"z1 * dx3 - dx1 * dz3,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,386,x1 * dy3 - dy1 * dx3);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,387, = k.getX() * (u1y * u3z - u1z * u3y) +
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,388,.getY() * (u1z * u3x - u1x * u3z) +
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,389,.getZ() * (u1x * u3y - u1y * u3x);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,391,f (c == 0) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,392,"/ the (q1, q2, q3) vector is aligned with u1:"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,393,"/ we try (u2, u3) and (v2, v3)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,394," = new Vector3D(dy2 * dz3 - dz2 * dy3,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,395,"z2 * dx3 - dx2 * dz3,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,396,x2 * dy3 - dy2 * dx3);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,397, = k.getX() * (u2y * u3z - u2z * u3y) +
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,398,.getY() * (u2z * u3x - u2x * u3z) +
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,399,.getZ() * (u2x * u3y - u2y * u3x);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,401,f (c == 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,349,Vector3D v3Su3 = v3.subtract(u3);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,350,k = v1Su1.crossProduct(v3Su3);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,351,Vector3D u2Prime = u1.crossProduct(u3);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,352,c = k.dotProduct(u2Prime);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,354,if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,355,"// the (q1, q2, q3) vector is also close to the (u1, u3) plane,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,356,"// it is almost aligned with u1: we try (u2, u3) and (v2, v3)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,357,k = v2Su2.crossProduct(v3Su3);;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,358,c = k.dotProduct(u2.crossProduct(u3));;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,360,if (c <= 0) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,430," = Vector3D.dotProduct(k, k);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,431,"0 = Vector3D.dotProduct(vRef, k) / (c + c);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,389,q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,455,"ouble dot = Vector3D.dotProduct(u, v);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,413,double dot = u.dotProduct(v);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,470,1 = coeff * (v.getY() * u.getZ() - v.getZ() * u.getY());
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,471,2 = coeff * (v.getZ() * u.getX() - v.getX() * u.getZ());
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,472,3 = coeff * (v.getX() * u.getY() - v.getY() * u.getX());
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,428,Vector3D q = v.crossProduct(u);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,429,q1 = coeff * q.getX();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,430,q2 = coeff * q.getY();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java,431,q3 = coeff * q.getZ();
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,20,mport org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,21,mport org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,22,mport org.apache.commons.math.geometry.euclidean.threed.Rotation;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,23,mport org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,24,mport org.apache.commons.math.geometry.euclidean.threed.Vector3D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,479,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,480,public void testIssue639(){
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,481,"Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,482,"-5774608829631843.0 /  268435456.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,483,-3822921525525679.0 / 4294967296.0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,484,"Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,485,"-2275058564560979.0 /    1048576.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,486,4423475992255071.0 /      65536.0);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,487,"Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,488,"Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,489,"Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,490,"Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,491,"Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);"

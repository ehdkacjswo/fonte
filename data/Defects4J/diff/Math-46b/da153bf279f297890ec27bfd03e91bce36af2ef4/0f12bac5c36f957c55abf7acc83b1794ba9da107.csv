is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,41,** Number of bits blocks in the pool. */
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,42,rivate final int r;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,45,rivate final int mp;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,42,protected final int mp;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,48,rivate final int mpTilde;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,50,** First parameter of the algorithm. */
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,51,rivate final int m1;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,53,** Second parameter of the algorithm. */
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,54,rivate final int m2;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,56,** Third parameter of the algorithm. */
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,57,rivate final int m3;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,45,protected final int mpTilde;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,60,rivate int index;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,48,protected int index;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,63,rivate final int[] v;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,51,protected final int[] v;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,52,protected final int[] iRm1;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,53,protected final int[] iRm2;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,54,protected final int[] i1;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,55,protected final int[] i2;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,56,protected final int[] i3;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,102,his.r      = (k + w - 1) / w;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,95,final int r = (k + w - 1) / w;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,108,his.m1      = m1;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,109,his.m2      = m2;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,110,his.m3      = m3;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,104,// set up indirection indices
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,105,iRm1 = new int[r];
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,106,iRm2 = new int[r];
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,107,i1   = new int[r];
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,108,i2   = new int[r];
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,109,i3   = new int[r];
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,110,for (int j = 0; j < r; ++j) {
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,111,iRm1[j] = (j + r - 1) % r;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,112,iRm2[j] = (j + r - 2) % r;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,113,i1[j]   = (j + m1)    % r;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,114,i2[j]   = (j + m2)    % r;
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,115,i3[j]   = (j + m3)    % r;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,174,** Generate next pseudorandom number.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,175, <p>This method is the core generation algorithm. It is used by all the
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,176, public generation methods for the various primitive types {@link
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,177," #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,178," {@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,179, {@link #next(int)} and {@link #nextLong()}.</p>
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,180," <p>This implementation is the general WELL algorithm, described in"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,181," a paper by Fran&ccedil;ois Panneton, Pierre L'Ecuyer and Makoto Matsumoto"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,182," <a href=""http://www.iro.umontreal.ca/~lecuyer/myftp/papers/wellrng.pdf"">Improved"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,183,  Long-Period Generators Based on Linear Recurrences Modulo 2</a> ACM
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,184,"  Transactions on Mathematical Software, 32, 1 (2006).</p>"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,185, @param bits number of random bits to produce
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,186, @return random bits generated
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,188,rotected int next(final int bits) {
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,190,inal int iRm1   = (index + r - 1) % r;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,191,inal int iRm2   = (index + r - 2) % r;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,192,inal int i1     = (index + m1) % r;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,193,inal int i2     = (index + m2) % r;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,194,inal int i3     = (index + m3) % r;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,196,inal int z0 = (mp & v[iRm1]) ^ (mpTilde & v[iRm2]);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,197,inal int z1 = t0(v[index])   ^ t1(v[i1]);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,198,inal int z2 = t2(v[i2])      ^ t3(v[i3]);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,199,inal int z3 = z1 ^ z2;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,200,inal int z4 = t4(z0) ^ t5(z1) ^ t6(z2) ^ t7(z3);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,202,[index] = z3;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,203,[iRm1]  = z4;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,204,[iRm2] &= mp;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,205,ndex    = iRm1;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,207,eturn z4 >>> (32 - bits);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,211,** Apply transform M<sub>0</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,212, @param x bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,213, @return M<sub>0</sub>(x)
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,215,rotected int m0(final int x) {
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,216,eturn 0;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,219,** Apply transform M<sub>1</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,220, @param x bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,221, @return M<sub>1</sub>(x)
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,223,rotected int m1(final int x) {
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,224,eturn x;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,227,** Apply transform M<sub>2</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,228, @param t parameter of the transform
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,229, @param x bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,230," @return M<sub>2, t</sub>(x)"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,232,"rotected int m2(final int t, final int x) {"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,233,eturn (t >= 0) ? (x >>> t) : (x << -t);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,236,** Apply transform M<sub>3</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,237, @param t parameter of the transform
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,238, @param x bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,239," @return M<sub>3, t</sub>(x)"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,241,"rotected int m3(final int t, final int x) {"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,242,eturn x ^ ((t >= 0) ? (x >>> t) : (x << -t));
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,245,** Apply transform M<sub>4</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,246, @param a parameter of the transform
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,247, @param x bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,248," @return M<sub>4, a</sub>(x)"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,250,"rotected int m4(final int a, final int x) {"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,251,inal int shiftedX = x >>> 1;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,252,eturn ((x & 0x80000000) != 0) ? (shiftedX ^ a) : shiftedX;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,255,** Apply transform M<sub>5</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,256, @param t first parameter of the transform
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,257, @param b second parameter of the transform
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,258, @param x bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,259," @return M<sub>5, t, b</sub>(x)"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,261,"rotected int m5(final int t, final int b, final int x) {"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,262,/ table I of the paper specifies that a left shift for positive t and
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,263,"/ a right shift for negative t, however, reference implementation does"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,264,/ the opposite (and in fact this transform is used only by Well512a
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,265,"/ with t = -28). Here, we follow the reference implementation with a"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,266,/ left shift for NEGATIVE t
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,267,inal int shiftedX = (t >= 0) ? (x >>> t) : (x << -t);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,268,eturn x ^ (shiftedX & b);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,271,** Apply transform M<sub>6</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,272, @param q first parameter of the transform
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,273, @param dsMask second parameter of the transform as a bit mask
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,274, @param tMask third parameter of the transform as a bit mask
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,275, @param a fourth parameter of the transform
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,276, @param x bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,277," @return M<sub>6, q, s, t, a</sub>(x)"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,279,"rotected int m6(final int q, final int dsMask, final int tMask, final int a, final int x) {"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,280,inal int lShiftedX = x << q;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,281,inal int rShiftedX = x >>> (32 - q);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,282,inal int z         = (lShiftedX ^ rShiftedX) & dsMask;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,283,eturn ((x & tMask) != 0) ? (z ^ a) : z;
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,286,** Apply transform T<sub>0</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,287, @param vi0 bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,288," @return T<sub>0</sub> v<sub>i,0</sub>"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,290,rotected abstract int t0(int vi0);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,292,** Apply transform T<sub>1</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,293, @param vim1 bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,294," @return T<sub>1</sub> v<sub>i,m1</sub>"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,296,rotected abstract int t1(int vim1);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,298,** Apply transform T<sub>2</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,299, @param vim2 bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,300," @return T<sub>2</sub> v<sub>i,m2</sub>"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,302,rotected abstract int t2(int vim2);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,304,** Apply transform T<sub>3</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,305, @param vim3 bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,306," @return T<sub>3</sub> v<sub>i,m3</sub>"
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,308,rotected abstract int t3(int vim3);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,310,** Apply transform T<sub>4</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,311, @param z0 bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,312, @return T<sub>4</sub> z<sub>0</sub>
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,314,rotected abstract int t4(int z0);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,316,** Apply transform T<sub>5</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,317, @param z1 bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,318, @return T<sub>5</sub> z<sub>1</sub>
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,320,rotected abstract int t5(int z1);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,322,** Apply transform T<sub>6</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,323, @param z2 bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,324, @return T<sub>6</sub> z<sub>2</sub>
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,326,rotected abstract int t6(int z2);
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,328,** Apply transform T<sub>7</sub> to a bits block.
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,329, @param z3 bits block to apply transform to
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,330, @return T<sub>7</sub> z<sub>3</sub>
False,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,332,rotected abstract int t7(int z3);
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,178,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/random/AbstractWell.java,src/main/java/org/apache/commons/math/random/AbstractWell.java,179,protected abstract int next(final int bits);
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,37,rivate static final long serialVersionUID = -5403981908127539981L;
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,37,private static final long serialVersionUID = 5680173464174485492L;
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,82,rotected int t0(final int vi0) {
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,83,eturn m1(vi0);
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,86,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,87,rotected int t1(final int vim1) {
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,88,"eturn m3(8, vim1);"
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,82,protected int next(final int bits) {
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,91,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,92,rotected int t2(final int vim2) {
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,93,"eturn m3(-19, vim2);"
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,84,final int indexRm1 = iRm1[index];
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,85,final int indexRm2 = iRm2[index];
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,96,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,97,rotected int t3(final int vim3) {
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,98,"eturn m3(-14, vim3);"
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,87,final int v0       = v[index];
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,88,final int vM1      = v[i1[index]];
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,89,final int vM2      = v[i2[index]];
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,90,final int vM3      = v[i3[index]];
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,101,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,102,rotected int t4(final int z0) {
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,103,"eturn m3(-11, z0);"
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,92,final int z0 = v[indexRm1];
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,93,final int z1 = v0  ^ (vM1 ^ (vM1 >>> 8));
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,94,final int z2 = (vM2 ^ (vM2 << 19)) ^ (vM3 ^ (vM3 << 14));
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,95,final int z3 = z1      ^ z2;
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,96,final int z4 = (z0 ^ (z0 << 11)) ^ (z1 ^ (z1 << 7)) ^ (z2 ^ (z2 << 13));
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,106,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,107,rotected int t5(final int z1) {
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,108,"eturn m3(-7, z1);"
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,98,v[index]     = z3;
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,99,v[indexRm1]  = z4;
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,100,v[indexRm2] &= mp;
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,101,index        = indexRm1;
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,111,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,112,rotected int t6(final int z2) {
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,113,"eturn m3(-13, z2);"
True,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,103,return z4 >>> (32 - bits);
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,116,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,117,rotected int t7(final int z3) {
False,src/main/java/org/apache/commons/math/random/Well1024a.java,src/main/java/org/apache/commons/math/random/Well1024a.java,118,eturn m0(z3);
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,37,rivate static final long serialVersionUID = -8052371714518610855L;
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,37,private static final long serialVersionUID = -7462102162223815419L;
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,82,rotected int t0(final int vi0) {
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,83,"eturn m3(-25, vi0);"
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,86,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,87,rotected int t1(final int vim1) {
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,88,"eturn m3(27, vim1);"
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,82,protected int next(final int bits) {
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,91,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,92,rotected int t2(final int vim2) {
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,93,"eturn m2(9, vim2);"
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,84,final int indexRm1 = iRm1[index];
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,85,final int indexRm2 = iRm2[index];
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,96,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,97,rotected int t3(final int vim3) {
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,98,"eturn m3(1, vim3);"
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,87,final int v0       = v[index];
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,88,final int vM1      = v[i1[index]];
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,89,final int vM2      = v[i2[index]];
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,90,final int vM3      = v[i3[index]];
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,101,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,102,rotected int t4(final int z0) {
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,103,eturn m1(z0);
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,92,final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,93,final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,94,final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,95,final int z3 = z1      ^ z2;
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,96,final int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,106,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,107,rotected int t5(final int z1) {
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,108,"eturn m3(-9, z1);"
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,98,v[index]     = z3;
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,99,v[indexRm1]  = z4;
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,100,v[indexRm2] &= mp;
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,101,index        = indexRm1;
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,111,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,112,rotected int t6(final int z2) {
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,113,"eturn m3(-21, z2);"
True,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,103,return z4 >>> (32 - bits);
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,116,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,117,rotected int t7(final int z3) {
False,src/main/java/org/apache/commons/math/random/Well19937a.java,src/main/java/org/apache/commons/math/random/Well19937a.java,118,"eturn m3(21, z3);"
False,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,34,ublic class Well19937c extends Well19937a {
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,34,public class Well19937c extends AbstractWell {
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,39,/** Number of bits in the pool. */
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,40,private static final int K = 19937;
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,42,/** First parameter of the algorithm. */
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,43,private static final int M1 = 70;
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,45,/** Second parameter of the algorithm. */
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,46,private static final int M2 = 179;
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,48,/** Third parameter of the algorithm. */
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,49,private static final int M3 = 449;
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,56,"super(K, M1, M2, M3);"
False,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,50,uper(seed);
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,63,"super(K, M1, M2, M3, seed);"
False,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,58,uper(seed);
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,71,"super(K, M1, M2, M3, seed);"
False,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,65,uper(seed);
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,78,"super(K, M1, M2, M3, seed);"
False,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,71,/ compute raw value given by WELL19937a generator
False,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,72,/ which is NOT maximally-equidistributed
False,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,73,nt z = super.next(32);
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,84,final int indexRm1 = iRm1[index];
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,85,final int indexRm2 = iRm2[index];
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,87,final int v0       = v[index];
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,88,final int vM1      = v[i1[index]];
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,89,final int vM2      = v[i2[index]];
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,90,final int vM3      = v[i3[index]];
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,92,final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,93,final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,94,final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,95,final int z3 = z1      ^ z2;
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,96,int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,98,v[index]     = z3;
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,99,v[indexRm1]  = z4;
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,100,v[indexRm2] &= mp;
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,101,index        = indexRm1;
False,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,77, = z ^ ((z <<  7) & 0xe46e1700);
False,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,78, = z ^ ((z << 15) & 0x9b868000);
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,106,z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,107,z4 = z4 ^ ((z4 << 15) & 0x9b868000);
False,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,80,eturn z >>> (32 - bits);
True,src/main/java/org/apache/commons/math/random/Well19937c.java,src/main/java/org/apache/commons/math/random/Well19937c.java,109,return z4 >>> (32 - bits);
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,37,rivate static final long serialVersionUID = 5154222742730470272L;
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,37,private static final long serialVersionUID = -3859207588353972099L;
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,82,rotected int t0(final int vi0) {
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,83,"eturn m3(-24, vi0);"
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,86,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,87,rotected int t1(final int vim1) {
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,88,"eturn m3(30, vim1);"
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,82,protected int next(final int bits) {
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,91,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,92,rotected int t2(final int vim2) {
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,93,"eturn m3(-10, vim2);"
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,84,final int indexRm1 = iRm1[index];
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,85,final int indexRm2 = iRm2[index];
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,96,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,97,rotected int t3(final int vim3) {
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,98,"eturn m2(-26, vim3);"
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,87,final int v0       = v[index];
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,88,final int vM1      = v[i1[index]];
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,89,final int vM2      = v[i2[index]];
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,90,final int vM3      = v[i3[index]];
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,101,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,102,rotected int t4(final int z0) {
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,103,eturn m1(z0);
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,92,final int z0       = (0xFFFF8000 & v[indexRm1]) ^ (0x00007FFF & v[indexRm2]);
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,93,final int z1       = (v0 ^ (v0 << 24))  ^ (vM1 ^ (vM1 >>> 30));
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,94,final int z2       = (vM2 ^ (vM2 << 10)) ^ (vM3 << 26);
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,95,final int z3       = z1      ^ z2;
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,96,final int z2Prime  = ((z2 << 9) ^ (z2 >>> 23)) & 0xfbffffff;
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,97,final int z2Second = ((z2 & 0x00020000) != 0) ? (z2Prime ^ 0xb729fcec) : z2Prime;
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,98,final int z4       = z0 ^ (z1 ^ (z1 >>> 20)) ^ z2Second ^ z3;
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,106,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,107,rotected int t5(final int z1) {
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,108,"eturn m3(20, z1);"
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,100,v[index]     = z3;
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,101,v[indexRm1]  = z4;
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,102,v[indexRm2] &= mp;
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,103,index        = indexRm1;
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,111,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,112,rotected int t6(final int z2) {
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,113,"/ table II of the paper specifies t6 to be m6(9, d14, t5, 0xb729fcec, z2)"
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,114,"/ however, the reference implementation uses m6(9, d26, t17, 0xb729fcec, z2)."
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,115,"/ Here, we follow the reference implementation"
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,116,"eturn m6(9, (-1) ^ (0x1 << 26), 0x1 << 17, 0xb729fcec, z2);"
True,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,105,return z4 >>> (32 - bits);
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,119,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,120,rotected int t7(final int z3) {
False,src/main/java/org/apache/commons/math/random/Well44497a.java,src/main/java/org/apache/commons/math/random/Well44497a.java,121,eturn m1(z3);
False,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,34,ublic class Well44497b extends Well44497a {
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,34,public class Well44497b extends AbstractWell {
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,39,/** Number of bits in the pool. */
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,40,private static final int K = 44497;
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,42,/** First parameter of the algorithm. */
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,43,private static final int M1 = 23;
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,45,/** Second parameter of the algorithm. */
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,46,private static final int M2 = 481;
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,48,/** Third parameter of the algorithm. */
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,49,private static final int M3 = 229;
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,56,"super(K, M1, M2, M3);"
False,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,50,uper(seed);
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,63,"super(K, M1, M2, M3, seed);"
False,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,58,uper(seed);
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,71,"super(K, M1, M2, M3, seed);"
False,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,65,uper(seed);
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,78,"super(K, M1, M2, M3, seed);"
False,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,73,nt z = super.next(32);
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,86,final int indexRm1 = iRm1[index];
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,87,final int indexRm2 = iRm2[index];
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,89,final int v0       = v[index];
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,90,final int vM1      = v[i1[index]];
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,91,final int vM2      = v[i2[index]];
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,92,final int vM3      = v[i3[index]];
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,94,final int z0       = (0xFFFF8000 & v[indexRm1]) ^ (0x00007FFF & v[indexRm2]);
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,95,final int z1       = (v0 ^ (v0 << 24))  ^ (vM1 ^ (vM1 >>> 30));
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,96,final int z2       = (vM2 ^ (vM2 << 10)) ^ (vM3 << 26);
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,97,final int z3       = z1      ^ z2;
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,98,final int z2Prime  = ((z2 << 9) ^ (z2 >>> 23)) & 0xfbffffff;
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,99,final int z2Second = ((z2 & 0x00020000) != 0) ? (z2Prime ^ 0xb729fcec) : z2Prime;
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,100,int z4             = z0 ^ (z1 ^ (z1 >>> 20)) ^ z2Second ^ z3;
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,102,v[index]     = z3;
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,103,v[indexRm1]  = z4;
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,104,v[indexRm2] &= mp;
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,105,index        = indexRm1;
False,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,77, = z ^ ((z <<  7) & 0x93dd1400);
False,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,78, = z ^ ((z << 15) & 0xfa118000);
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,109,z4 = z4 ^ ((z4 <<  7) & 0x93dd1400);
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,110,z4 = z4 ^ ((z4 << 15) & 0xfa118000);
False,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,80,eturn z >>> (32 - bits);
True,src/main/java/org/apache/commons/math/random/Well44497b.java,src/main/java/org/apache/commons/math/random/Well44497b.java,112,return z4 >>> (32 - bits);
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,37,rivate static final long serialVersionUID = 8706771840051210473L;
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,37,private static final long serialVersionUID = -6104179812103820574L;
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,82,rotected int t0(final int vi0) {
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,83,"eturn m3(-16, vi0);"
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,82,protected int next(final int bits) {
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,86,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,87,rotected int t1(final int vim1) {
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,88,"eturn m3(-15, vim1);"
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,84,final int indexRm1 = iRm1[index];
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,91,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,92,rotected int t2(final int vim2) {
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,93,"eturn m3(11, vim2);"
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,86,final int vi = v[index];
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,87,final int vi1 = v[i1[index]];
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,88,final int vi2 = v[i2[index]];
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,89,final int z0 = v[indexRm1];
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,90,// m3: x ^ ((t >= 0) ? (x >>> t) : (x << -t));
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,96,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,97,rotected int t3(final int vim3) {
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,98,eturn m0(vim3);
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,92,final int z1 = (vi ^ (vi << 16))   ^ (vi1 ^ (vi1 << 15));
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,93,final int z2 = vi2 ^ (vi2 >>> 11);
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,94,final int z3 = z1 ^ z2;
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,95,final int z4 = (z0 ^ (z0 << 2)) ^ (z1 ^ (z1 << 18)) ^ (z2 << 28) ^ (z3 ^ ((z3 << 5) & 0xda442d24));
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,101,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,102,rotected int t4(final int z0) {
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,103,"eturn m3(-2, z0);"
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,97,v[index] = z3;
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,98,v[indexRm1]  = z4;
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,99,index    = indexRm1;
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,106,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,107,rotected int t5(final int z1) {
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,108,"eturn m3(-18, z1);"
True,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,101,return z4 >>> (32 - bits);
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,111,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,112,rotected int t6(final int z2) {
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,113,"/ table II of the paper specifies t6 to be m3(-28, z2)"
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,114,"/ however, the reference implementation uses m2(-28, z2)."
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,115,"/ Here, we follow the reference implementation"
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,116,"eturn m2(-28, z2);"
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,119,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,120,rotected int t7(final int z3) {
False,src/main/java/org/apache/commons/math/random/Well512a.java,src/main/java/org/apache/commons/math/random/Well512a.java,121,"eturn m5(-5, 0xda442d24, z3);"

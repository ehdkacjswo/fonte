is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,26, @version $Revision: 1.11 $ $Date: 2004/06/17 21:37:05 $
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,26,* @version $Revision: 1.12 $ $Date: 2004/06/18 13:24:46 $
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,59,public void testSpecialValues() {
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,60,"double[] testArray = {0d, Double.NaN, Double.NEGATIVE_INFINITY,"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,61,Double.POSITIVE_INFINITY};
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,62,Max max = new Max();
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,63,assertTrue(Double.isNaN(max.getResult()));
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,64,max.increment(testArray[0]);
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,65,"assertEquals(0d, max.getResult(), 0);"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,66,max.increment(testArray[1]);
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,67,"// assertEquals(0d, max.getResult(), 0);"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,68,max.increment(testArray[2]);
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,69,"// assertEquals(0d, max.getResult(), 0);"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,70,max.increment(testArray[3]);
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,71,"// assertEquals(Double.POSITIVE_INFINITY, max.getResult(), 0);"
True,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,src/test/org/apache/commons/math/stat/univariate/rank/MaxTest.java,72,"assertEquals(Double.POSITIVE_INFINITY, max.evaluate(testArray), 0);"

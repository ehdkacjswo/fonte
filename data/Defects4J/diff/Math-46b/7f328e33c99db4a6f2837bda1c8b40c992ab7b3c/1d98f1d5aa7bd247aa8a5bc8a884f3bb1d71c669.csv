is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,142,"/ Forget about this test, SVD is no longer truncated!"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,143,/ @Test
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,144,ublic void testTruncated() {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,146,ealMatrix rm = new Array2DRowRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,147," 1.0, 2.0, 3.0 }, { 2.0, 3.0, 4.0 }, { 3.0, 5.0, 7.0 }"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,149,ouble s439  = Math.sqrt(439.0);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,150,ouble[] reference = new double[] {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,151,ath.sqrt(3.0 * (21.0 + s439))
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,153,ingularValueDecomposition svd =
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,154,"ew SingularValueDecompositionImpl(rm, 1);"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,156,/ check we get the expected theoretical singular values
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,157,ouble[] singularValues = svd.getSingularValues();
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,158,"ssert.assertEquals(reference.length, singularValues.length);"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,159,or (int i = 0; i < reference.length; ++i) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,160,"ssert.assertEquals(reference[i], singularValues[i], 4.0e-13);"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,163,/ check the truncated decomposition DON'T allows to recover the original matrix
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,164,ealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,165,ssert.assertTrue(recomposed.subtract(rm).getNorm() > 1.4);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,169,"/ Forget about this test, SVD is no longer truncated!"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,170,/@Test
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,171,ublic void testMath320A() {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,172,ealMatrix rm = new Array2DRowRealMatrix(new double[][] {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,173," 1.0, 2.0, 3.0 }, { 2.0, 3.0, 4.0 }, { 3.0, 5.0, 7.0 }"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,175,ouble s439  = Math.sqrt(439.0);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,176,ouble[] reference = new double[] {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,177,"ath.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,179,ingularValueDecomposition svd =
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,180,ew SingularValueDecompositionImpl(rm);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,182,/ check we get the expected theoretical singular values
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,183,ouble[] singularValues = svd.getSingularValues();
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,184,"ssert.assertEquals(reference.length, singularValues.length);"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,185,or (int i = 0; i < reference.length; ++i) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,186,"ssert.assertEquals(reference[i], singularValues[i], 4.0e-13);"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,189,/ check the decomposition allows to recover the original matrix
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,190,ealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,191,"ssert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13);"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,193,/ check we can solve a singular system
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,194,"ouble[] b = new double[] { 5.0, 6.0, 7.0 };"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,195,ouble[] resSVD = svd.getSolver().solve(b);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,196,"ssert.assertEquals(rm.getColumnDimension(), resSVD.length);"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,198,/ check the solution really minimizes the residuals
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,199,"ouble svdMinResidual = residual(rm, resSVD, b);"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,200,ouble epsilon = 2 * Math.ulp(svdMinResidual);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,201,ouble h = 0.1;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,202,nt    k = 3;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,203,or (double d0 = -k * h; d0 <= k * h; d0 += h) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,204,or (double d1 = -k * h ; d1 <= k * h; d1 += h) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,205,or (double d2 = -k * h; d2 <= k * h; d2 += h) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,206,"ouble[] x = new double[] { resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2 };"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,207,"ssert.assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,225,"rivate double residual(RealMatrix a, double[] x, double[] b) {"
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,226,ouble[] ax = a.operate(x);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,227,ouble sum = 0;
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,228,or (int i = 0; i < ax.length; ++i) {
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,229,um += (ax[i] - b[i]) * (ax[i] - b[i]);
False,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,231,eturn Math.sqrt(sum);

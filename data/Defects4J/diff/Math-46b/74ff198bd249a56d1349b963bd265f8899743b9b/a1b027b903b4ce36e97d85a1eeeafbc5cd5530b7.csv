is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,30,* Class only contains static methods.
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,32,private FunctionUtils() {}
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,150,* @return a unary function.
True,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,src/main/java/org/apache/commons/math/analysis/FunctionUtils.java,166,* @return a unary function.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,19,mport org.apache.commons.math.exception.NullArgumentException;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,72, @throws NullArgumentException if any argument is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,71,* @throws org.apache.commons.math.exception.NullArgumentException if
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,72,* any argument is {@code null}.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,157, @throws NullArgumentException if any argument is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,157,* @throws org.apache.commons.math.exception.NullArgumentException if
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,158,* any argument is {@code null}.
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,205, @throws NullArgumentException if any argument is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,206,* @throws org.apache.commons.math.exception.NullArgumentException if
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java,207,* any argument is {@code null}.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,18,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,20,import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,21,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,24,* Provide a default implementation for several functions useful to generic
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,25,* solvers.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,27,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,28,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,30,public abstract class AbstractDifferentiableUnivariateRealSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,31,extends BaseAbstractUnivariateRealSolver<DifferentiableUnivariateRealFunction>
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,32,implements DifferentiableUnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,33,/** Derivative of the function to solve. */
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,34,private UnivariateRealFunction functionDerivative;
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,37,* Construct a solver with given absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,39,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,41,protected AbstractDifferentiableUnivariateRealSolver(final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,42,super(absoluteAccuracy);
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,46,* Construct a solver with given accuracies.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,48,* @param relativeAccuracy Maximum relative error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,49,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,50,* @param functionValueAccuracy Maximum function value error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,52,"protected AbstractDifferentiableUnivariateRealSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,53,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,54,final double functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,55,"super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,59,* Compute the objective function value.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,61,* @param point Point at which the objective function must be evaluated.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,62,* @return the objective function value at specified point.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,63,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,64,* if the maximal number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,66,protected double computeDerivativeObjectiveValue(double point) {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,67,incrementEvaluationCount();
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,68,return functionDerivative.value(point);
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,72,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,74,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,75,"protected void setup(DifferentiableUnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,76,"double min, double max,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,77,double startValue) {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,78,"super.setup(f, min, max, startValue);"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractDifferentiableUnivariateRealSolver.java,79,functionDerivative = f.derivative();
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,18,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,20,import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,23,* Base class for solvers.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,25,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,26,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,28,public abstract class AbstractPolynomialSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,29,extends BaseAbstractUnivariateRealSolver<PolynomialFunction>
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,30,implements PolynomialSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,31,/** Function. */
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,32,private PolynomialFunction polynomialFunction;
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,35,* Construct a solver with given absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,37,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,39,protected AbstractPolynomialSolver(final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,40,super(absoluteAccuracy);
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,43,* Construct a solver with given accuracies.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,45,* @param relativeAccuracy Maximum relative error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,46,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,48,"protected AbstractPolynomialSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,49,final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,50,"super(relativeAccuracy, absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,53,* Construct a solver with given accuracies.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,55,* @param relativeAccuracy Maximum relative error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,56,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,57,* @param functionValueAccuracy Maximum function value error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,59,"protected AbstractPolynomialSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,60,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,61,final double functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,62,"super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,66,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,68,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,69,"protected void setup(PolynomialFunction f,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,70,"double min, double max,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,71,double startValue) {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,72,"super.setup(f, min, max, startValue);"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,73,polynomialFunction = f;
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,77,* @return the coefficients of the polynomial function.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,79,protected double[] getCoefficients() {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractPolynomialSolver.java,80,return polynomialFunction.getCoefficients();
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,18,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,20,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,23,* Base class for solvers.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,25,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,26,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,28,public abstract class AbstractUnivariateRealSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,29,extends BaseAbstractUnivariateRealSolver<UnivariateRealFunction>
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,30,implements UnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,32,* Construct a solver with given absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,34,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,36,protected AbstractUnivariateRealSolver(final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,37,super(absoluteAccuracy);
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,40,* Construct a solver with given accuracies.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,42,* @param relativeAccuracy Maximum relative error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,43,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,45,"protected AbstractUnivariateRealSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,46,final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,47,"super(relativeAccuracy, absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,50,* Construct a solver with given accuracies.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,52,* @param relativeAccuracy Maximum relative error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,53,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,54,* @param functionValueAccuracy Maximum function value error.
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,56,"protected AbstractUnivariateRealSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,57,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,58,final double functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.java,59,"super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,18,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,20,import org.apache.commons.math.util.Incrementor;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,21,import org.apache.commons.math.exception.MaxCountExceededException;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,22,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,23,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,24,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,27,* Provide a default implementation for several functions useful to generic
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,28,* solvers.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,30,* @param <FUNC> Type of function to solve.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,32,"* @version $Revision: 1030464 $ $Date: 2010-11-03 14:46:04 +0100 (Wed, 03 Nov 2010) $"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,33,* @since 2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,35,public abstract class BaseAbstractUnivariateRealSolver<FUNC extends UnivariateRealFunction>
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,36,implements BaseUnivariateRealSolver<FUNC> {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,37,/** Default absolute accuracy */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,38,public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,39,/** Default relative accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,40,public static final double DEFAULT_RELATIVE_ACCURACY = 1e-14;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,41,/** Default function value accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,42,public static final double DEFAULT_FUNCTION_VALUE_ACCURACY = 1e-15;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,43,/** Function value accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,44,private final double functionValueAccuracy;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,45,/** Absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,46,private final double absoluteAccuracy;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,47,/** Relative accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,48,private final double relativeAccuracy;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,49,/** Evaluations counter. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,50,private final Incrementor evaluations = new Incrementor();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,51,/** Lower end of search interval. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,52,private double searchMin;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,53,/** Higher end of search interval. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,54,private double searchMax;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,55,/** Initial guess. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,56,private double searchStart;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,57,/** Function to solve. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,58,private FUNC function;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,61,* Construct a solver with given absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,63,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,65,protected BaseAbstractUnivariateRealSolver(final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,66,"this(DEFAULT_RELATIVE_ACCURACY,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,67,"absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,68,DEFAULT_FUNCTION_VALUE_ACCURACY);
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,72,* Construct a solver with given accuracies.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,74,* @param relativeAccuracy Maximum relative error.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,75,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,77,"protected BaseAbstractUnivariateRealSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,78,final double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,79,"this(relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,80,"absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,81,DEFAULT_FUNCTION_VALUE_ACCURACY);
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,85,* Construct a solver with given accuracies.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,87,* @param relativeAccuracy Maximum relative error.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,88,* @param absoluteAccuracy Maximum absolute error.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,89,* @param functionValueAccuracy Maximum function value error.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,91,"protected BaseAbstractUnivariateRealSolver(final double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,92,"final double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,93,final double functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,94,this.absoluteAccuracy = absoluteAccuracy;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,95,this.relativeAccuracy = relativeAccuracy;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,96,this.functionValueAccuracy = functionValueAccuracy;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,99,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,100,public void setMaxEvaluations(int maxEvaluations) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,101,evaluations.setMaximalCount(maxEvaluations);
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,103,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,104,public int getMaxEvaluations() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,105,return evaluations.getMaximalCount();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,107,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,108,public int getEvaluations() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,109,return evaluations.getCount();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,112,* @return the lower end of the search interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,114,public double getMin() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,115,return searchMin;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,118,* @return the higher end of the search interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,120,public double getMax() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,121,return searchMax;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,124,* @return the initial guess.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,126,public double getStartValue() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,127,return searchStart;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,130,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,132,public double getAbsoluteAccuracy() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,133,return absoluteAccuracy;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,136,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,138,public double getRelativeAccuracy() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,139,return relativeAccuracy;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,142,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,144,public double getFunctionValueAccuracy() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,145,return functionValueAccuracy;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,149,* Compute the objective function value.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,151,* @param point Point at which the objective function must be evaluated.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,152,* @return the objective function value at specified point.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,153,* @throws TooManyEvaluationsException if the maximal number of evaluations
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,154,* is exceeded.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,156,protected double computeObjectiveValue(double point) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,157,incrementEvaluationCount();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,158,return function.value(point);
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,162,* Prepare for computation.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,163,* Subclasses must call this method if they override any of the
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,164,* {@code solve} methods.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,166,* @param f Function to solve.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,167,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,168,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,169,* @param startValue Start value to use.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,171,"protected void setup(FUNC f,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,172,"double min, double max,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,173,double startValue) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,174,// Checks.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,175,if (f == null) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,176,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,179,// Reset.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,180,searchMin = min;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,181,searchMax = max;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,182,searchStart = startValue;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,183,function = f;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,184,evaluations.resetCount();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,187,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,188,"public double solve(FUNC f, double min, double max, double startValue) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,189,// Initialization.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,190,"setup(f, min, max, startValue);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,192,// Perform computation.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,193,return doSolve();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,196,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,197,"public double solve(FUNC f, double min, double max) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,198,"return solve(f, min, max, min + 0.5 * (max - min));"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,201,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,202,"public double solve(FUNC f, double startValue) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,203,"return solve(f, Double.NaN, Double.NaN, startValue);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,207,* Method for implementing actual optimization algorithms in derived
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,208,* classes.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,210,* @return the root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,211,* @throws TooManyEvaluationsException if the maximal number of evaluations
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,212,* is exceeded.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,214,protected abstract double doSolve();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,217,* Check whether the function takes opposite signs at the endpoints.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,219,* @param lower Lower endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,220,* @param upper Upper endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,221,* @return {@code true} if the function values have opposite signs at the
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,222,* given points.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,224,"protected boolean isBracketing(final double lower,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,225,final double upper) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,226,"return UnivariateRealSolverUtils.isBracketing(function, lower, upper);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,230,* Check whether the arguments form a (strictly) increasing sequence.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,232,* @param start First number.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,233,* @param mid Second number.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,234,* @param end Third number.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,235,* @return {@code true} if the arguments form an increasing sequence.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,237,"protected boolean isSequence(final double start,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,238,"final double mid,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,239,final double end) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,240,"return UnivariateRealSolverUtils.isSequence(start, mid, end);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,244,* Check that the endpoints specify an interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,246,* @param lower Lower endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,247,* @param upper Upper endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,248,* @throws org.apache.commons.math.exception.NumberIsTooLargeException
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,249,* if {@code lower >= upper}.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,251,"protected void verifyInterval(final double lower,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,252,final double upper) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,253,"UnivariateRealSolverUtils.verifyInterval(lower, upper);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,257,* Check that {@code lower < initial < upper}.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,259,* @param lower Lower endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,260,* @param initial Initial value.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,261,* @param upper Upper endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,262,* @throws org.apache.commons.math.exception.NumberIsTooLargeException
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,263,* if {@code lower >= initial} or {@code initial >= upper}.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,265,"protected void verifySequence(final double lower,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,266,"final double initial,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,267,final double upper) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,268,"UnivariateRealSolverUtils.verifySequence(lower, initial, upper);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,272,* Check that the endpoints specify an interval and the function takes
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,273,* opposite signs at the endpoints.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,275,* @param lower Lower endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,276,* @param upper Upper endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,277,* @throws org.apache.commons.math.exception.NoBracketingException if
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,278,* the function has the same sign at the endpoints.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,280,"protected void verifyBracketing(final double lower,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,281,final double upper) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,282,"UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,286,* Increment the evaluation count by one.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,287,* Method {@link #computeObjectiveValue(double)} calls this method internally.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,288,* It is provided for subclasses that do not exclusively use
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,289,* {@code computeObjectiveValue} to solve the function.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,290,* See e.g. {@link AbstractDifferentiableUnivariateRealSolver}.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,292,protected void incrementEvaluationCount() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,293,try {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,294,evaluations.incrementCount();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,295,} catch (MaxCountExceededException e) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.java,296,throw new TooManyEvaluationsException(e.getMax());
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,17,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,19,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,23,* Interface for (univariate real) rootfinding algorithms.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,24,* Implementations will search for only one zero in the given interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,26,* @param <FUNC> Type of function to solve.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,28,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,29,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,31,public interface BaseUnivariateRealSolver<FUNC extends UnivariateRealFunction> {
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,33,* Set the maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,35,* @param maxEvaluations Maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,37,void setMaxEvaluations(int maxEvaluations);
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,40,* Get the maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,42,* @return the maximal number of function evaluations.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,44,int getMaxEvaluations();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,47,* Get the number of evaluations of the objective function.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,48,* The number of evaluations corresponds to the last call to the
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,49,* {@code optimize} method. It is 0 if the method has not been
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,50,* called yet.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,52,* @return the number of evaluations of the objective function.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,54,int getEvaluations();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,57,* @return the absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,59,double getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,61,* @return the relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,63,double getRelativeAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,65,* @return the function value accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,67,double getFunctionValueAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,70,* Solve for a zero root in the given interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,71,* A solver may require that the interval brackets a single zero root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,72,* Solvers that do require bracketing should be able to handle the case
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,73,* where one of the endpoints is itself a root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,75,* @param f Function to solve.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,76,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,77,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,78,* @return a value where the function is zero.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,79,* @throws IllegalArgumentException if {@code min > max} or the endpoints
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,80,* do not satisfy the requirements specified by the solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,81,* @since 2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,83,"double solve(FUNC f, double min, double max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,86,"* Solve for a zero in the given interval, start at {@code startValue}."
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,87,* A solver may require that the interval brackets a single zero root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,88,* Solvers that do require bracketing should be able to handle the case
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,89,* where one of the endpoints is itself a root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,91,* @param f Function to solve.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,92,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,93,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,94,* @param startValue Start value to use.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,95,* @return a value where the function is zero.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,96,* @throws IllegalArgumentException if {@code min > max} or the arguments
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,97,* do not satisfy the requirements specified by the solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,98,* @since 2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,100,"double solve(FUNC f, double min, double max, double startValue);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,103,* Solve for a zero in the vicinity of {@code startValue}.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,104,* A solver may require that the interval brackets a single zero root.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,106,* @param f Function to solve.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,107,* @param startValue Start value to use.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,108,* @return a value where the function is zero.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,109,* @throws IllegalArgumentException if {@code min > max} or the arguments
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,110,* do not satisfy the requirements specified by the solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,111,* @since 2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.java,113,"double solve(FUNC f, double startValue);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,19,mport org.apache.commons.math.MaxIterationsExceededException;
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,20,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,21,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,32,ublic class BisectionSolver extends UnivariateRealSolverImpl {
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,29,public class BisectionSolver extends AbstractUnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,30,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,31,public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,34,* Construct a solver with default accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,36,public BisectionSolver() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,37,this(DEFAULT_ABSOLUTE_ACCURACY);
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,42,* @param absoluteAccuracy Absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,38,ublic BisectionSolver() {
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,39,"uper(100, 1E-6);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,44,public BisectionSolver(double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,45,super(absoluteAccuracy);
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,42,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,43,"ublic double solve(final UnivariateRealFunction f, double min, double max, double initial)"
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,44,"hrows MaxIterationsExceededException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,45,"eturn solve(f, min, max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,48,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,50,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,51,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,53,"public BisectionSolver(double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,54,double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,55,"super(relativeAccuracy, absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,48,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,49,"ublic double solve(final UnivariateRealFunction f, double min, double max)"
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,50,"hrows MaxIterationsExceededException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,52,learResult();
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,53,"erifyInterval(min,max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,59,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,61,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,62,protected double doSolve() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,63,double min = getMin();
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,64,double max = getMax();
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,65,"verifyInterval(min, max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,66,final double absoluteAccuracy = getAbsoluteAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,58,nt i = 0;
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,59,hile (i < maximalIterationCount) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,71,while (true) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,61,min = f.value(min);
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,62,m = f.value(m);
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,73,fmin = computeObjectiveValue(min);
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,74,fm = computeObjectiveValue(m);
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,64,f (fm * fmin > 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,76,if (fm * fmin > 0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,74,"etResult(m, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,77,+i;
False,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java,80,hrow new MaxIterationsExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,21,mport org.apache.commons.math.MaxIterationsExceededException;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,22,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,23,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,24,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,20,import org.apache.commons.math.exception.NoBracketingException;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,22,import org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,28," Implements the <a href=""http://mathworld.wolfram.com/BrentsMethod.html"">"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,29, Brent algorithm</a> for  finding zeros of real univariate functions.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,30, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,31, The function should be continuous but not necessarily smooth.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,25,"* This class implements the <a href=""http://mathworld.wolfram.com/BrentsMethod.html"">"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,26,* Brent algorithm</a> for finding zeros of real univariate functions.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,27,* The function should be continuous but not necessarily smooth.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,28,* The {@code solve} method returns a zero {@code x} of the function {@code f}
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,29,"* in the given interval {@code [a, b]} to within a tolerance"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,30,* {@code 6 eps abs(x) + t} where {@code eps} is the relative accuracy and
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,31,* {@code t} is the absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,32,* The given interval must bracket the root.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,35,ublic class BrentSolver extends UnivariateRealSolverImpl {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,38, Default absolute accuracy
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,39, @since 2.1
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,41,ublic static final double DEFAULT_ABSOLUTE_ACCURACY = 1E-6;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,43,** Default maximum number of iterations
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,44, @since 2.1
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,46,ublic static final int DEFAULT_MAXIMUM_ITERATIONS = 100;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,36,public class BrentSolver extends AbstractUnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,39,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,40,public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,52, Construct a solver with default properties.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,43,* Construct a solver with default accuracies.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,55,"uper(DEFAULT_MAXIMUM_ITERATIONS, DEFAULT_ABSOLUTE_ACCURACY);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,46,this(DEFAULT_ABSOLUTE_ACCURACY);
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,59, Construct a solver with the given absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,49,* Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,61, @param absoluteAccuracy lower bound for absolute accuracy of solutions returned by the solver
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,62, @since 2.1
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,51,* @param absoluteAccuracy Absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,65,"uper(DEFAULT_MAXIMUM_ITERATIONS, absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,54,super(absoluteAccuracy);
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,69, Contstruct a solver with the given maximum iterations and absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,57,* Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,71, @param maximumIterations maximum number of iterations
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,72, @param absoluteAccuracy lower bound for absolute accuracy of solutions returned by the solver
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,73, @since 2.1
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,59,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,60,* @param absoluteAccuracy Absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,75,"ublic BrentSolver(int maximumIterations, double absoluteAccuracy) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,76,"uper(maximumIterations, absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,62,"public BrentSolver(double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,63,double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,64,"super(relativeAccuracy, absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,80, Find a zero in the given interval with an initial guess.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,81, <p>Throws <code>IllegalArgumentException</code> if the values of the
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,82, function at the three points have the same sign (note that it is
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,83, allowed to have endpoints with the same sign if the initial point has
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,84, opposite sign function-wise).</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,67,* Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,86, @param f function to solve.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,87, @param min the lower bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,88, @param max the upper bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,89, @param initial the start value to use (must be set to min if no
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,90, initial point is known).
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,91, @return the value where the function is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,92, @throws MaxIterationsExceededException the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,93, @throws MathUserException if an error occurs evaluating  the function
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,94, @throws IllegalArgumentException if initial is not between min and max
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,95, (even if it <em>is</em> a root)
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,69,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,70,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,71,* @param functionValueAccuracy Function value accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,97,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,98,"inal double min, final double max, final double initial)"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,99,"hrows MaxIterationsExceededException, MathUserException {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,73,"public BrentSolver(double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,74,"double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,75,double functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,76,"super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,101,learResult();
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,102,f ((initial < min) || (initial > max)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,103,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,104,"ocalizedFormats.INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,105,"in, initial, max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,80,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,82,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,83,protected double doSolve() {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,84,double min = getMin();
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,85,double max = getMax();
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,86,final double initial = getStartValue();
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,87,final double functionValueAccuracy = getFunctionValueAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,89,"verifySequence(min, initial, max);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,108,/ return the initial guess if it is good enough
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,109,ouble yInitial = f.value(initial);
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,91,// Return the initial guess if it is good enough.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,92,double yInitial = computeObjectiveValue(initial);
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,111,"etResult(initial, 0);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,112,eturn result;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,94,return initial;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,115,/ return the first endpoint if it is good enough
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,116,ouble yMin = f.value(min);
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,97,// Return the first endpoint if it is good enough.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,98,double yMin = computeObjectiveValue(min);
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,118,"etResult(min, 0);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,119,eturn result;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,100,return min;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,122,/ reduce interval if min and initial bracket the root
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,103,// Reduce interval if min and initial bracket the root.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,124,"eturn solve(f, min, yMin, initial, yInitial, min, yMin);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,105,"return brent(min, initial, yMin, yInitial);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,127,/ return the second endpoint if it is good enough
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,128,ouble yMax = f.value(max);
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,108,// Return the second endpoint if it is good enough.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,109,double yMax = computeObjectiveValue(max);
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,130,"etResult(max, 0);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,131,eturn result;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,111,return max;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,134,/ reduce interval if initial and max bracket the root
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,114,// Reduce interval if initial and max bracket the root.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,136,"eturn solve(f, initial, yInitial, max, yMax, initial, yInitial);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,116,"return brent(initial, max, yInitial, yMax);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,139,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,140,"ocalizedFormats.SAME_SIGN_AT_ENDPOINTS, min, max, yMin, yMax);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,119,"throw new NoBracketingException(min, max, yMin, yMax);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,145, Find a zero in the given interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,146, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,147, Requires that the values of the function at the endpoints have opposite
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,148, signs. An <code>IllegalArgumentException</code> is thrown if this is not
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,149, the case.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,123,* Search for a zero inside the provided interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,124,* This implemenation is based on the algorithm described at page 58 of
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,125,* the book
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,126,* <quote>
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,127,*  <b>Algorithms for Minimization Without Derivatives</b>
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,128,*  <it>Richard P. Brent</it>
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,129,*  Dover 0-486-41998-3
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,130,* </quote>
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,151, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,152, @param min the lower bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,153, @param max the upper bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,154, @return the value where the function is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,155, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,156, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,157, @throws IllegalArgumentException if min is not less than max or the
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,158, signs of the values of the function at the endpoints are not opposites
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,132,* @param lo Lower bound of the search interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,133,* @param hi Higher bound of the search interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,134,* @param fLo Function value at the lower bound of the search interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,135,* @param fHi Function value at the higher bound of the search interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,136,* @return the value where the function is zero.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,160,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,161,"inal double min, final double max)"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,162,"hrows MaxIterationsExceededException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,164,learResult();
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,165,"erifyInterval(min, max);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,167,ouble ret = Double.NaN;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,169,ouble yMin = f.value(min);
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,170,ouble yMax = f.value(max);
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,172,/ Verify bracketing
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,173,ouble sign = yMin * yMax;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,174,f (sign > 0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,175,/ check if either value is close to a zero
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,176,f (FastMath.abs(yMin) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,177,"etResult(min, 0);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,178,et = min;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,179, else if (FastMath.abs(yMax) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,180,"etResult(max, 0);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,181,et = max;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,182, else {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,183,/ neither value is close to zero and min and max do not bracket root.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,184,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,185,"ocalizedFormats.SAME_SIGN_AT_ENDPOINTS, min, max, yMin, yMax);"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,138,"private double brent(double lo, double hi,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,139,"double fLo, double fHi) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,140,double a = lo;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,141,double fa = fLo;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,142,double b = hi;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,143,double fb = fHi;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,144,double c = a;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,145,double fc = fa;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,146,double d = b - a;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,147,double e = d;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,149,final double t = getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,150,final double eps = getRelativeAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,152,while (true) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,153,if (FastMath.abs(fc) < FastMath.abs(fb)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,154,a = b;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,155,b = c;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,156,c = a;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,157,fa = fb;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,158,fb = fc;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,159,fc = fa;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,187, else if (sign < 0){
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,188,/ solve using only the first endpoint as initial guess
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,189,"et = solve(f, min, yMin, max, yMax, min, yMin);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,190, else {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,191,/ either min or max is a root
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,192,f (yMin == 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,193,et = min;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,194, else {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,195,et = max;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,199,eturn ret;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,203, Find a zero starting search according to the three provided points.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,204, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,205, @param x0 old approximation for the root
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,206, @param y0 function value at the approximation for the root
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,207, @param x1 last calculated approximation for the root
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,208, @param y1 function value at the last calculated approximation
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,209, for the root
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,210, @param x2 bracket point (must be set to x0 if no bracket point is
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,211," known, this will force starting with linear interpolation)"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,212, @param y2 function value at the bracket point.
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,213, @return the value where the function is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,214, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,215, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,217,"rivate double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,218,"ouble x0, double y0,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,219,"ouble x1, double y1,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,220,"ouble x2, double y2)"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,221,"hrows MaxIterationsExceededException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,223,ouble delta = x1 - x0;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,224,ouble oldDelta = delta;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,162,final double tol = 2 * eps * FastMath.abs(b) + t;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,163,final double m = 0.5 * (c - b);
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,226,nt i = 0;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,227,hile (i < maximalIterationCount) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,228,f (FastMath.abs(y2) < FastMath.abs(y1)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,229,/ use the bracket point if is better than last approximation
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,230,0 = x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,231,1 = x2;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,232,2 = x0;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,233,0 = y1;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,234,1 = y2;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,235,2 = y0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,165,if (FastMath.abs(m) <= tol ||
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,166,"MathUtils.equals(fb, 0))  {"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,167,return b;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,237,f (FastMath.abs(y1) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,238,/ Avoid division by very small values. Assume
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,239,/ the iteration has converged (the problem may
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,240,/ still be ill conditioned)
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,241,"etResult(x1, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,242,eturn result;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,244,ouble dx = x2 - x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,245,ouble tolerance =
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,246,"astMath.max(relativeAccuracy * FastMath.abs(x1), absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,247,f (FastMath.abs(dx) <= tolerance) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,248,"etResult(x1, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,249,eturn result;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,251,f ((FastMath.abs(oldDelta) < tolerance) ||
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,252,FastMath.abs(y0) <= FastMath.abs(y1))) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,169,if (FastMath.abs(e) < tol ||
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,170,FastMath.abs(fa) <= FastMath.abs(fb)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,254,elta = 0.5 * dx;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,255,ldDelta = delta;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,172,d = m;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,173,e = d;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,257,ouble r3 = y1 / y0;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,175,double s = fb / fa;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,259,ouble p1;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,260,"/ the equality test (x0 == x2) is intentional,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,261,"/ it is part of the original Brent's method,"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,262,/ it should NOT be replaced by proximity test
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,263,f (x0 == x2) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,177,double q;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,178,"// The equality test (a == c) is intentional,"
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,179,// it is part of the original Brent's method and
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,180,// it should NOT be replaced by proximity test.
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,181,if (a == c) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,265, = dx * r3;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,266,1 = 1.0 - r3;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,183,p = 2 * m * s;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,184,q = 1 - s;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,269,ouble r1 = y0 / y2;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,270,ouble r2 = y1 / y2;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,271, = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,272,1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,187,q = fa / fc;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,188,final double r = fb / fc;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,189,p = s * (2 * m * q * (q - r) - (b - a) * (r - 1));
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,190,q = (q - 1) * (r - 1) * (s - 1);
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,274,f (p > 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,275,1 = -p1;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,192,if (p > 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,193,q = -q;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,279,f (2.0 * p >= 1.5 * dx * p1 - FastMath.abs(tolerance * p1) ||
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,280, >= FastMath.abs(0.5 * oldDelta * p1)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,197,s = e;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,198,e = d;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,199,if (p >= 1.5 * m * q - FastMath.abs(tol * q) ||
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,200,p >= FastMath.abs(0.5 * s * q)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,284,elta = 0.5 * dx;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,285,ldDelta = delta;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,204,d = m;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,205,e = d;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,287,ldDelta = delta;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,288,elta = p / p1;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,207,d = p / q;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,291,"/ Save old X1, Y1"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,292,0 = x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,293,0 = y1;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,294,"/ Compute new X1, Y1"
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,295,f (FastMath.abs(delta) > tolerance) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,296,1 = x1 + delta;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,297, else if (dx > 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,298,1 = x1 + 0.5 * tolerance;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,299, else if (dx <= 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,300,1 = x1 - 0.5 * tolerance;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,210,a = b;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,211,fa = fb;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,213,if (FastMath.abs(d) > tol) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,214,b += d;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,215,} else if (m > 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,216,b += tol;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,217,} else {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,218,b -= tol;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,302,1 = f.value(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,303,f ((y1 > 0) == (y2 > 0)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,304,2 = x0;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,305,2 = y0;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,306,elta = x1 - x0;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,307,ldDelta = delta;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,220,fb = computeObjectiveValue(b);
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,221,if ((fb > 0 && fc > 0) ||
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,222,(fb <= 0 && fc <= 0)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,223,c = a;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,224,fc = fa;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,225,d = b - a;
True,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,226,e = d;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,309,++;
False,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java,311,hrow new MaxIterationsExceededException(maximalIterationCount);
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,17,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,19,import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,23,* Interface for (univariate real) rootfinding algorithms.
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,24,* Implementations will search for only one zero in the given interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,26,"* @version $Revision: 1034896 $ $Date: 2010-11-13 23:27:34 +0100 (Sat, 13 Nov 2010) $"
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,28,public interface DifferentiableUnivariateRealSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java,29,extends BaseUnivariateRealSolver<DifferentiableUnivariateRealFunction> {}
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,21,mport org.apache.commons.math.MaxIterationsExceededException;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,22,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,23,mport org.apache.commons.math.analysis.polynomials.PolynomialFunction;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,25,mport org.apache.commons.math.exception.MathUserException;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,20,import org.apache.commons.math.exception.NoBracketingException;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,21,import org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,22,import org.apache.commons.math.exception.NoDataException;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,32," For reference, see <b>A First Course in Numerical Analysis</b>,"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,33," ISBN 048641454X, chapter 8."
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,34, <p>
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,29,"* For reference, see"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,30,* <quote>
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,31,*  <b>A First Course in Numerical Analysis</b>
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,32,"*  ISBN 048641454X, chapter 8."
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,33,* </quote>
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,36, approximation and be able to solve all roots from that point.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,35,* approximation and be able to solve all roots from that point.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,36,* The algorithm requires a bracketing condition.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,41,ublic class LaguerreSolver extends UnivariateRealSolverImpl {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,41,public class LaguerreSolver extends AbstractPolynomialSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,42,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,43,public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,44,/** Complex solver. */
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,45,protected ComplexSolver complexSolver = new ComplexSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,44, Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,48,* Construct a solver with default accuracies.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,47,"uper(100, 1E-6);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,51,this(DEFAULT_ABSOLUTE_ACCURACY);
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,51, Find a real root in the given interval with initial value.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,52, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,53, Requires bracketing condition.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,54,* Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,55, @param f function to solve (must be polynomial)
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,56, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,57, @param max the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,58, @param initial the start value to use
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,59, @return the point at which the function value is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,60, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,61, or the solver detects convergence problems otherwise
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,62, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,63, @throws IllegalArgumentException if any parameters are invalid
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,56,* @param absoluteAccuracy Absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,65,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,66,"inal double min, final double max, final double initial)"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,67,"hrows ConvergenceException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,69,/ check for zeros before verifying bracketing
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,70,f (f.value(min) == 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,71,eturn min;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,73,f (f.value(max) == 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,74,eturn max;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,76,f (f.value(initial) == 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,77,eturn initial;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,80,"erifyBracketing(min, max, f);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,81,"erifySequence(min, initial, max);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,82,"f (isBracketing(min, initial, f)) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,83,"eturn solve(f, min, initial);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,84, else {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,85,"eturn solve(f, initial, max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,58,public LaguerreSolver(double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,59,super(absoluteAccuracy);
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,91, Find a real root in the given interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,92, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,93," Despite the bracketing condition, the root returned by solve(Complex[],"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,94," Complex) may not be a real zero inside [min, max]. For example,"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,95," p(x) = x^3 + 1, min = -2, max = 2, initial = 0. We can either try"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,96," another initial value, or, as we did here, call solveAll() to obtain"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,97, all roots and pick up the one that we're looking for.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,62,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,64,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,65,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,67,"public LaguerreSolver(double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,68,double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,69,"super(relativeAccuracy, absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,72,* Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,99, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,100, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,101, @param max the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,102, @return the point at which the function value is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,103, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,104, or the solver detects convergence problems otherwise
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,105, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,106, @throws IllegalArgumentException if any parameters are invalid
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,74,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,75,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,76,* @param functionValueAccuracy Function value accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,78,"public LaguerreSolver(double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,79,"double absoluteAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,80,double functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,81,"super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,85,* {@inheritDoc}
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,108,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,109,"inal double min, final double max)"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,110,"hrows ConvergenceException, MathUserException {"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,87,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,88,public double doSolve() {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,89,double min = getMin();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,90,double max = getMax();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,91,double initial = getStartValue();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,92,final double functionValueAccuracy = getFunctionValueAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,94,"verifySequence(min, initial, max);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,112,/ check function type
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,113,f (!(f instanceof PolynomialFunction)) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,114,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.FUNCTION_NOT_POLYNOMIAL);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,96,// Return the initial guess if it is good enough.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,97,double yInitial = computeObjectiveValue(initial);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,98,if (FastMath.abs(yInitial) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,99,return initial;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,117,/ check for zeros before verifying bracketing
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,118,f (f.value(min) == 0.0) { return min; }
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,119,f (f.value(max) == 0.0) { return max; }
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,120,"erifyBracketing(min, max, f);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,102,// Return the first endpoint if it is good enough.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,103,double yMin = computeObjectiveValue(min);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,104,if (FastMath.abs(yMin) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,105,return min;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,122,ouble coefficients[] = ((PolynomialFunction) f).getCoefficients();
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,123,omplex c[] = new Complex[coefficients.length];
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,124,or (int i = 0; i < coefficients.length; i++) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,125,"[i] = new Complex(coefficients[i], 0.0);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,108,// Reduce interval if min and initial bracket the root.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,109,if (yInitial * yMin < 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,110,"return laguerre(min, initial, yMin, yInitial);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,127,"omplex initial = new Complex(0.5 * (min + max), 0.0);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,128,"omplex z = solve(c, initial);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,129,"f (isRootOK(min, max, z)) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,130,"etResult(z.getReal(), iterationCount);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,131,eturn result;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,113,// Return the second endpoint if it is good enough.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,114,double yMax = computeObjectiveValue(max);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,115,if (FastMath.abs(yMax) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,116,return max;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,134,/ solve all roots and select the one we're seeking
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,135,"omplex[] root = solveAll(c, initial);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,136,or (int i = 0; i < root.length; i++) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,137,"f (isRootOK(min, max, root[i])) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,138,"etResult(root[i].getReal(), iterationCount);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,139,eturn result;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,119,// Reduce interval if initial and max bracket the root.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,120,if (yInitial * yMax < 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,121,"return laguerre(initial, max, yInitial, yMax);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,143,/ should never happen
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,144,hrow new ConvergenceException();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,124,"throw new NoBracketingException(min, max, yMin, yMax);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,148, Returns true iff the given complex root is actually a real zero
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,149," in the given interval, within the solver tolerance level."
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,128,* Find a real root in the given interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,151, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,152, @param max the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,153, @param z the complex root
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,154, @return true iff z is the sought-after real zero
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,156,"rotected boolean isRootOK(double min, double max, Complex z) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,157,"ouble tolerance = FastMath.max(relativeAccuracy * z.abs(), absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,158,"eturn (isSequence(min, z.getReal(), max)) &&"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,159,FastMath.abs(z.getImaginary()) <= tolerance ||
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,160,.abs() <= functionValueAccuracy);
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,164," Find all complex roots for the polynomial with the given coefficients,"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,165, starting from the given initial value.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,130,"* Despite the bracketing condition, the root returned by"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,131,"* {@link LaguerreSolver.ComplexSolver#solve(Complex[],Complex)} may"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,132,"* not be a real zero inside {@code [min, max]}."
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,133,"* For example, <code>p(x) = x<sup>3</sup> + 1,</code>"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,134,"* with {@code min = -2}, {@code max = 2}, {@code initial = 0}."
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,135,"* When it occurs, this code calls"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,136,"* {@link LaguerreSolver.ComplexSolver#solveAll(Complex[],Complex)}"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,137,* in order to obtain all roots and picks up one real root.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,167, @param coefficients the polynomial coefficients array
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,168, @param initial the start value to use
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,169, @return the point at which the function value is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,170, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,171, or the solver detects convergence problems otherwise
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,172, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,173, @throws IllegalArgumentException if any parameters are invalid
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,139,* @param lo Lower bound of the search interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,140,* @param hi Higher bound of the search interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,141,* @param fLo Function value at the lower bound of the search interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,142,* @param fHi Function value at the higher bound of the search interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,143,* @return the point at which the function value is zero.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,175,"ublic Complex[] solveAll(double coefficients[], double initial) throws"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,176,"onvergenceException, MathUserException {"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,145,"public double laguerre(double lo, double hi,"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,146,"double fLo, double fHi) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,147,double result = Double.NaN;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,148,double coefficients[] = getCoefficients();
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,179,"omplex z = new Complex(initial, 0.0);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,180,or (int i = 0; i < c.length; i++) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,181,"[i] = new Complex(coefficients[i], 0.0);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,150,for (int i = 0; i < coefficients.length; i++) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,151,"c[i] = new Complex(coefficients[i], 0);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,153,"Complex initial = new Complex(0.5 * (lo + hi), 0);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,154,"Complex z = complexSolver.solve(c, initial);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,155,"if (complexSolver.isRoot(lo, hi, z)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,156,return z.getReal();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,157,} else {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,158,double r = Double.NaN;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,159,// Solve all roots and select the one we are seeking.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,160,"Complex[] root = complexSolver.solveAll(c, initial);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,161,for (int i = 0; i < root.length; i++) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,162,"if (complexSolver.isRoot(lo, hi, root[i])) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,163,r = root[i].getReal();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,164,break;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,167,return r;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,183,"eturn solveAll(c, z);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,187," Find all complex roots for the polynomial with the given coefficients,"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,188, starting from the given initial value.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,190, @param coefficients the polynomial coefficients array
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,191, @param initial the start value to use
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,192, @return the point at which the function value is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,193, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,194, or the solver detects convergence problems otherwise
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,195, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,196, @throws IllegalArgumentException if any parameters are invalid
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,172,* Class for searching all (complex) roots.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,198,"ublic Complex[] solveAll(Complex coefficients[], Complex initial) throws"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,199,"axIterationsExceededException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,201,nt n = coefficients.length - 1;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,202,nt iterationCount = 0;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,203,f (n < 1) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,204,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,205,"ocalizedFormats.NON_POSITIVE_POLYNOMIAL_DEGREE, n);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,207,omplex c[] = new Complex[n+1];    // coefficients for deflated polynomial
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,208,or (int i = 0; i <= n; i++) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,209,[i] = coefficients[i];
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,174,private class ComplexSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,176,* Check whether the given complex root is actually a real zero
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,177,"* in the given interval, within the solver tolerance level."
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,179,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,180,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,181,* @param z Complex root.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,182,* @return {@code true} if z is a real zero.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,184,"public boolean isRoot(double min, double max, Complex z) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,185,"double tolerance = FastMath.max(getRelativeAccuracy() * z.abs(), getAbsoluteAccuracy());"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,186,"return (isSequence(min, z.getReal(), max)) &&"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,187,(FastMath.abs(z.getImaginary()) <= tolerance ||
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,188,z.abs() <= getFunctionValueAccuracy());
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,212,/ solve individual root successively
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,213,omplex root[] = new Complex[n];
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,214,or (int i = 0; i < n; i++) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,215,omplex subarray[] = new Complex[n-i+1];
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,216,"ystem.arraycopy(c, 0, subarray, 0, subarray.length);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,217,"oot[i] = solve(subarray, initial);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,218,/ polynomial deflation using synthetic division
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,219,omplex newc = c[n-i];
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,220,omplex oldc = null;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,221,or (int j = n-i-1; j >= 0; j--) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,222,ldc = c[j];
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,223,[j] = newc;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,224,ewc = oldc.add(newc.multiply(root[i]));
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,192,* Find all complex roots for the polynomial with the given
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,193,"* coefficients, starting from the given initial value."
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,195,* @param coefficients Polynomial coefficients.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,196,* @param initial Start value.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,197,* @return the point at which the function value is zero.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,198,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,199,* if the maximum number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,200,* @throws NullArgumentException if the {@code coefficients} is
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,201,* {@code null}.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,202,* @throws NoDataException if the {@code coefficients} array is empty.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,204,"public Complex[] solveAll(double coefficients[], double initial) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,205,if (coefficients == null) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,206,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,226,terationCount += this.iterationCount;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,208,Complex c[] = new Complex[coefficients.length];
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,209,"Complex z = new Complex(initial, 0);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,210,for (int i = 0; i < c.length; i++) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,211,"c[i] = new Complex(coefficients[i], 0);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,213,"return solveAll(c, z);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,229,esultComputed = true;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,230,his.iterationCount = iterationCount;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,231,eturn root;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,217,* Find all complex roots for the polynomial with the given
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,218,"* coefficients, starting from the given initial value."
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,220,* @param coefficients Polynomial coefficients.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,221,* @param initial Start value.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,222,* @return the point at which the function value is zero.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,223,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,224,* if the maximum number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,225,* @throws NullArgumentException if the {@code coefficients} is
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,226,* {@code null}.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,227,* @throws NoDataException if the {@code coefficients} array is empty.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,229,"public Complex[] solveAll(Complex coefficients[], Complex initial) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,230,if (coefficients == null) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,231,throw new NullArgumentException();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,233,int n = coefficients.length - 1;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,234,if (n == 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,235,throw new NoDataException(LocalizedFormats.POLYNOMIAL);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,237,// Coefficients for deflated polynomial.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,238,Complex c[] = new Complex[n + 1];
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,239,for (int i = 0; i <= n; i++) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,240,c[i] = coefficients[i];
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,235," Find a complex root for the polynomial with the given coefficients,"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,236, starting from the given initial value.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,238, @param coefficients the polynomial coefficients array
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,239, @param initial the start value to use
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,240, @return the point at which the function value is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,241, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,242, or the solver detects convergence problems otherwise
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,243, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,244, @throws IllegalArgumentException if any parameters are invalid
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,246,"ublic Complex solve(Complex coefficients[], Complex initial) throws"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,247,"axIterationsExceededException, MathUserException {"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,243,// Solve individual roots successively.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,244,Complex root[] = new Complex[n];
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,245,for (int i = 0; i < n; i++) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,246,Complex subarray[] = new Complex[n - i + 1];
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,247,"System.arraycopy(c, 0, subarray, 0, subarray.length);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,248,"root[i] = solve(subarray, initial);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,249,// Polynomial deflation using synthetic division.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,250,Complex newc = c[n - i];
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,251,Complex oldc = null;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,252,for (int j = n - i - 1; j >= 0; j--) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,253,oldc = c[j];
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,254,c[j] = newc;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,255,newc = oldc.add(newc.multiply(root[i]));
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,249,nt n = coefficients.length - 1;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,250,f (n < 1) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,251,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,252,"ocalizedFormats.NON_POSITIVE_POLYNOMIAL_DEGREE, n);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,259,return root;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,254,"omplex N  = new Complex(n,     0.0);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,255,"omplex N1 = new Complex(n - 1, 0.0);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,257,nt i = 1;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,258,omplex pv = null;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,259,omplex dv = null;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,260,omplex d2v = null;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,261,omplex G = null;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,262,omplex G2 = null;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,263,omplex H = null;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,264,omplex delta = null;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,265,omplex denominator = null;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,266,omplex z = initial;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,267,"omplex oldz = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,268,hile (i <= maximalIterationCount) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,269,"/ Compute pv (polynomial value), dv (derivative value), and"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,270,/ d2v (second derivative value) simultaneously.
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,271,v = coefficients[n];
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,272,v = Complex.ZERO;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,273,2v = Complex.ZERO;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,274,or (int j = n-1; j >= 0; j--) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,275,2v = dv.add(z.multiply(d2v));
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,276,v = pv.add(z.multiply(dv));
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,277,v = coefficients[j].add(z.multiply(pv));
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,263,"* Find a complex root for the polynomial with the given coefficients,"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,264,* starting from the given initial value.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,266,* @param coefficients Polynomial coefficients.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,267,* @param initial Start value.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,268,* @return the point at which the function value is zero.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,269,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,270,* if the maximum number of evaluations is exceeded.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,271,* @throws NullArgumentException if the {@code coefficients} is
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,272,* {@code null}.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,273,* @throws NoDataException if the {@code coefficients} array is empty.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,275,"public Complex solve(Complex coefficients[], Complex initial) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,276,if (coefficients == null) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,277,throw new NullArgumentException();
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,279,"2v = d2v.multiply(new Complex(2.0, 0.0));"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,281,/ check for convergence
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,282,"ouble tolerance = FastMath.max(relativeAccuracy * z.abs(),"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,283,bsoluteAccuracy);
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,284,f ((z.subtract(oldz)).abs() <= tolerance) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,285,esultComputed = true;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,286,terationCount = i;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,287,eturn z;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,289,f (pv.abs() <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,290,esultComputed = true;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,291,terationCount = i;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,292,eturn z;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,280,int n = coefficients.length - 1;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,281,if (n == 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,282,throw new NoDataException(LocalizedFormats.POLYNOMIAL);
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,295,"/ now pv != 0, calculate the new approximation"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,296, = dv.divide(pv);
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,297,2 = G.multiply(G);
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,298, = G2.subtract(d2v.divide(pv));
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,299,elta = N1.multiply((N.multiply(H)).subtract(G2));
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,300,/ choose a denominator larger in magnitude
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,301,omplex deltaSqrt = delta.sqrt();
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,302,omplex dplus = G.add(deltaSqrt);
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,303,omplex dminus = G.subtract(deltaSqrt);
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,304,enominator = dplus.abs() > dminus.abs() ? dplus : dminus;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,305,"/ Perturb z if denominator is zero, for instance,"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,306,"/ p(x) = x^3 + 1, z = 0."
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,307,"f (denominator.equals(new Complex(0.0, 0.0))) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,308," = z.add(new Complex(absoluteAccuracy, absoluteAccuracy));"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,309,"ldz = new Complex(Double.POSITIVE_INFINITY,"
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,310,ouble.POSITIVE_INFINITY);
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,311, else {
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,312,ldz = z;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,313, = z.subtract(N.divide(denominator));
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,285,final double absoluteAccuracy = getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,286,final double relativeAccuracy = getRelativeAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,287,final double functionValueAccuracy = getFunctionValueAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,289,"Complex N  = new Complex(n,     0.0);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,290,"Complex N1 = new Complex(n - 1, 0.0);"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,292,Complex pv = null;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,293,Complex dv = null;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,294,Complex d2v = null;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,295,Complex G = null;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,296,Complex G2 = null;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,297,Complex H = null;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,298,Complex delta = null;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,299,Complex denominator = null;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,300,Complex z = initial;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,301,"Complex oldz = new Complex(Double.POSITIVE_INFINITY,"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,302,Double.POSITIVE_INFINITY);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,303,while (true) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,304,"// Compute pv (polynomial value), dv (derivative value), and"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,305,// d2v (second derivative value) simultaneously.
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,306,pv = coefficients[n];
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,307,dv = Complex.ZERO;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,308,d2v = Complex.ZERO;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,309,for (int j = n-1; j >= 0; j--) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,310,d2v = dv.add(z.multiply(d2v));
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,311,dv = pv.add(z.multiply(dv));
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,312,pv = coefficients[j].add(z.multiply(pv));
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,314,"d2v = d2v.multiply(new Complex(2.0, 0.0));"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,316,// check for convergence
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,317,"double tolerance = FastMath.max(relativeAccuracy * z.abs(),"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,318,absoluteAccuracy);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,319,if ((z.subtract(oldz)).abs() <= tolerance) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,320,return z;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,322,if (pv.abs() <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,323,return z;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,326,"// now pv != 0, calculate the new approximation"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,327,G = dv.divide(pv);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,328,G2 = G.multiply(G);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,329,H = G2.subtract(d2v.divide(pv));
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,330,delta = N1.multiply((N.multiply(H)).subtract(G2));
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,331,// choose a denominator larger in magnitude
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,332,Complex deltaSqrt = delta.sqrt();
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,333,Complex dplus = G.add(deltaSqrt);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,334,Complex dminus = G.subtract(deltaSqrt);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,335,denominator = dplus.abs() > dminus.abs() ? dplus : dminus;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,336,"// Perturb z if denominator is zero, for instance,"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,337,"// p(x) = x^3 + 1, z = 0."
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,338,"if (denominator.equals(new Complex(0.0, 0.0))) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,339,"z = z.add(new Complex(absoluteAccuracy, absoluteAccuracy));"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,340,"oldz = new Complex(Double.POSITIVE_INFINITY,"
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,341,Double.POSITIVE_INFINITY);
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,342,} else {
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,343,oldz = z;
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,344,z = z.subtract(N.divide(denominator));
True,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,346,incrementEvaluationCount();
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,315,++;
False,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java,317,hrow new MaxIterationsExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,20,mport org.apache.commons.math.MaxIterationsExceededException;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,21,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,22,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,27," Implements the <a href=""http://mathworld.wolfram.com/MullersMethod.html"">"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,23,"* This class implements the <a href=""http://mathworld.wolfram.com/MullersMethod.html"">"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,33, restrict ourselves to real functions. Methods solve() and solve2() find
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,34," real zeros, using different ways to bypass complex arithmetics.</p>"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,29,* restrict ourselves to real functions.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,30,* This class differs from {@link MullerSolver} in the way it avoids complex
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,31,* operations.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,32,* Muller's original method would have function evaluation at complex point.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,33,"* Since our f(x) is real, we have to find ways to avoid that. Bracketing"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,34,"* condition is one way to go: by requiring bracketing in every iteration,"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,35,* the newly computed approximation is guaranteed to be real.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,36,* <p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,37,* Normally Muller's method converges quadratically in the vicinity of a
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,38,"* zero, however it may be very slow in regions far away from zeros. For"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,39,"* example, f(x) = exp(x) - 1, min = -50, max = 100. In such case we use"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,40,* bisection as a safety backup if it performs very poorly.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,41,* <p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,42,* The formulas here use divided differences directly.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,46,* @see MullerSolver2
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,39,ublic class MullerSolver extends UnivariateRealSolverImpl {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,48,public class MullerSolver extends AbstractUnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,49,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,50,private static final long serialVersionUID = 7694577816772532779L;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,51,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,52,public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,42, Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,55,* Construct a solver with default accuracies.
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,45,"uper(100, 1E-6);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,58,this(DEFAULT_ABSOLUTE_ACCURACY);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,49, Find a real root in the given interval with initial value.
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,50, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,51, Requires bracketing condition.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,61,* Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,53, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,54, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,55, @param max the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,56, @param initial the start value to use
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,57, @return the point at which the function value is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,58, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,59, or the solver detects convergence problems otherwise
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,60, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,61, @throws IllegalArgumentException if any parameters are invalid
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,63,* @param absoluteAccuracy Absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,63,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,64,"inal double min, final double max, final double initial)"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,65,"hrows MaxIterationsExceededException, MathUserException {"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,65,public MullerSolver(double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,66,super(absoluteAccuracy);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,69,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,71,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,72,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,74,"public MullerSolver(double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,75,double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,76,"super(relativeAccuracy, absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,67,/ check for zeros before verifying bracketing
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,68,f (f.value(min) == 0.0) { return min; }
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,69,f (f.value(max) == 0.0) { return max; }
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,70,f (f.value(initial) == 0.0) { return initial; }
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,80,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,82,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,83,protected double doSolve() {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,84,final double min = getMin();
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,85,final double max = getMax();
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,86,final double initial = getStartValue();
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,88,final double functionValueAccuracy = getFunctionValueAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,72,"erifyBracketing(min, max, f);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,74,"f (isBracketing(min, initial, f)) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,75,"eturn solve(f, min, initial);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,92,// check for zeros before verifying bracketing
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,93,final double fMin = computeObjectiveValue(min);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,94,if (FastMath.abs(fMin) < functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,95,return min;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,97,final double fMax = computeObjectiveValue(max);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,98,if (FastMath.abs(fMax) < functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,99,return max;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,101,final double fInitial = computeObjectiveValue(initial);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,102,if (FastMath.abs(fInitial) <  functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,103,return initial;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,106,"verifyBracketing(min, max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,108,"if (isBracketing(min, initial)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,109,"return solve(min, initial, fMin, fInitial);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,77,"eturn solve(f, initial, max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,111,"return solve(initial, max, fInitial, fMax);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,83, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,84, Original Muller's method would have function evaluation at complex point.
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,85," Since our f(x) is real, we have to find ways to avoid that. Bracketing"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,86," condition is one way to go: by requiring bracketing in every iteration,"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,87, the newly computed approximation is guaranteed to be real.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,88, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,89, Normally Muller's method converges quadratically in the vicinity of a
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,90," zero, however it may be very slow in regions far away from zeros. For"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,91," example, f(x) = exp(x) - 1, min = -50, max = 100. In such case we use"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,92, bisection as a safety backup if it performs very poorly.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,93, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,94, The formulas here use divided differences directly.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,96, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,97, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,98, @param max the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,99, @return the point at which the function value is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,100, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,101, or the solver detects convergence problems otherwise
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,102, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,103, @throws IllegalArgumentException if any parameters are invalid
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,118,* @param min Lower bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,119,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,120,* @param fMin function value at the lower bound.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,121,* @param fMax function value at the upper bound.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,122,* @return the point at which the function value is zero.
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,105,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,106,"inal double min, final double max)"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,107,"hrows MaxIterationsExceededException, MathUserException {"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,124,"private double solve(double min, double max,"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,125,"double fMin, double fMax) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,126,final double relativeAccuracy = getRelativeAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,127,final double absoluteAccuracy = getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,128,final double functionValueAccuracy = getFunctionValueAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,115,ouble y0 = f.value(x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,136,double y0 = fMin;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,117,ouble y2 = f.value(x2);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,138,double y2 = fMax;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,119,ouble y1 = f.value(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,121,/ check for zeros before verifying bracketing
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,122,f (y0 == 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,123,eturn min;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,125,f (y2 == 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,126,eturn max;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,128,"erifyBracketing(min, max, f);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,140,double y1 = computeObjectiveValue(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,131,or (int i = 1; i <= maximalIterationCount; ++i) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,143,while (true) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,146,inal double y = f.value(x);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,158,final double y = computeObjectiveValue(x);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,150,f (FastMath.abs(x - oldx) <= tolerance) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,151,"etResult(x, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,152,eturn result;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,154,f (FastMath.abs(y) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,155,"etResult(x, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,156,eturn result;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,162,if (FastMath.abs(x - oldx) <= tolerance ||
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,163,FastMath.abs(y) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,164,return x;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,176,ouble ym = f.value(xm);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,184,double ym = computeObjectiveValue(xm);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,183,1 = f.value(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,184,ldx = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,187,hrow new MaxIterationsExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,191, Find a real root in the given interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,192, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,193, solve2() differs from solve() in the way it avoids complex operations.
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,194," Except for the initial [min, max], solve2() does not require bracketing"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,195," condition, e.g. f(x0), f(x1), f(x2) can have the same sign. If complex"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,196," number arises in the computation, we simply use its modulus as real"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,197, approximation.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,198, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,199," Because the interval may not be bracketing, bisection alternative is"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,200, not applicable here. However in practice our treatment usually works
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,201," well, especially near real zeros where the imaginary part of complex"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,202, approximation is often negligible.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,203, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,204, The formulas here do not use divided differences directly.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,206, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,207, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,208, @param max the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,209, @return the point at which the function value is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,210, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,211, or the solver detects convergence problems otherwise
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,212, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,213, @throws IllegalArgumentException if any parameters are invalid
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,215,"ublic double solve2(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,216,"inal double min, final double max)"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,217,"hrows MaxIterationsExceededException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,219,/ x2 is the last root approximation
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,220,/ x is the new approximation and new x2 for next round
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,221,/ x0 < x1 < x2 does not hold here
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,223,ouble x0 = min;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,224,ouble y0 = f.value(x0);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,225,ouble x1 = max;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,226,ouble y1 = f.value(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,227,ouble x2 = 0.5 * (x0 + x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,228,ouble y2 = f.value(x2);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,230,/ check for zeros before verifying bracketing
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,231,f (y0 == 0.0) { return min; }
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,232,f (y1 == 0.0) { return max; }
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,233,"erifyBracketing(min, max, f);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,235,ouble oldx = Double.POSITIVE_INFINITY;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,236,or (int i = 1; i <= maximalIterationCount; ++i) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,237,"/ quadratic interpolation through x0, x1, x2"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,238,inal double q = (x2 - x1) / (x1 - x0);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,239,inal double a = q * (y2 - (1 + q) * y1 + q * y0);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,240,inal double b = (2 * q + 1) * y2 - (1 + q) * (1 + q) * y1 + q * q * y0;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,241,inal double c = (1 + q) * y2;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,242,inal double delta = b * b - 4 * a * c;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,243,ouble x;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,244,inal double denominator;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,245,f (delta >= 0.0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,246,/ choose a denominator larger in magnitude
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,247,ouble dplus = b + FastMath.sqrt(delta);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,248,ouble dminus = b - FastMath.sqrt(delta);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,249,enominator = FastMath.abs(dplus) > FastMath.abs(dminus) ? dplus : dminus;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,250, else {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,251,/ take the modulus of (B +/- FastMath.sqrt(delta))
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,252,enominator = FastMath.sqrt(b * b - delta);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,254,f (denominator != 0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,255, = x2 - 2.0 * c * (x2 - x1) / denominator;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,256,/ perturb x if it exactly coincides with x1 or x2
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,257,/ the equality tests here are intentional
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,258,hile (x == x1 || x == x2) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,259, += absoluteAccuracy;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,261, else {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,262,"/ extremely rare case, get a random number to skip it"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,263, = min + FastMath.random() * (max - min);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,191,y1 = computeObjectiveValue(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,266,inal double y = f.value(x);
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,268,/ check for convergence
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,269,"inal double tolerance = FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,270,f (FastMath.abs(x - oldx) <= tolerance) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,271,"etResult(x, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,272,eturn result;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,274,f (FastMath.abs(y) <= functionValueAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,275,"etResult(x, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,276,eturn result;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,279,/ prepare the next iteration
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,280,0 = x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,281,0 = y1;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,282,1 = x2;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,283,1 = y2;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,284,2 = x;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,285,2 = y;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,286,ldx = x;
False,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver.java,288,hrow new MaxIterationsExceededException(maximalIterationCount);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,17,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,19,import org.apache.commons.math.exception.NoBracketingException;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,20,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,23,"* This class implements the <a href=""http://mathworld.wolfram.com/MullersMethod.html"">"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,24,* Muller's Method</a> for root finding of real univariate functions. For
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,25,"* reference, see <b>Elementary Numerical Analysis</b>, ISBN 0070124477,"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,26,* chapter 3.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,27,* <p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,28,"* Muller's method applies to both real and complex functions, but here we"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,29,* restrict ourselves to real functions.<
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,30,* This class differs from {@link MullerSolver} in the way it avoids complex
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,31,* operations.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,32,"* Except for the initial [min, max], it does not require bracketing"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,33,"* condition, e.g. f(x0), f(x1), f(x2) can have the same sign. If complex"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,34,"* number arises in the computation, we simply use its modulus as real"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,35,* approximation.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,36,* <p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,37,"* Because the interval may not be bracketing, bisection alternative is"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,38,* not applicable here. However in practice our treatment usually works
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,39,"* well, especially near real zeroes where the imaginary part of complex"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,40,* approximation is often negligible.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,41,* <p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,42,* The formulas here do not use divided differences directly.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,44,"* @version $Revision: 1034896 $ $Date: 2010-11-13 23:27:34 +0100 (Sat, 13 Nov 2010) $"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,45,* @since 1.2
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,46,* @see MullerSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,48,public class MullerSolver2 extends AbstractUnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,49,/** Serializable version identifier */
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,50,private static final long serialVersionUID = 7694577816772532779L;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,51,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,52,public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,55,* Construct a solver with default accuracies.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,57,public MullerSolver2() {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,58,this(DEFAULT_ABSOLUTE_ACCURACY);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,61,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,63,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,65,public MullerSolver2(double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,66,super(absoluteAccuracy);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,69,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,71,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,72,* @param absoluteAccuracy Absolute accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,74,"public MullerSolver2(double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,75,double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,76,"super(relativeAccuracy, absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,80,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,82,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,83,protected double doSolve() {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,84,final double min = getMin();
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,85,final double max = getMax();
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,87,"verifyInterval(min, max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,89,final double relativeAccuracy = getRelativeAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,90,final double absoluteAccuracy = getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,91,final double functionValueAccuracy = getFunctionValueAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,93,// x2 is the last root approximation
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,94,// x is the new approximation and new x2 for next round
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,95,// x0 < x1 < x2 does not hold here
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,97,double x0 = min;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,98,double y0 = computeObjectiveValue(x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,99,if (FastMath.abs(y0) < functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,100,return x0;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,102,double x1 = max;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,103,double y1 = computeObjectiveValue(x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,104,if (FastMath.abs(y1) < functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,105,return x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,108,if(y0 * y1 > 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,109,"throw new NoBracketingException(x0, x1, y0, y1);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,112,double x2 = 0.5 * (x0 + x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,113,double y2 = computeObjectiveValue(x2);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,115,double oldx = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,116,while (true) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,117,"// quadratic interpolation through x0, x1, x2"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,118,final double q = (x2 - x1) / (x1 - x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,119,final double a = q * (y2 - (1 + q) * y1 + q * y0);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,120,final double b = (2 * q + 1) * y2 - (1 + q) * (1 + q) * y1 + q * q * y0;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,121,final double c = (1 + q) * y2;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,122,final double delta = b * b - 4 * a * c;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,123,double x;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,124,final double denominator;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,125,if (delta >= 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,126,// choose a denominator larger in magnitude
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,127,double dplus = b + FastMath.sqrt(delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,128,double dminus = b - FastMath.sqrt(delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,129,denominator = FastMath.abs(dplus) > FastMath.abs(dminus) ? dplus : dminus;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,130,} else {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,131,// take the modulus of (B +/- FastMath.sqrt(delta))
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,132,denominator = FastMath.sqrt(b * b - delta);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,134,if (denominator != 0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,135,x = x2 - 2.0 * c * (x2 - x1) / denominator;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,136,// perturb x if it exactly coincides with x1 or x2
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,137,// the equality tests here are intentional
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,138,while (x == x1 || x == x2) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,139,x += absoluteAccuracy;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,141,} else {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,142,"// extremely rare case, get a random number to skip it"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,143,x = min + FastMath.random() * (max - min);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,144,oldx = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,146,final double y = computeObjectiveValue(x);
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,148,// check for convergence
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,149,"final double tolerance = FastMath.max(relativeAccuracy * FastMath.abs(x), absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,150,if (FastMath.abs(x - oldx) <= tolerance ||
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,151,FastMath.abs(y) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,152,return x;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,155,// prepare the next iteration
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,156,x0 = x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,157,y0 = y1;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,158,x1 = x2;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,159,y1 = y2;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,160,x2 = x;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,161,y2 = y;
True,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,src/main/java/org/apache/commons/math/analysis/solvers/MullerSolver2.java,162,oldx = x;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,20,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,21,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,22,mport org.apache.commons.math.MaxIterationsExceededException;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,24,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,25,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,36,ublic class NewtonSolver extends UnivariateRealSolverImpl {
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,31,public class NewtonSolver extends AbstractDifferentiableUnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,32,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,33,public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,42,"uper(100, 1E-6);"
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,39,this(DEFAULT_ABSOLUTE_ACCURACY);
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,46, Find a zero near the midpoint of <code>min</code> and <code>max</code>.
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,42,* Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,48, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,49, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,50, @param max the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,51, @return the value where the function is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,52, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,53, @throws MathUserException if an error occurs evaluating the function or derivative
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,54, @throws IllegalArgumentException if min is not less than max
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,44,* @param absoluteAccuracy Absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,56,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,57,"inal double min, final double max)"
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,58,"hrows MaxIterationsExceededException, MathUserException  {"
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,59,"eturn solve(f, min, max, UnivariateRealSolverUtils.midpoint(min, max));"
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,46,public NewtonSolver(double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,47,super(absoluteAccuracy);
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,63, Find a zero near the value <code>startValue</code>.
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,51,* Find a zero near the midpoint of {@code min} and {@code max}.
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,65, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,66, @param min the lower bound for the interval (ignored).
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,67, @param max the upper bound for the interval (ignored).
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,68, @param startValue the start value to use.
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,69, @return the value where the function is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,70, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,71, @throws MathUserException if an error occurs evaluating the function or derivative
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,72, @throws IllegalArgumentException if startValue is not between min and max or
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,73, if function is not a {@link DifferentiableUnivariateRealFunction} instance
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,53,* @param f Function to solve.
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,54,* @param min Lower bound for the interval?
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,55,* @param max Upper bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,56,* @return the value where the function is zero.
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,57,* @throws org.apache.commons.math.exception.TooManyEvaluationsException
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,58,* if the maximum evaluation count is exceeded.
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,59,* @throws IllegalArgumentException if {@code min >= max}.
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,75,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,76,"inal double min, final double max, final double startValue)"
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,77,"hrows MaxIterationsExceededException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,79,ry {
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,81,inal UnivariateRealFunction derivative =
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,82,(DifferentiableUnivariateRealFunction) f).derivative();
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,83,learResult();
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,84,"erifySequence(min, startValue, max);"
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,86,ouble x0 = startValue;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,87,ouble x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,89,nt i = 0;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,90,hile (i < maximalIterationCount) {
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,61,"public double solve(final DifferentiableUnivariateRealFunction f,"
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,62,"final double min, final double max) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,63,"return super.solve(f, UnivariateRealSolverUtils.midpoint(min, max));"
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,92,1 = x0 - (f.value(x0) / derivative.value(x0));
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,93,f (FastMath.abs(x1 - x0) <= absoluteAccuracy) {
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,94,"etResult(x1, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,95,eturn x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,67,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,69,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,70,protected double doSolve() {
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,71,final double startValue = getStartValue();
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,72,final double absoluteAccuracy = getAbsoluteAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,98,0 = x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,99,+i;
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,74,double x0 = startValue;
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,75,double x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,76,while (true) {
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,77,x1 = x0 - (computeObjectiveValue(x0) / computeDerivativeObjectiveValue(x0));
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,78,if (FastMath.abs(x1 - x0) <= absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,79,return x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,102,hrow new MaxIterationsExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,103, catch (ClassCastException cce) {
False,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,104,hrow MathRuntimeException.createIllegalArgumentException(LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE);
True,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java,82,x0 = x1;
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,17,package org.apache.commons.math.analysis.solvers;
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,19,import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,22,* Interface for (polynomial) root-finding algorithms.
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,23,* Implementations will search for only one zero in the given interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,25,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,26,* @since 3.0
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,28,public interface PolynomialSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/PolynomialSolver.java,29,extends BaseUnivariateRealSolver<PolynomialFunction> {}
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,20,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,21,mport org.apache.commons.math.MaxIterationsExceededException;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,22,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,38,ublic class RiddersSolver extends UnivariateRealSolverImpl {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,34,public class RiddersSolver extends AbstractUnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,35,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,36,public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,41, Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,39,* Construct a solver with default accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,44,"uper(100, 1E-6);"
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,42,this(DEFAULT_ABSOLUTE_ACCURACY);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,48, Find a root in the given interval with initial value.
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,49, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,50, Requires bracketing condition.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,45,* Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,52, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,53, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,54, @param max the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,55, @param initial the start value to use
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,56, @return the point at which the function value is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,57, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,58, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,59, @throws IllegalArgumentException if any parameters are invalid
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,47,* @param absoluteAccuracy Absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,61,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,62,"inal double min, final double max, final double initial)"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,63,"hrows MaxIterationsExceededException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,65,/ check for zeros before verifying bracketing
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,66,f (f.value(min) == 0.0) { return min; }
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,67,f (f.value(max) == 0.0) { return max; }
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,68,f (f.value(initial) == 0.0) { return initial; }
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,70,"erifyBracketing(min, max, f);"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,71,"erifySequence(min, initial, max);"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,72,"f (isBracketing(min, initial, f)) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,73,"eturn solve(f, min, initial);"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,74, else {
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,75,"eturn solve(f, initial, max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,49,public RiddersSolver(double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,50,super(absoluteAccuracy);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,80, Find a root in the given interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,81, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,82, Requires bracketing condition.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,53,* Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,84, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,85, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,86, @param max the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,87, @return the point at which the function value is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,88, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,89, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,90, @throws IllegalArgumentException if any parameters are invalid
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,55,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,56,* @param absoluteAccuracy Absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,92,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,93,"inal double min, final double max)"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,94,"hrows MaxIterationsExceededException, MathUserException {"
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,58,"public RiddersSolver(double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,59,double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,60,"super(relativeAccuracy, absoluteAccuracy);"
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,64,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,66,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,67,protected double doSolve() {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,68,double min = getMin();
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,69,double max = getMax();
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,100,ouble y1 = f.value(x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,74,double y1 = computeObjectiveValue(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,102,ouble y2 = f.value(x2);
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,76,double y2 = computeObjectiveValue(x2);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,105,f (y1 == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,79,if (y1 == 0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,108,f (y2 == 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,82,if (y2 == 0) {
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,111,"erifyBracketing(min, max, f);"
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,85,"verifyBracketing(min, max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,87,final double absoluteAccuracy = getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,88,final double functionValueAccuracy = getFunctionValueAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,89,final double relativeAccuracy = getRelativeAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,113,nt i = 1;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,115,hile (i <= maximalIterationCount) {
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,92,while (true) {
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,118,inal double y3 = f.value(x3);
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,95,final double y3 = computeObjectiveValue(x3);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,120,"etResult(x3, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,121,eturn result;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,97,return x3;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,127,inal double y = f.value(x);
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,103,final double y = computeObjectiveValue(x);
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,132,"etResult(x, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,133,eturn result;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,108,return x;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,136,"etResult(x, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,137,eturn result;
True,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,111,return x;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,164,++;
False,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java,166,hrow new MaxIterationsExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,20,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,21,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,22,mport org.apache.commons.math.MaxIterationsExceededException;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,23,mport org.apache.commons.math.analysis.UnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,24,mport org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,19,import org.apache.commons.math.exception.NoBracketingException;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,44,ublic class SecantSolver extends UnivariateRealSolverImpl {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,39,public class SecantSolver extends AbstractUnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,40,/** Default absolute accuracy. */
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,41,public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,47, Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,44,* Construct a solver with default accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,50,"uper(100, 1E-6);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,47,this(DEFAULT_ABSOLUTE_ACCURACY);
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,54, Find a zero in the given interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,50,* Construct a solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,56, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,57, @param min the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,58, @param max the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,59, @param initial the start value to use (ignored)
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,60, @return the value where the function is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,61, @throws MaxIterationsExceededException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,62, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,63, @throws IllegalArgumentException if min is not less than max or the
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,64, signs of the values of the function at the endpoints are not opposites
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,52,* @param absoluteAccuracy Absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,66,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,67,"inal double min, final double max, final double initial)"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,68,"hrows MaxIterationsExceededException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,69,"eturn solve(f, min, max);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,54,public SecantSolver(double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,55,super(absoluteAccuracy);
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,73, Find a zero in the given interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,74, @param f the function to solve
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,75, @param min the lower bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,76, @param max the upper bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,77, @return the value where the function is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,78, @throws MaxIterationsExceededException  if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,79, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,80, @throws IllegalArgumentException if min is not less than max or the
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,81, signs of the values of the function at the endpoints are not opposites
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,58,* Construct a solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,60,* @param relativeAccuracy Relative accuracy.
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,61,* @param absoluteAccuracy Absolute accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,83,"ublic double solve(final UnivariateRealFunction f,"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,84,"inal double min, final double max)"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,85,"hrows MaxIterationsExceededException, MathUserException {"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,63,"public SecantSolver(double relativeAccuracy,"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,64,double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,65,"super(relativeAccuracy, absoluteAccuracy);"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,87,learResult();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,69,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,71,@Override
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,72,protected double doSolve() {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,73,double min = getMin();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,74,double max = getMax();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,77,final double functionValueAccuracy = getFunctionValueAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,97,ouble y0 = f.value(x0);
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,98,ouble y1 = f.value(x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,87,double y0 = computeObjectiveValue(x0);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,88,// return the first endpoint if it is good enough
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,89,if (FastMath.abs(y0) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,90,return x0;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,93,// return the second endpoint if it is good enough
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,94,double y1 = computeObjectiveValue(x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,95,if (FastMath.abs(y1) <= functionValueAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,96,return x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,102,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,103,"ocalizedFormats.SAME_SIGN_AT_ENDPOINTS, min, max, y0, y1);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,101,"throw new NoBracketingException(min, max, y0, y1);"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,104,final double absoluteAccuracy = getAbsoluteAccuracy();
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,105,final double relativeAccuracy = getRelativeAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,109,nt i = 0;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,110,hile (i < maximalIterationCount) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,110,while (true) {
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,120,"etResult(x1, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,121,eturn result;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,120,return x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,123,f (FastMath.abs(oldDelta) <
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,124,"astMath.max(relativeAccuracy * FastMath.abs(x1), absoluteAccuracy)) {"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,125,"etResult(x1, i);"
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,126,eturn result;
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,122,"if (FastMath.abs(oldDelta) < FastMath.max(relativeAccuracy * FastMath.abs(x1),"
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,123,absoluteAccuracy)) {
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,124,return x1;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,143,1 = f.value(x1);
True,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,141,y1 = computeObjectiveValue(x1);
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,150,++;
False,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java,152,hrow new MaxIterationsExceededException(maximalIterationCount);
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,20,mport org.apache.commons.math.ConvergingAlgorithm;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,21,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,26, Interface for (univariate real) rootfinding algorithms.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,27, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,28, Implementations will search for only one zero in the given interval.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,23,* Interface for (univariate real) root-finding algorithms.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,24,* Implementations will search for only one zero in the given interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,32,ublic interface UnivariateRealSolver extends ConvergingAlgorithm {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,35, Set the function value accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,36, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,37, This is used to determine when an evaluated function value or some other
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,38, value which is used as divisor is zero.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,39, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,40, This is a safety guard and it shouldn't be necessary to change this in
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,41, general.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,43, @param accuracy the accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,44, @throws IllegalArgumentException if the accuracy can't be achieved by
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,45, the solver or is otherwise deemed unreasonable.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,47,oid setFunctionValueAccuracy(double accuracy);
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,50, Get the actual function value accuracy.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,51, @return the accuracy
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,53,ouble getFunctionValueAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,56, Reset the actual function accuracy to the default.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,57, The default value is provided by the solver implementation.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,59,oid resetFunctionValueAccuracy();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,62, Solve for a zero root in the given interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,63, <p>A solver may require that the interval brackets a single zero root.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,64, Solvers that do require bracketing should be able to handle the case
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,65, where one of the endpoints is itself a root.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,67, @param f the function to solve.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,68, @param min the lower bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,69, @param max the upper bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,70, @return a value where the function is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,71, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,72, or the solver detects convergence problems otherwise.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,73, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,74, @throws IllegalArgumentException if min > max or the endpoints do not
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,75, satisfy the requirements specified by the solver
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,76, @since 2.0
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,78,"ouble solve(UnivariateRealFunction f, double min, double max)"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,79,"hrows ConvergenceException, MathUserException;"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,82," Solve for a zero in the given interval, start at startValue."
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,83, <p>A solver may require that the interval brackets a single zero root.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,84, Solvers that do require bracketing should be able to handle the case
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,85, where one of the endpoints is itself a root.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,87, @param f the function to solve.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,88, @param min the lower bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,89, @param max the upper bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,90, @param startValue the start value to use
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,91, @return a value where the function is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,92, @throws ConvergenceException if the maximum iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,93, or the solver detects convergence problems otherwise.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,94, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,95, @throws IllegalArgumentException if min > max or the arguments do not
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,96, satisfy the requirements specified by the solver
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,97, @since 2.0
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,99,"ouble solve(UnivariateRealFunction f, double min, double max, double startValue)"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,100,"hrows ConvergenceException, MathUserException, IllegalArgumentException;"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,103, Get the result of the last run of the solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,105, @return the last result.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,106," @throws IllegalStateException if there is no result available, either"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,107, because no result was yet computed or the last attempt failed.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,109,ouble getResult();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,112, Get the result of the last run of the solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,114, @return the value of the function at the last result.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,115," @throws IllegalStateException if there is no result available, either"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,116, because no result was yet computed or the last attempt failed.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,118,ouble getFunctionValue();
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,28,public interface UnivariateRealSolver
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolver.java,29,extends BaseUnivariateRealSolver<UnivariateRealFunction> {}
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,17,ackage org.apache.commons.math.analysis.solvers;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,20, Abstract factory class used to create {@link UnivariateRealSolver} instances.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,21, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,22, Solvers implementing the following algorithms are supported:
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,23, <ul>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,24, <li>Bisection</li>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,25, <li>Brent's method</li>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,26, <li>Secant method</li>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,27, </ul>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,28," Concrete factories extending this class also specify a default solver, instances of which"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,29, are returned by <code>newDefaultSolver()</code>.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,30, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,31, Common usage:<pre>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,32, SolverFactory factory = UnivariateRealSolverFactory.newInstance();</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,34, // create a Brent solver to use
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,35, BrentSolver solver = factory.newBrentSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,36, </pre>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,38, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,40,ublic abstract class UnivariateRealSolverFactory {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,42, Default constructor.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,44,rotected UnivariateRealSolverFactory() {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,48, Create a new factory.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,49, @return a new factory.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,51,ublic static UnivariateRealSolverFactory newInstance() {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,52,eturn new UnivariateRealSolverFactoryImpl();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,56, Create a new {@link UnivariateRealSolver}.  The
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,57, actual solver returned is determined by the underlying factory.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,58, @return the new solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,60,ublic abstract UnivariateRealSolver newDefaultSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,63, Create a new {@link UnivariateRealSolver}.  The
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,64, solver is an implementation of the bisection method.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,65, @return the new solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,67,ublic abstract UnivariateRealSolver newBisectionSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,70, Create a new {@link UnivariateRealSolver}.  The
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,71, solver is an implementation of the Brent method.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,72, @return the new solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,74,ublic abstract UnivariateRealSolver newBrentSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,77, Create a new {@link UnivariateRealSolver}.  The
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,78, solver is an implementation of Newton's Method.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,79, @return the new solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,81,ublic abstract UnivariateRealSolver newNewtonSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,84, Create a new {@link UnivariateRealSolver}.  The
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,85, solver is an implementation of the secant method.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,86, @return the new solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.java,88,ublic abstract UnivariateRealSolver newSecantSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,17,ackage org.apache.commons.math.analysis.solvers;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,20, A concrete {@link  UnivariateRealSolverFactory}.  This is the default solver factory
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,21, used by commons-math.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,22, <p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,23, The default solver returned by this factory is a {@link BrentSolver}.</p>
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,25, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,27,ublic class UnivariateRealSolverFactoryImpl extends UnivariateRealSolverFactory {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,30, Default constructor.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,32,ublic UnivariateRealSolverFactoryImpl() {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,35,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,36,Override
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,37,ublic UnivariateRealSolver newDefaultSolver() {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,38,eturn newBrentSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,41,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,42,Override
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,43,ublic UnivariateRealSolver newBisectionSolver() {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,44,eturn new BisectionSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,47,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,48,Override
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,49,ublic UnivariateRealSolver newBrentSolver() {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,50,eturn new BrentSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,53,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,54,Override
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,55,ublic UnivariateRealSolver newNewtonSolver() {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,56,eturn new NewtonSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,59,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,60,Override
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,61,ublic UnivariateRealSolver newSecantSolver() {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.java,62,eturn new SecantSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,25,mport org.apache.commons.math.exception.NullArgumentException;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,31,* @deprecated in 2.2 (to be removed in 3.0). Please use
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,32,* {@link AbstractUnivariateRealSolver} instead.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,33,ublic abstract class UnivariateRealSolverImpl
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,34,xtends ConvergingAlgorithmImpl implements UnivariateRealSolver {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,34,@Deprecated
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java,35,public abstract class UnivariateRealSolverImpl extends ConvergingAlgorithmImpl {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,19,mport org.apache.commons.math.ConvergenceException;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,20,mport org.apache.commons.math.MathRuntimeException;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,23,mport org.apache.commons.math.exception.MathUserException;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,22,import org.apache.commons.math.exception.NoBracketingException;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,23,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,24,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,35, Default constructor.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,34,* Class contains only static methods.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,37,rivate UnivariateRealSolverUtils() {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,38,uper();
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,36,private UnivariateRealSolverUtils() {}
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,45, @param f the function.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,46, @param x0 the lower bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,47, @param x1 the upper bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,42,* @param function Function.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,43,* @param x0 Lower bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,44,* @param x1 Upper bound for the interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,49, @throws ConvergenceException if the iteration count was exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,50, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,52, specify a valid interval
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,47,* specify a valid interval.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,54,"ublic static double solve(UnivariateRealFunction f, double x0, double x1)"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,55,"hrows ConvergenceException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,56,etup(f);
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,57,"eturn LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,49,"public static double solve(UnivariateRealFunction function, double x0, double x1) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,50,if (function == null) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,51,throw new NullArgumentException(LocalizedFormats.FUNCTION);
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,53,final UnivariateRealSolver solver = new BrentSolver();
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,54,solver.setMaxEvaluations(Integer.MAX_VALUE);
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,55,"return solver.solve(function, x0, x1);"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,64, @param f the function
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,65, @param x0 the lower bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,66, @param x1 the upper bound for the interval
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,67, @param absoluteAccuracy the accuracy to be used by the solver
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,68, @return a value where the function is zero
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,69, @throws ConvergenceException if the iteration count is exceeded
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,70, @throws MathUserException if an error occurs evaluating the function
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,71," @throws IllegalArgumentException if f is null, the endpoints do not"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,72," specify a valid interval, or the absoluteAccuracy is not valid for the"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,73, default solver
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,62,* @param function Function.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,63,* @param x0 Lower bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,64,* @param x1 Upper bound for the interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,65,* @param absoluteAccuracy Accuracy to be used by the solver.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,66,* @return a value where the function is zero.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,67,"* @throws IllegalArgumentException if {@code function} is {@code null},"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,68,"* the endpoints do not specify a valid interval, or the absolute accuracy"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,69,* is not valid for the default solver.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,75,"ublic static double solve(UnivariateRealFunction f, double x0, double x1,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,76,"ouble absoluteAccuracy) throws ConvergenceException,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,77,athUserException {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,79,etup(f);
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,80,nivariateRealSolver solver = LazyHolder.FACTORY.newDefaultSolver();
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,81,olver.setAbsoluteAccuracy(absoluteAccuracy);
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,82,"eturn solver.solve(f, x0, x1);"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,71,"public static double solve(UnivariateRealFunction function,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,72,"double x0, double x1,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,73,double absoluteAccuracy) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,74,if (function == null) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,75,throw new NullArgumentException(LocalizedFormats.FUNCTION);
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,77,final UnivariateRealSolver solver = new BrentSolver(absoluteAccuracy);
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,78,solver.setMaxEvaluations(Integer.MAX_VALUE);
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,79,"return solver.solve(function, x0, x1);"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,113, @param function the function
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,114, @param initial initial midpoint of interval being expanded to
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,115, bracket a root
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,116, @param lowerBound lower bound (a is never lower than this value)
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,117, @param upperBound upper bound (b never is greater than this
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,118, value)
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,119," @return a two element array holding {a, b}"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,120, @throws ConvergenceException if a root can not be bracketted
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,121, @throws MathUserException if an error occurs evaluating the function
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,110,* @param function Function.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,111,* @param initial Initial midpoint of interval being expanded to
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,112,* bracket a root.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,113,* @param lowerBound Lower bound (a is never lower than this value)
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,114,* @param upperBound Upper bound (b never is greater than this
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,115,* value).
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,116,* @return a two-element array holding a and b.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,117,* @throws NoBracketingException if a root cannot be bracketted.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,123," is not positive, or initial is not between lowerBound and upperBound"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,119,"* is not positive, or initial is not between lowerBound and upperBound."
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,126,"ouble initial, double lowerBound, double upperBound)"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,127,"hrows ConvergenceException, MathUserException {"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,128,"eturn bracket( function, initial, lowerBound, upperBound,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,129,nteger.MAX_VALUE ) ;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,122,"double initial,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,123,"double lowerBound, double upperBound) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,124,"return bracket(function, initial, lowerBound, upperBound, Integer.MAX_VALUE);"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,151, @param function the function
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,152, @param initial initial midpoint of interval being expanded to
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,153, bracket a root
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,154, @param lowerBound lower bound (a is never lower than this value)
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,155, @param upperBound upper bound (b never is greater than this
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,156, value)
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,157, @param maximumIterations maximum number of iterations to perform
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,158," @return a two element array holding {a, b}."
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,159, @throws ConvergenceException if the algorithm fails to find a and b
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,160, satisfying the desired conditions
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,161, @throws MathUserException if an error occurs evaluating the function
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,146,* @param function Function.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,147,* @param initial Initial midpoint of interval being expanded to
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,148,* bracket a root.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,149,* @param lowerBound Lower bound (a is never lower than this value).
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,150,* @param upperBound Upper bound (b never is greater than this
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,151,* value).
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,152,* @param maximumIterations Maximum number of iterations to perform
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,153,* @return a two element array holding a and b.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,154,* @throws NoBracketingException if the algorithm fails to find a and b
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,155,* satisfying the desired conditions.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,163," is not positive, or initial is not between lowerBound and upperBound"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,157,"* is not positive, or initial is not between lowerBound and upperBound."
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,166,"ouble initial, double lowerBound, double upperBound,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,167,"nt maximumIterations) throws ConvergenceException,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,168,athUserException {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,160,"double initial,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,161,"double lowerBound, double upperBound,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,162,int maximumIterations)  {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,174,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,175,"ocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations);"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,177,f (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,178,hrow MathRuntimeException.createIllegalArgumentException(
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,179,"ocalizedFormats.INVALID_BRACKETING_PARAMETERS,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,180,"owerBound, initial, upperBound);"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,167,"throw new NotStrictlyPositiveException(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations);"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,169,"verifySequence(lowerBound, initial, upperBound);"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,186,nt numIterations = 0 ;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,175,int numIterations = 0;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,194,umIterations++ ;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,183,++numIterations;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,198,f (fa * fb > 0.0 ) {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,199,hrow new ConvergenceException(
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,200,"ocalizedFormats.FAILED_BRACKETING,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,201,"umIterations, maximumIterations, initial,"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,202,"owerBound, upperBound, a, b, fa, fb);"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,187,if (fa * fb > 0.0) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,188,"throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,189,"a, b, fa, fb,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,190,"numIterations, maximumIterations, initial,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,191,"lowerBound, upperBound);"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,205,"eturn new double[]{a, b};"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,194,"return new double[] {a, b};"
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,216,eturn (a + b) * .5;
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,205,return (a + b) * 0.5;
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,220," Checks to see if f is null, throwing IllegalArgumentException if so."
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,221, @param f  input function
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,222, @throws IllegalArgumentException if f is null
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,209,* Check whether the function takes opposite signs at the endpoints.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,211,* @param function Function.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,212,* @param lower Lower endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,213,* @param upper Upper endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,214,* @return {@code true} if the function values have opposite signs at the
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,215,* given points.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,224,rivate static void setup(UnivariateRealFunction f) {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,225,f (f == null) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,217,"public static boolean isBracketing(UnivariateRealFunction function,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,218,"final double lower,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,219,final double upper) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,220,if (function == null) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,223,final double fLo = function.value(lower);
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,224,final double fHi = function.value(upper);
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,225,return (fLo > 0 && fHi < 0) || (fLo < 0 && fHi > 0);
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,230,/ CHECKSTYLE: stop HideUtilityClassConstructor
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,231,** Holder for the factory.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,232, <p>We use here the Initialization On Demand Holder Idiom.</p>
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,229,* Check whether the arguments form a (strictly) increasing sequence.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,231,* @param start First number.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,232,* @param mid Second number.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,233,* @param end Third number.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,234,* @return {@code true} if the arguments form an increasing sequence.
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,234,rivate static class LazyHolder {
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,235,** Cached solver factory */
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,236,rivate static final UnivariateRealSolverFactory FACTORY = UnivariateRealSolverFactory.newInstance();
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,236,"public static boolean isSequence(final double start,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,237,"final double mid,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,238,final double end) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,239,return (start < mid) && (mid < end);
False,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,238,/ CHECKSTYLE: resume HideUtilityClassConstructor
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,243,* Check that the endpoints specify an interval.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,245,* @param lower Lower endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,246,* @param upper Upper endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,247,* @throws NumberIsTooLargeException if {@code lower >= upper}.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,249,"public static void verifyInterval(final double lower,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,250,final double upper) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,251,if (lower >= upper) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,252,"throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,253,"lower, upper, false);"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,258,* Check that {@code lower < initial < upper}.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,260,* @param lower Lower endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,261,* @param initial Initial value.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,262,* @param upper Upper endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,263,* @throws NumberIsTooLargeException if {@code lower >= initial} or
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,264,* {@code initial >= upper}.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,266,"public static void verifySequence(final double lower,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,267,"final double initial,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,268,final double upper) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,269,"verifyInterval(lower, initial);"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,270,"verifyInterval(initial, upper);"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,274,* Check that the endpoints specify an interval and the function takes
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,275,* opposite signs at the endpoints.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,277,* @param function Function.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,278,* @param lower Lower endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,279,* @param upper Upper endpoint.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,280,* @throws NoBracketingException if function has the same sign at the
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,281,* endpoints.
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,283,"public static void verifyBracketing(UnivariateRealFunction function,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,284,"final double lower,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,285,final double upper) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,286,if (function == null) {
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,287,throw new NullArgumentException(LocalizedFormats.FUNCTION);
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,289,"verifyInterval(lower, upper);"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,290,"if (!isBracketing(function, lower, upper)) {"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,291,"throw new NoBracketingException(lower, upper,"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,292,"function.value(lower),"
True,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java,293,function.value(upper));
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,21,mport org.apache.commons.math.ConvergenceException;
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,29,import org.apache.commons.math.exception.NumberIsTooLargeException;
False,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,109, catch (ConvergenceException ex) {
True,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java,109,} catch (NumberIsTooLargeException ex) {
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,17,package org.apache.commons.math.exception;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,19,import org.apache.commons.math.exception.util.Localizable;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,20,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,23,* Exception to be thrown when function values have the same sign at both
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,24,* ends of an interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,26,* @since 3.0
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,27,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,29,public class NoBracketingException extends MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,30,/** Serializable version Id. */
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,31,private static final long serialVersionUID = -3629324471511904459L;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,32,/** Lower end of the interval. */
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,33,private final double lo;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,34,/** Higher end of the interval. */
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,35,private final double hi;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,36,/** Value at lower end of the interval. */
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,37,private final double fLo;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,38,/** Value at higher end of the interval. */
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,39,private final double fHi;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,42,* Construct the exception.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,44,* @param lo Lower end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,45,* @param hi Higher end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,46,* @param fLo Value at lower end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,47,* @param fHi Value at higher end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,49,"public NoBracketingException(double lo, double hi,"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,50,"double fLo, double fHi) {"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,51,"this(null, lo, hi, fLo, fHi);"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,54,* Construct the exception with a specific context.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,56,* @param specific Contextual information on what caused the exception.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,57,* @param lo Lower end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,58,* @param hi Higher end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,59,* @param fLo Value at lower end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,60,* @param fHi Value at higher end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,62,"public NoBracketingException(Localizable specific,"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,63,"double lo, double hi,"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,64,"double fLo, double fHi) {"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,65,"super(specific, LocalizedFormats.SAME_SIGN_AT_ENDPOINTS, lo, hi, fLo, fHi);"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,66,this.lo = lo;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,67,this.hi = hi;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,68,this.fLo = fLo;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,69,this.fHi = fHi;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,72,* Construct the exception with a specific context.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,74,* @param specific Contextual information on what caused the exception.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,75,* @param lo Lower end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,76,* @param hi Higher end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,77,* @param fLo Value at lower end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,78,* @param fHi Value at higher end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,79,* @param args Additional arguments.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,81,"public NoBracketingException(Localizable specific,"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,82,"double lo, double hi,"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,83,"double fLo, double fHi,"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,84,Object ... args) {
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,85,"super(specific, LocalizedFormats.SAME_SIGN_AT_ENDPOINTS, lo, hi, fLo, fHi, args);"
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,86,this.lo = lo;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,87,this.hi = hi;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,88,this.fLo = fLo;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,89,this.fHi = fHi;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,93,* Get the lower end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,95,* @return the lower end.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,97,public double getLo() {
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,98,return lo;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,101,* Get the higher end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,103,* @return the higher end.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,105,public double getHi() {
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,106,return hi;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,109,* Get the value at the lower end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,111,* @return the value at the lower end.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,113,public double getFLo() {
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,114,return fLo;
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,117,* Get the value at the higher end of the interval.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,119,* @return the value at the higher end.
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,121,public double getFHi() {
True,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,src/main/java/org/apache/commons/math/exception/NoBracketingException.java,122,return fHi;
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,101,"AILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,101,"FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,266,"POLYNOMIAL(""polynomial""), /* keep */"
False,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,255,"inal BrentSolver solver = new BrentSolver(maxIterationCount, convergence);"
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,255,final BrentSolver solver = new BrentSolver(convergence);
True,src/main/java/org/apache/commons/math/ode/events/EventState.java,src/main/java/org/apache/commons/math/ode/events/EventState.java,256,solver.setMaxEvaluations(maxIterationCount);
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,112,"inal double[] observations, final double[] weights)"
False,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,113,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java,112,"final double[] observations, final double[] weights) {"
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,21,mport org.apache.commons.math.optimization.OptimizationException;
False,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,89, It will call {@link CurveFitter#fit()}.
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,88,* It will call the base class
True,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java,89,"* {@link CurveFitter#fit(ParametricRealFunction,double[]) fit} method."
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,80,* @throws OptimizationException
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,100," @param x {@code x} value to be used as constant in {@code f(a, b, c, d)}."
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,101," @param parameters values of {@code a}, {@code b}, {@code c}, and"
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,102," {@code d} for computation of gradient vector of {@code f(a, b, c, d)}."
False,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,103," @return the gradient vector of {@code f(a, b, c, d)}."
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,100,"* @param x Value to be used as constant in {@code f(x, a, b, c, d)}."
True,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java,102,"* @return the gradient vector of {@code f(a, b, c, d)}."
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,20,mport org.apache.commons.math.exception.MathUserException;
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,101, @throws MathUserException if users jacobian function throws one
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,100,* @throws org.apache.commons.math.exception.MathUserException if the jacobian
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,101,* function throws one.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,103,rotected void updateJacobian() throws MathUserException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,103,protected void updateJacobian() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,129,rotected void updateResidualsAndCost() throws MathUserException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,129,protected void updateResidualsAndCost() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,179, @throws MathUserException if jacobian function throws one
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,179,* @throws org.apache.commons.math.exception.MathUserException if the jacobian
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,180,* function throws one.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,181,ublic double[][] getCovariances() throws MathUserException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,182,public double[][] getCovariances() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,214, @throws MathUserException if jacobian function throws one
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,215,* @throws org.apache.commons.math.exception.MathUserException if the jacobian
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,216,* function throws one.
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,216,ublic double[] guessParametersErrors() throws MathUserException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,218,public double[] guessParametersErrors() {
False,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,234,inal double[] startPoint) throws MathUserException {
True,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java,236,final double[] startPoint) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,21,mport org.apache.commons.math.exception.ConvergenceException;
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,89,his.solver = lineSearchSolver;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,87,solver = lineSearchSolver;
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,88,solver.setMaxEvaluations(getMaxEvaluations());
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,118,solver.setMaxEvaluations(getMaxEvaluations());
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,161,ry {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,162,"inal double step = solver.solve(lsf, 0, findUpperBound(lsf, 0, initialStep));"
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,164,/ Validate new point.
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,165,or (int i = 0; i < point.length; ++i) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,166,oint[i] += step * searchDirection[i];
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,168, catch (org.apache.commons.math.ConvergenceException e) {
False,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,169,hrow new ConvergenceException(); // XXX ugly workaround.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,161,"final double uB = findUpperBound(lsf, 0, initialStep);"
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,162,// XXX Last parameters is set to a value clode to zero in order to
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,163,"// work around the divergence problem in the ""testCircleFitting"""
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,164,// unit test (see MATH-439).
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,165,"final double step = solver.solve(lsf, 0, uB, 1e-15);"
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,167,// Validate new point.
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,168,for (int i = 0; i < point.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java,169,point[i] += step * searchDirection[i];
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,25,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,24,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,30,ublic final class BisectionSolverTest extends TestCase {
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,32,ublic void testSinZero() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,29,public final class BisectionSolverTest {
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,30,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,31,public void testSinZero() {
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,36,nivariateRealSolver solver = new BisectionSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,35,BisectionSolver solver = new BisectionSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,36,solver.setMaxEvaluations(50);
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,38,"ssertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,38,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,41,"ssertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,41,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,44,ublic void testQuinticZero() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,44,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,45,public void testQuinticZero() {
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,48,nivariateRealSolver solver = new BisectionSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,49,BisectionSolver solver = new BisectionSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,50,solver.setMaxEvaluations(50);
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,50,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,52,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,53,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,55,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,56,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,58,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,59,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,61,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,62,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,64,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,65,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,67,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,68,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,70,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,71,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,73,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,74,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,76,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,77,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,79,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,80,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,82,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,82,"ssertEquals(result, solver.getResult(), 0);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,83,ssertTrue(solver.getIterationCount() > 0);
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,84,Assert.assertTrue(solver.getEvaluations() > 0);
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,87,@Test
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,88,nivariateRealSolver solver = new BisectionSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,89,"ssertEquals(FastMath.PI, solver.solve(f, 3.0, 3.2, 3.1), solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,95,ublic void testSetFunctionValueAccuracy(){
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,96,ouble expected = 1.0e-2;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,97,nivariateRealSolver solver = new BisectionSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,98,olver.setFunctionValueAccuracy(expected);
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,99,"ssertEquals(expected, solver.getFunctionValueAccuracy(), 1.0e-2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,105,ublic void testResetFunctionValueAccuracy(){
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,106,ouble newValue = 1.0e-2;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,107,nivariateRealSolver solver = new BisectionSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,108,ouble oldValue = solver.getFunctionValueAccuracy();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,109,olver.setFunctionValueAccuracy(newValue);
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,110,olver.resetFunctionValueAccuracy();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,111,"ssertEquals(oldValue, solver.getFunctionValueAccuracy(), 1.0e-2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,117,ublic void testSetAbsoluteAccuracy(){
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,118,ouble expected = 1.0e-2;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,119,nivariateRealSolver solver = new BisectionSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,120,olver.setAbsoluteAccuracy(expected);
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,121,"ssertEquals(expected, solver.getAbsoluteAccuracy(), 1.0e-2);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,90,BisectionSolver solver = new BisectionSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,91,solver.setMaxEvaluations(40);
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,92,"Assert.assertEquals(FastMath.PI, solver.solve(f, 3.0, 3.2, 3.1), solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,127,ublic void testResetAbsoluteAccuracy(){
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,128,ouble newValue = 1.0e-2;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,129,nivariateRealSolver solver = new BisectionSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,130,ouble oldValue = solver.getAbsoluteAccuracy();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,131,olver.setAbsoluteAccuracy(newValue);
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,132,olver.resetAbsoluteAccuracy();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,133,"ssertEquals(oldValue, solver.getAbsoluteAccuracy(), 1.0e-2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,139,ublic void testSetMaximalIterationCount(){
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,98,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,99,public void testSetMaximalEvaluationCount(){
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,141,nivariateRealSolver solver = new BisectionSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,142,olver.setMaximalIterationCount(expected);
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,143,"ssertEquals(expected, solver.getMaximalIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,149,ublic void testResetMaximalIterationCount(){
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,150,nt newValue = 10000;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,151,nivariateRealSolver solver = new BisectionSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,152,nt oldValue = solver.getMaximalIterationCount();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,153,olver.setMaximalIterationCount(newValue);
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,154,olver.resetMaximalIterationCount();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,155,"ssertEquals(oldValue, solver.getMaximalIterationCount());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,101,BisectionSolver solver = new BisectionSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,102,solver.setMaxEvaluations(expected);
True,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,103,"Assert.assertEquals(expected, solver.getMaxEvaluations());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,161,ublic void testSetRelativeAccuracy(){
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,162,ouble expected = 1.0e-2;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,163,nivariateRealSolver solver = new BisectionSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,164,olver.setRelativeAccuracy(expected);
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,165,"ssertEquals(expected, solver.getRelativeAccuracy(), 1.0e-2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,171,ublic void testResetRelativeAccuracy(){
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,172,ouble newValue = 1.0e-2;
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,173,nivariateRealSolver solver = new BisectionSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,174,ouble oldValue = solver.getRelativeAccuracy();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,175,olver.setRelativeAccuracy(newValue);
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,176,olver.resetRelativeAccuracy();
False,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,177,"ssertEquals(oldValue, solver.getRelativeAccuracy(), 1.0e-2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,19,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,21,mport org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,25,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,29, Testcase for UnivariateRealSolver.
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,28,* Testcase for {@link BrentSolver Brent} solver.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,39,ublic final class BrentSolverTest extends TestCase {
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,41,ublic BrentSolverTest(String name) {
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,42,uper(name);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,45,ublic void testSinZero() throws MathException {
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,46,/ The sinus function is behaved well around the root at #pi. The second
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,38,public final class BrentSolverTest {
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,39,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,40,public void testSinZero() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,41,// The sinus function is behaved well around the root at pi. The second
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,47,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,54,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,55,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,56,"ssertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,57,/ 4 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,58,ssertTrue(solver.getIterationCount() <= 5);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,50,// System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,51,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,52,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,53,Assert.assertTrue(solver.getEvaluations() <= 7);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,61,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,62,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,63,"ssertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,64,/ 5 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,65,ssertTrue(solver.getIterationCount() <= 6);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,66,olver = new SecantSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,67,"esult = solver.solve(f, 3, 4);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,68,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,69,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,70,"ssertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,71,/ 4 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,72,ssertTrue(solver.getIterationCount() <= 5);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,73,"esult = solver.solve(f, 1, 4);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,74,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,75,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,76,"ssertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,77,/ 5 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,78,ssertTrue(solver.getIterationCount() <= 6);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,79,"ssertEquals(result, solver.getResult(), 0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,56,// System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,57,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,58,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,59,Assert.assertTrue(solver.getEvaluations() <= 8);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,82,ublic void testQuinticZero() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,62,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,63,public void testQuinticZero() {
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,75,solver.setMaxEvaluations(20);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,98,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,99,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,100,ssertTrue(solver.getIterationCount() <= 2);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,80,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,81,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,82,Assert.assertTrue(solver.getEvaluations() <= 3);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,105,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,106,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,87,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,88,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,108,ssertTrue(solver.getIterationCount() <= 6);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,90,Assert.assertTrue(solver.getEvaluations() <= 7);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,112,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,113,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,94,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,95,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,115,ssertTrue(solver.getIterationCount() <= 7);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,97,Assert.assertTrue(solver.getEvaluations() <= 8);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,119,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,120,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,101,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,102,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,122,ssertTrue(solver.getIterationCount() <= 7);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,104,Assert.assertTrue(solver.getEvaluations() <= 9);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,125,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,126,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,127,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,128,/ 6 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,129,ssertTrue(solver.getIterationCount() <= 7);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,107,// System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,108,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,109,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,110,Assert.assertTrue(solver.getEvaluations() <= 10);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,133,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,134,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,135,/ 8 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,136,ssertTrue(solver.getIterationCount() <= 9);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,114,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,115,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,116,Assert.assertTrue(solver.getEvaluations() <= 11);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,141,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,142,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,143,/ 8 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,144,ssertTrue(solver.getIterationCount() <= 9);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,121,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,122,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,123,Assert.assertTrue(solver.getEvaluations() <= 11);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,148,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,149,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,150,/ 8 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,151,ssertTrue(solver.getIterationCount() <= 9);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,127,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,128,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,129,Assert.assertTrue(solver.getEvaluations() <= 11);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,155,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,156,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,157,/ 10 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,158,ssertTrue(solver.getIterationCount() <= 11);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,133,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,134,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,135,Assert.assertTrue(solver.getEvaluations() <= 13);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,162,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,163,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,164,/ 7 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,165,ssertTrue(solver.getIterationCount() <= 8);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,139,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,140,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,141,Assert.assertTrue(solver.getEvaluations() <= 10);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,169,"/     ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,170,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,171,/ 12 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,172,ssertTrue(solver.getIterationCount() <= 13);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,173,/ Secant solver.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,174,olver = new SecantSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,175,"esult = solver.solve(f, -0.2, 0.2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,176,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,177,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,178,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,179,/ 1 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,180,ssertTrue(solver.getIterationCount() <= 2);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,181,"esult = solver.solve(f, -0.1, 0.3);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,182,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,183,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,184,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,185,/ 5 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,186,ssertTrue(solver.getIterationCount() <= 6);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,187,"esult = solver.solve(f, -0.3, 0.45);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,188,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,189,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,190,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,191,/ 6 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,192,ssertTrue(solver.getIterationCount() <= 7);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,193,"esult = solver.solve(f, 0.3, 0.7);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,194,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,195,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,196,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,197,/ 7 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,198,ssertTrue(solver.getIterationCount() <= 8);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,199,"esult = solver.solve(f, 0.2, 0.6);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,200,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,201,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,202,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,203,/ 6 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,204,ssertTrue(solver.getIterationCount() <= 7);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,205,"esult = solver.solve(f, 0.05, 0.95);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,206,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,207,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,208,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,209,/ 8 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,210,ssertTrue(solver.getIterationCount() <= 9);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,211,"esult = solver.solve(f, 0.85, 1.25);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,212,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,213,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,214,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,215,/ 10 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,216,ssertTrue(solver.getIterationCount() <= 11);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,217,"esult = solver.solve(f, 0.8, 1.2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,218,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,219,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,220,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,221,/ 8 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,222,ssertTrue(solver.getIterationCount() <= 9);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,223,"esult = solver.solve(f, 0.85, 1.75);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,224,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,225,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,226,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,227,/ 14 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,228,ssertTrue(solver.getIterationCount() <= 15);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,229,/ The followig is especially slow because the solver first has to reduce
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,230,"/ the bracket to exclude the extremum. After that, convergence is rapide."
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,231,"esult = solver.solve(f, 0.55, 1.45);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,232,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,233,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,234,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,235,/ 7 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,236,ssertTrue(solver.getIterationCount() <= 8);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,237,"esult = solver.solve(f, 0.85, 5);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,238,/System.out.println(
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,239,"/    ""Root: "" + result + "" Iterations: "" + solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,240,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,241,/ 14 iterations on i586 JDK 1.4.1.
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,242,ssertTrue(solver.getIterationCount() <= 15);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,243,/ Static solve method
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,244,"esult = UnivariateRealSolverUtils.solve(f, -0.2, 0.2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,245,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,246,"esult = UnivariateRealSolverUtils.solve(f, -0.1, 0.3);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,247,"ssertEquals(result, 0, 1E-8);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,248,"esult = UnivariateRealSolverUtils.solve(f, -0.3, 0.45);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,249,"ssertEquals(result, 0, 1E-6);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,250,"esult = UnivariateRealSolverUtils.solve(f, 0.3, 0.7);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,251,"ssertEquals(result, 0.5, 1E-6);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,252,"esult = UnivariateRealSolverUtils.solve(f, 0.2, 0.6);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,253,"ssertEquals(result, 0.5, 1E-6);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,254,"esult = UnivariateRealSolverUtils.solve(f, 0.05, 0.95);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,255,"ssertEquals(result, 0.5, 1E-6);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,256,"esult = UnivariateRealSolverUtils.solve(f, 0.85, 1.25);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,257,"ssertEquals(result, 1.0, 1E-6);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,258,"esult = UnivariateRealSolverUtils.solve(f, 0.8, 1.2);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,259,"ssertEquals(result, 1.0, 1E-6);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,260,"esult = UnivariateRealSolverUtils.solve(f, 0.85, 1.75);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,261,"ssertEquals(result, 1.0, 1E-6);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,262,"esult = UnivariateRealSolverUtils.solve(f, 0.55, 1.45);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,263,"ssertEquals(result, 1.0, 1E-6);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,264,"esult = UnivariateRealSolverUtils.solve(f, 0.85, 5);"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,265,"ssertEquals(result, 1.0, 1E-6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,145,"//     ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,146,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,147,Assert.assertTrue(solver.getEvaluations() <= 15);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,268,ublic void testRootEndpoints() throws Exception {
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,150,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,151,public void testRootEndpoints() {
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,270,nivariateRealSolver solver = new BrentSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,153,BrentSolver solver = new BrentSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,154,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,274,"ssertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,158,"Assert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,277,"ssertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,161,"Assert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,280,"ssertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,164,"Assert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,283,"ssertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,167,"Assert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,287,ublic void testBadEndpoints() throws Exception {
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,171,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,172,public void testBadEndpoints() {
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,289,nivariateRealSolver solver = new BrentSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,174,BrentSolver solver = new BrentSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,175,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,292,"ail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,178,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,298,"ail(""Expecting IllegalArgumentException - non-bracketing"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,184,"Assert.fail(""Expecting IllegalArgumentException - non-bracketing"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,304,"ail(""Expecting IllegalArgumentException - non-bracketing"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,190,"Assert.fail(""Expecting IllegalArgumentException - non-bracketing"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,310,ublic void testInitialGuess() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,196,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,197,public void testInitialGuess() {
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,313,nivariateRealSolver solver = new BrentSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,199,BrentSolver solver = new BrentSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,200,solver.setMaxEvaluations(20);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,318,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,205,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,320,ssertTrue(referenceCallsCount >= 13);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,207,Assert.assertTrue(referenceCallsCount >= 13);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,325,"ail(""an IllegalArgumentException was expected"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,212,"Assert.fail(""an IllegalArgumentException was expected"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,333,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,334,ssertTrue(f.getCallsCount() > referenceCallsCount);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,220,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,221,Assert.assertTrue(f.getCallsCount() > referenceCallsCount);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,339,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,340,ssertTrue(f.getCallsCount() < referenceCallsCount);
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,226,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,227,Assert.assertTrue(f.getCallsCount() < referenceCallsCount);
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,345,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,346,"ssertEquals(0, solver.getIterationCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,347,"ssertEquals(1, f.getCallsCount());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,232,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,233,"Assert.assertEquals(1, solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,234,"Assert.assertEquals(1, f.getCallsCount());"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,26,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,26,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,27,import org.junit.Ignore;
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,38,ublic final class LaguerreSolverTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,39,public final class LaguerreSolverTest {
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,43,ublic void testLinearFunction() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,43,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,44,public void testLinearFunction() {
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,49,nivariateRealSolver solver = new LaguerreSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,50,LaguerreSolver solver = new LaguerreSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,51,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,55,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,57,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,61,ublic void testQuadraticFunction() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,63,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,64,public void testQuadraticFunction() {
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,67,nivariateRealSolver solver = new LaguerreSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,70,LaguerreSolver solver = new LaguerreSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,71,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,73,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,77,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,79,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,83,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,85,ublic void testQuinticFunction() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,89,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,90,public void testQuinticFunction() {
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,91,nivariateRealSolver solver = new LaguerreSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,96,LaguerreSolver solver = new LaguerreSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,97,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,97,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,103,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,103,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,109,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,109,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,115,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,120,"* XXX commented out because ""solveAll"" is not part of the API."
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,115,ublic void testQuinticFunction2() throws MathException {
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,116,"ouble initial = 0.0, tolerance;"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,117,"omplex expected, result[];"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,119,/ p(x) = x^5 + 4x^3 + x^2 + 4 = (x+1)(x^2-x+1)(x^2+4)
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,120,"ouble coefficients[] = { 4.0, 0.0, 1.0, 4.0, 0.0, 1.0 };"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,121,aguerreSolver solver = new LaguerreSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,122,"esult = solver.solveAll(coefficients, initial);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,124,"xpected = new Complex(0.0, -2.0);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,125,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,126,astMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,127,"estUtils.assertContains(result, expected, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,129,"xpected = new Complex(0.0, 2.0);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,130,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,131,astMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,132,"estUtils.assertContains(result, expected, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,134,"xpected = new Complex(0.5, 0.5 * FastMath.sqrt(3.0));"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,135,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,136,astMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,137,"estUtils.assertContains(result, expected, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,139,"xpected = new Complex(-1.0, 0.0);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,140,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,141,astMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,142,"estUtils.assertContains(result, expected, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,144,"xpected = new Complex(0.5, -0.5 * FastMath.sqrt(3.0));"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,145,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,146,astMath.abs(expected.abs() * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,147,"estUtils.assertContains(result, expected, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,122,// public void testQuinticFunction2() {
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,123,"//     double initial = 0.0, tolerance;"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,124,"//     Complex expected, result[];"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,126,//     // p(x) = x^5 + 4x^3 + x^2 + 4 = (x+1)(x^2-x+1)(x^2+4)
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,127,"//     double coefficients[] = { 4.0, 0.0, 1.0, 4.0, 0.0, 1.0 };"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,128,//     LaguerreSolver solver = new LaguerreSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,129,"//     result = solver.solveAll(coefficients, initial);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,131,"//     expected = new Complex(0.0, -2.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,132,"//     tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,133,//                 FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,134,"//     TestUtils.assertContains(result, expected, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,136,"//     expected = new Complex(0.0, 2.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,137,"//     tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,138,//                 FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,139,"//     TestUtils.assertContains(result, expected, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,141,"//     expected = new Complex(0.5, 0.5 * FastMath.sqrt(3.0));"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,142,"//     tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,143,//                 FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,144,"//     TestUtils.assertContains(result, expected, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,146,"//     expected = new Complex(-1.0, 0.0);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,147,"//     tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,148,//                 FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,149,"//     TestUtils.assertContains(result, expected, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,151,"//     expected = new Complex(0.5, -0.5 * FastMath.sqrt(3.0));"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,152,"//     tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,153,//                 FastMath.abs(expected.abs() * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,154,"//     TestUtils.assertContains(result, expected, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,153,ublic void testParameters() throws Exception {
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,160,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,161,public void testParameters() {
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,156,nivariateRealSolver solver = new LaguerreSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,164,LaguerreSolver solver = new LaguerreSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,165,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,161,"ail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,170,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,168,"ail(""Expecting IllegalArgumentException - no bracketing"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,169, catch (IllegalArgumentException ex) {
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,170,/ expected
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,172,ry {
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,173,/ bad function
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,174,"olver.solve(new SinFunction(), -1, 1);"
False,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,175,"ail(""Expecting IllegalArgumentException - bad function"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/LaguerreSolverTest.java,177,"Assert.fail(""Expecting IllegalArgumentException - no bracketing"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,17,package org.apache.commons.math.analysis.solvers;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,19,import org.apache.commons.math.analysis.Expm1Function;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,20,import org.apache.commons.math.analysis.QuinticFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,21,import org.apache.commons.math.analysis.SinFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,22,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,23,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,24,import org.apache.commons.math.exception.NoBracketingException;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,25,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,27,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,30,* Testcase for {@link MullerSolver2 Muller} solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,31,* <p>
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,32,"* Muller's method converges almost quadratically near roots, but it can"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,33,* be very slow in regions far away from zeros. Test runs show that for
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,34,"* reasonably good initial values, for a default absolute accuracy of 1E-6,"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,35,* it generally takes 5 to 10 iterations for the solver to converge.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,36,* <p>
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,37,* Tests for the exponential function illustrate the situations where
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,38,* Muller solver performs poorly.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,40,"* @version $Revision: 1034896 $ $Date: 2010-11-13 23:27:34 +0100 (Sat, 13 Nov 2010) $"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,42,public final class MullerSolver2Test {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,44,* Test of solver for the sine function.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,46,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,47,public void testSinFunction() {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,48,UnivariateRealFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,49,UnivariateRealSolver solver = new MullerSolver2();
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,50,solver.setMaxEvaluations(10);
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,51,"double min, max, expected, result, tolerance;"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,53,min = 3.0; max = 4.0; expected = FastMath.PI;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,54,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,55,FastMath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,56,"result = solver.solve(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,57,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,59,min = -1.0; max = 1.5; expected = 0.0;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,60,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,61,FastMath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,62,"result = solver.solve(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,63,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,67,* Test of solver for the quintic function.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,69,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,70,public void testQuinticFunction() {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,71,UnivariateRealFunction f = new QuinticFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,72,UnivariateRealSolver solver = new MullerSolver2();
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,73,solver.setMaxEvaluations(10);
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,74,"double min, max, expected, result, tolerance;"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,76,min = -0.4; max = 0.2; expected = 0.0;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,77,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,78,FastMath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,79,"result = solver.solve(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,80,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,82,min = 0.75; max = 1.5; expected = 1.0;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,83,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,84,FastMath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,85,"result = solver.solve(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,86,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,88,min = -0.9; max = -0.2; expected = -0.5;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,89,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,90,FastMath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,91,"result = solver.solve(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,92,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,96,* Test of solver for the exponential function.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,97,* <p>
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,98,* It takes 25 to 50 iterations for the last two tests to converge.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,100,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,101,public void testExpm1Function() {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,102,UnivariateRealFunction f = new Expm1Function();
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,103,UnivariateRealSolver solver = new MullerSolver2();
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,104,solver.setMaxEvaluations(55);
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,105,"double min, max, expected, result, tolerance;"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,107,min = -1.0; max = 2.0; expected = 0.0;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,108,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,109,FastMath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,110,"result = solver.solve(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,111,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,113,min = -20.0; max = 10.0; expected = 0.0;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,114,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,115,FastMath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,116,"result = solver.solve(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,117,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,119,min = -50.0; max = 100.0; expected = 0.0;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,120,"tolerance = FastMath.max(solver.getAbsoluteAccuracy(),"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,121,FastMath.abs(expected * solver.getRelativeAccuracy()));
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,122,"result = solver.solve(f, min, max);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,123,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,127,* Test of parameters for the solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,129,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,130,public void testParameters() throws Exception {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,131,UnivariateRealFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,132,UnivariateRealSolver solver = new MullerSolver2();
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,133,solver.setMaxEvaluations(10);
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,135,try {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,136,// bad interval
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,137,"solver.solve(f, 1, -1);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,138,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,139,} catch (NumberIsTooLargeException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,140,// expected
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,142,try {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,143,// no bracketing
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,144,"solver.solve(f, 2, 3);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,145,"Assert.fail(""Expecting IllegalArgumentException - no bracketing"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,146,} catch (NoBracketingException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolver2Test.java,147,// expected
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,19,mport org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,23,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,24,import org.apache.commons.math.exception.NoBracketingException;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,26,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,27,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,29, Testcase for Muller solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,30,* Testcase for {@link MullerSolver Muller} solver.
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,41,ublic final class MullerSolverTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,42,public final class MullerSolverTest {
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,46,ublic void testSinFunction() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,46,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,47,public void testSinFunction() {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,50,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,55,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,57,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,61,"ssertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,65, Test of solver for the sine function using solve2().
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,67,ublic void testSinFunction2() throws MathException {
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,68,nivariateRealFunction f = new SinFunction();
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,69,ullerSolver solver = new MullerSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,70,"ouble min, max, expected, result, tolerance;"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,72,in = 3.0; max = 4.0; expected = FastMath.PI;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,73,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,74,astMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,75,"esult = solver.solve2(f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,76,"ssertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,78,in = -1.0; max = 1.5; expected = 0.0;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,79,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,80,astMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,81,"esult = solver.solve2(f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,82,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,63,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,88,ublic void testQuinticFunction() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,69,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,70,public void testQuinticFunction() {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,73,solver.setMaxEvaluations(15);
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,97,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,80,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,103,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,86,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,109,"ssertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,113, Test of solver for the quintic function using solve2().
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,115,ublic void testQuinticFunction2() throws MathException {
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,116,nivariateRealFunction f = new QuinticFunction();
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,117,ullerSolver solver = new MullerSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,118,"ouble min, max, expected, result, tolerance;"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,120,in = -0.4; max = 0.2; expected = 0.0;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,121,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,122,astMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,123,"esult = solver.solve2(f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,124,"ssertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,126,in = 0.75; max = 1.5; expected = 1.0;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,127,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,128,astMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,129,"esult = solver.solve2(f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,130,"ssertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,132,in = -0.9; max = -0.2; expected = -0.5;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,133,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,134,astMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,135,"esult = solver.solve2(f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,136,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,92,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,146,ublic void testExpm1Function() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,102,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,103,public void testExpm1Function() {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,106,solver.setMaxEvaluations(25);
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,155,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,113,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,161,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,119,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,167,"ssertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,171, Test of solver for the exponential function using solve2().
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,172, <p>
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,173, It takes 25 to 50 iterations for the last two tests to converge.
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,175,ublic void testExpm1Function2() throws MathException {
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,176,nivariateRealFunction f = new Expm1Function();
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,177,ullerSolver solver = new MullerSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,178,"ouble min, max, expected, result, tolerance;"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,180,in = -1.0; max = 2.0; expected = 0.0;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,181,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,182,astMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,183,"esult = solver.solve2(f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,184,"ssertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,186,in = -20.0; max = 10.0; expected = 0.0;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,187,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,188,astMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,189,"esult = solver.solve2(f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,190,"ssertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,192,in = -50.0; max = 100.0; expected = 0.0;
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,193,"olerance = FastMath.max(solver.getAbsoluteAccuracy(),"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,194,astMath.abs(expected * solver.getRelativeAccuracy()));
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,195,"esult = solver.solve2(f, min, max);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,196,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,125,"Assert.assertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,131,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,135,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,208,"olver.solve(f, 1, -1);"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,209,"ail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,210, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,139,"double root = solver.solve(f, 1, -1);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,140,"System.out.println(""root="" + root);"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,141,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,142,} catch (NumberIsTooLargeException ex) {
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,216,"ail(""Expecting IllegalArgumentException - no bracketing"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,217, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,148,"Assert.fail(""Expecting IllegalArgumentException - no bracketing"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/MullerSolverTest.java,149,} catch (NoBracketingException ex) {
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,19,mport org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,23,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,24,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,26,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,31,ublic final class NewtonSolverTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,30,public final class NewtonSolverTest {
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,36,ublic void testSinZero() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,34,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,35,public void testSinZero() {
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,40,nivariateRealSolver solver = new NewtonSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,39,NewtonSolver solver = new NewtonSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,40,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,42,"ssertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,42,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,45,"ssertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,45,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,47,"ssertEquals(result, solver.getResult(), 0);"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,48,ssertTrue(solver.getIterationCount() > 0);
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,47,Assert.assertTrue(solver.getEvaluations() > 0);
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,54,ublic void testQuinticZero() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,53,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,54,public void testQuinticZero() {
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,58,nivariateRealSolver solver = new NewtonSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,58,NewtonSolver solver = new NewtonSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,59,solver.setMaxEvaluations(30);
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,60,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,61,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,63,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,64,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,66,"ssertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,67,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,69,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,70,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,72,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,73,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,75,"ssertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,76,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,78,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,79,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,81,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,82,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,84,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,85,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,87,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,88,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,90,"ssertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/NewtonSolverTest.java,91,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,26,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,24,import org.apache.commons.math.exception.NoBracketingException;
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,25,import org.apache.commons.math.exception.NumberIsTooLargeException;
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,26,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,27,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,29, Testcase for Ridders solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,30,* Testcase for {@link RiddersSolver Ridders} solver.
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,39,ublic final class RiddersSolverTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,40,public final class RiddersSolverTest {
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,44,ublic void testSinFunction() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,44,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,45,public void testSinFunction() {
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,48,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,53,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,55,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,59,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,61,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,65,ublic void testQuinticFunction() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,67,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,68,public void testQuinticFunction() {
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,71,solver.setMaxEvaluations(15);
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,74,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,78,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,80,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,84,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,86,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,90,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,92,ublic void testExpm1Function() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,96,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,97,public void testExpm1Function() {
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,100,solver.setMaxEvaluations(20);
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,101,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,107,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,107,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,113,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,113,"ssertEquals(expected, result, tolerance);"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,119,"Assert.assertEquals(expected, result, tolerance);"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,119,ublic void testParameters() throws Exception {
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,125,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,126,public void testParameters() {
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,129,solver.setMaxEvaluations(10);
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,126,"ail(""Expecting IllegalArgumentException - bad interval"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,127, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,134,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,135,} catch (NumberIsTooLargeException ex) {
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,133,"ail(""Expecting IllegalArgumentException - no bracketing"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,134, catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,141,"Assert.fail(""Expecting IllegalArgumentException - no bracketing"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/RiddersSolverTest.java,142,} catch (NoBracketingException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,17,package org.apache.commons.math.analysis.solvers;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,19,import org.apache.commons.math.analysis.MonitoredFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,20,import org.apache.commons.math.analysis.QuinticFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,21,import org.apache.commons.math.analysis.SinFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,22,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,23,import org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,24,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,25,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,28,* Testcase for {@link SecantSolver}.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,30,"* @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,32,public final class SecantSolverTest {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,33,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,34,public void testSinZero() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,35,// The sinus function is behaved well around the root at pi. The second
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,36,"// order derivative is zero, which means linar approximating methods will"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,37,// still converge quadratically.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,38,UnivariateRealFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,39,double result;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,40,UnivariateRealSolver solver = new SecantSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,41,solver.setMaxEvaluations(10);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,43,"result = solver.solve(f, 3, 4);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,44,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,45,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,46,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,47,Assert.assertTrue(solver.getEvaluations() <= 6);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,48,"result = solver.solve(f, 1, 4);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,49,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,50,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,51,"Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,52,Assert.assertTrue(solver.getEvaluations() <= 7);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,55,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,56,public void testQuinticZero() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,57,"// The quintic function has zeros at 0, +-0.5 and +-1."
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,58,"// Around the root of 0 the function is well behaved, with a second derivative"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,59,// of zero a 0.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,60,"// The other roots are less well to find, in particular the root at 1, because"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,61,// the function grows fast for x>1.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,62,"// The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,63,// intervals containing these values are harder for the solvers.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,64,UnivariateRealFunction f = new QuinticFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,65,double result;
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,66,// Brent-Dekker solver.
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,67,UnivariateRealSolver solver = new SecantSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,68,solver.setMaxEvaluations(20);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,69,"result = solver.solve(f, -0.2, 0.2);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,70,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,71,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,72,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,73,Assert.assertTrue(solver.getEvaluations() <= 3);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,74,"result = solver.solve(f, -0.1, 0.3);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,75,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,76,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,77,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,78,Assert.assertTrue(solver.getEvaluations() <= 7);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,79,"result = solver.solve(f, -0.3, 0.45);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,80,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,81,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,82,"Assert.assertEquals(result, 0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,83,Assert.assertTrue(solver.getEvaluations() <= 8);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,84,"result = solver.solve(f, 0.3, 0.7);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,85,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,86,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,87,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,88,Assert.assertTrue(solver.getEvaluations() <= 9);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,89,"result = solver.solve(f, 0.2, 0.6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,90,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,91,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,92,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,93,Assert.assertTrue(solver.getEvaluations() <= 8);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,94,"result = solver.solve(f, 0.05, 0.95);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,95,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,96,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,97,"Assert.assertEquals(result, 0.5, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,98,Assert.assertTrue(solver.getEvaluations() <= 10);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,99,"result = solver.solve(f, 0.85, 1.25);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,100,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,101,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,102,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,103,Assert.assertTrue(solver.getEvaluations() <= 12);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,104,"result = solver.solve(f, 0.8, 1.2);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,105,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,106,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,107,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,108,Assert.assertTrue(solver.getEvaluations() <= 10);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,109,"result = solver.solve(f, 0.85, 1.75);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,110,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,111,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,112,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,113,Assert.assertTrue(solver.getEvaluations() <= 16);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,114,// The followig is especially slow because the solver first has to reduce
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,115,"// the bracket to exclude the extremum. After that, convergence is rapide."
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,116,"result = solver.solve(f, 0.55, 1.45);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,117,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,118,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,119,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,120,Assert.assertTrue(solver.getEvaluations() <= 9);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,121,"result = solver.solve(f, 0.85, 5);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,122,//System.out.println(
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,123,"//    ""Root: "" + result + "" Evaluations: "" + solver.getEvaluations());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,124,"Assert.assertEquals(result, 1.0, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,125,Assert.assertTrue(solver.getEvaluations() <= 16);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,128,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,129,public void testRootEndpoints() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,130,UnivariateRealFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,131,SecantSolver solver = new SecantSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,132,solver.setMaxEvaluations(10);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,134,// endpoint is root
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,135,"double result = solver.solve(f, FastMath.PI, 4);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,136,"Assert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,138,"result = solver.solve(f, 3, FastMath.PI);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,139,"Assert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,141,"result = solver.solve(f, FastMath.PI, 4, 3.5);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,142,"Assert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,144,"result = solver.solve(f, 3, FastMath.PI, 3.07);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,145,"Assert.assertEquals(FastMath.PI, result, solver.getAbsoluteAccuracy());"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,149,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,150,public void testBadEndpoints() {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,151,UnivariateRealFunction f = new SinFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,152,SecantSolver solver = new SecantSolver();
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,153,solver.setMaxEvaluations(10);
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,154,try {  // bad interval
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,155,"solver.solve(f, 1, -1);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,156,"Assert.fail(""Expecting IllegalArgumentException - bad interval"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,157,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,158,// expected
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,160,try {  // no bracket
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,161,"solver.solve(f, 1, 1.5);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,162,"Assert.fail(""Expecting IllegalArgumentException - non-bracketing"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,163,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,164,// expected
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,166,try {  // no bracket
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,167,"solver.solve(f, 1, 1.5, 1.2);"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,168,"Assert.fail(""Expecting IllegalArgumentException - non-bracketing"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,169,} catch (IllegalArgumentException ex) {
True,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,src/test/java/org/apache/commons/math/analysis/solvers/SecantSolverTest.java,170,// expected
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,3, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,4,  contributor license agreements.  See the NOTICE file distributed with
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,5,  this work for additional information regarding copyright ownership.
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,6,"  The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,7,"  (the ""License""); you may not use this file except in compliance with"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,8,  the License.  You may obtain a copy of the License at
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,10,     http://www.apache.org/licenses/LICENSE-2.0
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,12,"  Unless required by applicable law or agreed to in writing, software"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,13,"  distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,14,"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,15,  See the License for the specific language governing permissions and
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,16,  limitations under the License.
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,19,ackage org.apache.commons.math.analysis.solvers;
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,21,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,24, @version $Revision$ $Date$
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,26,ublic class UnivariateRealSolverFactoryImplTest extends TestCase {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,28,** solver factory */
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,29,rivate UnivariateRealSolverFactory factory;
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,32, @throws java.lang.Exception
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,33, @see junit.framework.TestCase#tearDown()
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,35,Override
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,36,rotected void setUp() throws Exception {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,37,uper.setUp();
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,38,actory = new UnivariateRealSolverFactoryImpl();
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,42, @throws java.lang.Exception
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,43, @see junit.framework.TestCase#tearDown()
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,45,Override
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,46,rotected void tearDown() throws Exception {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,47,actory = null;
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,48,uper.tearDown();
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,51,ublic void testNewBisectionSolverValid() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,52,nivariateRealSolver solver = factory.newBisectionSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,53,ssertNotNull(solver);
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,54,ssertTrue(solver instanceof BisectionSolver);
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,57,ublic void testNewNewtonSolverValid() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,58,nivariateRealSolver solver = factory.newNewtonSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,59,ssertNotNull(solver);
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,60,ssertTrue(solver instanceof NewtonSolver);
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,63,ublic void testNewBrentSolverValid() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,64,nivariateRealSolver solver = factory.newBrentSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,65,ssertNotNull(solver);
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,66,ssertTrue(solver instanceof BrentSolver);
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,69,ublic void testNewSecantSolverValid() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,70,nivariateRealSolver solver = factory.newSecantSolver();
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,71,ssertNotNull(solver);
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImplTest.java,72,ssertTrue(solver instanceof SecantSolver);
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,20,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,22,import org.apache.commons.math.analysis.QuinticFunction;
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,26,import org.junit.Test;
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,30,ublic class UnivariateRealSolverUtilsTest extends TestCase {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,31,public class UnivariateRealSolverUtilsTest {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,34,ublic void testSolveNull() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,35,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,36,public void testSolveNull() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,37,ail();
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,39,Assert.fail();
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,43,ublic void testSolveBadEndpoints() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,45,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,46,public void testSolveBadEndpoints() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,45,"nivariateRealSolverUtils.solve(sin, -0.1, 4.0, 4.0);"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,46,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,48,"double root = UnivariateRealSolverUtils.solve(sin, 4.0, -0.1, 1e-6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,49,"System.out.println(""root="" + root);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,50,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,52,ublic void testSolveBadAccuracy() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,56,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,57,public void testSolveBadAccuracy() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,55,"/             fail(""Expecting IllegalArgumentException""); // TODO needs rework since convergence behaviour was changed"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,60,"//             Assert.fail(""Expecting IllegalArgumentException""); // TODO needs rework since convergence behaviour was changed"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,61,ublic void testSolveSin() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,66,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,67,public void testSolveSin() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,63,"ssertEquals(FastMath.PI, x, 1.0e-4);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,69,"Assert.assertEquals(FastMath.PI, x, 1.0e-4);"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,66,ublic void testSolveAccuracyNull()  throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,72,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,73,public void testSolveAccuracyNull()  {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,70,ail();
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,77,Assert.fail();
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,76,ublic void testSolveAccuracySin() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,83,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,84,public void testSolveAccuracySin() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,80,"ssertEquals(FastMath.PI, x, accuracy);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,88,"Assert.assertEquals(FastMath.PI, x, accuracy);"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,83,ublic void testSolveNoRoot() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,91,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,92,public void testSolveNoRoot() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,86,"ail(""Expecting IllegalArgumentException "");"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,95,"Assert.fail(""Expecting IllegalArgumentException "");"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,92,ublic void testBracketSin() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,101,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,102,public void testBracketSin() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,95,ssertTrue(sin.value(result[0]) < 0);
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,96,ssertTrue(sin.value(result[1]) > 0);
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,105,Assert.assertTrue(sin.value(result[0]) < 0);
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,106,Assert.assertTrue(sin.value(result[1]) > 0);
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,99,ublic void testBracketEndpointRoot() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,109,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,110,public void testBracketEndpointRoot() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,101,"ssertEquals(0.0, sin.value(result[0]), 1.0e-15);"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,102,ssertTrue(sin.value(result[1]) > 0);
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,112,"Assert.assertEquals(0.0, sin.value(result[0]), 1.0e-15);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,113,Assert.assertTrue(sin.value(result[1]) > 0);
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,105,ublic void testNullFunction() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,116,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,117,public void testNullFunction() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,108,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,120,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,114,ublic void testBadInitial() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,126,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,127,public void testBadInitial() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,117,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,130,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,123,ublic void testBadEndpoints() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,136,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,137,public void testBadEndpoints() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,126,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,140,"Assert.fail(""Expecting IllegalArgumentException"");"
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,132,ublic void testBadMaximumIterations() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,146,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,147,public void testBadMaximumIterations() {
False,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,135,"ail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,150,"Assert.fail(""Expecting IllegalArgumentException"");"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,156,@Test
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,157,public void testMisc() {
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,158,UnivariateRealFunction f = new QuinticFunction();
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,159,double result;
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,160,// Static solve method
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,161,"result = UnivariateRealSolverUtils.solve(f, -0.2, 0.2);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,162,"Assert.assertEquals(result, 0, 1E-8);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,163,"result = UnivariateRealSolverUtils.solve(f, -0.1, 0.3);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,164,"Assert.assertEquals(result, 0, 1E-8);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,165,"result = UnivariateRealSolverUtils.solve(f, -0.3, 0.45);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,166,"Assert.assertEquals(result, 0, 1E-6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,167,"result = UnivariateRealSolverUtils.solve(f, 0.3, 0.7);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,168,"Assert.assertEquals(result, 0.5, 1E-6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,169,"result = UnivariateRealSolverUtils.solve(f, 0.2, 0.6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,170,"Assert.assertEquals(result, 0.5, 1E-6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,171,"result = UnivariateRealSolverUtils.solve(f, 0.05, 0.95);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,172,"Assert.assertEquals(result, 0.5, 1E-6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,173,"result = UnivariateRealSolverUtils.solve(f, 0.85, 1.25);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,174,"Assert.assertEquals(result, 1.0, 1E-6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,175,"result = UnivariateRealSolverUtils.solve(f, 0.8, 1.2);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,176,"Assert.assertEquals(result, 1.0, 1E-6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,177,"result = UnivariateRealSolverUtils.solve(f, 0.85, 1.75);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,178,"Assert.assertEquals(result, 1.0, 1E-6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,179,"result = UnivariateRealSolverUtils.solve(f, 0.55, 1.45);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,180,"Assert.assertEquals(result, 1.0, 1E-6);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,181,"result = UnivariateRealSolverUtils.solve(f, 0.85, 5);"
True,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,src/test/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtilsTest.java,182,"Assert.assertEquals(result, 1.0, 1E-6);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,238,ssertTrue(handler.getMaximalValueError() < 5.0e-8);
True,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,238,"assertEquals(0, handler.getMaximalValueError(), 1.1e-7);"
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,23,mport org.apache.commons.math.exception.MathUserException;
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,24,import org.apache.commons.math.exception.TooManyEvaluationsException;
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,25,import org.apache.commons.math.exception.MathUserException;
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,271, catch (IntegratorException ie) {
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,272,ssertTrue(ie.getCause() != null);
False,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,273,ssertTrue(ie.getCause() instanceof ConvergenceException);
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,272,} catch (TooManyEvaluationsException tmee) {
True,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/HighamHall54IntegratorTest.java,273,// Expected.
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,18,package org.apache.commons.math.optimization.general;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,20,import java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,21,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,22,import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,23,import org.apache.commons.math.analysis.MultivariateRealFunction;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,24,import org.apache.commons.math.analysis.MultivariateVectorialFunction;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,27,* Class used in the tests.
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,29,class CircleScalar implements DifferentiableMultivariateRealFunction {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,30,private ArrayList<Point2D.Double> points;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,32,public CircleScalar() {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,33,points  = new ArrayList<Point2D.Double>();
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,36,"public void addPoint(double px, double py) {"
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,37,"points.add(new Point2D.Double(px, py));"
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,40,public double getRadius(Point2D.Double center) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,41,double r = 0;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,42,for (Point2D.Double point : points) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,43,r += point.distance(center);
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,45,return r / points.size();
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,48,private double[] gradient(double[] point) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,49,// optimal radius
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,50,"Point2D.Double center = new Point2D.Double(point[0], point[1]);"
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,51,double radius = getRadius(center);
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,53,// gradient of the sum of squared residuals
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,54,double dJdX = 0;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,55,double dJdY = 0;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,56,for (Point2D.Double pk : points) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,57,double dk = pk.distance(center);
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,58,dJdX += (center.x - pk.x) * (dk - radius) / dk;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,59,dJdY += (center.y - pk.y) * (dk - radius) / dk;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,61,dJdX *= 2;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,62,dJdY *= 2;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,64,"return new double[] { dJdX, dJdY };"
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,67,public double value(double[] variables)  {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,68,"Point2D.Double center = new Point2D.Double(variables[0], variables[1]);"
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,69,double radius = getRadius(center);
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,71,double sum = 0;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,72,for (Point2D.Double point : points) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,73,double di = point.distance(center) - radius;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,74,sum += di * di;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,77,return sum;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,80,public MultivariateVectorialFunction gradient() {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,81,return new MultivariateVectorialFunction() {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,82,private static final long serialVersionUID = 3174909643301201710L;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,83,public double[] value(double[] point) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,84,return gradient(point);
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,89,public MultivariateRealFunction partialDerivative(final int k) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,90,return new MultivariateRealFunction() {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,91,private static final long serialVersionUID = 3073956364104833888L;
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,92,public double value(double[] point) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,src/test/java/org/apache/commons/math/optimization/general/CircleScalar.java,93,return gradient(point)[k];
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,18,package org.apache.commons.math.optimization.general;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,20,import java.awt.geom.Point2D;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,21,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,22,import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,23,import org.apache.commons.math.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,26,* Class used in the tests.
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,28,class CircleVectorial implements DifferentiableMultivariateVectorialFunction {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,29,private ArrayList<Point2D.Double> points;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,31,public CircleVectorial() {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,32,points  = new ArrayList<Point2D.Double>();
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,35,"public void addPoint(double px, double py) {"
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,36,"points.add(new Point2D.Double(px, py));"
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,39,public int getN() {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,40,return points.size();
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,43,public double getRadius(Point2D.Double center) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,44,double r = 0;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,45,for (Point2D.Double point : points) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,46,r += point.distance(center);
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,48,return r / points.size();
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,51,private double[][] jacobian(double[] point) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,52,int n = points.size();
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,53,"Point2D.Double center = new Point2D.Double(point[0], point[1]);"
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,55,// gradient of the optimal radius
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,56,double dRdX = 0;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,57,double dRdY = 0;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,58,for (Point2D.Double pk : points) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,59,double dk = pk.distance(center);
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,60,dRdX += (center.x - pk.x) / dk;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,61,dRdY += (center.y - pk.y) / dk;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,63,dRdX /= n;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,64,dRdY /= n;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,66,// jacobian of the radius residuals
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,67,double[][] jacobian = new double[n][2];
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,68,for (int i = 0; i < n; ++i) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,69,Point2D.Double pi = points.get(i);
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,70,double di   = pi.distance(center);
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,71,jacobian[i][0] = (center.x - pi.x) / di - dRdX;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,72,jacobian[i][1] = (center.y - pi.y) / di - dRdY;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,75,return jacobian;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,78,public double[] value(double[] variables) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,79,"Point2D.Double center = new Point2D.Double(variables[0], variables[1]);"
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,80,double radius = getRadius(center);
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,82,double[] residuals = new double[points.size()];
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,83,for (int i = 0; i < residuals.length; ++i) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,84,residuals[i] = points.get(i).distance(center) - radius;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,87,return residuals;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,90,public MultivariateMatrixFunction jacobian() {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,91,return new MultivariateMatrixFunction() {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,92,private static final long serialVersionUID = -4340046230875165095L;
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,93,public double[][] value(double[] point) {
True,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,src/test/java/org/apache/commons/math/optimization/general/CircleVectorial.java,94,return jacobian(point);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,371,ircle circle = new Circle();
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,371,CircleVectorial circle = new CircleVectorial();
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,391,ircle circle = new Circle();
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,391,CircleVectorial circle = new CircleVectorial();
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,412,ircle circle = new Circle();
True,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,412,CircleVectorial circle = new CircleVectorial();
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,494,"rivate static class Circle implements DifferentiableMultivariateVectorialFunction, Serializable {"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,496,rivate static final long serialVersionUID = -7165774454925027042L;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,497,rivate ArrayList<Point2D.Double> points;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,499,ublic Circle() {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,500,oints  = new ArrayList<Point2D.Double>();
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,503,"ublic void addPoint(double px, double py) {"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,504,"oints.add(new Point2D.Double(px, py));"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,507,ublic int getN() {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,508,eturn points.size();
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,511,ublic double getRadius(Point2D.Double center) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,512,ouble r = 0;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,513,or (Point2D.Double point : points) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,514, += point.distance(center);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,516,eturn r / points.size();
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,519,rivate double[][] jacobian(double[] variables) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,521,nt n = points.size();
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,522,"oint2D.Double center = new Point2D.Double(variables[0], variables[1]);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,524,/ gradient of the optimal radius
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,525,ouble dRdX = 0;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,526,ouble dRdY = 0;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,527,or (Point2D.Double pk : points) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,528,ouble dk = pk.distance(center);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,529,RdX += (center.x - pk.x) / dk;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,530,RdY += (center.y - pk.y) / dk;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,532,RdX /= n;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,533,RdY /= n;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,535,/ jacobian of the radius residuals
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,536,ouble[][] jacobian = new double[n][2];
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,537,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,538,oint2D.Double pi = points.get(i);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,539,ouble di   = pi.distance(center);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,540,acobian[i][0] = (center.x - pi.x) / di - dRdX;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,541,acobian[i][1] = (center.y - pi.y) / di - dRdY;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,544,eturn jacobian;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,548,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,550,"oint2D.Double center = new Point2D.Double(variables[0], variables[1]);"
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,551,ouble radius = getRadius(center);
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,553,ouble[] residuals = new double[points.size()];
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,554,or (int i = 0; i < residuals.length; ++i) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,555,esiduals[i] = points.get(i).distance(center) - radius;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,558,eturn residuals;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,562,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,563,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,564,rivate static final long serialVersionUID = -4340046230875165095L;
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,565,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizerTest.java,566,eturn jacobian(point);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,28,mport org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,29,mport org.apache.commons.math.analysis.MultivariateMatrixFunction;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,28,import org.apache.commons.math.exception.SingularMatrixException;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,32,mport org.apache.commons.math.exception.MathUserException;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,33,mport org.apache.commons.math.exception.NumberIsTooSmallException;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,34,mport org.apache.commons.math.exception.SingularMatrixException;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,32,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,33,import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,34,import org.apache.commons.math.analysis.MultivariateMatrixFunction;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,40,mport org.apache.commons.math.util.FastMath;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,40,import org.apache.commons.math.util.FastMath;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,112,ublic void testTrivial() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,111,public void testTrivial() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,129,ublic void testQRColumnsPermutation() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,128,public void testQRColumnsPermutation() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,146,ublic void testNoDependency() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,145,public void testNoDependency() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,165,ublic void testOneSet() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,164,public void testOneSet() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,181,ublic void testTwoSets() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,180,public void testTwoSets() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,205,ublic void testNonInvertible() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,204,public void testNonInvertible() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,224,ublic void testIllConditioned() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,223,public void testIllConditioned() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,257,ublic void testMoreEstimatedParametersSimple() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,256,public void testMoreEstimatedParametersSimple() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,271,ublic void testMoreEstimatedParametersUnsorted() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,270,public void testMoreEstimatedParametersUnsorted() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,291,ublic void testRedundantEquations() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,290,public void testRedundantEquations() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,307,ublic void testInconsistentEquations() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,306,public void testInconsistentEquations() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,319,ublic void testInconsistentSizes() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,318,public void testInconsistentSizes() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,349,ublic void testControlParameters() throws MathUserException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,350,ircle circle = new Circle();
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,348,public void testControlParameters() {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,349,CircleVectorial circle = new CircleVectorial();
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,366,"ouble orthoTolerance, boolean shouldFail) throws MathUserException {"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,365,"double orthoTolerance, boolean shouldFail) {"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,385,ublic void testCircleFitting() throws MathUserException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,386,ircle circle = new Circle();
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,384,public void testCircleFitting() {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,385,CircleVectorial circle = new CircleVectorial();
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,433,ublic void testCircleFittingBadInit() throws MathUserException {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,434,ircle circle = new Circle();
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,432,public void testCircleFittingBadInit() {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,433,CircleVectorial circle = new CircleVectorial();
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,486,ublic void testMath199() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,485,public void testMath199() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,530,"rivate static class Circle implements DifferentiableMultivariateVectorialFunction, Serializable {"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,532,rivate static final long serialVersionUID = -4711170319243817874L;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,534,rivate ArrayList<Point2D.Double> points;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,536,ublic Circle() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,537,oints  = new ArrayList<Point2D.Double>();
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,540,"ublic void addPoint(double px, double py) {"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,541,"oints.add(new Point2D.Double(px, py));"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,544,ublic int getN() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,545,eturn points.size();
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,548,ublic double getRadius(Point2D.Double center) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,549,ouble r = 0;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,550,or (Point2D.Double point : points) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,551, += point.distance(center);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,553,eturn r / points.size();
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,556,rivate double[][] jacobian(double[] point) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,558,nt n = points.size();
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,559,"oint2D.Double center = new Point2D.Double(point[0], point[1]);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,561,/ gradient of the optimal radius
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,562,ouble dRdX = 0;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,563,ouble dRdY = 0;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,564,or (Point2D.Double pk : points) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,565,ouble dk = pk.distance(center);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,566,RdX += (center.x - pk.x) / dk;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,567,RdY += (center.y - pk.y) / dk;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,569,RdX /= n;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,570,RdY /= n;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,572,/ jacobian of the radius residuals
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,573,ouble[][] jacobian = new double[n][2];
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,574,or (int i = 0; i < n; ++i) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,575,oint2D.Double pi = points.get(i);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,576,ouble di   = pi.distance(center);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,577,acobian[i][0] = (center.x - pi.x) / di - dRdX;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,578,acobian[i][1] = (center.y - pi.y) / di - dRdY;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,581,eturn jacobian;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,584,ublic double[] value(double[] variables) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,586,"oint2D.Double center = new Point2D.Double(variables[0], variables[1]);"
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,587,ouble radius = getRadius(center);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,589,ouble[] residuals = new double[points.size()];
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,590,or (int i = 0; i < residuals.length; ++i) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,591,esiduals[i] = points.get(i).distance(center) - radius;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,594,eturn residuals;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,597,ublic MultivariateMatrixFunction jacobian() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,598,eturn new MultivariateMatrixFunction() {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,599,rivate static final long serialVersionUID = -4340046230875165095L;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,600,ublic double[][] value(double[] point) {
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,601,eturn jacobian(point);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,24,mport junit.framework.TestCase;
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,27,import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,30,mport org.apache.commons.math.exception.MathUserException;
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,34,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,35,import org.junit.Test;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,99,ublic class NonLinearConjugateGradientOptimizerTest
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,100,xtends TestCase {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,102,ublic NonLinearConjugateGradientOptimizerTest(String name) {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,103,uper(name);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,106,ublic void testTrivial() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,99,public class NonLinearConjugateGradientOptimizerTest {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,100,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,101,public void testTrivial() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,115,"ssertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,116,"ssertEquals(0.0, optimum.getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,110,"Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,111,"Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,119,ublic void testColumnsPermutation() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,114,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,115,public void testColumnsPermutation() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,131,"ssertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,132,"ssertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,133,"ssertEquals(0.0, optimum.getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,126,"Assert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,127,"Assert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,128,"Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,137,ublic void testNoDependency() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,132,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,133,public void testNoDependency() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,153,"ssertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,149,"Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,157,ublic void testOneSet() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,153,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,154,public void testOneSet() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,170,"ssertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,171,"ssertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,172,"ssertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,166,"Assert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,167,"Assert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,168,"Assert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,176,ublic void testTwoSets() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,172,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,173,public void testTwoSets() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,206,"ssertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,207,"ssertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,208,"ssertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,209,"ssertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,210,"ssertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,211,"ssertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,203,"Assert.assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,204,"Assert.assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,205,"Assert.assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,206,"Assert.assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,207,"Assert.assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,208,"Assert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,215,ublic void testNonInversible() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,212,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,213,public void testNonInversible() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,228,ssertTrue(optimum.getValue() > 0.5);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,225,Assert.assertTrue(optimum.getValue() > 0.5);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,231,ublic void testIllConditioned() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,228,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,229,public void testIllConditioned() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,242,rentSolver solver = new BrentSolver();
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,243,olver.setAbsoluteAccuracy(1.0e-15);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,244,olver.setRelativeAccuracy(1.0e-15);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,240,"BrentSolver solver = new BrentSolver(1e-15, 1e-15);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,248,"ssertEquals(1.0, optimum1.getPoint()[0], 1.0e-5);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,249,"ssertEquals(1.0, optimum1.getPoint()[1], 1.0e-5);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,250,"ssertEquals(1.0, optimum1.getPoint()[2], 1.0e-5);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,251,"ssertEquals(1.0, optimum1.getPoint()[3], 1.0e-5);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,244,"Assert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-4);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,245,"Assert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-4);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,246,"Assert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-4);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,247,"Assert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-4);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,261,"ssertEquals(-81.0, optimum2.getPoint()[0], 1.0e-1);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,262,"ssertEquals(137.0, optimum2.getPoint()[1], 1.0e-1);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,263,"ssertEquals(-34.0, optimum2.getPoint()[2], 1.0e-1);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,264,"ssertEquals( 22.0, optimum2.getPoint()[3], 1.0e-1);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,257,"Assert.assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-1);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,258,"Assert.assertEquals(137.0, optimum2.getPoint()[1], 1.0e-1);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,259,"Assert.assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-1);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,260,"Assert.assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-1);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,268,ublic void testMoreEstimatedParametersSimple()
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,269,hrows MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,264,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,265,public void testMoreEstimatedParametersSimple() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,283,"ssertEquals(0, optimum.getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,278,"Assert.assertEquals(0, optimum.getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,287,ublic void testMoreEstimatedParametersUnsorted()
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,288,hrows MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,282,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,283,public void testMoreEstimatedParametersUnsorted() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,302,"ssertEquals(0, optimum.getValue(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,297,"Assert.assertEquals(0, optimum.getValue(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,305,ublic void testRedundantEquations() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,300,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,301,public void testRedundantEquations() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,318,"ssertEquals(2.0, optimum.getPoint()[0], 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,319,"ssertEquals(1.0, optimum.getPoint()[1], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,314,"Assert.assertEquals(2.0, optimum.getPoint()[0], 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,315,"Assert.assertEquals(1.0, optimum.getPoint()[1], 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,323,ublic void testInconsistentEquations() throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,319,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,320,public void testInconsistentEquations() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,336,ssertTrue(optimum.getValue() > 0.1);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,333,Assert.assertTrue(optimum.getValue() > 0.1);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,340,ublic void testCircleFitting() throws MathUserException {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,341,ircle circle = new Circle();
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,337,@Test
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,338,public void testCircleFitting() {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,339,CircleScalar circle = new CircleScalar();
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,351,rentSolver solver = new BrentSolver();
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,352,olver.setAbsoluteAccuracy(1.0e-13);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,353,olver.setRelativeAccuracy(1.0e-15);
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,349,"UnivariateRealSolver solver = new BrentSolver(1e-15, 1e-13);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,358,"ssertEquals(69.960161753, circle.getRadius(center), 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,359,"ssertEquals(96.075902096, center.x, 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,360,"ssertEquals(48.135167894, center.y, 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,354,"Assert.assertEquals(69.960161753, circle.getRadius(center), 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,355,"Assert.assertEquals(96.075902096, center.x, 1.0e-8);"
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,356,"Assert.assertEquals(48.135167894, center.y, 1.0e-8);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,385,ublic double value(double[] variables) throws MathUserException {
True,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,381,public double value(double[] variables) {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,415,"rivate static class Circle implements DifferentiableMultivariateRealFunction, Serializable {"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,417,rivate static final long serialVersionUID = -4711170319243817874L;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,419,rivate ArrayList<Point2D.Double> points;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,421,ublic Circle() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,422,oints  = new ArrayList<Point2D.Double>();
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,425,"ublic void addPoint(double px, double py) {"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,426,"oints.add(new Point2D.Double(px, py));"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,429,ublic double getRadius(Point2D.Double center) {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,430,ouble r = 0;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,431,or (Point2D.Double point : points) {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,432, += point.distance(center);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,434,eturn r / points.size();
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,437,rivate double[] gradient(double[] point) {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,439,/ optimal radius
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,440,"oint2D.Double center = new Point2D.Double(point[0], point[1]);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,441,ouble radius = getRadius(center);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,443,/ gradient of the sum of squared residuals
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,444,ouble dJdX = 0;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,445,ouble dJdY = 0;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,446,or (Point2D.Double pk : points) {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,447,ouble dk = pk.distance(center);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,448,JdX += (center.x - pk.x) * (dk - radius) / dk;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,449,JdY += (center.y - pk.y) * (dk - radius) / dk;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,451,JdX *= 2;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,452,JdY *= 2;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,454,"eturn new double[] { dJdX, dJdY };"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,458,ublic double value(double[] variables)
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,459,"hrows IllegalArgumentException, MathUserException {"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,461,"oint2D.Double center = new Point2D.Double(variables[0], variables[1]);"
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,462,ouble radius = getRadius(center);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,464,ouble sum = 0;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,465,or (Point2D.Double point : points) {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,466,ouble di = point.distance(center) - radius;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,467,um += di * di;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,470,eturn sum;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,474,ublic MultivariateVectorialFunction gradient() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,475,eturn new MultivariateVectorialFunction() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,476,rivate static final long serialVersionUID = 3174909643301201710L;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,477,ublic double[] value(double[] point) {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,478,eturn gradient(point);
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,483,ublic MultivariateRealFunction partialDerivative(final int k) {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,484,eturn new MultivariateRealFunction() {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,485,rivate static final long serialVersionUID = 3073956364104833888L;
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,486,ublic double value(double[] point) {
False,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizerTest.java,487,eturn gradient(point)[k];

is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,21,import java.util.Comparator;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,23,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,24,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,25,import org.apache.commons.math.random.RandomVectorGenerator;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,28,* Special implementation of the {@link ScalarDifferentiableOptimizer} interface adding
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,29,* multi-start features to an existing optimizer.
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,30,* <p>
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,31,* This class wraps a classical optimizer to use it several times in
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,32,* turn with different starting points in order to avoid being trapped
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,33,* into a local extremum when looking for a global one.
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,34,* </p>
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,35,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,36,* @since 2.0
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,38,public class MultiStartScalarDifferentiableOptimizer implements ScalarDifferentiableOptimizer {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,40,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,41,private static final long serialVersionUID = 9008747186334431824L;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,43,/** Underlying classical optimizer. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,44,private final ScalarDifferentiableOptimizer optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,46,/** Number of evaluations already performed for all starts. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,47,private int totalEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,49,/** Maximal number of evaluations allowed. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,50,private int maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,52,/** Number of starts to go. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,53,private int starts;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,55,/** Random generator for multi-start. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,56,private RandomVectorGenerator generator;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,58,/** Found optima. */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,59,private ScalarPointValuePair[] optima;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,62,* Create a multi-start optimizer from a single-start optimizer
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,63,* @param optimizer single-start optimizer to wrap
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,64,* @param starts number of starts to perform (including the
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,65,"* first one), multi-start is disabled if value is less than or"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,66,* equal to 1
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,67,* @param generator random vector generator to use for restarts
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,69,"public MultiStartScalarDifferentiableOptimizer(final ScalarDifferentiableOptimizer optimizer,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,70,"final int starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,71,final RandomVectorGenerator generator) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,72,this.optimizer        = optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,73,this.totalEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,74,this.maxEvaluations   = Integer.MAX_VALUE;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,75,this.starts           = starts;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,76,this.generator        = generator;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,77,this.optima           = null;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,80,/** Get all the optima found during the last call to {@link
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,81,"* #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,82,* <p>The optimizer stores all the optima found during a set of
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,83,"* restarts. The {@link #optimize(ScalarObjectiveFunction, GoalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,84,* double[]) optimize} method returns the best point only. This
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,85,"* method returns all the points found at the end of each starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,86,* including the best one already returned by the {@link
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,87,"* #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,88,* method.
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,89,* </p>
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,90,* <p>
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,91,* The returned array as one element for each start as specified
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,92,* in the constructor. It is ordered with the results from the
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,93,"* runs that did converge first, sorted from best to worst"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,94,* objective value (i.e in ascending order if minimizing and in
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,95,"* descending order if maximizing), followed by and null elements"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,96,* corresponding to the runs that did not converge. This means all
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,97,"* elements will be null if the {@link #optimize(ScalarObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,98,"* GoalType, double[]) optimize} method did throw a {@link"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,99,* ConvergenceException ConvergenceException}). This also means that
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,100,"* if the first element is non null, it is the best point found across"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,101,* all starts.</p>
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,102,* @return array containing the optima
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,103,"* @exception IllegalStateException if {@link #optimize(ScalarObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,104,"* GoalType, double[]) optimize} has not been called"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,106,public ScalarPointValuePair[] getOptima() throws IllegalStateException {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,107,if (optima == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,108,"throw MathRuntimeException.createIllegalStateException(""no optimum computed yet"");"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,110,return (ScalarPointValuePair[]) optima.clone();
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,113,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,114,public int getEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,115,return totalEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,118,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,119,public void setMaxEvaluations(int maxEvaluations) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,120,this.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,123,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,124,public int getMaxEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,125,return maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,128,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,129,public void setConvergenceChecker(ScalarConvergenceChecker checker) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,130,optimizer.setConvergenceChecker(checker);
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,133,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,134,public ScalarConvergenceChecker getConvergenceChecker() {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,135,return optimizer.getConvergenceChecker();
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,138,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,139,"public ScalarPointValuePair optimize(final ScalarDifferentiableObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,140,"final GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,141,double[] startPoint)
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,142,"throws ObjectiveException, OptimizationException {"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,144,optima = new ScalarPointValuePair[starts];
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,145,totalEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,147,// multi-start loop
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,148,for (int i = 0; i < starts; ++i) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,150,try {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,151,optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,152,"optima[i] = optimizer.optimize(f, goalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,153,(i == 0) ? startPoint : generator.nextVector());
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,154,} catch (ObjectiveException obe) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,155,optima[i] = null;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,156,} catch (OptimizationException ope) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,157,optima[i] = null;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,160,totalEvaluations += optimizer.getEvaluations();
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,164,"// sort the optima from best to worst, followed by null elements"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,165,"Arrays.sort(optima, new Comparator<ScalarPointValuePair>() {"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,166,"public int compare(final ScalarPointValuePair o1, final ScalarPointValuePair o2) {"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,167,if (o1 == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,168,return (o2 == null) ? 0 : +1;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,169,} else if (o2 == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,170,return -1;
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,172,final double v1 = o1.getValue();
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,173,final double v2 = o2.getValue();
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,174,return (goalType == GoalType.MINIMIZE) ?
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,175,"Double.compare(v1, v2) : Double.compare(v2, v1);"
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,179,if (optima[0] == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,180,throw new OptimizationException(
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,181,"""none of the {0} start points lead to convergence"","
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,182,starts);
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,185,// return the found point given the best objective function value
True,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarDifferentiableOptimizer.java,186,return optima[0];
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,38,ublic class MultiStartOptimizer implements ScalarOptimizer {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,38,public class MultiStartScalarOptimizer implements ScalarOptimizer {
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,69,"ublic MultiStartOptimizer(final ScalarOptimizer optimizer, final int starts,"
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,70,inal RandomVectorGenerator generator) {
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,69,"public MultiStartScalarOptimizer(final ScalarOptimizer optimizer, final int starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,70,final RandomVectorGenerator generator) {
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,139,"inal GoalType goalType,"
False,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,140,ouble[] startPoint)
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,139,"final GoalType goalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartScalarOptimizer.java,140,double[] startPoint)
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,18,package org.apache.commons.math.optimization;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,21,import java.util.Comparator;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,23,import org.apache.commons.math.ConvergenceException;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,24,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,25,import org.apache.commons.math.random.RandomVectorGenerator;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,28,* Special implementation of the {@link VectorialDifferentiableOptimizer} interface adding
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,29,* multi-start features to an existing optimizer.
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,30,* <p>
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,31,* This class wraps a classical optimizer to use it several times in
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,32,* turn with different starting points in order to avoid being trapped
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,33,* into a local extremum when looking for a global one.
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,34,* </p>
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,35,* @version $Revision$ $Date$
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,36,* @since 2.0
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,38,public class MultiStartVectorialDifferentiableOptimizer implements VectorialDifferentiableOptimizer {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,40,/** Serializable version identifier. */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,41,private static final long serialVersionUID = -6671992853686531955L;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,43,/** Underlying classical optimizer. */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,44,private final VectorialDifferentiableOptimizer optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,46,/** Number of evaluations already performed for all starts. */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,47,private int totalEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,49,/** Number of jacobian evaluations already performed for all starts. */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,50,private int totalJacobianEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,52,/** Maximal number of evaluations allowed. */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,53,private int maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,55,/** Number of starts to go. */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,56,private int starts;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,58,/** Random generator for multi-start. */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,59,private RandomVectorGenerator generator;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,61,/** Found optima. */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,62,private VectorialPointValuePair[] optima;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,65,* Create a multi-start optimizer from a single-start optimizer
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,66,* @param optimizer single-start optimizer to wrap
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,67,* @param starts number of starts to perform (including the
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,68,"* first one), multi-start is disabled if value is less than or"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,69,* equal to 1
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,70,* @param generator random vector generator to use for restarts
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,72,"public MultiStartVectorialDifferentiableOptimizer(final VectorialDifferentiableOptimizer optimizer,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,73,"final int starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,74,final RandomVectorGenerator generator) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,75,this.optimizer                = optimizer;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,76,this.totalEvaluations         = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,77,this.totalJacobianEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,78,this.maxEvaluations           = Integer.MAX_VALUE;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,79,this.starts                   = starts;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,80,this.generator                = generator;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,81,this.optima                   = null;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,84,/** Get all the optima found during the last call to {@link
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,85,"* #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}."
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,86,* <p>The optimizer stores all the optima found during a set of
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,87,"* restarts. The {@link #optimize(ScalarObjectiveFunction, GoalType,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,88,* double[]) optimize} method returns the best point only. This
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,89,"* method returns all the points found at the end of each starts,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,90,* including the best one already returned by the {@link
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,91,"* #optimize(ScalarObjectiveFunction, GoalType, double[]) optimize}"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,92,* method.
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,93,* </p>
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,94,* <p>
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,95,* The returned array as one element for each start as specified
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,96,* in the constructor. It is ordered with the results from the
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,97,"* runs that did converge first, sorted from best to worst"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,98,* objective value (i.e in ascending order if minimizing and in
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,99,"* descending order if maximizing), followed by and null elements"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,100,* corresponding to the runs that did not converge. This means all
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,101,"* elements will be null if the {@link #optimize(ScalarObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,102,"* GoalType, double[]) optimize} method did throw a {@link"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,103,* ConvergenceException ConvergenceException}). This also means that
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,104,"* if the first element is non null, it is the best point found across"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,105,* all starts.</p>
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,106,* @return array containing the optima
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,107,"* @exception IllegalStateException if {@link #optimize(ScalarObjectiveFunction,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,108,"* GoalType, double[]) optimize} has not been called"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,110,public VectorialPointValuePair[] getOptima() throws IllegalStateException {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,111,if (optima == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,112,"throw MathRuntimeException.createIllegalStateException(""no optimum computed yet"");"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,114,return (VectorialPointValuePair[]) optima.clone();
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,117,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,118,public int getEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,119,return totalEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,122,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,123,public int getJacobianEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,124,return totalJacobianEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,127,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,128,public void setMaxEvaluations(int maxEvaluations) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,129,this.maxEvaluations = maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,132,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,133,public int getMaxEvaluations() {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,134,return maxEvaluations;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,137,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,138,public void setConvergenceChecker(VectorialConvergenceChecker checker) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,139,optimizer.setConvergenceChecker(checker);
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,142,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,143,public VectorialConvergenceChecker getConvergenceChecker() {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,144,return optimizer.getConvergenceChecker();
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,147,/** {@inheritDoc} */
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,148,"public VectorialPointValuePair optimize(final VectorialDifferentiableObjectiveFunction f,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,149,"final double[] target, final double[] weights,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,150,final double[] startPoint)
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,151,"throws ObjectiveException, OptimizationException, IllegalArgumentException {"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,153,optima = new VectorialPointValuePair[starts];
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,154,totalEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,155,totalJacobianEvaluations = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,157,// multi-start loop
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,158,for (int i = 0; i < starts; ++i) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,160,try {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,161,optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,162,"optima[i] = optimizer.optimize(f, target, weights,"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,163,(i == 0) ? startPoint : generator.nextVector());
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,164,} catch (ObjectiveException obe) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,165,optima[i] = null;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,166,} catch (OptimizationException ope) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,167,optima[i] = null;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,170,totalEvaluations         += optimizer.getEvaluations();
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,171,totalJacobianEvaluations += optimizer.getJacobianEvaluations();
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,175,"// sort the optima from best to worst, followed by null elements"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,176,"Arrays.sort(optima, new Comparator<VectorialPointValuePair>() {"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,177,"public int compare(final VectorialPointValuePair o1, final VectorialPointValuePair o2) {"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,178,if (o1 == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,179,return (o2 == null) ? 0 : +1;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,180,} else if (o2 == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,181,return -1;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,183,"return Double.compare(weightedResidual(o1), weightedResidual(o2));"
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,185,private double weightedResidual(final VectorialPointValuePair pv) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,186,final double[] value = pv.getValueRef();
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,187,double sum = 0;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,188,for (int i = 0; i < value.length; ++i) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,189,final double ri = value[i] - target[i];
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,190,sum += weights[i] * ri * ri;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,192,return sum;
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,196,if (optima[0] == null) {
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,197,throw new OptimizationException(
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,198,"""none of the {0} start points lead to convergence"","
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,199,starts);
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,202,// return the found point given the best objective function value
True,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,src/java/org/apache/commons/math/optimization/MultiStartVectorialDifferentiableOptimizer.java,203,return optima[0];

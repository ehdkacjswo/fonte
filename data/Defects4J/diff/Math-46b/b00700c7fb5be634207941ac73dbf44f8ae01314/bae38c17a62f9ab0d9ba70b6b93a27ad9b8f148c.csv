is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,84,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,85,rivate static final long serialVersionUID = 4878026651422612760L;
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,346,f (z != null &&
False,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,347,.getDimension() != measurementMatrix.getRowDimension()) {
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,344,MathUtils.checkNotNull(z);
True,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,src/main/java/org/apache/commons/math/filter/KalmanFilter.java,345,if (z.getDimension() != measurementMatrix.getRowDimension()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,348,/** Private extension of Segment allowing comparison. */
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,136,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,137,"ublic abstract AbstractRegion<S, T> buildNew(BSPTree<S> newTree);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,164,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,165,"public abstract AbstractRegion<S, T> buildNew(BSPTree<S> newTree);"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,859,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,860,@Override
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,861,public boolean equals(Object other) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,863,if (this == other) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,864,return true;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,867,if (other instanceof DoubleIndex) {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,868,"return Double.compare(value, ((DoubleIndex) other).value) == 0;"
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,871,return false;
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,875,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,876,@Override
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,877,public int hashCode() {
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,878,long bits = Double.doubleToLongBits(value);
True,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java,879,return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);
False,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,92, @param maxIterations the maximum number of iterations to run the algorithm
False,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,93,"     for.  If negative, no maximum will be used"
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,92,* @param numTrials number of trial runs
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,93,* @param maxIterationsPerTrial the maximum number of iterations to run the algorithm
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,94,"*     for at each trial run.  If negative, no maximum will be used"
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,359, @exception NotStrictlyPositiveException if one entry is not positive.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,359,* @exception MathIllegalArgumentException if one entry is not positive.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,375, @exception NotPositiveException if one entry is negative.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,375,* @exception MathIllegalArgumentException if one entry is negative.
False,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,391, @exception NotPositiveException if one entry is negative.
True,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,src/main/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java,391,* @exception MathIllegalArgumentException if one entry is negative.

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,24,mport org.apache.commons.math.util.MathUtils.Order;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,24,import org.apache.commons.math.util.MathUtils.OrderDirection;
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,59,"athUtils.checkOrder(xval, Order.Direction.INCREASING, true);"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,60,"athUtils.checkOrder(yval, Order.Direction.INCREASING, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,59,"MathUtils.checkOrder(xval, OrderDirection.INCREASING, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,60,"MathUtils.checkOrder(yval, OrderDirection.INCREASING, true);"
False,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,37,rivate final MathUtils.Order.Direction direction;
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,37,private final MathUtils.OrderDirection direction;
False,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,63,"his(wrong, previous, index, MathUtils.Order.Direction.INCREASING, true);"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,63,"this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);"
False,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,80,"athUtils.Order.Direction direction,"
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,80,"MathUtils.OrderDirection direction,"
False,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,82,uper(direction == MathUtils.Order.Direction.INCREASING ?
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,82,super(direction == MathUtils.OrderDirection.INCREASING ?
False,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,100,ublic MathUtils.Order.Direction getDirection() {
True,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,src/main/java/org/apache/commons/math/exception/NonMonotonousSequenceException.java,100,public MathUtils.OrderDirection getDirection() {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1870,ublic static class Order {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1872,** Enumerate type for increasing/decreasing directions. */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1873,ublic static enum Direction {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1875,** Constant for increasing direction. */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1876,"NCREASING,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1878,** Constant for decreasing direction. */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1879,ECREASING
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1871,* Specification of ordering direction.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1873,public static enum OrderDirection {
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1874,/** Constant for increasing direction. */
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1875,"INCREASING,"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1876,/** Constant for decreasing direction. */
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1877,DECREASING
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1889, @param dir Order direction.
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1884,* @param dir Ordering direction.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1893,"ublic static void checkOrder(double[] val, Order.Direction dir, boolean strict) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1888,"public static void checkOrder(double[] val, OrderDirection dir, boolean strict) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1941,"heckOrder(val, Order.Direction.INCREASING, true);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1936,"checkOrder(val, OrderDirection.INCREASING, true);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1951," @deprecated as of 2.2 (please use the new {@link #checkOrder(double[],Order.Direction,boolean)"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1946,"* @deprecated as of 2.2 (please use the new {@link #checkOrder(double[],OrderDirection,boolean)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1954,"ublic static void checkOrder(double[] val, int dir, boolean strict) {"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1949,"public static void checkOrder(double[] val, int dir, boolean strict) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1956,"heckOrder(val, Order.Direction.INCREASING, strict);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1951,"checkOrder(val, OrderDirection.INCREASING, strict);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1958,"heckOrder(val, Order.Direction.DECREASING, strict);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1953,"checkOrder(val, OrderDirection.DECREASING, strict);"
False,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,33," new NonMonotonousSequenceException(0, -1, 1, MathUtils.Order.Direction.DECREASING, false);"
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,33,"= new NonMonotonousSequenceException(0, -1, 1, MathUtils.OrderDirection.DECREASING, false);"
False,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,37,ssert.assertTrue(e.getDirection() == MathUtils.Order.Direction.DECREASING);
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,37,Assert.assertTrue(e.getDirection() == MathUtils.OrderDirection.DECREASING);
False,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,44,ssert.assertTrue(e.getDirection() == MathUtils.Order.Direction.INCREASING);
True,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,src/test/java/org/apache/commons/math/exception/NonMonotonousSequenceExceptionTest.java,44,Assert.assertTrue(e.getDirection() == MathUtils.OrderDirection.INCREASING);
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1474,"athUtils.Order.Direction.INCREASING, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1474,"MathUtils.OrderDirection.INCREASING, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1476,"athUtils.Order.Direction.INCREASING, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1476,"MathUtils.OrderDirection.INCREASING, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1478,"athUtils.Order.Direction.DECREASING, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1478,"MathUtils.OrderDirection.DECREASING, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1480,"athUtils.Order.Direction.DECREASING, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1480,"MathUtils.OrderDirection.DECREASING, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1484,"athUtils.Order.Direction.INCREASING, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1484,"MathUtils.OrderDirection.INCREASING, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1491,"athUtils.Order.Direction.INCREASING, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1491,"MathUtils.OrderDirection.INCREASING, false);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1498,"athUtils.Order.Direction.DECREASING, true);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1498,"MathUtils.OrderDirection.DECREASING, true);"
False,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1505,"athUtils.Order.Direction.DECREASING, false);"
True,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,src/test/java/org/apache/commons/math/util/MathUtilsTest.java,1505,"MathUtils.OrderDirection.DECREASING, false);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,8,import java.nio.charset.Charset;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,154,* A Document's output settings control the form of the text() and html() methods.
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,156,public static class OutputSettings {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,157,private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,158,"private Charset charset = Charset.forName(""UTF-8"");"
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,160,public OutputSettings() {}
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,162,public Entities.EscapeMode escapeMode() {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,163,return escapeMode;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,166,public OutputSettings escapeMode(Entities.EscapeMode escapeMode) {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,167,this.escapeMode = escapeMode;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,168,return this;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,171,public Charset charset() {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,172,return charset;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,175,public OutputSettings charset(Charset charset) {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,176,this.charset = charset;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,177,return this;
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,180,public OutputSettings charset(String charset) {
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,181,this.charset = Charset.forName(charset);
True,src/main/java/org/jsoup/nodes/Document.java,src/main/java/org/jsoup/nodes/Document.java,182,return this;
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,1,ackage org.jsoup;
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,1,package org.jsoup.nodes;
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,3,import org.jsoup.parser.TokenQueue;
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,16,"tatic final Map<String, Integer> base;"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,17,"tatic final Map<String, Integer> full;"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,18,"tatic final Map<Integer, String> fullByVal;"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,18,public enum EscapeMode {
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,19,"base, extended"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,20,"tatic String escape(String string, Charset charset) {"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,21,/ todo: this needs option to: use base names only (with numerical as fallback)
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,22,tringBuilder accum = new StringBuilder((int) (string.length() * 1.5));
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,23,harsetEncoder encoder = charset.newEncoder();
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,22,"private static final Map<String, Character> base;"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,23,"private static final Map<String, Character> full;"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,24,"private static final Map<Character, String> baseByVal;"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,25,"private static final Map<Character, String> fullByVal;"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,27,"static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,28,StringBuilder accum = new StringBuilder(string.length() * 2);
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,29,"Map<Character, String> map = escapeMode == EscapeMode.extended ? fullByVal : baseByVal;"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,27,f (fullByVal.containsKey((int) c))
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,28,"ccum.append(""&"").append(fullByVal.get((int) c)).append("";"");"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,33,if (map.containsKey(c))
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,34,"accum.append(""&"").append(map.get(c)).append("";"");"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,32,"ccum.append(""&#"").append((int)c).append("";"");"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,38,"accum.append(""&#"").append((int) c).append("";"");"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,41,return accum.toString();
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,44,static String unescape(String string) {
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,45,"if (!string.contains(""&""))"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,46,return string;
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,48,StringBuilder accum = new StringBuilder(string.length());
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,49,TokenQueue cq = new TokenQueue(string);
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,51,"// formats dealt with: [&amp] (no semi), [&amp;], [&#123;] (int), &#"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,52,while (!cq.isEmpty()) {
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,53,"accum.append(cq.consumeTo(""&""));"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,54,"if (!cq.matches(""&"")) { // ran to end"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,55,accum.append(cq.remainder());
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,56,break;
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,58,cq.advance(); // past &
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,59,String val;
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,60,int charval = -1;
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,62,boolean isNum = false;
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,63,"if (cq.matches(""#"")) {"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,64,isNum = true;
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,65,cq.consume();
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,67,val = cq.consumeWord(); // and num!
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,68,if (val.length() == 0) {
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,69,"accum.append(""&"");"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,70,continue;
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,72,"if (cq.matches("";""))"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,73,cq.advance();
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,75,if (isNum) {
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,76,try {
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,77,if (val.charAt(0) == 'x' || val.charAt(0) == 'X')
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,78,"charval = Integer.valueOf(val.substring(1), 16);"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,79,else
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,80,"charval = Integer.valueOf(val, 10);"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,81,} catch (NumberFormatException e) {
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,82,// skip
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,84,} else {
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,85,if (full.containsKey(val.toLowerCase()))
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,86,charval = full.get(val.toLowerCase());
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,88,if (charval == -1 || charval > 0xFFFF) // out of range
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,89,"accum.append(""&"").append(val).append("";"");"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,90,else
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,91,accum.append((char) charval);
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,38,/ base entities can be unescaped without trailing ;
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,97,"// most common, base entities can be unescaped without trailing ;"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,40,tatic final Object[][] baseArray = {
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,99,private static final Object[][] baseArray = {
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,149,tatic final Object[][] fullArray = {
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,208,"// in most situations, will be better to use UTF8 and use the character directly, or use the numerical escape."
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,209,"// are people really likely to remember ""&CounterClockwiseContourIntegral;""? good grief."
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,210,private static final Object[][] fullArray = {
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2185,"ase = new HashMap<String, Integer>(baseArray.length);"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2186,"ull = new HashMap<String, Integer>(fullArray.length);"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2187,"ullByVal = new HashMap<Integer, String>(fullArray.length);"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2246,"base = new HashMap<String, Character>(baseArray.length);"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2247,"full = new HashMap<String, Character>(fullArray.length);"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2248,"baseByVal = new HashMap<Character, String>(baseArray.length);"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2249,"fullByVal = new HashMap<Character, String>(fullArray.length);"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2189,"or (Object[] entity : baseArray) base.put(((String) entity[0]).toLowerCase(), (Integer) entity[1]);"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2251,for (Object[] entity : baseArray) {
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2252,Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2253,"base.put((String) entity[0], c);"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2254,"baseByVal.put(c, ((String) entity[0]).toLowerCase());"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2191,"ull.put(((String) entity[0]).toLowerCase(), (Integer) entity[1]);"
False,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2192,"ullByVal.put((Integer) entity[1], ((String) entity[0]));"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2257,Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2258,"full.put((String) entity[0], c);"
True,src/main/java/org/jsoup/Entities.java,src/main/java/org/jsoup/nodes/Entities.java,2259,"fullByVal.put(c, ((String) entity[0]).toLowerCase());"
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,126,* Drops the next character off the queue.
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,128,public void advance() {
True,src/main/java/org/jsoup/parser/TokenQueue.java,src/main/java/org/jsoup/parser/TokenQueue.java,129,if (!isEmpty()) pos++;
False,src/test/java/org/jsoup/EntitiesTest.java,src/test/java/org/jsoup/EntitiesTest.java,1,ackage org.jsoup;
False,src/test/java/org/jsoup/EntitiesTest.java,src/test/java/org/jsoup/EntitiesTest.java,3,mport org.junit.Test;
False,src/test/java/org/jsoup/EntitiesTest.java,src/test/java/org/jsoup/EntitiesTest.java,5,mport static org.junit.Assert.*;
False,src/test/java/org/jsoup/EntitiesTest.java,src/test/java/org/jsoup/EntitiesTest.java,7,mport java.nio.charset.Charset;
False,src/test/java/org/jsoup/EntitiesTest.java,src/test/java/org/jsoup/EntitiesTest.java,9,ublic class EntitiesTest {
False,src/test/java/org/jsoup/EntitiesTest.java,src/test/java/org/jsoup/EntitiesTest.java,10,Test public void simpleEscape() {
False,src/test/java/org/jsoup/EntitiesTest.java,src/test/java/org/jsoup/EntitiesTest.java,11,"tring text = ""Hello &<> Å π 新 there"";"
False,src/test/java/org/jsoup/EntitiesTest.java,src/test/java/org/jsoup/EntitiesTest.java,12,"tring escapedAscii = Entities.escape(text, Charset.forName(""ascii""));"
False,src/test/java/org/jsoup/EntitiesTest.java,src/test/java/org/jsoup/EntitiesTest.java,13,"tring escapedUtf = Entities.escape(text, Charset.forName(""UTF-8""));"
False,src/test/java/org/jsoup/EntitiesTest.java,src/test/java/org/jsoup/EntitiesTest.java,15,"ssertEquals(""Hello &amp;&lt;&gt; &angst; &pi; &#26032; there"", escapedAscii);"
False,src/test/java/org/jsoup/EntitiesTest.java,src/test/java/org/jsoup/EntitiesTest.java,16,"ssertEquals(""Hello &amp;&lt;&gt; &angst; &pi; 新 there"", escapedUtf);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,1,package org.jsoup.nodes;
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,3,import org.junit.Test;
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,5,import static org.junit.Assert.*;
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,6,import org.jsoup.nodes.Entities;
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,8,import java.nio.charset.Charset;
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,10,public class EntitiesTest {
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,11,@Test public void escape() {
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,12,"String text = ""Hello &<> Å π 新 there"";"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,13,"String escapedAscii = Entities.escape(text, Charset.forName(""ascii"").newEncoder(), Entities.EscapeMode.base);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,14,"String escapedAsciiFull = Entities.escape(text, Charset.forName(""ascii"").newEncoder(), Entities.EscapeMode.extended);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,15,"String escapedUtf = Entities.escape(text, Charset.forName(""UTF-8"").newEncoder(), Entities.EscapeMode.base);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,17,"assertEquals(""Hello &amp;&lt;&gt; &aring; &#960; &#26032; there"", escapedAscii);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,18,"assertEquals(""Hello &amp;&lt;&gt; &angst; &pi; &#26032; there"", escapedAsciiFull);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,19,"assertEquals(""Hello &amp;&lt;&gt; &aring; π 新 there"", escapedUtf);"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,20,// odd that it's defined as aring in base but angst in full
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,23,@Test public void unescape() {
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,24,"String text = ""Hello &amp;&LT&gt; &ANGST &#960; &#960 &#x65B0; there &!"";"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,25,"assertEquals(""Hello &<> Å π π 新 there &!"", Entities.unescape(text));"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,27,"assertEquals(""&0987654321; &unknown;"", Entities.unescape(""&0987654321; &unknown""));"
True,src/test/java/org/jsoup/nodes/EntitiesTest.java,src/test/java/org/jsoup/nodes/EntitiesTest.java,28,"// these missed encodes aren't 100%, not sure how correct the fallback need to be"

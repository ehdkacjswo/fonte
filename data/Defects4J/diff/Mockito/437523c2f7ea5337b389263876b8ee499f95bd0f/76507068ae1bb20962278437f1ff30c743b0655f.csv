is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,2, Copyright (c) 2007 Mockito contributors
False,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,3, This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,3,* This program is made available under the terms of the MIT License.
False,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,7,mport java.io.Serializable;
True,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,10,import java.io.Serializable;
True,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,src/org/mockito/internal/creation/jmock/SerializableNoOp.java,13,* Offer a Serializable implementation of the NoOp CGLIB callback.
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,12,import org.mockitoutil.SimplePerRealmReloadingClassLoader;
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,13,mport java.net.MalformedURLException;
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,14,mport java.net.URL;
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,15,mport java.net.URLClassLoader;
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,83,ublic boolean needReload(String qualifiedName) {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,81,public boolean acceptReloadOf(String qualifiedName) {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,104,ublic boolean needReload(String qualifiedName) {
True,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,102,public boolean acceptReloadOf(String qualifiedName) {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,111, Custom classloader to load classes in hierarchic realm.
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,113, Each class can be reloaded in the realm if the LoadClassPredicate says so.
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,115,rivate static class SimplePerRealmReloadingClassLoader extends URLClassLoader {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,117,rivate ReloadClassPredicate reloadClassPredicate;
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,119,ublic SimplePerRealmReloadingClassLoader(ReloadClassPredicate reloadClassPredicate) {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,120,"uper(new URL[]{obtainClassPath(), obtainClassPath(""org.mockito.Mockito"")});"
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,121,his.reloadClassPredicate = reloadClassPredicate;
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,124,"ublic SimplePerRealmReloadingClassLoader(ClassLoader parentClassLoader, ReloadClassPredicate reloadClassPredicate) {"
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,125,uper(new URL[]{
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,126,"btainClassPath(),"
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,127,"btainClassPath(""org.mockito.Mockito""),"
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,128,", parentClassLoader);"
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,129,his.reloadClassPredicate = reloadClassPredicate;
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,132,rivate static URL obtainClassPath() {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,133,tring className = SimplePerRealmReloadingClassLoader.class.getName();
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,134,eturn obtainClassPath(className);
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,137,rivate static URL obtainClassPath(String className) {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,138,"tring path = className.replace('.', '/') + "".class"";"
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,139,tring url = SimplePerRealmReloadingClassLoader.class.getClassLoader().getResource(path).toExternalForm();
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,141,ry {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,142,"eturn new URL(url.substring(0, url.length() - path.length()));"
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,143, catch (MalformedURLException e) {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,144,"hrow new RuntimeException(""Classloader couldn't obtain a proper classpath URL"", e);"
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,148,Override
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,149,ublic Class<?> loadClass(String qualifiedName) throws ClassNotFoundException {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,150,f(reloadClassPredicate.needReload(qualifiedName)) {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,151,/ return customLoadClass(qualifiedName);
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,152,lass<?> foundClass = findClass(qualifiedName);
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,153,eturn foundClass;
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,155,eturn super.loadClass(qualifiedName);
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,158,ublic Object doInRealm(String callableCalledInClassLoaderRealm) throws Exception {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,159,allable<?> callableInRealm = (Callable<?>) this.loadClass(callableCalledInClassLoaderRealm).newInstance();
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,160,eturn callableInRealm.call();
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,163,ublic static interface ReloadClassPredicate {
False,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java,164,oolean needReload(String qualifiedName);
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,1,package org.mockitoutil;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,3,import java.net.MalformedURLException;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,4,import java.net.URL;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,5,import java.net.URLClassLoader;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,6,import java.util.HashMap;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,7,import java.util.Map;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,8,import java.util.concurrent.Callable;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,11,* Custom classloader to load classes in hierarchic realm.
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,13,* Each class can be reloaded in the realm if the LoadClassPredicate says so.
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,15,public class SimplePerRealmReloadingClassLoader extends URLClassLoader {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,17,"private final Map<String,Class> classHashMap = new HashMap<String, Class>();"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,18,private ReloadClassPredicate reloadClassPredicate;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,20,public SimplePerRealmReloadingClassLoader(ReloadClassPredicate reloadClassPredicate) {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,21,super(getPossibleClassPathsUrls());
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,22,this.reloadClassPredicate = reloadClassPredicate;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,25,"public SimplePerRealmReloadingClassLoader(ClassLoader parentClassLoader, ReloadClassPredicate reloadClassPredicate) {"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,26,"super(getPossibleClassPathsUrls(), parentClassLoader);"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,27,this.reloadClassPredicate = reloadClassPredicate;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,30,private static URL[] getPossibleClassPathsUrls() {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,31,return new URL[]{
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,32,"obtainClassPath(),"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,33,"obtainClassPath(""org.mockito.Mockito""),"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,34,"obtainClassPath(""org.mockito.cglib.proxy.Enhancer""),"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,38,private static URL obtainClassPath() {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,39,String className = SimplePerRealmReloadingClassLoader.class.getName();
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,40,return obtainClassPath(className);
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,43,private static URL obtainClassPath(String className) {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,44,"String path = className.replace('.', '/') + "".class"";"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,45,String url = SimplePerRealmReloadingClassLoader.class.getClassLoader().getResource(path).toExternalForm();
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,47,try {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,48,"return new URL(url.substring(0, url.length() - path.length()));"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,49,} catch (MalformedURLException e) {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,50,"throw new RuntimeException(""Classloader couldn't obtain a proper classpath URL"", e);"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,56,@Override
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,57,public Class<?> loadClass(String qualifiedClassName) throws ClassNotFoundException {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,58,if(reloadClassPredicate.acceptReloadOf(qualifiedClassName)) {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,59,// return customLoadClass(qualifiedClassName);
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,60,//            Class<?> loadedClass = findLoadedClass(qualifiedClassName);
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,61,if(!classHashMap.containsKey(qualifiedClassName)) {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,62,Class<?> foundClass = findClass(qualifiedClassName);
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,63,"saveFoundClass(qualifiedClassName, foundClass);"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,64,return foundClass;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,67,return classHashMap.get(qualifiedClassName);
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,69,return useParentClassLoaderFor(qualifiedClassName);
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,72,"private void saveFoundClass(String qualifiedClassName, Class<?> foundClass) {"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,73,"classHashMap.put(qualifiedClassName, foundClass);"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,77,private Class<?> useParentClassLoaderFor(String qualifiedName) throws ClassNotFoundException {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,78,return super.loadClass(qualifiedName);
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,82,public Object doInRealm(String callableCalledInClassLoaderRealm) throws Exception {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,83,Object instance = this.loadClass(callableCalledInClassLoaderRealm).getConstructor().newInstance();
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,84,if (instance instanceof Callable) {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,85,Callable<?> callableInRealm = (Callable<?>) instance;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,86,return callableInRealm.call();
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,88,"throw new IllegalArgumentException(""qualified name '"" + callableCalledInClassLoaderRealm + ""' should represent a class implementing Callable"");"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,92,"public Object doInRealm(String callableCalledInClassLoaderRealm, Class[] argTypes, Object[] args) throws Exception {"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,93,ClassLoader current = Thread.currentThread().getContextClassLoader();
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,94,try {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,95,Thread.currentThread().setContextClassLoader(this);
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,96,Object instance = this.loadClass(callableCalledInClassLoaderRealm).getConstructor(argTypes).newInstance(args);
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,97,if (instance instanceof Callable) {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,98,Callable<?> callableInRealm = (Callable<?>) instance;
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,99,return callableInRealm.call();
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,101,} finally {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,102,Thread.currentThread().setContextClassLoader(current);
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,105,"throw new IllegalArgumentException(""qualified name '"" + callableCalledInClassLoaderRealm + ""' should represent a class implementing Callable"");"
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,109,public static interface ReloadClassPredicate {
True,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java,110,boolean acceptReloadOf(String qualifiedName);

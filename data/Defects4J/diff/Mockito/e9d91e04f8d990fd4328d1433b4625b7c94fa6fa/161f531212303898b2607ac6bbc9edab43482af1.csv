is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,2, Copyright (c) 2007 Mockito contributors
False,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,3, This program is made available under the terms of the MIT License.
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,3,* This program is made available under the terms of the MIT License.
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,10,import org.mockito.verification.VerificationMode;
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,54,* For BDD style mock verification take a look at {@link Then} in action:
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,55,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,56,* Bike bike = new Bike();
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,57,* Person person = mock(Person.class);
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,59,* public void shouldRideBikeTwice() {
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,61,*     person.ride(bike);
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,62,*     person.ride(bike);
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,64,*     then(person).should(times(2)).ride(bike);
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,66,* </code></pre>
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,68,* Syntax alternative to the last example:
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,69,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,70,* public void shouldRideBikeTwice() {
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,72,*     person.ride(bike);
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,73,*     person.ride(bike);
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,75,*     then(person).verify(times(2)).ride(bike);
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,77,* </code></pre>
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,208,* Bdd style verification of mock behavior.
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,210,* @see #verify(Object)
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,211,"* @see #verify(Object, VerificationMode)"
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,213,public static <T> Then<T> then(T mock) {
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,214,return new Then<T>(mock);
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,218,* Provides fluent way of mock verification.
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,220,* @author Lovro Pandzic
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,221,* @param <T> type of the mock
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,223,public final static class Then<T> {
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,225,private final T mock;
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,227,public Then(T mock) {
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,229,this.mock = mock;
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,233,* @see #verify(Object)
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,235,public T should() {
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,236,return Mockito.verify(mock);
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,240,"* @see #verify(Object, VerificationMode)"
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,242,public T should(VerificationMode mode) {
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,243,"return Mockito.verify(mock, mode);"
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,247,* @see #verify(Object)
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,249,public T verify() {
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,250,return Mockito.verify(mock);
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,254,"* @see #verify(Object, VerificationMode)"
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,256,public T verify(VerificationMode mode) {
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,257,"return Mockito.verify(mock, mode);"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,61,"*      <a href=""#29"">29. (**New**) BDD style verification (Since 1.9.8)</a><br/>"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,934,"* <h3 id=""29"">29. (**New**) <a class=""meaningful_link"" href=""#BDD_behavior_verification"">BDD style verification</a> (Since 1.9.8)</h3>"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,936,* Enables Behavior Driven Development (BDD) style verification by starting verification with the BDD <b>then</b> keyword.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,938,* For more information and an example see {@link BDDMockito}.
False,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,2, Copyright (c) 2007 Mockito contributors
False,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,3, This program is made available under the terms of the MIT License.
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,9,import org.mockito.exceptions.misusing.NotAMockException;
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,10,import org.mockito.exceptions.verification.WantedButNotInvoked;
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,193,@Test(expected = NotAMockException.class)
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,194,public void shouldValidateMockWhenVerifying() {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,196,"then(""notMock"").should();"
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,199,@Test(expected = NotAMockException.class)
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,200,public void shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations() {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,202,"then(""notMock"").should(times(19));"
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,205,@Test(expected = NotAMockException.class)
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,206,public void shouldValidateMockWhenVerifyingNoMoreInteractions() {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,208,"then(""notMock"").should();"
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,211,@Test(expected = WantedButNotInvoked.class)
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,212,public void shouldFailForExpectedBehaviorThatDidNotHappen() {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,214,then(mock).should().booleanObjectReturningMethod();
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,217,@Test
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,218,public void shouldPassForExpectedBehaviorThatHappened() {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,220,mock.booleanObjectReturningMethod();
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,222,then(mock).should().booleanObjectReturningMethod();
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,225,@Test(expected = WantedButNotInvoked.class)
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,226,public void shouldFailForExpectedBehaviorThatDidNotHappenWithVerify() {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,228,then(mock).verify().booleanObjectReturningMethod();
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,231,@Test
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,232,public void shouldPassForExpectedBehaviorThatHappenedWithVerify() {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,234,mock.booleanObjectReturningMethod();
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,236,then(mock).verify().booleanObjectReturningMethod();
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,239,@Test
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,240,public void shouldPassFluentBddScenario() {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,242,Bike bike = new Bike();
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,243,Person person = mock(Person.class);
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,245,person.ride(bike);
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,246,person.ride(bike);
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,248,then(person).should(times(2)).ride(bike);
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,251,@Test
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,252,public void shouldPassFluentBddScenarioWithVerify() {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,254,Bike bike = new Bike();
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,255,Person person = mock(Person.class);
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,257,person.ride(bike);
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,258,person.ride(bike);
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,260,then(person).verify(times(2)).ride(bike);
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,263,static class Person {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,265,void ride(Bike bike) {}
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,268,static class Bike {

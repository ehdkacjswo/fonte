is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,680,"* Optional Answer to be used with {@link Mockito#mock(Class, Answer)}"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,681,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,682,* {@link Answer} can be used to define the return values of unstubbed invocations.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,683,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,684,* ReturnsDeepStubs returns reusable deep stubbing.  If the return type
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,685,* cannot be mocked (e.g. is final) then plain null is returned.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,687,* TODO: Explain how this is different from RETURNS_MOCKS
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,688,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,689,* Example:
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,690,* <pre>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,691,"*    Foo mock = mock(Foo.class, RETURNS_DEEP_STUBS);"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,693,*    // stub here
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,694,"*    when(mock.getBar().getName(), ""DeepStub"");"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,696,*    // verify
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,697,"*    assertEquals(""DeepStub"", mock.getBar().getName());"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,698,* </pre>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,699,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,701,public static final Answer<Object> RETURNS_DEEP_STUBS = new ReturnsDeepStubs();
False,src/org/mockito/internal/stubbing/InvocationContainerImpl.java,src/org/mockito/internal/stubbing/InvocationContainerImpl.java,53,"rivate void addAnswer(Answer answer, boolean isConsecutive) {"
True,src/org/mockito/internal/stubbing/InvocationContainerImpl.java,src/org/mockito/internal/stubbing/InvocationContainerImpl.java,53,"public void addAnswer(Answer answer, boolean isConsecutive) {"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,2,* Copyright (c) 2009 Mockito contributors
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,3,* This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,5,package org.mockito.internal.stubbing.defaultanswers;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,7,import org.mockito.Mockito;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,8,import org.mockito.internal.MockHandlerInterface;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,9,import org.mockito.internal.stubbing.InvocationContainerImpl;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,10,import org.mockito.internal.util.MockUtil;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,11,import org.mockito.invocation.InvocationOnMock;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,12,import org.mockito.stubbing.Answer;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,14,import java.io.Serializable;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,16,"public class ReturnsDeepStubs implements Answer<Object>, Serializable {"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,17,private static final long serialVersionUID = -6926328908792880098L;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,19,public Object answer(InvocationOnMock invocation) throws Throwable {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,20,//TODO: cover also unmockable & final classes
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,21,Class<?> clz = invocation.getMethod().getReturnType();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,22,if (clz.isPrimitive())
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,23,return null;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,24,return getMock(invocation);
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,27,private Object getMock(InvocationOnMock invocation) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,28,Class<?> clz = invocation.getMethod().getReturnType();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,29,"final Object mock = Mockito.mock(clz, this);"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,31,MockHandlerInterface<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,32,InvocationContainerImpl container = (InvocationContainerImpl)handler.getInvocationContainer();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,33,container.addAnswer(new Answer<Object>() {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,34,public Object answer(InvocationOnMock invocation) throws Throwable {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,35,return mock;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,37,"}, false);"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,39,return mock;
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,2,* Copyright (c) 2009 Mockito contributors
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,5,package org.mockitousage.stubbing;
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,7,import static org.junit.Assert.*;
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,9,import java.io.ByteArrayOutputStream;
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,10,import java.io.OutputStream;
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,11,import java.net.Socket;
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,13,import javax.net.SocketFactory;
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,15,import org.junit.Test;
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,16,import org.mockitoutil.TestBase;
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,18,import static org.mockito.Mockito.*;
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,21,public class DeepStubbingTest extends TestBase {
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,23,@Test
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,24,public void myTest() throws Exception {
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,25,"SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,26,"when(sf.createSocket(anyString(), eq(80))).thenReturn(null);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,27,"sf.createSocket(""what"", 80);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,30,@Test
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,31,public void simpleCase() throws Exception {
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,32,OutputStream out = new ByteArrayOutputStream();
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,33,Socket socket = mock(Socket.class);
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,34,when(socket.getOutputStream()).thenReturn(out);
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,36,"assertSame(out, socket.getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,40,* Test that deep stubbing works for one intermediate level
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,42,@Test
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,43,public void oneLevelDeep() throws Exception {
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,44,OutputStream out = new ByteArrayOutputStream();
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,46,"SocketFactory socketFactory = mock(SocketFactory.class, RETURNS_DEEP_STUBS);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,47,when(socketFactory.createSocket().getOutputStream()).thenReturn(out);
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,49,"assertSame(out, socketFactory.createSocket().getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,53,* Test that stubbing of two mocks stubs don't interfere
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,55,@Test
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,56,public void interactions() throws Exception {
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,57,OutputStream out1 = new ByteArrayOutputStream();
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,58,OutputStream out2 = new ByteArrayOutputStream();
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,60,"SocketFactory sf1 = mock(SocketFactory.class, RETURNS_DEEP_STUBS);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,61,when(sf1.createSocket().getOutputStream()).thenReturn(out1);
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,63,"SocketFactory sf2 = mock(SocketFactory.class, RETURNS_DEEP_STUBS);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,64,when(sf2.createSocket().getOutputStream()).thenReturn(out2);
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,66,"assertSame(out1, sf1.createSocket().getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,67,"assertSame(out2, sf2.createSocket().getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,71,* Test that stubbing of methods of different arguments don't interfere
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,73,@Test
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,74,public void withArguments() throws Exception {
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,75,OutputStream out1 = new ByteArrayOutputStream();
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,76,OutputStream out2 = new ByteArrayOutputStream();
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,77,OutputStream out3 = new ByteArrayOutputStream();
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,79,"SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,80,when(sf.createSocket().getOutputStream()).thenReturn(out1);
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,81,"when(sf.createSocket(""google.com"", 80).getOutputStream()).thenReturn(out2);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,82,"when(sf.createSocket(""stackoverflow.com"", 80).getOutputStream()).thenReturn(out3);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,84,"assertSame(out1, sf.createSocket().getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,85,"assertSame(out2, sf.createSocket(""google.com"", 80).getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,86,"assertSame(out3, sf.createSocket(""stackoverflow.com"", 80).getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,90,* Test that deep stubbing work with argument patterns
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,92,@Test
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,93,public void withAnyPatternArguments() throws Exception {
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,94,OutputStream out = new ByteArrayOutputStream();
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,96,"SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,97,"when(sf.createSocket(anyString(), anyInt()).getOutputStream()).thenReturn(out);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,99,"assertSame(out, sf.createSocket(""google.com"", 80).getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,100,"assertSame(out, sf.createSocket(""stackoverflow.com"", 8080).getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,104,* Test that deep stubbing work with argument patterns
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,106,@Test
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,107,public void withComplexPatternArguments() throws Exception {
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,108,OutputStream out1 = new ByteArrayOutputStream();
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,109,OutputStream out2 = new ByteArrayOutputStream();
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,111,"SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,112,"when(sf.createSocket(anyString(), eq(80)).getOutputStream()).thenReturn(out1);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,113,"when(sf.createSocket(anyString(), eq(8080)).getOutputStream()).thenReturn(out2);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,115,"assertSame(out2, sf.createSocket(""stackoverflow.com"", 8080).getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,116,"assertSame(out1, sf.createSocket(""google.com"", 80).getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,117,"assertSame(out2, sf.createSocket(""google.com"", 8080).getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,118,"assertSame(out1, sf.createSocket(""stackoverflow.com"", 80).getOutputStream());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,122,* Test that deep stubbing work with primitive expected values
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,124,@Test
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,125,public void withSimplePrimitive() throws Exception {
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,126,int a = 32;
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,128,"SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,129,when(sf.createSocket().getPort()).thenReturn(a);
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,131,"assertEquals(a, sf.createSocket().getPort());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,135,* Test that deep stubbing work with primitive expected values with
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,136,* pattern method arguments
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,138,@Test
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,139,public void withPatternPrimitive() throws Exception {
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,140,"int a = 12, b = 23, c = 34;"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,142,"SocketFactory sf = mock(SocketFactory.class, RETURNS_DEEP_STUBS);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,143,"when(sf.createSocket(eq(""stackoverflow.com""), eq(80)).getPort()).thenReturn(a);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,144,"when(sf.createSocket(eq(""google.com""), anyInt()).getPort()).thenReturn(b);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,145,"when(sf.createSocket(eq(""stackoverflow.com""), eq(8080)).getPort()).thenReturn(c);"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,147,"assertEquals(b, sf.createSocket(""google.com"", 80).getPort());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,148,"assertEquals(c, sf.createSocket(""stackoverflow.com"", 8080).getPort());"
True,test/org/mockitousage/stubbing/DeepStubbingTest.java,test/org/mockitousage/stubbing/DeepStubbingTest.java,149,"assertEquals(a, sf.createSocket(""stackoverflow.com"", 80).getPort());"

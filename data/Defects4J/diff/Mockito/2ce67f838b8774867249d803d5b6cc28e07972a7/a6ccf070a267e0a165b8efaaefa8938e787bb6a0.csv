is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,77,"* <li>Finally as we want to mock the actual type, but we want to pass along the contextual generics meta-data"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,78,"* that was resolved for the current return type, for this to happen we associate to the mock an new instance of"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,79,* {@link ReturnsDeepStubs} answer in which we will store the returned type generic metadata.
False,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,11,mport org.mockito.stubbing.Answer;
False,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,30,         <li>the metadata is created using the {@link #inferFrom(Type)} method from a real
False,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,31,"         Class or from a ParameterizedType, other types are not yet supported.</li>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,29,*         <li>A new instance representing the metadata is created using the {@link #inferFrom(Type)} method from a real
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,30,"*         <code>Class</code> or from a <code>ParameterizedType</code>, other types are not yet supported.</li>"
False,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,36,"         <li>Finally as we want to mock the actual type, but we want to pass along the contextual generics meta-data"
False,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,37,"         we need to create the mock ourselves as we know how to create it, depending on the kind of Type (Class,"
False,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,38,"         ParameterizedType, TypeVariable), the method {@link #toMock(Answer)} assumes this responsibility.</li>"
False,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,60, @see #toMock(Answer)
False,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,61, @see org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubs
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,55,* @see org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs

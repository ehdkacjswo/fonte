is_addition,old_file_path,new_file_path,line_num,content
False,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,11,/TODO kill the index
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,11,"//TODO kill the index, kill not used methods"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,7,mport static org.junit.Assert.*;
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,9,mport org.easymock.MockControl;
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,10,mport org.junit.Before;
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,11,mport org.junit.Test;
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,13,ublic class RecordStateInvalidDefaultReturnValueTest {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,14,ockControl<IMethods> control;
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,16,Methods mock;
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,18,Before
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,19,ublic void setup() {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,20,ontrol = MockControl.createControl(IMethods.class);
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,21,ock = control.getMock();
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,24,Test
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,25,ublic void setInvalidDefaultBooleanReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,26,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,27,ry {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,28,ontrol.setDefaultReturnValue(false);
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,29,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,30, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,31,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,35,Test
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,36,ublic void setInvalidDefaultLongReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,37,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,38,ry {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,39,ontrol.setDefaultReturnValue((long) 0);
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,40,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,41, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,42,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,46,Test
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,47,ublic void setInvalidDefaultFloatReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,48,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,49,ry {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,50,ontrol.setDefaultReturnValue((float) 0);
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,51,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,52, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,53,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,57,Test
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,58,ublic void setInvalidDefaultDoubleReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,59,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,60,ry {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,61,ontrol.setDefaultReturnValue((double) 0);
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,62,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,63, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,64,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,68,Test
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,69,ublic void setInvalidObjectDefaultReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,70,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,71,ry {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,72,ontrol.setDefaultReturnValue(new Object());
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,73,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,74, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,75,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,79,Test
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,80,ublic void setDefaultReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,81,ry {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,82,ontrol.setDefaultReturnValue(new Object());
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,83,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,84, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,85,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,86,"method call on the mock needed before setting default return value"","
False,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,87,.getMessage());
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,7,mport static org.junit.Assert.*;
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,9,mport java.io.IOException;
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,11,mport org.easymock.MockControl;
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,12,mport org.junit.Before;
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,13,mport org.junit.Test;
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,15,ublic class RecordStateInvalidDefaultThrowableTest {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,16,ockControl<IMethods> control;
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,18,Methods mock;
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,20,rivate class CheckedException extends Exception {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,23,Before
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,24,ublic void setup() {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,25,ontrol = MockControl.createControl(IMethods.class);
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,26,ock = control.getMock();
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,29,Test
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,30,ublic void throwNull() {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,31,ock.throwsNothing(false);
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,32,ry {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,33,ontrol.setDefaultThrowable(null);
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,34,"ail(""NullPointerException expected"");"
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,35, catch (NullPointerException expected) {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,36,"ssertEquals(""null cannot be thrown"", expected.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,41,Test
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,42,ublic void throwCheckedExceptionWhereNoCheckedExceptionIsThrown() {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,43,ock.throwsNothing(false);
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,44,ry {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,45,ontrol.setDefaultThrowable(new CheckedException());
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,46,"ail(""IllegalArgumentException expected"");"
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,47, catch (IllegalArgumentException expected) {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,48,"ssertEquals(""last method called on mock cannot throw """
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,49," this.getClass().getName() + ""$CheckedException"", expected"
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,50,getMessage());
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,54,Test
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,55,ublic void throwWrongCheckedException() throws IOException {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,56,ock.throwsIOException(0);
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,57,ry {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,58,ontrol.setDefaultThrowable(new CheckedException());
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,59,"ail(""IllegalArgumentException expected"");"
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,60, catch (IllegalArgumentException expected) {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,61,"ssertEquals(""last method called on mock cannot throw """
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,62," this.getClass().getName() + ""$CheckedException"", expected"
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,63,getMessage());
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,67,Test
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,68,ublic void setDefaultThrowableWithoutMethodCall() throws IOException {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,69,ry {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,70,ontrol.setDefaultThrowable(new RuntimeException());
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,71,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,72, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,73,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,74,"method call on the mock needed before setting default Throwable"","
False,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,75,xpected.getMessage());
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,7,mport static org.junit.Assert.*;
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,9,mport org.easymock.MockControl;
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,10,mport org.junit.Before;
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,11,mport org.junit.Test;
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,13,ublic class RecordStateInvalidMatcherTest {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,14,ockControl<IMethods> control;
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,16,Methods mock;
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,18,Before
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,19,ublic void setup() {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,20,ontrol = MockControl.createControl(IMethods.class);
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,21,ock = control.getMock();
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,24,Test
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,25,ublic void setMatcherBeforeCallingMethods() {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,26,ry {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,27,ontrol.setMatcher(MockControl.ARRAY_MATCHER);
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,28,ail();
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,29, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,30,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,31,"method call on the mock needed before setting matcher"","
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,32,xpected.getMessage());
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,36,Test
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,37,ublic void setMatcherTwice() {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,38,ock.simpleMethod();
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,39,ontrol.setMatcher(MockControl.ARRAY_MATCHER);
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,40,ry {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,41,ontrol.setMatcher(MockControl.EQUALS_MATCHER);
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,42,ail();
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,43, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,44,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,45,"for method simpleMethod(), a matcher has already been set"","
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,46,xpected.getMessage());
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,50,Test
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,51,ublic void setMatcherTwice2() {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,52,"ock.simpleMethodWithArgument("""");"
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,53,ontrol.setMatcher(MockControl.ARRAY_MATCHER);
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,54,ry {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,55,ontrol.setMatcher(MockControl.EQUALS_MATCHER);
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,56,ail();
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,57, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,58,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,59,"for method simpleMethodWithArgument(...), a matcher has already been set"","
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,60,xpected.getMessage());
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,64,Test
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,65,ublic void setSameMatcherTwice() {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,66,ock.simpleMethod();
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,67,ontrol.setMatcher(MockControl.ARRAY_MATCHER);
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,68,ry {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,69,ontrol.setMatcher(MockControl.ARRAY_MATCHER);
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,70, catch (IllegalStateException unexpected) {
False,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,71,"ail(""setting the same matcher should work"");"
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,7,mport static org.junit.Assert.*;
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,9,mport org.easymock.MockControl;
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,10,mport org.junit.Before;
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,11,mport org.junit.Test;
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,13,ublic class RecordStateInvalidRangeTest {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,15,ockControl<IMethods> control;
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,17,Methods mock;
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,19,Before
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,20,ublic void setUp() {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,21,ontrol = MockControl.createControl(IMethods.class);
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,22,ock = control.getMock();
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,25,Test
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,26,ublic void setOpenCallCountTwice() {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,27,ock.simpleMethod();
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,28,ontrol.setVoidCallable(MockControl.ONE_OR_MORE);
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,29,ry {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,30,ontrol.setVoidCallable(MockControl.ONE_OR_MORE);
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,31,ail();
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,32, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,33,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,34,"last method called on mock already has a non-fixed count set."","
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,35,xpected.getMessage());
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,39,Test
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,40,ublic void setIllegalMinimumCount() {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,41,ock.simpleMethod();
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,42,nt NEGATIVE = -1;
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,43,ry {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,44,"ontrol.setVoidCallable(NEGATIVE, 2);"
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,45,ail();
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,46, catch (IllegalArgumentException expected) {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,47,"ssertEquals(""minimum must be >= 0"", expected.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,51,Test
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,52,ublic void setIllegalMaximumCount() {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,53,ock.simpleMethod();
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,54,nt NON_POSITIVE = 0;
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,55,ry {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,56,"ontrol.setVoidCallable(0, NON_POSITIVE);"
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,57,ail();
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,58, catch (IllegalArgumentException expected) {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,59,"ssertEquals(""maximum must be >= 1"", expected.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,63,Test
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,64,ublic void setMinimumBiggerThanMaximum() {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,65,ock.simpleMethod();
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,66,ry {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,67,"ontrol.setVoidCallable(4, 3);"
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,68,ail();
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,69, catch (IllegalArgumentException expected) {
False,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,70,"ssertEquals(""minimum must be <= maximum"", expected.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,7,mport static org.junit.Assert.*;
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,9,mport org.easymock.MockControl;
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,10,mport org.junit.Before;
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,11,mport org.junit.Test;
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,13,ublic class RecordStateInvalidReturnValueTest {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,14,ockControl<IMethods> control;
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,16,Methods mock;
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,18,Before
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,19,ublic void setup() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,20,ontrol = MockControl.createControl(IMethods.class);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,21,ock = control.getMock();
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,24,Test
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,25,ublic void setInvalidBooleanReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,26,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,27,ry {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,28,ontrol.setReturnValue(false);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,29,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,30, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,31,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,36,Test
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,37,ublic void setInvalidLongReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,38,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,39,ry {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,40,ontrol.setReturnValue((long) 0);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,41,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,42, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,43,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,47,Test
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,48,ublic void setInvalidFloatReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,49,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,50,ry {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,51,ontrol.setReturnValue((float) 0);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,52,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,53, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,54,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,58,Test
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,59,ublic void setInvalidDoubleReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,60,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,61,ry {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,62,ontrol.setReturnValue((double) 0);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,63,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,64, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,65,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,69,Test
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,70,ublic void setInvalidObjectReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,71,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,72,ry {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,73,ontrol.setReturnValue(new Object());
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,74,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,75, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,76,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,80,Test
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,81,ublic void setInvalidBooleanReturnValueCount() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,82,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,83,ry {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,84,"ontrol.setReturnValue(false, 3);"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,85,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,86, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,87,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,92,Test
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,93,ublic void setInvalidLongReturnValueCount() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,94,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,95,ry {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,96,"ontrol.setReturnValue((long) 0, 3);"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,97,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,98, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,99,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,103,Test
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,104,ublic void setInvalidFloatReturnValueCount() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,105,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,106,ry {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,107,"ontrol.setReturnValue((float) 0, 3);"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,108,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,109, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,110,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,114,Test
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,115,ublic void setInvalidDoubleReturnValueCount() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,116,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,117,ry {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,118,"ontrol.setReturnValue((double) 0, 3);"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,119,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,120, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,121,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,125,Test
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,126,ublic void setInvalidObjectReturnValueCount() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,127,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,128,ry {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,129,"ontrol.setReturnValue(new Object(), 3);"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,130,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,131, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,132,"ssertEquals(""incompatible return value type"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,136,Test
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,137,ublic void setReturnValueForVoidMethod() {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,138,ock.simpleMethod();
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,139,ry {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,140,ontrol.setReturnValue(null);
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,141,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,142, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,143,"ssertEquals(""void method cannot return a value"", e.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,7,mport static org.junit.Assert.*;
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,9,mport org.easymock.MockControl;
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,10,mport org.easymock.internal.RecordState;
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,11,mport org.junit.Before;
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,12,mport org.junit.Test;
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,14,ublic class RecordStateInvalidStateChangeTest {
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,15,ockControl<IMethods> control;
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,17,Methods mock;
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,19,Before
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,20,ublic void setup() {
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,21,ontrol = MockControl.createControl(IMethods.class);
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,22,ock = control.getMock();
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,25,Test
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,26,ublic void activateWithoutReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,27,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,28,ry {
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,29,ontrol.replay();
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,30,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,31, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,32,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,33,"missing behavior definition for the preceeding method call oneArg(false)"","
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,34,.getMessage());
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,35,"ssertTrue(""stack trace must be cut"", Util.getStackTrace(e)"
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,36,indexOf(RecordState.class.getName()) == -1);
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,40,Test
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,41,ublic void secondCallWithoutReturnValue() {
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,42,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,43,ry {
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,44,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,45,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,46, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,47,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,48,"missing behavior definition for the preceeding method call oneArg(false)"","
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,49,.getMessage());
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,50,"ssertTrue(""stack trace must be cut"", Util.getStackTrace(e)"
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,51,indexOf(RecordState.class.getName()) == -1);
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,55,Test
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,56,ublic void verifyWithoutActivation() {
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,57,ry {
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,58,ontrol.verify();
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,59,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,60, catch (IllegalStateException e) {
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,61,"ssertEquals(""calling verify is not allowed in record state"", e"
False,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,62,getMessage());
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,7,mport static org.junit.Assert.*;
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,9,mport java.io.IOException;
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,11,mport org.easymock.MockControl;
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,12,mport org.junit.Before;
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,13,mport org.junit.Test;
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,15,ublic class RecordStateInvalidThrowableTest {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,17,ockControl<IMethods> control;
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,19,Methods mock;
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,21,rivate class CheckedException extends Exception {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,24,Before
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,25,ublic void setup() {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,26,ontrol = MockControl.createControl(IMethods.class);
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,27,ock = control.getMock();
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,30,Test
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,31,ublic void throwNull() {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,32,ock.throwsNothing(false);
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,33,ry {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,34,ontrol.setThrowable(null);
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,35,"ail(""NullPointerException expected"");"
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,36, catch (NullPointerException expected) {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,37,"ssertEquals(""null cannot be thrown"", expected.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,42,Test
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,43,ublic void throwCheckedExceptionWhereNoCheckedExceptionIsThrown() {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,44,ock.throwsNothing(false);
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,45,ry {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,46,ontrol.setThrowable(new CheckedException());
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,47,"ail(""IllegalArgumentException expected"");"
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,48, catch (IllegalArgumentException expected) {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,49,"ssertEquals(""last method called on mock cannot throw """
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,50," CheckedException.class.getName(), expected.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,54,Test
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,55,ublic void throwWrongCheckedException() throws IOException {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,56,ock.throwsIOException(0);
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,57,ry {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,58,ontrol.setThrowable(new CheckedException());
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,59,"ail(""IllegalArgumentException expected"");"
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,60, catch (IllegalArgumentException expected) {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,61,"ssertEquals(""last method called on mock cannot throw """
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,62," CheckedException.class.getName(), expected.getMessage());"
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,66,Test
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,67,ublic void throwAfterThrowable() throws IOException {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,68,ock.throwsIOException(0);
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,69,"ontrol.setThrowable(new IOException(), MockControl.ONE_OR_MORE);"
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,70,ry {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,71,ontrol.setThrowable(new IOException());
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,72,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,73, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,74,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,75,"last method called on mock already has a non-fixed count set."","
False,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,76,xpected.getMessage());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,7,mport static org.junit.Assert.*;
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,9,mport org.easymock.MockControl;
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,10,mport org.junit.Before;
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,11,mport org.junit.Test;
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,13,ublic class RecordStateInvalidUsageTest {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,15,ockControl<IMethods> control;
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,17,Methods mock;
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,19,Before
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,20,ublic void setup() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,21,ontrol = MockControl.createControl(IMethods.class);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,22,ock = control.getMock();
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,25,Test
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,26,ublic void setReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,27,ry {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,28,ontrol.setReturnValue(false);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,29,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,30, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,31,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,32,"method call on the mock needed before setting return value"","
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,33,xpected.getMessage());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,37,Test
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,38,ublic void setExpectedVoidCallCountWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,39,ry {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,40,ontrol.setVoidCallable(3);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,41,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,42, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,43,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,44,"method call on the mock needed before setting void callable"","
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,45,xpected.getMessage());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,49,Test
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,50,ublic void openVoidCallCountWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,51,ry {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,52,ontrol.setVoidCallable();
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,53,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,54, catch (Exception expected) {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,55,ssertEquals(
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,56,"method call on the mock needed before setting void callable"","
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,57,xpected.getMessage());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,61,Test
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,62,ublic void setWrongReturnValueBoolean() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,63,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,64,ry {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,65,ontrol.setReturnValue(false);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,66,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,67, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,68,"ssertEquals(""incompatible return value type"", expected"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,69,getMessage());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,73,Test
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,74,ublic void setWrongReturnValueShort() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,75,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,76,ry {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,77,ontrol.setReturnValue((short) 0);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,78,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,79, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,80,"ssertEquals(""incompatible return value type"", expected"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,81,getMessage());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,85,Test
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,86,ublic void setWrongReturnValueChar() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,87,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,88,ry {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,89,ontrol.setReturnValue((char) 0);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,90,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,91, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,92,"ssertEquals(""incompatible return value type"", expected"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,93,getMessage());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,97,Test
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,98,ublic void setWrongReturnValueInt() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,99,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,100,ry {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,101,ontrol.setReturnValue(0);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,102,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,103, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,104,"ssertEquals(""incompatible return value type"", expected"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,105,getMessage());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,109,Test
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,110,ublic void setWrongReturnValueLong() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,111,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,112,ry {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,113,ontrol.setReturnValue((long) 0);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,114,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,115, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,116,"ssertEquals(""incompatible return value type"", expected"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,117,getMessage());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,121,Test
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,122,ublic void setWrongReturnValueFloat() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,123,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,124,ry {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,125,ontrol.setReturnValue((float) 0);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,126,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,127, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,128,"ssertEquals(""incompatible return value type"", expected"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,129,getMessage());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,133,Test
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,134,ublic void setWrongReturnValueDouble() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,135,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,136,ry {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,137,ontrol.setReturnValue((double) 0);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,138,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,139, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,140,"ssertEquals(""incompatible return value type"", expected"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,141,getMessage());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,145,Test
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,146,ublic void setWrongReturnValueObject() {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,147,ock.oneArg(false);
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,148,ry {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,149,ontrol.setReturnValue(new Object());
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,150,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,151, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,152,"ssertEquals(""incompatible return value type"", expected"
False,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,153,getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,7,mport static org.easymock.EasyMock.*;
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,8,mport static org.junit.Assert.*;
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,10,mport org.easymock.MockControl;
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,11,mport org.junit.Before;
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,12,mport org.junit.Test;
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,14,ublic class RecordStateMethodCallMissingTest {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,15,ockControl<IMethods> control;
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,17,Methods mock;
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,19,Before
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,20,ublic void setup() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,21,ontrol = MockControl.createControl(IMethods.class);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,22,ock = control.getMock();
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,25,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,26,ublic void setBooleanReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,27,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,28,ontrol.setReturnValue(false);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,29,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,30, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,31,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,32,"method call on the mock needed before setting return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,33,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,37,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,38,ublic void setLongReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,39,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,40,ontrol.setReturnValue(0);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,41,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,42, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,43,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,44,"method call on the mock needed before setting return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,45,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,49,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,50,ublic void setFloatReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,51,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,52,ontrol.setReturnValue((float) 0.0);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,53,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,54, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,55,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,56,"method call on the mock needed before setting return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,57,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,61,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,62,ublic void setDoubleReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,63,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,64,ontrol.setReturnValue(0.0);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,65,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,66, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,67,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,68,"method call on the mock needed before setting return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,69,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,73,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,74,ublic void setObjectReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,75,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,76,ontrol.setReturnValue(null);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,77,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,78, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,79,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,80,"method call on the mock needed before setting return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,81,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,85,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,86,ublic void setVoidCallableWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,87,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,88,ontrol.setVoidCallable();
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,89,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,90, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,91,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,92,"method call on the mock needed before setting void callable"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,93,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,97,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,98,ublic void setThrowableWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,99,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,100,ontrol.setThrowable(new RuntimeException());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,101,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,102, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,103,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,104,"method call on the mock needed before setting Throwable"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,105,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,109,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,110,ublic void setBooleanReturnValueCountWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,111,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,112,"ontrol.setReturnValue(false, 3);"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,113,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,114, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,115,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,116,"method call on the mock needed before setting return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,117,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,121,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,122,ublic void setLongReturnValueCountWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,123,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,124,"ontrol.setReturnValue(0, 3);"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,125,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,126, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,127,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,128,"method call on the mock needed before setting return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,129,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,133,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,134,ublic void setFloatReturnValueCountWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,135,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,136,"ontrol.setReturnValue((float) 0.0, 3);"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,137,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,138, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,139,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,140,"method call on the mock needed before setting return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,141,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,145,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,146,ublic void setDoubleReturnValueCountWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,147,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,148,"ontrol.setReturnValue(0.0, 3);"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,149,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,150, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,151,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,152,"method call on the mock needed before setting return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,153,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,157,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,158,ublic void setObjectReturnValueCountWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,159,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,160,"ontrol.setReturnValue(null, 3);"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,161,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,162, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,163,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,164,"method call on the mock needed before setting return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,165,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,169,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,170,ublic void setVoidCallableCountWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,171,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,172,ontrol.setVoidCallable(3);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,173,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,174, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,175,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,176,"method call on the mock needed before setting void callable"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,177,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,181,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,182,ublic void setThrowableCountWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,183,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,184,"ontrol.setThrowable(new RuntimeException(), 3);"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,185,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,186, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,187,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,188,"method call on the mock needed before setting Throwable"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,189,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,193,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,194,ublic void setBooleanDefaultReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,195,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,196,ontrol.setDefaultReturnValue(false);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,197,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,198, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,199,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,200,"method call on the mock needed before setting default return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,201,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,205,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,206,ublic void setLongDefaultReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,207,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,208,ontrol.setDefaultReturnValue(0);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,209,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,210, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,211,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,212,"method call on the mock needed before setting default return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,213,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,217,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,218,ublic void setFloatDefaultReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,219,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,220,ontrol.setDefaultReturnValue((float) 0.0);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,221,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,222, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,223,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,224,"method call on the mock needed before setting default return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,225,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,229,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,230,ublic void setDoubleDefaultReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,231,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,232,ontrol.setDefaultReturnValue(0.0);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,233,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,234, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,235,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,236,"method call on the mock needed before setting default return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,237,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,241,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,242,ublic void setObjectDefaultReturnValueWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,243,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,244,ontrol.setDefaultReturnValue(null);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,245,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,246, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,247,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,248,"method call on the mock needed before setting default return value"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,249,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,253,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,254,ublic void setDefaultVoidCallableWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,255,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,256,ontrol.setDefaultVoidCallable();
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,257,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,258, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,259,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,260,"method call on the mock needed before setting default void callable"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,261,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,265,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,266,ublic void setDefaultThrowableWithoutMethodCall() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,267,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,268,ontrol.setDefaultThrowable(new RuntimeException());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,269,"ail(""IllegalStateException expected"");"
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,270, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,271,ssertEquals(
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,272,"method call on the mock needed before setting default Throwable"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,273,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,277,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,278,ublic void timesWithoutReturnValue() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,279,ock.booleanReturningMethod(1);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,280,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,281,xpectLastCall().times(3);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,282,ail();
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,283, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,284,"ssertEquals(""last method called on mock is not a void method"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,285,xpected.getMessage());
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,289,Test
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,290,ublic void asStubWithNonVoidMethod() {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,291,ock.booleanReturningMethod(1);
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,292,ry {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,293,xpectLastCall().asStub();
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,294,ail();
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,295, catch (IllegalStateException expected) {
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,296,"ssertEquals(""last method called on mock is not a void method"","
False,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,297,xpected.getMessage());
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,7,mport org.easymock.MockControl;
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,8,mport org.easymock.internal.MocksBehavior;
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,9,mport org.easymock.internal.ReplayState;
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,10,mport org.easymock.internal.RuntimeExceptionWrapper;
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,11,mport org.junit.Before;
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,12,mport org.junit.Test;
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,14,ublic class ReplayStateInvalidCallsTest {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,16,rivate ReplayState control;
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,18,rivate Exception exception;
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,20,Before
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,21,ublic void setUp() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,22,xception = new Exception();
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,23,ontrol = new ReplayState(new MocksBehavior(false));
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,26,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,27,ublic void expectAndThrowLongWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,28,ontrol.andThrow(exception);
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,31,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,32,ublic void expectAndReturnObjectWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,33,"ontrol.andReturn("""");"
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,36,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,37,ublic void setDefaultMatcher() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,38,ontrol.setDefaultMatcher(MockControl.ARRAY_MATCHER);
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,41,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,42,ublic void asStub() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,43,ontrol.asStub();
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,46,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,47,ublic void setMatcher() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,48,"ontrol.setMatcher(null, MockControl.ARRAY_MATCHER);"
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,51,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,52,ublic void setDefaultReturnValue() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,53,"ontrol.setDefaultReturnValue("""");"
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,56,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,57,ublic void setDefaultThrowable() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,58,ontrol.setDefaultThrowable(exception);
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,61,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,62,ublic void setDefaultVoidCallable() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,63,ontrol.setDefaultVoidCallable();
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,66,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,67,ublic void replay() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,68,ontrol.replay();
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,71,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,72,ublic void checkOrder() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,73,ontrol.checkOrder(true);
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,76,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,77,ublic void andStubReturn() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,78,"ontrol.andStubReturn(""7"");"
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,81,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,82,ublic void andStubThrow() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,83,ontrol.andStubThrow(new RuntimeException());
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,86,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,87,ublic void andStubAnswer() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,88,ontrol.andStubAnswer(null);
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,91,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,92,ublic void times() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,93,ontrol.times(MockControl.ONE);
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,96,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,97,ublic void callback() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,98,ontrol.callback(new Runnable() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,99,ublic void run() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,104,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,105,ublic void andReturn() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,106,ontrol.andReturn(null);
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,109,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,110,ublic void andThrow() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,111,ontrol.andThrow(new RuntimeException());
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,114,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,115,ublic void andAnswer() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,116,ontrol.andAnswer(null);
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,119,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,120,ublic void defaultThrowable() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,121,ontrol.setDefaultThrowable(new RuntimeException());
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,124,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,125,ublic void defaultReturnValue() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,126,ontrol.setDefaultReturnValue(null);
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,129,Test(expected = RuntimeExceptionWrapper.class)
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,130,ublic void defaultVoidCallable() {
False,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,131,ontrol.setDefaultVoidCallable();
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,7,mport org.easymock.EasyMock;
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,8,mport org.easymock.IMocksControl;
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,9,mport org.easymock.MockControl;
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,10,mport org.easymock.internal.ReplayState;
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,11,mport org.junit.Before;
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,12,mport org.junit.Test;
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,14,ublic class ReplayStateInvalidUsageTest {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,16,rivate MockControl<IMethods> control;
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,18,rivate Exception exception;
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,20,rivate ReplayState replayState;
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,22,rivate IMocksControl mocksControl;
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,24,Before
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,25,ublic void setUp() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,26,xception = new Exception();
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,27,ontrol = MockControl.createControl(IMethods.class);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,28,ontrol.replay();
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,29,ocksControl = EasyMock.createControl();
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,30,ocksControl.replay();
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,33,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,34,ublic void expectAndThrowObjectWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,35,"ontrol.expectAndThrow("""", exception, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,38,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,39,ublic void expectAndThrowDoubleWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,40,"ontrol.expectAndThrow(0.0d, exception, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,43,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,44,ublic void expectAndThrowFloatWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,45,"ontrol.expectAndThrow(0.0f, exception, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,48,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,49,ublic void expectAndThrowLongWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,50,"ontrol.expectAndThrow(0, exception, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,53,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,54,ublic void expectAndThrowBooleanWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,55,"ontrol.expectAndThrow(false, exception, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,58,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,59,ublic void expectAndThrowObjectWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,60,"ontrol.expectAndThrow("""", exception, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,63,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,64,ublic void expectAndThrowDoubleWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,65,"ontrol.expectAndThrow(0.0d, exception, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,68,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,69,ublic void expectAndThrowFloatWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,70,"ontrol.expectAndThrow(0.0f, exception, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,73,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,74,ublic void expectAndThrowLongWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,75,"ontrol.expectAndThrow(0, exception, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,78,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,79,ublic void expectAndThrowBooleanWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,80,"ontrol.expectAndThrow(false, exception, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,83,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,84,ublic void expectAndThrowObjectWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,85,"ontrol.expectAndThrow("""", exception, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,88,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,89,ublic void expectAndThrowDoubleWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,90,"ontrol.expectAndThrow(0.0d, exception, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,93,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,94,ublic void expectAndThrowFloatWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,95,"ontrol.expectAndThrow(0.0f, exception, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,98,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,99,ublic void expectAndThrowLongWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,100,"ontrol.expectAndThrow(0, exception, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,103,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,104,ublic void expectAndThrowBooleanWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,105,"ontrol.expectAndThrow(false, exception, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,108,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,109,ublic void expectAndThrowObject() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,110,"ontrol.expectAndThrow("""", exception);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,113,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,114,ublic void expectAndThrowDouble() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,115,"ontrol.expectAndThrow(0.0d, exception);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,118,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,119,ublic void expectAndThrowFloat() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,120,"ontrol.expectAndThrow(0.0f, exception);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,123,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,124,ublic void expectAndThrowLong() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,125,"ontrol.expectAndThrow(0, exception);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,128,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,129,ublic void expectAndThrowBoolean() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,130,"ontrol.expectAndThrow(false, exception);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,133,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,134,ublic void expectAndReturnObjectWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,135,"ontrol.expectAndReturn("""", """", 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,138,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,139,ublic void expectAndReturnDoubleWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,140,"ontrol.expectAndReturn(0.0d, 0.0d, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,143,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,144,ublic void expectAndReturnFloatWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,145,"ontrol.expectAndReturn(0.0f, 0.0f, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,148,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,149,ublic void expectAndReturnLongWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,150,"ontrol.expectAndReturn(0, 0, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,153,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,154,ublic void expectAndReturnBooleanWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,155,"ontrol.expectAndReturn(false, false, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,158,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,159,ublic void expectAndReturnObjectWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,160,"ontrol.expectAndReturn("""", """", 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,163,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,164,ublic void expectAndReturnDoubleWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,165,"ontrol.expectAndReturn(0.0d, 0.0d, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,168,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,169,ublic void expectAndReturnFloatWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,170,"ontrol.expectAndReturn(0.0f, 0.0f, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,173,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,174,ublic void expectAndReturnLongWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,175,"ontrol.expectAndReturn(0, 0, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,178,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,179,ublic void expectAndReturnBooleanWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,180,"ontrol.expectAndReturn(false, false, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,183,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,184,ublic void expectAndReturnObjectWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,185,"ontrol.expectAndReturn("""", """", MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,188,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,189,ublic void expectAndReturnDoubleWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,190,"ontrol.expectAndReturn(0.0d, 0.0d, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,193,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,194,ublic void expectAndReturnFloatWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,195,"ontrol.expectAndReturn(0.0f, 0.0f, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,198,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,199,ublic void expectAndReturnLongWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,200,"ontrol.expectAndReturn(0, 0, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,203,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,204,ublic void expectAndReturnBooleanWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,205,"ontrol.expectAndReturn(false, false, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,208,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,209,ublic void expectAndReturnObject() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,210,"ontrol.expectAndReturn("""", """");"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,213,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,214,ublic void expectAndReturnDouble() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,215,"ontrol.expectAndReturn(0.0d, 0.0d);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,218,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,219,ublic void expectAndReturnFloat() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,220,"ontrol.expectAndReturn(0.0f, 0.0f);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,223,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,224,ublic void expectAndReturnLong() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,225,"ontrol.expectAndReturn(0, 0);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,228,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,229,ublic void expectAndReturnBoolean() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,230,"ontrol.expectAndReturn(false, false);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,233,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,234,ublic void setDefaultMatcher() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,235,ontrol.setDefaultMatcher(MockControl.ARRAY_MATCHER);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,238,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,239,ublic void setReturnValueObjectWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,240,"ontrol.setReturnValue("""", 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,243,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,244,ublic void setReturnValueDoubleWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,245,"ontrol.setReturnValue(0.0d, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,248,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,249,ublic void setReturnValueFloatWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,250,"ontrol.setReturnValue(0.0f, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,253,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,254,ublic void setReturnValueLongWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,255,"ontrol.setReturnValue(0, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,258,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,259,ublic void setReturnValueBooleanWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,260,"ontrol.setReturnValue(false, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,263,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,264,ublic void setThrowableWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,265,"ontrol.setThrowable(exception, 1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,268,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,269,ublic void setVoidCallableWithMinMax() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,270,"ontrol.setVoidCallable(1, 2);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,273,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,274,ublic void setMatcher() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,275,ontrol.setMatcher(MockControl.ARRAY_MATCHER);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,278,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,279,ublic void setDefaultReturnValueObject() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,280,"ontrol.setDefaultReturnValue("""");"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,283,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,284,ublic void setDefaultReturnValueDouble() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,285,ontrol.setDefaultReturnValue(0.0d);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,288,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,289,ublic void setDefaultReturnValueFloat() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,290,ontrol.setDefaultReturnValue(0.0f);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,293,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,294,ublic void setDefaultReturnValueLong() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,295,ontrol.setDefaultReturnValue(0);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,298,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,299,ublic void setDefaultReturnValueBoolean() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,300,ontrol.setDefaultReturnValue(false);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,303,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,304,ublic void setDefaultThrowable() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,305,ontrol.setDefaultThrowable(exception);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,308,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,309,ublic void setDefaultVoidCallable() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,310,ontrol.setDefaultVoidCallable();
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,313,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,314,ublic void setReturnValueObjectWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,315,"ontrol.setReturnValue("""", MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,318,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,319,ublic void setReturnValueLongWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,320,"ontrol.setReturnValue(0, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,323,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,324,ublic void setReturnValueFloatWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,325,"ontrol.setReturnValue(0.0f, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,328,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,329,ublic void setReturnValueDoubleWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,330,"ontrol.setReturnValue(0.0d, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,333,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,334,ublic void setReturnValueBooleanWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,335,"ontrol.setReturnValue(false, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,338,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,339,ublic void setThrowableWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,340,"ontrol.setThrowable(exception, MockControl.ONE);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,343,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,344,ublic void setVoidCallableWithRange() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,345,ontrol.setVoidCallable(MockControl.ONE);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,348,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,349,ublic void setReturnValueObjectWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,350,"ontrol.setReturnValue("""", 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,353,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,354,ublic void setReturnValueLongWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,355,"ontrol.setReturnValue(0, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,358,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,359,ublic void setReturnValueFloatWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,360,"ontrol.setReturnValue(0.0f, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,363,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,364,ublic void setReturnValueDoubleWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,365,"ontrol.setReturnValue(0.0d, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,368,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,369,ublic void setReturnValueBooleanWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,370,"ontrol.setReturnValue(false, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,373,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,374,ublic void setThrowableWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,375,"ontrol.setThrowable(exception, 1);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,378,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,379,ublic void setVoidCallableWithCount() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,380,ontrol.setVoidCallable(1);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,383,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,384,ublic void setReturnValueObject() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,385,"ontrol.setReturnValue("""");"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,388,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,389,ublic void setReturnValueDouble() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,390,ontrol.setReturnValue(0.0d);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,393,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,394,ublic void setReturnValueFloat() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,395,ontrol.setReturnValue(0.0f);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,398,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,399,ublic void setReturnValueLong() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,400,ontrol.setReturnValue(0);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,403,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,404,ublic void setReturnValueBoolean() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,405,ontrol.setReturnValue(false);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,408,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,409,ublic void setThrowable() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,410,ontrol.setThrowable(exception);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,413,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,414,ublic void setVoidCallable() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,415,ontrol.setVoidCallable();
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,418,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,419,ublic void replay() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,420,ontrol.replay();
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,423,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,424,ublic void createMock() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,425,ocksControl.createMock(IMethods.class);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,428,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,429,ublic void createMockWithName() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,430,"ocksControl.createMock("""", IMethods.class);"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,433,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,434,ublic void checkOrder() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,435,ocksControl.checkOrder(true);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,438,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,439,ublic void andStubReturn() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,440,"ocksControl.andStubReturn(""7"");"
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,443,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,444,ublic void andStubThrow() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,445,ocksControl.andStubThrow(new RuntimeException());
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,448,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,449,ublic void asStub() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,450,ocksControl.asStub();
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,453,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,454,ublic void times() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,455,ocksControl.times(3);
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,458,Test(expected = IllegalStateException.class)
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,459,ublic void anyTimes() {
False,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,460,ocksControl.anyTimes();
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,7,mport static org.junit.Assert.*;
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,9,mport org.easymock.MockControl;
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,10,mport org.junit.Before;
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,11,mport org.junit.Test;
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,13,ublic class StacktraceTest {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,15,rivate MockControl<IMethods> control;
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,17,rivate IMethods mock;
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,19,Before
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,20,ublic void setup() {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,21,ontrol = MockControl.createStrictControl(IMethods.class);
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,22,ock = control.getMock();
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,25,rivate static class ToStringThrowsException {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,26,Override
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,27,ublic String toString() {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,28,hrow new NullPointerException();
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,32,Test
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,33,ublic void assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock() {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,34,ock.oneArg(new ToStringThrowsException());
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,35,ry {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,36,ock.oneArg(new ToStringThrowsException());
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,37, catch (NullPointerException expected) {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,38,"ssertTrue(""stack trace must not be cut"","
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,39,til.getStackTrace(expected).indexOf(
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,40,oStringThrowsException.class.getName()) > 0);
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,44,Test
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,45,ublic void assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock() {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,46,ock.oneArg(new ToStringThrowsException());
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,47,ry {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,48,ontrol.replay();
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,49, catch (NullPointerException expected) {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,50,"ssertTrue(""stack trace must not be cut"","
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,51,til.getStackTrace(expected).indexOf(
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,52,oStringThrowsException.class.getName()) > 0);
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,56,Test
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,57,ublic void assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock() {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,58,ontrol.replay();
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,59,ry {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,60,ock.oneArg(new ToStringThrowsException());
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,61, catch (NullPointerException expected) {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,62,"ssertTrue(""stack trace must not be cut"","
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,63,til.getStackTrace(expected).indexOf(
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,64,oStringThrowsException.class.getName()) > 0);
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,68,Test
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,69,ublic void assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock() {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,70,ock.oneArg(new ToStringThrowsException());
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,71,"ontrol.setReturnValue("""");"
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,72,ontrol.replay();
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,73,ry {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,74,ontrol.verify();
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,75,ail();
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,76, catch (NullPointerException expected) {
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,77,"ssertTrue(""stack trace must not be cut"","
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,78,til.getStackTrace(expected).indexOf(
False,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,79,oStringThrowsException.class.getName()) > 0);
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,7,mport static org.junit.Assert.*;
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,9,mport org.easymock.MockControl;
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,10,mport org.junit.Before;
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,11,mport org.junit.Test;
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,13,ublic class UsageCallCountTest {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,15,rivate MockControl<VoidMethodInterface> control;
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,17,rivate VoidMethodInterface mock;
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,19,rivate interface VoidMethodInterface {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,20,oid method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,23,Before
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,24,ublic void setup() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,25,ontrol = MockControl.createControl(VoidMethodInterface.class);
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,26,ock = control.getMock();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,29,Test
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,30,ublic void mockWithNoExpectedCallsPassesWithNoCalls() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,31,ontrol.replay();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,32,ontrol.verify();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,35,Test
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,36,ublic void mockWithNoExpectedCallsFailsAtFirstCall() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,37,ontrol.replay();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,38,ssertMethodCallFails();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,41,Test
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,42,ublic void mockWithOneExpectedCallFailsAtVerify() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,43,allMethodOnce();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,44,ontrol.replay();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,45,ssertVerifyFails();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,48,Test
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,49,ublic void mockWithOneExpectedCallPassesWithOneCall() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,50,allMethodOnce();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,51,ontrol.replay();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,52,allMethodOnce();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,53,ontrol.verify();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,56,Test
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,57,ublic void mockWithOneExpectedCallFailsAtSecondCall() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,58,allMethodOnce();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,59,ontrol.replay();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,60,allMethodOnce();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,61,ssertMethodCallFails();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,64,Test
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,65,ublic void tooFewCalls() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,66,allMethodThreeTimes();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,67,ontrol.replay();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,68,allMethodTwice();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,69,ssertVerifyFails();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,72,Test
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,73,ublic void correctNumberOfCalls() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,74,allMethodThreeTimes();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,75,ontrol.replay();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,76,allMethodThreeTimes();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,77,ontrol.verify();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,80,Test
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,81,ublic void tooManyCalls() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,82,allMethodThreeTimes();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,83,ontrol.replay();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,84,allMethodThreeTimes();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,85,ssertMethodCallFails();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,88,rivate void callMethodOnce() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,89,ock.method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,92,rivate void callMethodTwice() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,93,ock.method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,94,ock.method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,97,rivate void callMethodThreeTimes() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,98,ock.method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,99,ock.method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,100,ock.method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,103,rivate void assertVerifyFails() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,104,ry {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,105,ontrol.verify();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,106,"ail(""Expected AssertionError"");"
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,107, catch (AssertionError expected) {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,111,rivate void assertMethodCallFails() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,112,ry {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,113,ock.method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,114,"ail(""Expected AssertionError"");"
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,115, catch (AssertionError expected) {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,119,Test
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,120,ublic void noUpperLimitWithoutCallCountSet() {
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,121,ock.method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,122,ontrol.setVoidCallable(MockControl.ONE_OR_MORE);
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,123,ontrol.replay();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,124,ssertVerifyFails();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,125,ock.method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,126,ontrol.verify();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,127,ock.method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,128,ontrol.verify();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,129,ock.method();
False,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,130,ontrol.verify();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,5,ackage org.easymock.tests;
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,7,mport static org.easymock.EasyMock.*;
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,8,mport static org.junit.Assert.*;
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,10,mport org.easymock.MockControl;
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,11,mport org.junit.Before;
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,12,mport org.junit.Test;
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,14,ublic class UsageDefaultReturnValueTest {
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,15,ockControl<IMethods> control;
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,17,Methods mock;
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,19,Before
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,20,ublic void setup() {
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,21,ontrol = MockControl.createControl(IMethods.class);
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,22,ock = control.getMock();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,25,Test
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,26,ublic void defaultReturnValue() {
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,27,"ock.threeArgumentMethod(7, """", ""test"");"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,28,"ontrol.setReturnValue(""test"", 1);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,30,"ock.threeArgumentMethod(8, null, ""test2"");"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,31,"ontrol.setReturnValue(""test2"", 1);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,33,bject defaultValue = new Object();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,34,ontrol.setDefaultReturnValue(defaultValue);
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,36,ontrol.replay();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,37,"ssertEquals(""test"", mock.threeArgumentMethod(7, """", ""test""));"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,38,"ssertEquals(""test2"", mock.threeArgumentMethod(8, null, ""test2""));"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,39,"ssertSame(defaultValue, mock.threeArgumentMethod(7, new Object(),"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,40,"test""));"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,41,"ssertSame(defaultValue, mock.threeArgumentMethod(7, """", ""test""));"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,42,"ssertSame(defaultValue, mock.threeArgumentMethod(8, null, ""test""));"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,43,"ssertSame(defaultValue, mock.threeArgumentMethod(9, null, ""test""));"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,45,ontrol.verify();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,48,Test
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,49,ublic void defaultVoidCallable() {
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,51,"ock.twoArgumentMethod(1, 2);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,52,ontrol.setDefaultVoidCallable();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,54,"ock.twoArgumentMethod(1, 1);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,55,untimeException expected = new RuntimeException();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,56,ontrol.setThrowable(expected);
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,58,ontrol.replay();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,59,"ock.twoArgumentMethod(2, 1);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,60,"ock.twoArgumentMethod(1, 2);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,61,"ock.twoArgumentMethod(3, 7);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,63,ry {
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,64,"ock.twoArgumentMethod(1, 1);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,65,"ail(""RuntimeException expected"");"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,66, catch (RuntimeException actual) {
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,67,"ssertSame(expected, actual);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,72,Test
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,73,ublic void defaultThrowable() {
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,74,"ock.twoArgumentMethod(1, 2);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,75,ontrol.setVoidCallable();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,76,"ock.twoArgumentMethod(1, 1);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,77,ontrol.setVoidCallable();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,79,untimeException expected = new RuntimeException();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,80,ontrol.setDefaultThrowable(expected);
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,82,ontrol.replay();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,84,"ock.twoArgumentMethod(1, 2);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,85,"ock.twoArgumentMethod(1, 1);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,86,ry {
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,87,"ock.twoArgumentMethod(2, 1);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,88,"ail(""RuntimeException expected"");"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,89, catch (RuntimeException actual) {
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,90,"ssertSame(expected, actual);"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,94,Test
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,95,ublic void defaultReturnValueBoolean() {
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,96,ock.booleanReturningMethod(12);
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,97,ontrol.setReturnValue(true);
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,98,ontrol.setDefaultReturnValue(false);
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,100,ontrol.replay();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,102,ssertFalse(mock.booleanReturningMethod(11));
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,103,ssertTrue(mock.booleanReturningMethod(12));
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,104,ssertFalse(mock.booleanReturningMethod(13));
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,106,ontrol.verify();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,109,Test
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,110,ublic void returnValueAndDefaultReturnValue() throws Exception {
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,112,"ock.oneArg("""");"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,114,"xpectLastCall().andReturn(""1"");"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,115,"ontrol.setDefaultReturnValue(""2"");"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,117,ontrol.replay();
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,119,"ssertEquals(""1"", mock.oneArg(""""));"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,120,"ssertEquals(""2"", mock.oneArg(""""));"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,121,"ssertEquals(""2"", mock.oneArg(""X""));"
False,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,123,ontrol.verify();
False,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,74,ublic void shouldNotAllowSettingCheckedException() throws Exception {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,74,public void shouldNotAllowSettingInvalidCheckedException() throws Exception {

is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,10,rivate List<MockitoInvocation> registeredInvocations = new LinkedList<MockitoInvocation>();
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,11,"rivate Map<MockitoInvocation, Result> results = new HashMap<MockitoInvocation, Result>();"
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,10,private List<InvocationWithMatchers> registeredInvocations = new LinkedList<InvocationWithMatchers>();
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,11,"private Map<InvocationWithMatchers, Result> results = new HashMap<InvocationWithMatchers, Result>();"
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,13,ublic void addInvocation(MockitoInvocation invocation) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,13,public void addInvocation(InvocationWithMatchers invocation) {
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,39,or (MockitoInvocation registeredInvocation : registeredInvocations) {
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,40,f (expectedInvocation.matches(registeredInvocation)) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,39,for (InvocationWithMatchers registeredInvocation : registeredInvocations) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,40,MockitoInvocation invocation = registeredInvocation.getInvocation();
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,41,if (expectedInvocation.matches(invocation)) {
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,42,egisteredInvocation.markVerified();
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,43,invocation.markVerified();
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,52,or (MockitoInvocation registeredInvocation : registeredInvocations) {
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,53,f (!registeredInvocation.isVerified()) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,53,for (InvocationWithMatchers registeredInvocation : registeredInvocations) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,54,if (!registeredInvocation.getInvocation().isVerified()) {
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,60,f (results.get(invocation) == null) {
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,61,eturn ToTypeMappings.emptyReturnValueFor(invocation.getMethod().getReturnType());
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,62, else {
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,63,eturn results.get(invocation).answer();
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,61,for (InvocationWithMatchers invocationWithMatchers : results.keySet()) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,62,if (invocationWithMatchers.matches(invocation)) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,63,return results.get(invocationWithMatchers).answer();
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,67,return ToTypeMappings.emptyReturnValueFor(invocation.getMethod().getReturnType());
False,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,68,eturn registeredInvocations.get(registeredInvocations.size() - 1);
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,71,return registeredInvocations.get(registeredInvocations.size() - 1).getInvocation();
False,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,31,ehavior.addInvocation(invocation);
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,31,behavior.addInvocation(invocationWithMatchers);
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,9,//TODO kill this class and move verified to InvocationWithMatchers
True,src/org/mockito/exceptions/InvalidUseOfMatchersException.java,src/org/mockito/exceptions/InvalidUseOfMatchersException.java,1,package org.mockito.exceptions;
True,src/org/mockito/exceptions/InvalidUseOfMatchersException.java,src/org/mockito/exceptions/InvalidUseOfMatchersException.java,3,public class InvalidUseOfMatchersException extends RuntimeException {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,5,ackage org.easymock;
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,7,mport static org.easymock.EasyMock.*;
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,8,mport static org.junit.Assert.*;
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,10,mport org.easymock.IAnswer;
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,11,mport org.junit.Before;
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,12,mport org.junit.Test;
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,14,ublic class AnswerTest {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,16,rivate IMethods mock;
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,18,Before
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,19,ublic void setUp() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,20,ock = createMock(IMethods.class);
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,23,"SuppressWarnings(""unchecked"")"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,24,Test
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,25,ublic void answer() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,26,Answer firstAnswer = new IAnswer() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,27,ublic Object answer() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,28,"ssertEquals(new Object[] { 1, ""2"", ""3"" },"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,29,etCurrentArguments());
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,30,"eturn ""Call answered"";"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,34,Answer secondAnswer = new IAnswer() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,35,ublic Object answer() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,36,"ssertEquals(new Object[] { 1, ""2"", ""3"" },"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,37,etCurrentArguments());
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,38,"hrow new IllegalStateException(""Call answered"");"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,42,"xpect(mock.threeArgumentMethod(1, ""2"", ""3"")).andAnswer(firstAnswer)"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,43,"andReturn(""Second call"").andAnswer(secondAnswer).andReturn("
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,44,"Fourth call"");"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,46,eplay(mock);
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,48,"ssertEquals(""Call answered"", mock.threeArgumentMethod(1, ""2"", ""3""));"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,49,"ssertEquals(""Second call"", mock.threeArgumentMethod(1, ""2"", ""3""));"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,50,ry {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,51,"ock.threeArgumentMethod(1, ""2"", ""3"");"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,52,ail();
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,53, catch (IllegalStateException expected) {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,54,"ssertEquals(""Call answered"", expected.getMessage());"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,56,"ssertEquals(""Fourth call"", mock.threeArgumentMethod(1, ""2"", ""3""));"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,58,erify(mock);
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,61,"SuppressWarnings(""unchecked"")"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,62,Test
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,63,ublic void stubAnswer() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,64,Answer firstAnswer = new IAnswer() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,65,ublic Object answer() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,66,"ssertEquals(new Object[] { 1, ""2"", ""3"" },"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,67,etCurrentArguments());
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,68,"eturn ""Call answered"";"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,72,Answer secondAnswer = new IAnswer() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,73,ublic Object answer() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,74,"ssertEquals(new Object[] { 1, ""2"", ""4"" },"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,75,etCurrentArguments());
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,76,"eturn ""Call answered"";"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,80,"xpect(mock.threeArgumentMethod(1, ""2"", ""3"")).andReturn(42)"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,81,andStubAnswer(firstAnswer);
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,82,"xpect(mock.threeArgumentMethod(1, ""2"", ""4"")).andStubAnswer("
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,83,econdAnswer);
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,85,eplay(mock);
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,87,"ssertEquals(42, mock.threeArgumentMethod(1, ""2"", ""3""));"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,88,"ssertEquals(""Call answered"", mock.threeArgumentMethod(1, ""2"", ""3""));"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,89,"ssertEquals(""Call answered"", mock.threeArgumentMethod(1, ""2"", ""4""));"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,90,"ssertEquals(""Call answered"", mock.threeArgumentMethod(1, ""2"", ""3""));"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,91,"ssertEquals(""Call answered"", mock.threeArgumentMethod(1, ""2"", ""3""));"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,93,erify(mock);
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,96,Test
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,97,ublic void nullAnswerNotAllowed() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,98,ry {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,99,"xpect(mock.threeArgumentMethod(1, ""2"", ""3"")).andAnswer(null);"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,100,ail();
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,101, catch (NullPointerException expected) {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,102,"ssertEquals(""answer object must not be null"", expected"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,103,getMessage());
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,107,Test
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,108,ublic void nullStubAnswerNotAllowed() {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,109,ry {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,110,"xpect(mock.threeArgumentMethod(1, ""2"", ""3"")).andStubAnswer(null);"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,111,ail();
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,112, catch (NullPointerException expected) {
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,113,"ssertEquals(""answer object must not be null"", expected"
False,test/org/easymock/AnswerTest.java,test/org/easymock/AnswerTest.java,114,getMessage());
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,5,ackage org.easymock;
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,7,mport static org.easymock.EasyMock.*;
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,8,mport static org.junit.Assert.*;
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,10,mport org.easymock.IAnswer;
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,11,mport org.junit.Before;
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,12,mport org.junit.Test;
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,14,ublic class CallbackAndArgumentsTest {
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,16,rivate IMethods mock;
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,18,Before
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,19,ublic void setUp() {
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,20,ock = createStrictMock(IMethods.class);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,23,Test
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,24,ublic void callbackGetsArguments() {
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,26,inal StringBuffer buffer = new StringBuffer();
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,28,ock.simpleMethodWithArgument((String) notNull());
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,29,xpectLastCall().andAnswer(new IAnswer<Object>() {
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,30,ublic Object answer() {
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,31,uffer.append((String) getCurrentArguments()[0]);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,32,eturn null;
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,34,).times(2);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,36,eplay(mock);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,38,"ock.simpleMethodWithArgument(""1"");"
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,39,"ock.simpleMethodWithArgument(""2"");"
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,41,erify(mock);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,43,"ssertEquals(""12"", buffer.toString());"
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,46,Test(expected = IllegalStateException.class)
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,47,ublic void currentArgumentsFailsOutsideCallbacks() {
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,48,etCurrentArguments();
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,51,Test
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,52,ublic void callbackGetsArgumentsEvenIfAMockCallsAnother() {
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,54,inal StringBuffer buffer = new StringBuffer();
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,56,inal IMethods mock2 = createStrictMock(IMethods.class);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,57,ock2.simpleMethod();
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,58,xpectLastCall().andAnswer(new IAnswer<Object>() {
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,59,ublic Object answer() {
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,60,"/ empty, only needed to force deletion of arguments"
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,61,eturn null;
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,63,).times(2);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,65,ock.simpleMethodWithArgument((String) notNull());
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,66,xpectLastCall().andAnswer(new IAnswer<Object>() {
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,67,ublic Object answer() {
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,68,ock2.simpleMethod();
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,69,uffer.append((String) getCurrentArguments()[0]);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,70,eturn null;
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,72,).times(2);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,74,eplay(mock);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,75,eplay(mock2);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,77,"ock.simpleMethodWithArgument(""1"");"
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,78,"ock.simpleMethodWithArgument(""2"");"
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,80,erify(mock);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,81,erify(mock2);
False,test/org/easymock/CallbackAndArgumentsTest.java,test/org/easymock/CallbackAndArgumentsTest.java,83,"ssertEquals(""12"", buffer.toString());"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,5,ackage org.easymock;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,7,mport static org.easymock.EasyMock.*;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,8,mport static org.junit.Assert.*;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,10,mport org.easymock.IAnswer;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,11,mport org.junit.Before;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,12,mport org.junit.Test;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,14,ublic class CallbackTest {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,16,rivate IMethods mock;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,18,rivate static class Callback<T> implements IAnswer<T> {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,19,rivate int callCount;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,21,rivate T result;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,23,ublic Callback(T result) {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,24,his.result = result;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,27,ublic void run() {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,30,ublic int getCallCount() {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,31,eturn callCount;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,34,ublic T answer() throws Throwable {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,35,allCount++;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,36,eturn result;
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,40,Before
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,41,ublic void setUp() {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,42,ock = createStrictMock(IMethods.class);
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,45,Test
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,46,ublic void callback() {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,47,"allback<String> c1 = new Callback<String>(""1"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,48,allback<Object> c2 = new Callback<Object>(null);
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,49,allback<Object> c3 = new Callback<Object>(null);
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,51,"xpect(mock.oneArg(""2"")).andAnswer(c1).times(2);"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,52,"ock.simpleMethodWithArgument(""One"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,53,xpectLastCall().andAnswer(c2);
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,54,"ock.simpleMethodWithArgument(""Two"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,55,xpectLastCall().andAnswer(c3).times(2);
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,57,eplay(mock);
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,59,"ock.oneArg(""2"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,60,"ock.oneArg(""2"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,61,ry {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,62,"ock.oneArg(""2"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,63, catch (AssertionError ignored) {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,65,ry {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,66,"ock.simpleMethodWithArgument(""Two"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,67, catch (AssertionError ignored) {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,69,"ock.simpleMethodWithArgument(""One"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,70,ry {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,71,"ock.simpleMethodWithArgument(""One"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,72, catch (AssertionError ignored) {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,74,"ock.simpleMethodWithArgument(""Two"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,75,"ock.simpleMethodWithArgument(""Two"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,76,ry {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,77,"ock.simpleMethodWithArgument(""Two"");"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,78, catch (AssertionError ignored) {
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,80,erify(mock);
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,82,"ssertEquals(2, c1.getCallCount());"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,83,"ssertEquals(1, c2.getCallCount());"
False,test/org/easymock/CallbackTest.java,test/org/easymock/CallbackTest.java,84,"ssertEquals(2, c3.getCallCount());"
True,test/org/easymock/CompareToTest.java,test/org/easymock/CompareToTest.java,14,//TODO do we need matchers like GreaterThan - does it make any sense?
False,test/org/easymock/CompareToTest.java,test/org/easymock/CompareToTest.java,66,"rivate void test(CompareTo<String> cmpTo, boolean lower, boolean higher,"
True,test/org/easymock/CompareToTest.java,test/org/easymock/CompareToTest.java,67,"private void test(CompareTo<String> compareTo, boolean lower, boolean higher,"
False,test/org/easymock/CompareToTest.java,test/org/easymock/CompareToTest.java,69,"ssertEquals(lower, cmpTo.matches(""a""));"
False,test/org/easymock/CompareToTest.java,test/org/easymock/CompareToTest.java,70,"ssertEquals(equals, cmpTo.matches(""b""));"
False,test/org/easymock/CompareToTest.java,test/org/easymock/CompareToTest.java,71,"ssertEquals(higher, cmpTo.matches(""c""));"
True,test/org/easymock/CompareToTest.java,test/org/easymock/CompareToTest.java,70,"assertEquals(lower, compareTo.matches(""a""));"
True,test/org/easymock/CompareToTest.java,test/org/easymock/CompareToTest.java,71,"assertEquals(equals, compareTo.matches(""b""));"
True,test/org/easymock/CompareToTest.java,test/org/easymock/CompareToTest.java,72,"assertEquals(higher, compareTo.matches(""c""));"
False,test/org/easymock/CompareToTest.java,test/org/easymock/CompareToTest.java,74,mpTo.appendTo(sb);
True,test/org/easymock/CompareToTest.java,test/org/easymock/CompareToTest.java,75,compareTo.appendTo(sb);
True,test/org/easymock/NameTest.java,test/org/easymock/NameTest.java,9,//TODO change this test so it asserts nice exception messages and method name is displayed
False,test/org/easymock/NameTest.java,test/org/easymock/NameTest.java,64,Test
False,test/org/easymock/NameTest.java,test/org/easymock/NameTest.java,65,ublic void shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier() {
False,test/org/easymock/NameTest.java,test/org/easymock/NameTest.java,66,ry {
False,test/org/easymock/NameTest.java,test/org/easymock/NameTest.java,67,"reateMock(""no-valid-java-identifier"", IMethods.class);"
False,test/org/easymock/NameTest.java,test/org/easymock/NameTest.java,68,hrow new AssertionError();
False,test/org/easymock/NameTest.java,test/org/easymock/NameTest.java,69, catch (IllegalArgumentException expected) {
False,test/org/easymock/NameTest.java,test/org/easymock/NameTest.java,70,"ssertEquals(""'no-valid-java-identifier' is not a valid Java identifier."", expected.getMessage());"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,5,ackage org.easymock;
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,7,mport static org.easymock.EasyMock.*;
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,8,mport static org.junit.Assert.*;
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,10,mport org.junit.Before;
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,11,mport org.junit.Test;
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,13,ublic class StubTest {
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,14,rivate IMethods mock;
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,16,Before
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,17,ublic void setup() {
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,18,ock = createStrictMock(IMethods.class);
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,21,Test
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,22,ublic void stub() {
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,23,"ock.simpleMethodWithArgument(""1"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,24,xpectLastCall().anyTimes();
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,25,"ock.simpleMethodWithArgument(""2"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,26,xpectLastCall().anyTimes();
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,27,"ock.simpleMethodWithArgument(""3"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,28,xpectLastCall().asStub();
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,30,eplay(mock);
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,32,"ock.simpleMethodWithArgument(""3"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,33,"ock.simpleMethodWithArgument(""3"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,34,"ock.simpleMethodWithArgument(""1"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,35,"ock.simpleMethodWithArgument(""2"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,36,"ock.simpleMethodWithArgument(""3"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,37,"ock.simpleMethodWithArgument(""3"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,39,erify(mock);
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,43,Test
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,44,ublic void stubWithReturnValue() {
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,45,"xpect(mock.oneArg(""1"")).andReturn(""A"").andStubReturn(""B"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,46,"xpect(mock.oneArg(""2"")).andThrow(new IllegalArgumentException())"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,47,andStubThrow(new IllegalStateException());
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,49,eplay(mock);
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,51,"ssertEquals(""A"", mock.oneArg(""1""));"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,52,"ssertEquals(""B"", mock.oneArg(""1""));"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,53,"ssertEquals(""B"", mock.oneArg(""1""));"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,54,ry {
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,55,"ock.oneArg(""2"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,56, catch (IllegalArgumentException ignored) {
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,58,"ssertEquals(""B"", mock.oneArg(""1""));"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,59,ry {
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,60,"ock.oneArg(""2"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,61, catch (IllegalStateException ignored) {
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,63,"ssertEquals(""B"", mock.oneArg(""1""));"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,64,ry {
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,65,"ock.oneArg(""2"");"
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,66, catch (IllegalStateException ignored) {
False,test/org/easymock/StubTest.java,test/org/easymock/StubTest.java,68,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,5,ackage org.easymock;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,7,mport static org.junit.Assert.*;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,8,mport static org.easymock.EasyMock.*;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,10,mport java.math.*;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,11,mport java.util.*;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,13,mport org.easymock.*;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,14,mport org.easymock.internal.matchers.*;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,15,mport org.easymock.tests.*;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,16,mport org.junit.*;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,18,ublic class UsageConstraintsTest {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,19,rivate IMethods mock;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,21,Before
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,22,ublic void setUp() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,23,ock = createMock(IMethods.class);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,26,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,27,ublic void equalsMissing() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,28,"ock.simpleMethodWithArgument(not(eq(""asd"")));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,29,ry {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,30,"ock.simpleMethodWithArgument(not(""jkl""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,31,ail();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,32, catch (IllegalStateException e) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,33,"ssertEquals(""no matchers found."", e.getMessage());"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,35,ry {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,36,"ock.simpleMethodWithArgument(or(eq(""jkl""), ""asd""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,37,ail();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,38, catch (IllegalStateException e) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,39,"ssertEquals(""2 matchers expected, 1 recorded."", e.getMessage());"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,41,ry {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,42,"ock.threeArgumentMethod(1, ""asd"", eq(""asd""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,43,ail();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,44, catch (IllegalStateException e) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,45,"ssertEquals(""3 matchers expected, 1 recorded."", e.getMessage());"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,50,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,51,ublic void differentConstraintsOnSameCall() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,52,ock.simpleMethodWithArgument((String) isNull());
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,53,ock.simpleMethodWithArgument((String) notNull());
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,54,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,55,ock.simpleMethodWithArgument(null);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,56,"ock.simpleMethodWithArgument(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,59,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,60,ublic void equals() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,61,"ssertEquals(new Equals(null), new Equals(null));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,62,"ssertEquals(new Equals(new Integer(2)), new Equals(new Integer(2)));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,63,ssertFalse(new Equals(null).equals(null));
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,64,"ssertFalse(new Equals(null).equals(""Test""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,65,ry {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,66,ew Equals(null).hashCode();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,67,ail();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,68, catch (UnsupportedOperationException expected) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,72,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,73,ublic void constraints() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,74,xpect(
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,75,"ock.threeArgumentMethod(and(geq(7), leq(10)),"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,76,"sA(String.class), contains(""123""))).andReturn(""456"")"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,77,atLeastOnce();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,78,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,79,oolean failed = false;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,80,ry {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,81,"ock.threeArgumentMethod(11, """", ""01234"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,82, catch (AssertionError expected) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,83,ailed = true;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,85,f (!failed) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,86,ail();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,88,ailed = false;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,89,ry {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,90,"ock.threeArgumentMethod(8, new Object(), ""01234"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,91, catch (AssertionError expected) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,92,ailed = true;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,94,f (!failed) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,95,ail();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,97,ailed = false;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,98,ry {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,99,"ock.threeArgumentMethod(8, """", ""no match"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,100, catch (AssertionError expected) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,101,ailed = true;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,103,f (!failed) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,104,ail();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,106,"ssertEquals(""456"", mock.threeArgumentMethod(8, """", ""01234""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,107,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,110,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,111,ublic void andOverloaded() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,112,"xpect(mock.oneArg(and(eq(false), eq(false)))).andReturn(""0"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,113,"xpect(mock.oneArg(and(eq((byte) 1), eq((byte) 1)))).andReturn(""1"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,114,"xpect(mock.oneArg(and(eq('a'), eq('a')))).andReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,115,"xpect(mock.oneArg(and(eq((double) 1), eq((double) 1)))).andReturn(""3"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,116,"xpect(mock.oneArg(and(eq((float) 1), eq((float) 1)))).andReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,117,"xpect(mock.oneArg(and(eq((int) 1), eq((int) 1)))).andReturn(""5"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,118,"xpect(mock.oneArg(and(eq((long) 1), eq((long) 1)))).andReturn(""6"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,119,"xpect(mock.oneArg(and(eq((short) 1), eq((short) 1)))).andReturn(""7"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,120,"xpect(mock.oneArg(and(contains(""a""), contains(""d"")))).andReturn(""8"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,121,"xpect(mock.oneArg(and(isA(Class.class), eq(Object.class)))).andReturn("
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,122,"9"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,123,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,124,"ssertEquals(""9"", mock.oneArg(Object.class));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,125,"ssertEquals(""0"", mock.oneArg(false));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,126,"ssertEquals(""1"", mock.oneArg((byte) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,127,"ssertEquals(""2"", mock.oneArg('a'));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,128,"ssertEquals(""3"", mock.oneArg((double) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,129,"ssertEquals(""7"", mock.oneArg((short) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,130,"ssertEquals(""8"", mock.oneArg(""abcde""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,131,"ssertEquals(""4"", mock.oneArg((float) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,132,"ssertEquals(""5"", mock.oneArg((int) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,133,"ssertEquals(""6"", mock.oneArg((long) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,134,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,137,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,138,ublic void orOverloaded() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,139,"xpect(mock.oneArg(or(eq(false), eq(true)))).andReturn(""0"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,140,"xpect(mock.oneArg(or(eq((byte) 1), eq((byte) 2)))).andReturn(""1"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,141,"xpect(mock.oneArg(or(eq((char) 1), eq((char) 2)))).andReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,142,"xpect(mock.oneArg(or(eq((double) 1), eq((double) 2)))).andReturn(""3"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,143,"xpect(mock.oneArg(or(eq((float) 1), eq((float) 2)))).andReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,144,"xpect(mock.oneArg(or(eq((int) 1), eq((int) 2)))).andReturn(""5"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,145,"xpect(mock.oneArg(or(eq((long) 1), eq((long) 2)))).andReturn(""6"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,146,"xpect(mock.oneArg(or(eq((short) 1), eq((short) 2)))).andReturn(""7"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,147,"xpect(mock.oneArg(or(eq(""asd""), eq(""jkl"")))).andReturn(""8"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,148,"xpect(mock.oneArg(or(eq(this.getClass()), eq(Object.class))))"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,149,"andReturn(""9"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,150,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,151,"ssertEquals(""9"", mock.oneArg(Object.class));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,152,"ssertEquals(""0"", mock.oneArg(true));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,153,"ssertEquals(""1"", mock.oneArg((byte) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,154,"ssertEquals(""2"", mock.oneArg((char) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,155,"ssertEquals(""3"", mock.oneArg((double) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,156,"ssertEquals(""7"", mock.oneArg((short) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,157,"ssertEquals(""8"", mock.oneArg(""jkl""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,158,"ssertEquals(""4"", mock.oneArg((float) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,159,"ssertEquals(""5"", mock.oneArg((int) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,160,"ssertEquals(""6"", mock.oneArg((long) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,161,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,164,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,165,ublic void notOverloaded() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,166,"xpect(mock.oneArg(not(eq(false)))).andReturn(""0"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,167,"xpect(mock.oneArg(not(eq((byte) 1)))).andReturn(""1"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,168,"xpect(mock.oneArg(not(eq('a')))).andReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,169,"xpect(mock.oneArg(not(eq((double) 1)))).andReturn(""3"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,170,"xpect(mock.oneArg(not(eq((float) 1)))).andReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,171,"xpect(mock.oneArg(not(eq((int) 1)))).andReturn(""5"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,172,"xpect(mock.oneArg(not(eq((long) 1)))).andReturn(""6"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,173,"xpect(mock.oneArg(not(eq((short) 1)))).andReturn(""7"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,174,"xpect(mock.oneArg(not(contains(""a"")))).andReturn(""8"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,175,"xpect(mock.oneArg(not(isA(Class.class)))).andReturn(""9"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,176,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,177,"ssertEquals(""9"", mock.oneArg(new Object()));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,178,"ssertEquals(""0"", mock.oneArg(true));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,179,"ssertEquals(""1"", mock.oneArg((byte) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,180,"ssertEquals(""2"", mock.oneArg('b'));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,181,"ssertEquals(""3"", mock.oneArg((double) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,182,"ssertEquals(""7"", mock.oneArg((short) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,183,"ssertEquals(""8"", mock.oneArg(""bcde""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,184,"ssertEquals(""4"", mock.oneArg((float) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,185,"ssertEquals(""5"", mock.oneArg((int) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,186,"ssertEquals(""6"", mock.oneArg((long) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,187,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,190,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,191,ublic void lessOrEqualOverloaded() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,192,"xpect(mock.oneArg(leq((byte) 1))).andReturn(""1"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,193,"xpect(mock.oneArg(leq((double) 1))).andReturn(""3"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,194,"xpect(mock.oneArg(leq((float) 1))).andReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,195,"xpect(mock.oneArg(leq((int) 1))).andReturn(""5"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,196,"xpect(mock.oneArg(leq((long) 1))).andReturn(""6"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,197,"xpect(mock.oneArg(leq((short) 1))).andReturn(""7"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,198,"xpect(mock.oneArg(leq(new BigDecimal(""1"")))).andReturn(""8"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,199,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,200,"ssertEquals(""1"", mock.oneArg((byte) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,201,"ssertEquals(""3"", mock.oneArg((double) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,202,"ssertEquals(""7"", mock.oneArg((short) 0));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,203,"ssertEquals(""4"", mock.oneArg((float) -5));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,204,"ssertEquals(""5"", mock.oneArg((int) -2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,205,"ssertEquals(""6"", mock.oneArg((long) -3));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,206,"ssertEquals(""8"", mock.oneArg(new BigDecimal(""0.5"")));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,207,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,210,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,211,ublic void lessThanOverloaded() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,212,"xpect(mock.oneArg(lt((byte) 1))).andReturn(""1"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,213,"xpect(mock.oneArg(lt((double) 1))).andReturn(""3"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,214,"xpect(mock.oneArg(lt((float) 1))).andReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,215,"xpect(mock.oneArg(lt((int) 1))).andReturn(""5"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,216,"xpect(mock.oneArg(lt((long) 1))).andReturn(""6"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,217,"xpect(mock.oneArg(lt((short) 1))).andReturn(""7"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,218,"xpect(mock.oneArg(lt(new BigDecimal(""1"")))).andReturn(""8"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,219,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,220,"ssertEquals(""1"", mock.oneArg((byte) 0));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,221,"ssertEquals(""3"", mock.oneArg((double) 0));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,222,"ssertEquals(""7"", mock.oneArg((short) 0));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,223,"ssertEquals(""4"", mock.oneArg((float) -4));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,224,"ssertEquals(""5"", mock.oneArg((int) -34));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,225,"ssertEquals(""6"", mock.oneArg((long) -6));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,226,"ssertEquals(""8"", mock.oneArg(new BigDecimal(""0.5"")));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,227,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,230,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,231,ublic void greaterOrEqualOverloaded() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,232,"xpect(mock.oneArg(geq((byte) 1))).andReturn(""1"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,233,"xpect(mock.oneArg(geq((double) 1))).andReturn(""3"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,234,"xpect(mock.oneArg(geq((float) 1))).andReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,235,"xpect(mock.oneArg(geq((int) 1))).andReturn(""5"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,236,"xpect(mock.oneArg(geq((long) 1))).andReturn(""6"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,237,"xpect(mock.oneArg(geq((short) 1))).andReturn(""7"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,238,"xpect(mock.oneArg(geq(new BigDecimal(""1"")))).andReturn(""8"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,239,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,240,"ssertEquals(""1"", mock.oneArg((byte) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,241,"ssertEquals(""3"", mock.oneArg((double) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,242,"ssertEquals(""7"", mock.oneArg((short) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,243,"ssertEquals(""4"", mock.oneArg((float) 3));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,244,"ssertEquals(""5"", mock.oneArg((int) 4));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,245,"ssertEquals(""6"", mock.oneArg((long) 5));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,246,"ssertEquals(""8"", mock.oneArg(new BigDecimal(""1.5"")));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,247,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,250,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,251,ublic void greaterThanOverloaded() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,252,"xpect(mock.oneArg(gt((byte) 1))).andReturn(""1"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,253,"xpect(mock.oneArg(gt((double) 1))).andReturn(""3"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,254,"xpect(mock.oneArg(gt((float) 1))).andReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,255,"xpect(mock.oneArg(gt((int) 1))).andReturn(""5"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,256,"xpect(mock.oneArg(gt((long) 1))).andReturn(""6"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,257,"xpect(mock.oneArg(gt((short) 1))).andReturn(""7"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,258,"xpect(mock.oneArg(gt(new BigDecimal(""1"")))).andReturn(""8"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,259,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,260,"ssertEquals(""1"", mock.oneArg((byte) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,261,"ssertEquals(""3"", mock.oneArg((double) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,262,"ssertEquals(""7"", mock.oneArg((short) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,263,"ssertEquals(""4"", mock.oneArg((float) 3));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,264,"ssertEquals(""5"", mock.oneArg((int) 2));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,265,"ssertEquals(""6"", mock.oneArg((long) 5));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,266,"ssertEquals(""8"", mock.oneArg(new BigDecimal(""1.5"")));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,267,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,270,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,271,ublic void cmpTo() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,272,"xpect(mock.oneArg(cmpEq(new BigDecimal(""1.5"")))).andReturn(""0"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,273,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,274,"ssertEquals(""0"", mock.oneArg(new BigDecimal(""1.50"")));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,275,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,278,ublic static class A {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,279,rivate int value;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,281,ublic A(int value) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,282,his.value = value;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,285,ublic int getValue() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,286,eturn value;
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,290,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,291,ublic void compareWithComparator() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,292,omparator<A> comparator = new Comparator<A>() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,293,"ublic int compare(A a1, A a2) {"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,294,eturn a1.getValue() - a2.getValue();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,298,/ Check my comparator works
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,299,"ssertTrue(comparator.compare(new A(1), new A(2)) < 0);"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,300,"ssertTrue(comparator.compare(new A(2), new A(1)) > 0);"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,301,"ssertTrue(comparator.compare(new A(1), new A(1)) == 0);"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,303,/ Now test EasyMock.cmp
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,304,"heckOrder(mock, true);"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,306,"xpect(mock.oneArg(cmp(new A(5), comparator,"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,307,"ogicalOperator.EQUAL))).andReturn(""0"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,309,"xpect(mock.oneArg(cmp(new A(5), comparator,"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,310,"ogicalOperator.GREATER))).andReturn(""1"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,312,"xpect(mock.oneArg(cmp(new A(5), comparator,"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,313,"ogicalOperator.GREATER_OR_EQUAL))).andReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,314,"xpect(mock.oneArg(cmp(new A(5), comparator,"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,315,"ogicalOperator.GREATER_OR_EQUAL))).andReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,317,"xpect(mock.oneArg(cmp(new A(5), comparator,"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,318,"ogicalOperator.LESS_OR_EQUAL))).andReturn(""3"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,319,"xpect(mock.oneArg(cmp(new A(5), comparator,"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,320,"ogicalOperator.LESS_OR_EQUAL))).andReturn(""3"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,322,"xpect(mock.oneArg(cmp(new A(5), comparator,"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,323,"ogicalOperator.LESS_THAN))).andReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,325,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,327,heckItFails(null); // null is not comparable so always return false
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,328,ry {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,329,"ock.oneArg("""");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,330,ail();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,332,atch(AssertionError e) {} // different type isn't either
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,334,heckItFails(new A(4));
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,335,heckItFails(new A(6));
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,336,"ssertEquals(""0"", mock.oneArg(new A(5)));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,338,heckItFails(new A(4));
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,339,heckItFails(new A(5));
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,340,"ssertEquals(""1"", mock.oneArg(new A(6)));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,342,heckItFails(new A(4));
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,343,"ssertEquals(""2"", mock.oneArg(new A(6)));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,344,"ssertEquals(""2"", mock.oneArg(new A(5)));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,346,heckItFails(new A(6));
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,347,"ssertEquals(""3"", mock.oneArg(new A(4)));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,348,"ssertEquals(""3"", mock.oneArg(new A(5)));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,350,heckItFails(new A(5));
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,351,heckItFails(new A(6));
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,352,"ssertEquals(""4"", mock.oneArg(new A(4)));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,354,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,357,rivate void checkItFails(A a) {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,358,ry {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,359,ock.oneArg(a);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,360,ail();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,362,atch(AssertionError e) {}
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,365,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,366,ublic void any() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,367,"xpect(mock.oneArg(anyBoolean())).andReturn(""0"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,368,"xpect(mock.oneArg(anyByte())).andReturn(""1"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,369,"xpect(mock.oneArg(anyChar())).andReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,370,"xpect(mock.oneArg(anyDouble())).andReturn(""3"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,371,"xpect(mock.oneArg(anyFloat())).andReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,372,"xpect(mock.oneArg(anyInt())).andReturn(""5"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,373,"xpect(mock.oneArg(anyLong())).andReturn(""6"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,374,"xpect(mock.oneArg(anyShort())).andReturn(""7"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,375,"xpect(mock.oneArg((String) anyObject())).andReturn(""8"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,376,"xpect(mock.oneArg(anyObject())).andReturn(""9"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,377,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,378,"ssertEquals(""9"", mock.oneArg(new Object()));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,379,"ssertEquals(""0"", mock.oneArg(true));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,380,"ssertEquals(""1"", mock.oneArg((byte) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,381,"ssertEquals(""2"", mock.oneArg((char) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,382,"ssertEquals(""3"", mock.oneArg((double) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,383,"ssertEquals(""7"", mock.oneArg((short) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,384,"ssertEquals(""8"", mock.oneArg(""Test""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,385,"ssertEquals(""4"", mock.oneArg((float) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,386,"ssertEquals(""5"", mock.oneArg((int) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,387,"ssertEquals(""6"", mock.oneArg((long) 1));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,388,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,391,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,392,ublic void arrayEquals() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,393,"xpect(mock.oneArray(aryEq(new boolean[] { true }))).andReturn(""0"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,394,"xpect(mock.oneArray(aryEq(new byte[] { 1 }))).andReturn(""1"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,395,"xpect(mock.oneArray(aryEq(new char[] { 1 }))).andReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,396,"xpect(mock.oneArray(aryEq(new double[] { 1 }))).andReturn(""3"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,397,"xpect(mock.oneArray(aryEq(new float[] { 1 }))).andReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,398,"xpect(mock.oneArray(aryEq(new int[] { 1 }))).andReturn(""5"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,399,"xpect(mock.oneArray(aryEq(new long[] { 1 }))).andReturn(""6"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,400,"xpect(mock.oneArray(aryEq(new short[] { 1 }))).andReturn(""7"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,401,"xpect(mock.oneArray(aryEq(new String[] { ""Test"" }))).andReturn(""8"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,402,"xpect(mock.oneArray(aryEq(new Object[] { ""Test"" }))).andReturn(""9"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,403,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,404,"ssertEquals(""9"", mock.oneArray(new Object[] { ""Test"" }));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,405,"ssertEquals(""0"", mock.oneArray(new boolean[] { true }));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,406,"ssertEquals(""1"", mock.oneArray(new byte[] { 1 }));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,407,"ssertEquals(""2"", mock.oneArray(new char[] { 1 }));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,408,"ssertEquals(""3"", mock.oneArray(new double[] { 1 }));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,409,"ssertEquals(""7"", mock.oneArray(new short[] { 1 }));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,410,"ssertEquals(""8"", mock.oneArray(new String[] { ""Test"" }));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,411,"ssertEquals(""4"", mock.oneArray(new float[] { 1 }));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,412,"ssertEquals(""5"", mock.oneArray(new int[] { 1 }));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,413,"ssertEquals(""6"", mock.oneArray(new long[] { 1 }));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,414,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,417,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,418,ublic void greaterOrEqual() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,419,"xpect(mock.oneArg(geq(7))).andReturn(""1"").times(3);"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,420,"xpect(mock.oneArg(lt(7))).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,422,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,424,"ssertEquals(""1"", mock.oneArg(7));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,425,"ssertEquals(""2"", mock.oneArg(6));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,426,"ssertEquals(""1"", mock.oneArg(8));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,427,"ssertEquals(""2"", mock.oneArg(6));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,428,"ssertEquals(""1"", mock.oneArg(9));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,430,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,433,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,434,ublic void greaterThan() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,435,"xpect(mock.oneArg(gt(7))).andReturn(""1"").times(3);"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,436,"xpect(mock.oneArg(leq(7))).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,438,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,440,"ssertEquals(""1"", mock.oneArg(8));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,441,"ssertEquals(""2"", mock.oneArg(7));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,442,"ssertEquals(""1"", mock.oneArg(9));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,443,"ssertEquals(""2"", mock.oneArg(6));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,444,"ssertEquals(""1"", mock.oneArg(10));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,446,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,449,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,450,ublic void lessOrEqual() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,451,"xpect(mock.oneArg(leq(7))).andReturn(""1"").times(3);"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,452,"xpect(mock.oneArg(gt(7))).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,454,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,456,"ssertEquals(""1"", mock.oneArg(7));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,457,"ssertEquals(""2"", mock.oneArg(8));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,458,"ssertEquals(""1"", mock.oneArg(6));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,459,"ssertEquals(""2"", mock.oneArg(9));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,460,"ssertEquals(""1"", mock.oneArg(5));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,462,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,465,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,466,ublic void lessThan() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,467,"xpect(mock.oneArg(lt(7))).andReturn(""1"").times(3);"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,468,"xpect(mock.oneArg(geq(7))).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,470,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,472,"ssertEquals(""1"", mock.oneArg(5));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,473,"ssertEquals(""2"", mock.oneArg(7));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,474,"ssertEquals(""1"", mock.oneArg(6));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,475,"ssertEquals(""2"", mock.oneArg(8));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,476,"ssertEquals(""1"", mock.oneArg(4));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,478,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,481,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,482,ublic void testOr() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,483,"xpect(mock.oneArg(or(eq(7), eq(9)))).andReturn(""1"").atLeastOnce();"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,484,"xpect(mock.oneArg(anyInt())).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,486,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,488,"ssertEquals(""1"", mock.oneArg(7));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,489,"ssertEquals(""1"", mock.oneArg(9));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,490,"ssertEquals(""2"", mock.oneArg(10));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,492,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,495,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,496,ublic void testNull() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,497,"xpect(mock.threeArgumentMethod(eq(1), isNull(), eq("""")))"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,498,"andReturn(""1"").atLeastOnce();"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,499,"xpect(mock.threeArgumentMethod(eq(1), not(isNull()), eq("""")))"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,500,"andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,502,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,504,"ssertEquals(""1"", mock.threeArgumentMethod(1, null, """"));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,505,"ssertEquals(""2"", mock.threeArgumentMethod(1, new Object(), """"));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,507,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,510,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,511,ublic void testNotNull() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,512,"xpect(mock.threeArgumentMethod(eq(1), notNull(), eq(""""))).andReturn("
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,513,"1"").atLeastOnce();"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,514,"xpect(mock.threeArgumentMethod(eq(1), not(notNull()), eq("""")))"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,515,"andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,517,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,519,"ssertEquals(""1"", mock.threeArgumentMethod(1, new Object(), """"));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,520,"ssertEquals(""2"", mock.threeArgumentMethod(1, null, """"));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,522,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,525,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,526,ublic void testFind() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,527,"xpect(mock.oneArg(find(""[a-z]+\\d""))).andReturn(""1"").atLeastOnce();"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,528,"xpect(mock.oneArg(find(""\\d\\d""))).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,530,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,532,"ssertEquals(""1"", mock.oneArg(""1ab12""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,533,"ssertEquals(""2"", mock.oneArg(""312xx""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,535,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,538,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,539,ublic void testMatches() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,540,"xpect(mock.oneArg(matches(""[a-z]+\\d\\d""))).andReturn(""1"")"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,541,atLeastOnce();
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,542,"xpect(mock.oneArg(matches(""\\d\\d\\d""))).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,544,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,546,"ssertEquals(""1"", mock.oneArg(""a12""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,547,"ssertEquals(""2"", mock.oneArg(""131""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,549,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,552,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,553,ublic void testContains() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,554,"xpect(mock.oneArg(contains(""ab""))).andReturn(""1"").atLeastOnce();"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,555,"xpect(mock.oneArg(contains(""bc""))).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,557,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,559,"ssertEquals(""1"", mock.oneArg(""xabcx""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,560,"ssertEquals(""2"", mock.oneArg(""xdbcx""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,562,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,565,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,566,ublic void testStartsWith() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,567,"xpect(mock.oneArg(startsWith(""ab""))).andReturn(""1"").atLeastOnce();"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,568,"xpect(mock.oneArg(startsWith(""bc""))).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,570,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,572,"ssertEquals(""1"", mock.oneArg(""abcx""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,573,"ssertEquals(""2"", mock.oneArg(""bcxe""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,575,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,578,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,579,ublic void testEndsWith() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,580,"xpect(mock.oneArg(endsWith(""ab""))).andReturn(""1"").atLeastOnce();"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,581,"xpect(mock.oneArg(endsWith(""bc""))).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,583,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,585,"ssertEquals(""1"", mock.oneArg(""xab""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,586,"ssertEquals(""2"", mock.oneArg(""xbc""));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,588,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,591,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,592,ublic void equalsWithDelta() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,593,"xpect(mock.oneArg(eq(1.0D, 0.1D))).andReturn(""1"").atLeastOnce();"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,594,"xpect(mock.oneArg(eq(2.0D, 0.1D))).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,595,"xpect(mock.oneArg(eq(1.0F, 0.1F))).andReturn(""3"").atLeastOnce();"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,596,"xpect(mock.oneArg(eq(2.0F, 0.1F))).andStubReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,597,"xpect(mock.oneArg(eq(2.0F, 0.1F))).andStubReturn(""4"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,599,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,601,"ssertEquals(""1"", mock.oneArg(1.0));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,602,"ssertEquals(""1"", mock.oneArg(0.91));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,603,"ssertEquals(""1"", mock.oneArg(1.09));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,604,"ssertEquals(""2"", mock.oneArg(2.0));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,606,"ssertEquals(""3"", mock.oneArg(1.0F));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,607,"ssertEquals(""3"", mock.oneArg(0.91F));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,608,"ssertEquals(""3"", mock.oneArg(1.09F));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,609,"ssertEquals(""4"", mock.oneArg(2.0F));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,611,erify(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,614,Test
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,615,ublic void testSame() {
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,616,"bject one = new String(""1243"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,617,"bject two = new String(""1243"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,619,"ssertNotSame(one, two);"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,620,"ssertEquals(one, two);"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,622,"xpect(mock.oneArg(same(one))).andReturn(""1"").atLeastOnce();"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,623,"xpect(mock.oneArg(same(two))).andStubReturn(""2"");"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,625,eplay(mock);
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,627,"ssertEquals(""1"", mock.oneArg(one));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,628,"ssertEquals(""2"", mock.oneArg(two));"
False,test/org/easymock/UsageConstraintsTest.java,test/org/easymock/UsageConstraintsTest.java,630,erify(mock);
False,test/org/easymock/UsageMatchersTest.java,test/org/easymock/UsageMatchersTest.java,2," Copyright (c) 2001-2007 OFFIS, Tammo Freese."
False,test/org/easymock/UsageMatchersTest.java,test/org/easymock/UsageMatchersTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/easymock/UsageMatchersTest.java,test/org/easymock/UsageMatchersTest.java,5,ackage org.easymock;
False,test/org/easymock/UsageMatchersTest.java,test/org/easymock/UsageMatchersTest.java,7,mport static org.easymock.EasyMock.*;
False,test/org/easymock/UsageMatchersTest.java,test/org/easymock/UsageMatchersTest.java,9,mport org.junit.Test;
False,test/org/easymock/UsageMatchersTest.java,test/org/easymock/UsageMatchersTest.java,11,ublic class UsageMatchersTest {
False,test/org/easymock/UsageMatchersTest.java,test/org/easymock/UsageMatchersTest.java,12,Test(expected = IllegalStateException.class)
False,test/org/easymock/UsageMatchersTest.java,test/org/easymock/UsageMatchersTest.java,13,ublic void additionalMatchersFailAtReplay() {
False,test/org/easymock/UsageMatchersTest.java,test/org/easymock/UsageMatchersTest.java,15,Methods mock = createMock(IMethods.class);
False,test/org/easymock/UsageMatchersTest.java,test/org/easymock/UsageMatchersTest.java,16,t(5);
False,test/org/easymock/UsageMatchersTest.java,test/org/easymock/UsageMatchersTest.java,18,eplay(mock);
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,5,package org.easymock;
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,8,import static org.easymock.EasyMock.*;
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,10,import java.math.*;
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,11,import java.util.*;
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,13,import org.easymock.internal.matchers.*;
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,14,import org.junit.*;
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,15,import org.mockito.Mockito;
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,16,import org.mockito.exceptions.MockVerificationAssertionError;
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,18,import static org.mockito.Mockito.*;
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,20,"@SuppressWarnings(""unchecked"")"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,21,public class UsingMatchersTest {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,22,private IMethods mock;
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,24,@Before
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,25,public void setUp() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,26,mock = Mockito.mock(IMethods.class);
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,29,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,30,public void shouldScreamWhenMatchersAreInvalid() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,31,"mock.simpleMethodWithArgument(not(eq(""asd"")));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,32,try {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,33,"mock.simpleMethodWithArgument(not(""jkl""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,34,fail();
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,35,} catch (IllegalStateException e) {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,36,"assertEquals(""no matchers found."", e.getMessage());"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,38,try {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,39,"mock.simpleMethodWithArgument(or(eq(""jkl""), ""asd""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,40,fail();
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,41,} catch (IllegalStateException e) {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,42,"assertEquals(""2 matchers expected, 1 recorded."", e.getMessage());"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,44,try {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,45,"mock.threeArgumentMethod(1, ""asd"", eq(""asd""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,46,fail();
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,47,} catch (IllegalStateException e) {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,48,"assertEquals(""3 matchers expected, 1 recorded."", e.getMessage());"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,52,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,53,public void andOverloaded() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,54,"stub(mock.oneArg(and(eq(false), eq(false)))).andReturn(""0"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,55,"stub(mock.oneArg(and(eq((byte) 1), eq((byte) 1)))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,56,"stub(mock.oneArg(and(eq('a'), eq('a')))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,57,"stub(mock.oneArg(and(eq((double) 1), eq((double) 1)))).andReturn(""3"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,58,"stub(mock.oneArg(and(eq((float) 1), eq((float) 1)))).andReturn(""4"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,59,"stub(mock.oneArg(and(eq((int) 1), eq((int) 1)))).andReturn(""5"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,60,"stub(mock.oneArg(and(eq((long) 1), eq((long) 1)))).andReturn(""6"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,61,"stub(mock.oneArg(and(eq((short) 1), eq((short) 1)))).andReturn(""7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,62,"stub(mock.oneArg(and(contains(""a""), contains(""d"")))).andReturn(""8"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,63,"stub(mock.oneArg(and(isA(Class.class), eq(Object.class)))).andReturn(""9"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,65,"assertEquals(""0"", mock.oneArg(false));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,66,"assertEquals(null, mock.oneArg(true));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,68,"assertEquals(""1"", mock.oneArg((byte) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,69,"assertEquals(""2"", mock.oneArg('a'));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,70,"assertEquals(""3"", mock.oneArg((double) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,71,"assertEquals(""4"", mock.oneArg((float) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,72,"assertEquals(""5"", mock.oneArg((int) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,73,"assertEquals(""6"", mock.oneArg((long) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,74,"assertEquals(""7"", mock.oneArg((short) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,76,"assertEquals(""8"", mock.oneArg(""abcde""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,77,"assertEquals(null, mock.oneArg(""aaaaa""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,79,"assertEquals(""9"", mock.oneArg(Object.class));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,83,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,84,public void orOverloaded() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,85,"stub(mock.oneArg(or(eq(false), eq(true)))).andReturn(""0"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,86,"stub(mock.oneArg(or(eq((byte) 1), eq((byte) 2)))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,87,"stub(mock.oneArg(or(eq((char) 1), eq((char) 2)))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,88,"stub(mock.oneArg(or(eq((double) 1), eq((double) 2)))).andReturn(""3"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,89,"stub(mock.oneArg(or(eq((float) 1), eq((float) 2)))).andReturn(""4"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,90,"stub(mock.oneArg(or(eq((int) 1), eq((int) 2)))).andReturn(""5"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,91,"stub(mock.oneArg(or(eq((long) 1), eq((long) 2)))).andReturn(""6"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,92,"stub(mock.oneArg(or(eq((short) 1), eq((short) 2)))).andReturn(""7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,93,"stub(mock.oneArg(or(eq(""asd""), eq(""jkl"")))).andReturn(""8"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,94,"stub(mock.oneArg(or(eq(this.getClass()), eq(Object.class)))).andReturn(""9"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,96,"assertEquals(""0"", mock.oneArg(true));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,97,"assertEquals(""0"", mock.oneArg(false));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,99,"assertEquals(""1"", mock.oneArg((byte) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,100,"assertEquals(""2"", mock.oneArg((char) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,101,"assertEquals(""3"", mock.oneArg((double) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,102,"assertEquals(""4"", mock.oneArg((float) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,103,"assertEquals(""5"", mock.oneArg((int) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,104,"assertEquals(""6"", mock.oneArg((long) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,105,"assertEquals(""7"", mock.oneArg((short) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,107,"assertEquals(""8"", mock.oneArg(""jkl""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,108,"assertEquals(""8"", mock.oneArg(""asd""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,109,"assertEquals(null, mock.oneArg(""asdjkl""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,111,"assertEquals(""9"", mock.oneArg(Object.class));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,112,"assertEquals(null, mock.oneArg(String.class));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,115,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,116,public void notOverloaded() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,117,"stub(mock.oneArg(not(eq(false)))).andReturn(""0"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,118,"stub(mock.oneArg(not(eq((byte) 1)))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,119,"stub(mock.oneArg(not(eq('a')))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,120,"stub(mock.oneArg(not(eq((double) 1)))).andReturn(""3"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,121,"stub(mock.oneArg(not(eq((float) 1)))).andReturn(""4"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,122,"stub(mock.oneArg(not(eq((int) 1)))).andReturn(""5"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,123,"stub(mock.oneArg(not(eq((long) 1)))).andReturn(""6"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,124,"stub(mock.oneArg(not(eq((short) 1)))).andReturn(""7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,125,"stub(mock.oneArg(not(contains(""a"")))).andReturn(""8"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,126,"stub(mock.oneArg(not(isA(Class.class)))).andReturn(""9"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,128,"assertEquals(""0"", mock.oneArg(true));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,129,"assertEquals(null, mock.oneArg(false));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,131,"assertEquals(""1"", mock.oneArg((byte) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,132,"assertEquals(""2"", mock.oneArg('b'));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,133,"assertEquals(""3"", mock.oneArg((double) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,134,"assertEquals(""4"", mock.oneArg((float) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,135,"assertEquals(""5"", mock.oneArg((int) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,136,"assertEquals(""6"", mock.oneArg((long) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,137,"assertEquals(""7"", mock.oneArg((short) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,138,"assertEquals(""8"", mock.oneArg(""bcde""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,140,"assertEquals(""9"", mock.oneArg(new Object()));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,141,"assertEquals(null, mock.oneArg(Class.class));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,144,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,145,public void lessOrEqualOverloaded() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,146,"stub(mock.oneArg(leq((byte) 1))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,147,"stub(mock.oneArg(leq((double) 1))).andReturn(""3"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,148,"stub(mock.oneArg(leq((float) 1))).andReturn(""4"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,149,"stub(mock.oneArg(leq((int) 1))).andReturn(""5"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,150,"stub(mock.oneArg(leq((long) 1))).andReturn(""6"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,151,"stub(mock.oneArg(leq((short) 1))).andReturn(""7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,152,"stub(mock.oneArg(leq(new BigDecimal(""1"")))).andReturn(""8"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,154,"assertEquals(""1"", mock.oneArg((byte) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,155,"assertEquals(null, mock.oneArg((byte) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,157,"assertEquals(""3"", mock.oneArg((double) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,158,"assertEquals(""7"", mock.oneArg((short) 0));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,159,"assertEquals(""4"", mock.oneArg((float) -5));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,160,"assertEquals(""5"", mock.oneArg((int) -2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,161,"assertEquals(""6"", mock.oneArg((long) -3));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,163,"assertEquals(""8"", mock.oneArg(new BigDecimal(""0.5"")));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,164,"assertEquals(null, mock.oneArg(new BigDecimal(""1.1"")));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,167,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,168,public void lessThanOverloaded() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,169,"stub(mock.oneArg(lt((byte) 1))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,170,"stub(mock.oneArg(lt((double) 1))).andReturn(""3"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,171,"stub(mock.oneArg(lt((float) 1))).andReturn(""4"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,172,"stub(mock.oneArg(lt((int) 1))).andReturn(""5"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,173,"stub(mock.oneArg(lt((long) 1))).andReturn(""6"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,174,"stub(mock.oneArg(lt((short) 1))).andReturn(""7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,175,"stub(mock.oneArg(lt(new BigDecimal(""1"")))).andReturn(""8"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,177,"assertEquals(""1"", mock.oneArg((byte) 0));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,178,"assertEquals(null, mock.oneArg((byte) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,180,"assertEquals(""3"", mock.oneArg((double) 0));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,181,"assertEquals(""7"", mock.oneArg((short) 0));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,182,"assertEquals(""4"", mock.oneArg((float) -4));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,183,"assertEquals(""5"", mock.oneArg((int) -34));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,184,"assertEquals(""6"", mock.oneArg((long) -6));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,186,"assertEquals(""8"", mock.oneArg(new BigDecimal(""0.5"")));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,187,"assertEquals(null, mock.oneArg(new BigDecimal(""23"")));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,190,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,191,public void greaterOrEqualMatcherOverloaded() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,192,"stub(mock.oneArg(geq((byte) 1))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,193,"stub(mock.oneArg(geq((double) 1))).andReturn(""3"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,194,"stub(mock.oneArg(geq((float) 1))).andReturn(""4"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,195,"stub(mock.oneArg(geq((int) 1))).andReturn(""5"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,196,"stub(mock.oneArg(geq((long) 1))).andReturn(""6"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,197,"stub(mock.oneArg(geq((short) 1))).andReturn(""7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,198,"stub(mock.oneArg(geq(new BigDecimal(""1"")))).andReturn(""8"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,200,"assertEquals(""1"", mock.oneArg((byte) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,201,"assertEquals(null, mock.oneArg((byte) 0));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,203,"assertEquals(""3"", mock.oneArg((double) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,204,"assertEquals(""7"", mock.oneArg((short) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,205,"assertEquals(""4"", mock.oneArg((float) 3));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,206,"assertEquals(""5"", mock.oneArg((int) 4));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,207,"assertEquals(""6"", mock.oneArg((long) 5));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,209,"assertEquals(""8"", mock.oneArg(new BigDecimal(""1.00"")));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,210,"assertEquals(null, mock.oneArg(new BigDecimal(""0.9"")));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,213,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,214,public void greaterThanMatcherOverloaded() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,215,"stub(mock.oneArg(gt((byte) 1))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,216,"stub(mock.oneArg(gt((double) 1))).andReturn(""3"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,217,"stub(mock.oneArg(gt((float) 1))).andReturn(""4"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,218,"stub(mock.oneArg(gt((int) 1))).andReturn(""5"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,219,"stub(mock.oneArg(gt((long) 1))).andReturn(""6"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,220,"stub(mock.oneArg(gt((short) 1))).andReturn(""7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,221,"stub(mock.oneArg(gt(new BigDecimal(""1"")))).andReturn(""8"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,223,"assertEquals(""1"", mock.oneArg((byte) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,224,"assertEquals(null, mock.oneArg((byte) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,226,"assertEquals(""3"", mock.oneArg((double) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,227,"assertEquals(""7"", mock.oneArg((short) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,228,"assertEquals(""4"", mock.oneArg((float) 3));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,229,"assertEquals(""5"", mock.oneArg((int) 2));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,230,"assertEquals(""6"", mock.oneArg((long) 5));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,232,"assertEquals(""8"", mock.oneArg(new BigDecimal(""1.5"")));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,233,"assertEquals(null, mock.oneArg(new BigDecimal(""0.9"")));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,236,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,237,public void compareToMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,238,"stub(mock.oneArg(cmpEq(new BigDecimal(""1.5"")))).andReturn(""0"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,240,"assertEquals(""0"", mock.oneArg(new BigDecimal(""1.50"")));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,241,"assertEquals(null, mock.oneArg(new BigDecimal(""1.51"")));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,244,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,245,public void anyMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,246,"stub(mock.oneArg(anyBoolean())).andReturn(""0"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,247,"stub(mock.oneArg(anyByte())).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,248,"stub(mock.oneArg(anyChar())).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,249,"stub(mock.oneArg(anyDouble())).andReturn(""3"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,250,"stub(mock.oneArg(anyFloat())).andReturn(""4"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,251,"stub(mock.oneArg(anyInt())).andReturn(""5"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,252,"stub(mock.oneArg(anyLong())).andReturn(""6"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,253,"stub(mock.oneArg(anyShort())).andReturn(""7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,254,"stub(mock.oneArg((String) anyObject())).andReturn(""8"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,255,"stub(mock.oneArg(anyObject())).andReturn(""9"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,257,"assertEquals(""0"", mock.oneArg(true));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,258,"assertEquals(""0"", mock.oneArg(false));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,260,"assertEquals(""1"", mock.oneArg((byte) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,261,"assertEquals(""2"", mock.oneArg((char) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,262,"assertEquals(""3"", mock.oneArg((double) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,263,"assertEquals(""4"", mock.oneArg((float) 889));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,264,"assertEquals(""5"", mock.oneArg((int) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,265,"assertEquals(""6"", mock.oneArg((long) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,266,"assertEquals(""7"", mock.oneArg((short) 1));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,267,"assertEquals(""8"", mock.oneArg(""Test""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,269,"assertEquals(""9"", mock.oneArg(new Object()));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,270,"assertEquals(""9"", mock.oneArg(new HashMap()));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,273,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,274,public void arrayEqualsMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,275,"stub(mock.oneArray(aryEq(new boolean[] { true, false, false }))).andReturn(""0"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,276,"stub(mock.oneArray(aryEq(new byte[] { 1 }))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,277,"stub(mock.oneArray(aryEq(new char[] { 1 }))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,278,"stub(mock.oneArray(aryEq(new double[] { 1 }))).andReturn(""3"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,279,"stub(mock.oneArray(aryEq(new float[] { 1 }))).andReturn(""4"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,280,"stub(mock.oneArray(aryEq(new int[] { 1 }))).andReturn(""5"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,281,"stub(mock.oneArray(aryEq(new long[] { 1 }))).andReturn(""6"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,282,"stub(mock.oneArray(aryEq(new short[] { 1 }))).andReturn(""7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,283,"stub(mock.oneArray(aryEq(new String[] { ""Test"" }))).andReturn(""8"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,284,"stub(mock.oneArray(aryEq(new Object[] { ""Test"", new Integer(4) }))).andReturn(""9"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,286,"assertEquals(""0"", mock.oneArray(new boolean[] { true, false, false }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,287,"assertEquals(""1"", mock.oneArray(new byte[] { 1 }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,288,"assertEquals(""2"", mock.oneArray(new char[] { 1 }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,289,"assertEquals(""3"", mock.oneArray(new double[] { 1 }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,290,"assertEquals(""4"", mock.oneArray(new float[] { 1 }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,291,"assertEquals(""5"", mock.oneArray(new int[] { 1 }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,292,"assertEquals(""6"", mock.oneArray(new long[] { 1 }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,293,"assertEquals(""7"", mock.oneArray(new short[] { 1 }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,294,"assertEquals(""8"", mock.oneArray(new String[] { ""Test"" }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,295,"assertEquals(""9"", mock.oneArray(new Object[] { ""Test"", new Integer(4) }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,297,"assertEquals(null, mock.oneArray(new Object[] { ""Test"", new Integer(999) }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,298,"assertEquals(null, mock.oneArray(new Object[] { ""Test"", new Integer(4), ""x"" }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,300,"assertEquals(null, mock.oneArray(new boolean[] { true, false }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,301,"assertEquals(null, mock.oneArray(new boolean[] { true, true, false }));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,304,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,305,public void greaterOrEqualMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,306,"stub(mock.oneArg(geq(7))).andReturn("">= 7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,307,"stub(mock.oneArg(lt(7))).andReturn(""< 7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,309,"assertEquals("">= 7"", mock.oneArg(7));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,310,"assertEquals("">= 7"", mock.oneArg(8));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,311,"assertEquals("">= 7"", mock.oneArg(9));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,313,"assertEquals(""< 7"", mock.oneArg(6));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,314,"assertEquals(""< 7"", mock.oneArg(6));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,317,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,318,public void greaterThanMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,319,"stub(mock.oneArg(gt(7))).andReturn(""> 7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,320,"stub(mock.oneArg(leq(7))).andReturn(""<= 7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,322,"assertEquals(""> 7"", mock.oneArg(8));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,323,"assertEquals(""> 7"", mock.oneArg(9));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,324,"assertEquals(""> 7"", mock.oneArg(10));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,326,"assertEquals(""<= 7"", mock.oneArg(7));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,327,"assertEquals(""<= 7"", mock.oneArg(6));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,330,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,331,public void lessOrEqualMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,332,"stub(mock.oneArg(leq(7))).andReturn(""<= 7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,333,"stub(mock.oneArg(gt(7))).andReturn(""> 7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,335,"assertEquals(""<= 7"", mock.oneArg(7));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,336,"assertEquals(""<= 7"", mock.oneArg(6));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,337,"assertEquals(""<= 7"", mock.oneArg(5));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,339,"assertEquals(""> 7"", mock.oneArg(8));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,340,"assertEquals(""> 7"", mock.oneArg(9));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,343,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,344,public void lessThanMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,345,"stub(mock.oneArg(lt(7))).andReturn(""< 7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,346,"stub(mock.oneArg(geq(7))).andReturn("">= 7"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,348,"assertEquals(""< 7"", mock.oneArg(5));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,349,"assertEquals(""< 7"", mock.oneArg(6));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,350,"assertEquals(""< 7"", mock.oneArg(4));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,352,"assertEquals("">= 7"", mock.oneArg(7));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,353,"assertEquals("">= 7"", mock.oneArg(8));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,356,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,357,public void orMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,358,"stub(mock.oneArg(anyInt())).andReturn(""other"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,359,"stub(mock.oneArg(or(eq(7), eq(9)))).andReturn(""7 or 9"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,361,"assertEquals(""other"", mock.oneArg(10));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,362,"assertEquals(""7 or 9"", mock.oneArg(7));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,363,"assertEquals(""7 or 9"", mock.oneArg(9));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,366,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,367,public void nullMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,368,"stub(mock.threeArgumentMethod(eq(1), isNull(), eq(""""))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,369,"stub(mock.threeArgumentMethod(eq(1), not(isNull()), eq(""""))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,371,"assertEquals(""1"", mock.threeArgumentMethod(1, null, """"));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,372,"assertEquals(""2"", mock.threeArgumentMethod(1, new Object(), """"));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,375,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,376,public void notNullMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,377,"stub(mock.threeArgumentMethod(eq(1), notNull(), eq(""""))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,378,"stub(mock.threeArgumentMethod(eq(1), not(notNull()), eq(""""))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,380,"assertEquals(""1"", mock.threeArgumentMethod(1, new Object(), """"));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,381,"assertEquals(""2"", mock.threeArgumentMethod(1, null, """"));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,384,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,385,//TODO how different is this one from matchesMatcher?
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,386,public void findMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,387,"stub(mock.oneArg(find(""([a-z]+)\\d""))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,389,"assertEquals(""1"", mock.oneArg(""ab12""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,390,"assertEquals(null, mock.oneArg(""12345""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,393,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,394,public void matchesMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,395,"stub(mock.oneArg(matches(""[a-z]+\\d\\d""))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,396,"stub(mock.oneArg(matches(""\\d\\d\\d""))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,398,"assertEquals(""1"", mock.oneArg(""a12""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,399,"assertEquals(""2"", mock.oneArg(""131""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,400,"assertEquals(null, mock.oneArg(""blah""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,403,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,404,public void containsMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,405,"stub(mock.oneArg(contains(""ell""))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,406,"stub(mock.oneArg(contains(""ld""))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,408,"assertEquals(""1"", mock.oneArg(""hello""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,409,"assertEquals(""2"", mock.oneArg(""world""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,410,"assertEquals(null, mock.oneArg(""xlx""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,413,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,414,public void startsWithMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,415,"stub(mock.oneArg(startsWith(""ab""))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,416,"stub(mock.oneArg(startsWith(""bc""))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,418,"assertEquals(""1"", mock.oneArg(""ab quake""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,419,"assertEquals(""2"", mock.oneArg(""bc quake""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,420,"assertEquals(null, mock.oneArg(""ba quake""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,423,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,424,public void endsWithMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,425,"stub(mock.oneArg(endsWith(""ab""))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,426,"stub(mock.oneArg(endsWith(""bc""))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,428,"assertEquals(""1"", mock.oneArg(""xab""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,429,"assertEquals(""2"", mock.oneArg(""xbc""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,430,"assertEquals(null, mock.oneArg(""ac""));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,433,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,434,public void deltaMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,435,"stub(mock.oneArg(eq(1.0D, 0.1D))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,436,"stub(mock.oneArg(eq(2.0D, 0.1D))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,437,"stub(mock.oneArg(eq(1.0F, 0.1F))).andReturn(""3"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,438,"stub(mock.oneArg(eq(2.0F, 0.1F))).andReturn(""4"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,439,"stub(mock.oneArg(eq(2.0F, 0.1F))).andReturn(""4"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,441,"assertEquals(""1"", mock.oneArg(1.0));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,442,"assertEquals(""1"", mock.oneArg(0.91));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,443,"assertEquals(""1"", mock.oneArg(1.09));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,444,"assertEquals(""2"", mock.oneArg(2.0));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,446,"assertEquals(""3"", mock.oneArg(1.0F));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,447,"assertEquals(""3"", mock.oneArg(0.91F));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,448,"assertEquals(""3"", mock.oneArg(1.09F));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,449,"assertEquals(""4"", mock.oneArg(2.1F));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,451,"assertEquals(null, mock.oneArg(2.2F));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,454,@Test
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,455,public void sameMatcher() {
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,456,"Object one = new String(""1243"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,457,"Object two = new String(""1243"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,458,"Object three = new String(""1243"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,460,"assertNotSame(one, two);"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,461,"assertEquals(one, two);"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,462,"assertEquals(two, three);"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,464,"stub(mock.oneArg(same(one))).andReturn(""1"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,465,"stub(mock.oneArg(same(two))).andReturn(""2"");"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,467,"assertEquals(""1"", mock.oneArg(one));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,468,"assertEquals(""2"", mock.oneArg(two));"
True,test/org/easymock/UsingMatchersTest.java,test/org/easymock/UsingMatchersTest.java,469,"assertEquals(null, mock.oneArg(three));"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,5,package org.easymock;
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,9,import static org.mockito.Mockito.verify;
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,11,import org.junit.*;
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,12,import org.mockito.Mockito;
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,13,import org.mockito.exceptions.MockVerificationAssertionError;
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,15,"@SuppressWarnings(""unchecked"")"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,16,public class VerificationUsingMatchersTest {
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,17,private IMethods mock;
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,19,@Before
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,20,public void setUp() {
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,21,mock = Mockito.mock(IMethods.class);
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,24,@Test
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,25,public void shouldVerifyUsingSameMatcher() {
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,26,"Object one = new String(""1243"");"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,27,"Object two = new String(""1243"");"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,28,"Object three = new String(""1243"");"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,30,"assertNotSame(one, two);"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,31,"assertEquals(one, two);"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,32,"assertEquals(two, three);"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,34,mock.oneArg(one);
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,35,mock.oneArg(two);
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,37,verify(mock).oneArg(same(one));
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,38,verify(mock).oneArg(two);
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,40,try {
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,41,verify(mock).oneArg(same(three));
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,42,fail();
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,43,} catch (MockVerificationAssertionError e) {}
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,46,@Test
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,47,public void shouldVerifyUsingMixedMatchers() {
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,48,"mock.threeArgumentMethod(11, """", ""01234"");"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,50,try {
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,51,"verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(""123""));"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,52,fail();
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,53,} catch (MockVerificationAssertionError e) {}
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,55,"mock.threeArgumentMethod(8, new Object(), ""01234"");"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,57,try {
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,58,"verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(""123""));"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,59,fail();
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,60,} catch (MockVerificationAssertionError e) {}
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,62,"mock.threeArgumentMethod(8, """", ""no match"");"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,64,try {
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,65,"verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(""123""));"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,66,fail();
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,67,} catch (MockVerificationAssertionError e) {}
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,69,"mock.threeArgumentMethod(8, """", ""123"");"
True,test/org/easymock/VerificationUsingMatchersTest.java,test/org/easymock/VerificationUsingMatchersTest.java,71,"verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains(""123""));"
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,1,package org.easymock.internal.matchers;
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,3,import static org.junit.Assert.*;
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,5,import org.junit.Test;
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,8,public class EqualsTest {
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,10,@Test
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,11,public void shouldBeEqual() {
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,12,"assertEquals(new Equals(null), new Equals(null));"
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,13,"assertEquals(new Equals(new Integer(2)), new Equals(new Integer(2)));"
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,14,assertFalse(new Equals(null).equals(null));
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,15,"assertFalse(new Equals(null).equals(""Test""));"
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,16,try {
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,17,new Equals(null).hashCode();
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,18,fail();
True,test/org/easymock/internal/matchers/EqualsTest.java,test/org/easymock/internal/matchers/EqualsTest.java,19,} catch (UnsupportedOperationException expected) {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,5,package org.mockito.usage;
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,8,import static org.junit.Assert.*;
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,10,import org.easymock.IMethods;
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,11,import org.junit.*;
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,12,import org.mockito.Mockito;
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,13,import org.mockito.exceptions.InvalidUseOfMatchersException;
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,15,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,16,public class InvalidUseOfMatchersTest {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,18,private IMethods mock;
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,20,@Before
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,21,public void setUp() {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,22,mock = Mockito.mock(IMethods.class);
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,25,@Ignore
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,26,@Test
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,27,public void shouldDetectWrongNumberOfMatchersWhenStubbing() {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,28,"Mockito.stub(mock.threeArgumentMethod(1, ""2"", ""3"")).andReturn(null);"
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,29,try {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,30,"Mockito.stub(mock.threeArgumentMethod(1, eq(""2""), ""3"")).andReturn(null);"
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,31,fail();
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,32,} catch (InvalidUseOfMatchersException e) {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,36,@Ignore
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,37,@Test
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,38,public void shouldDetectStupidUseOfMatchersWhenVerifying() {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,39,mock.oneArg(true);
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,40,"eq(""that's the stupid way"");"
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,41,"eq(""of using matchers"");"
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,42,try {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,43,Mockito.verify(mock).oneArg(true);
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,44,fail();
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,45,} catch (InvalidUseOfMatchersException e) {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,49,@Test
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,50,public void shouldScreamWhenMatchersAreInvalid() {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,51,"mock.simpleMethodWithArgument(not(eq(""asd"")));"
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,52,try {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,53,"mock.simpleMethodWithArgument(not(""jkl""));"
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,54,fail();
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,55,} catch (IllegalStateException e) {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,56,"assertEquals(""no matchers found."", e.getMessage());"
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,59,try {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,60,"mock.simpleMethodWithArgument(or(eq(""jkl""), ""asd""));"
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,61,fail();
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,62,} catch (IllegalStateException e) {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,63,"assertEquals(""2 matchers expected, 1 recorded."", e.getMessage());"
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,66,try {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,67,"mock.threeArgumentMethod(1, ""asd"", eq(""asd""));"
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,68,fail();
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,69,} catch (IllegalStateException e) {
True,test/org/mockito/usage/InvalidUseOfMatchersTest.java,test/org/mockito/usage/InvalidUseOfMatchersTest.java,70,"assertEquals(""3 matchers expected, 1 recorded."", e.getMessage());"

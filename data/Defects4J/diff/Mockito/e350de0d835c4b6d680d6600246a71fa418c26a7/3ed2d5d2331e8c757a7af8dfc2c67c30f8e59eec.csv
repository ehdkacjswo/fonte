is_addition,old_file_path,new_file_path,line_num,content
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,5,package org.mockito.usage.binding;
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,7,import static org.junit.Assert.*;
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,8,import static org.mockito.Mockito.*;
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,9,import static org.mockito.util.ExtraMatchers.hasBridgeMethod;
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,11,import org.junit.Test;
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,15,* Bridge method is generated by compiler when erasure in parent class is
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,16,* different. When is different then it means that in runtime we will have
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,17,* overloading rather than overridding Therefore the compiler generates bridge
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,18,"* method in Subclass so that erasures are the same, signatures of methods match"
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,19,* and overridding is ON.
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,21,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,22,public class BridgeMethodPuzzleTest {
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,24,class Super<T> {
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,25,public String say(T t) {
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,26,"return ""Super says: "" + t;"
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,30,class Sub extends Super<String> {
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,31,@Override
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,32,public String say(String t)  {
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,33,"return ""Sub says: "" + t;"
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,37,@Test
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,38,public void shouldHaveBridgeMethod() throws Exception {
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,39,Super s = new Sub();
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,41,"assertEquals(""Sub says: Hello"", s.say(""Hello""));"
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,43,"assertThat(Sub.class, hasBridgeMethod(""say""));"
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,44,"assertThat(s, hasBridgeMethod(""say""));"
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,47,@Test
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,48,public void shouldVerifyCorrectlyWhenBridgeMethodCalled() throws Exception {
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,49,//Super has following erasure: say(Object) which differs from Sub.say(String)
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,50,//mock has to detect it and do the polymorphic call: Sub.say(Object)
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,51,Super s = mock(Sub.class);
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,53,"s.say(""Hello"");"
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,55,"verify(s).say(""Hello"");"
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,58,@Test
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,59,public void shouldVerifyCorrectlyWhenBridgeMethodIsNotCalled() throws Exception {
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,60,"//no problem here, no polymorphic call"
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,61,Sub s = mock(Sub.class);
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,63,"s.say(""Hello"");"
True,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,test/org/mockito/usage/binding/BridgeMethodPuzzleTest.java,65,"verify(s).say(""Hello"");"

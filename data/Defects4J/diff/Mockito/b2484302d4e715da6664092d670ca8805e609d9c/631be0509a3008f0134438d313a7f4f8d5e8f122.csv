is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,14,mport org.mockito.internal.util.MockCreationValidator;
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,23,* This class can retrieve generic meta-data that the compiler stores on classes
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,24,* and accessible members.
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,26,* <p>
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,27,*     The main idea of this code is to create a Map that will help to resolve return types.
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,28,"*     In order to actually work with nested generics, this map will have to be passed along new instances"
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,29,*     as a type context.
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,30,* </p>
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,32,* <p>
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,33,*     Hence :
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,34,*     <ul>
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,35,*         <li>the metadata is created using the {@link #from(Type)} method from a real
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,36,"*         Class or from a ParameterizedType, other types are not yet supported.</li>"
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,38,"*         <li>Then from this metadata, we can extract meta-data for a generic return type of a method, using"
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,39,*         {@link #resolveGenericReturnType(Method)}.</li>
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,41,"*         <li>Finally as we want to mock the actual type, but we want to pass along the contextual generics meta-data"
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,42,"*         we need to create the mock ourselves as we know how to create it, depending on the kind of Type (Class,"
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,43,"*         ParameterizedType, TypeVariable), the method {@link #toMock(Answer)} assumes this responsibility.</li>"
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,44,*     </ul>
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,45,* </p>
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,47,* <p>
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,48,* For now this code support the following kind of generic declarations :
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,49,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,50,"* interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {"
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,51,*     Set&lt;Number&gt; remove(Object key); // override with fixed ParameterizedType
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,52,*     List&lt;? super Integer&gt; returning_wildcard_with_class_lower_bound();
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,53,*     List&lt;? super K&gt; returning_wildcard_with_typeVar_lower_bound();
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,54,*     List&lt;? extends K&gt; returning_wildcard_with_typeVar_upper_bound();
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,55,*     K returningK();
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,56,*     &lt;O extends K&gt; List&lt;O&gt; paramType_with_type_params();
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,57,"*     &lt;S, T extends S&gt; T two_type_params();"
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,58,*     &lt;O extends K&gt; O typeVar_with_type_params();
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,59,*     Number returningNonGeneric();
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,61,* </code></pre>
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,63,* @see #from(Type)
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,64,* @see #resolveGenericReturnType(Method)
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,65,* @see #toMock(Answer)
True,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,66,* @see org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubs
False,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,159,f (!new MockCreationValidator().isTypeMockable(rawType)) {
False,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,src/org/mockito/internal/util/reflection/MockitoGenericMetadata.java,160,eturn null;
True,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,8,import org.mockito.exceptions.base.MockitoException;
False,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,175,Test
False,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,176,ublic void toMock_returns_null_if_type_unmockable() throws Exception {
True,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,176,@Test(expected = MockitoException.class)
True,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,177,public void toMock_propagate_MockitoException_if_type_unmockable() throws Exception {
False,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,181,ssertThat(from(boundedType.firstBound()).toMock(RETURNS_DEFAULTS)).isNull();
True,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,test/org/mockito/internal/util/reflection/MockitoGenericMetadataTest.java,182,from(boundedType.firstBound()).toMock(RETURNS_DEFAULTS);

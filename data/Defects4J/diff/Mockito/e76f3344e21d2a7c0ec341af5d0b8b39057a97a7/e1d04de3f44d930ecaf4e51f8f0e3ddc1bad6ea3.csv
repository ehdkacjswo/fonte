is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,1,package org.mockito.internal.util.io;
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,3,import org.mockito.exceptions.base.MockitoException;
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,5,import java.io.*;
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,6,import java.util.Collection;
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,7,import java.util.LinkedList;
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,8,import java.util.List;
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,11,* IO utils. A bit of reinventing the wheel but we don't want extra dependencies at this stage and we want to be java.
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,13,public class IOUtil {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,16,* Writes text to file
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,18,"public static void writeText(String text, File output) {"
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,19,PrintWriter pw = null;
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,20,try {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,21,pw = new PrintWriter(new FileWriter(output));
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,22,pw.write(text);
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,23,} catch (Exception e) {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,24,"throw new MockitoException(""Problems writing text to file: "" + output);"
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,25,} finally {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,26,close(pw);
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,30,public static Collection<String> readLines(Reader reader) {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,31,List<String> out = new LinkedList<String>();
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,32,BufferedReader r = new BufferedReader(reader);
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,33,String line;
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,34,try {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,35,while((line = r.readLine()) != null) {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,36,out.add(line);
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,38,} catch (IOException e) {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,39,"throw new MockitoException(""Problems reading from: "" + reader);"
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,41,return out;
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,45,* Closes the target. Does nothing when target is null. Is silent.
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,47,"* @param closeable the target, may be null"
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,49,public static void closeQuietly(Closeable closeable) {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,50,try {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,51,close(closeable);
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,52,} catch (MockitoException ignored) {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,53,"//ignore, for backwards compatibility"
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,58,* Closes the target. Does nothing when target is null. Is not silent and exceptions are rethrown.
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,60,"* @param closeable the target, may be null"
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,62,public static void close(Closeable closeable) {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,63,if (closeable != null) {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,64,try {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,65,closeable.close();
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,66,} catch (IOException e) {
True,src/org/mockito/internal/util/io/IOUtil.java,src/org/mockito/internal/util/io/IOUtil.java,67,"throw new MockitoException(""Problems closing stream: "" + closeable);"
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,1,package org.mockito.internal.util.io;
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,3,import org.junit.Rule;
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,4,import org.junit.Test;
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,5,import org.junit.rules.TemporaryFolder;
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,7,import java.io.ByteArrayOutputStream;
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,8,import java.io.File;
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,9,import java.io.FileReader;
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,11,import static java.util.Arrays.asList;
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,12,import static org.junit.Assert.assertEquals;
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,14,public class IOUtilTest {
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,16,@Rule public TemporaryFolder tmp = new TemporaryFolder();
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,18,@Test
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,19,public void closes_streams() throws Exception {
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,20,IOUtil.closeQuietly(null);
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,21,IOUtil.closeQuietly(new ByteArrayOutputStream());
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,23,IOUtil.close(null);
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,24,IOUtil.close(new ByteArrayOutputStream());
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,27,@Test
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,28,public void writes_reads_files() throws Exception {
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,29,File file = tmp.newFile();
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,30,"IOUtil.writeText(""foo\n\nbar"", file);"
True,test/org/mockito/internal/util/io/IOUtilTest.java,test/org/mockito/internal/util/io/IOUtilTest.java,31,"assertEquals(asList(""foo"", """", ""bar""), IOUtil.readLines(new FileReader(file)));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,751,public void defaultAnswerDoesNotAcceptNullParameter() {
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,752,"throw new MockitoException(""defaultAnswer() does not accept null parameter"");"
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,14,import org.mockito.internal.util.reflection.GenericMetadataSupport;
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,77,if (defaultAnswer == null) {
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,78,new Reporter().defaultAnswerDoesNotAcceptNullParameter();
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,175,public MockSettings parameterizedInfo(GenericMetadataSupport mockitoGenericMetadata) {
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,176,this.mockitoGenericMetadata = mockitoGenericMetadata;
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,177,return this;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,7,import org.mockito.internal.util.reflection.GenericMetadataSupport;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,23,private static final long serialVersionUID = -6789800638070123629L;
False,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,30,rotected boolean stubOnly;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,33,protected GenericMetadataSupport mockitoGenericMetadata;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,34,protected boolean stubOnly;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,38,"@SuppressWarnings(""unchecked"")"
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,48,this.mockitoGenericMetadata = copy.mockitoGenericMetadata;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,95,public List<InvocationListener> getInvocationListeners() {
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,96,return invocationListeners;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,99,public GenericMetadataSupport getMockitoGenericMetadata() {
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,100,if (mockitoGenericMetadata == null) {
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,101,this.mockitoGenericMetadata = GenericMetadataSupport.from(typeToMock);
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,103,return mockitoGenericMetadata;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,106,public void setMockitoGenericMetadata(GenericMetadataSupport mockitoGenericMetadata) {
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,107,this.mockitoGenericMetadata = mockitoGenericMetadata;
False,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,94,ublic List<InvocationListener> getInvocationListeners() {
False,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,95,eturn invocationListeners;
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,2, Copyright (c) 2007 Mockito contributors
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,3, This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,3,* This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,1,package org.mockito.internal.stubbing.defaultanswers;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,3,import org.mockito.Incubating;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,4,import org.mockito.internal.InternalMockHandler;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,5,import org.mockito.internal.creation.settings.CreationSettings;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,6,import org.mockito.internal.stubbing.InvocationContainerImpl;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,7,import org.mockito.internal.stubbing.StubbedInvocationMatcher;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,8,import org.mockito.internal.util.MockCreationValidator;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,9,import org.mockito.internal.util.MockUtil;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,10,import org.mockito.internal.util.reflection.GenericMetadataSupport;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,11,import org.mockito.invocation.InvocationOnMock;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,12,import org.mockito.stubbing.Answer;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,14,import java.io.Serializable;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,17,* Returning generic deep stub implementation.
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,19,* Will return previously created mock if the invocation matches.
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,22,"* <p>Supports nested generic information, with this answer you can write code like this :"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,24,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,25,"*     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,27,"*     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,28,*     Number number = mock.entrySet().iterator().next().getValue().iterator().next();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,29,* </code></pre>
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,30,* </p>
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,32,* @see org.mockito.Mockito#RETURNS_DEEP_STUBS
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,33,* @see org.mockito.Answers#RETURNS_DEEP_STUBS
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,35,@Incubating
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,36,"public class ReturnsGenericDeepStubs extends ReturnsDeepStubs implements Answer<Object>, Serializable {"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,38,private static final long serialVersionUID = -7105341425736035847L;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,40,private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,42,public Object answer(InvocationOnMock invocation) throws Throwable {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,43,GenericMetadataSupport returnTypeGenericMetadata =
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,44,actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,46,Class<?> rawType = returnTypeGenericMetadata.rawType();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,47,if (!new MockCreationValidator().isTypeMockable(rawType)) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,48,return delegate.returnValueFor(rawType);
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,51,"return getMock(invocation, returnTypeGenericMetadata);"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,54,"private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,55,InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,56,InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,58,// matches invocation for verification
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,59,for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,60,if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,61,return stubbedInvocationMatcher.answer(invocation);
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,65,// deep stub
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,66,"return recordDeepStubMock(returnTypeGenericMetadata.toMock(this), container);"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,69,"private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,71,container.addAnswer(new Answer<Object>() {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,72,public Object answer(InvocationOnMock invocation) throws Throwable {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,73,return mock;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,75,"}, false);"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,77,return mock;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,80,private GenericMetadataSupport actualParameterizedType(Object mock) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,81,CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubs.java,82,return mockSettings.getMockitoGenericMetadata();
False,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,2, Copyright (c) 2007 Mockito contributors
False,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,3, This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,3,* This program is made available under the terms of the MIT License.
False,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,13,ystem.out.print(what);
True,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,13,System.out.println(what);
False,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,2, Copyright (c) 2007 Mockito contributors
False,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,3, This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,3,* This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,3,* This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,5,package org.mockito.internal.util.reflection;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,8,import org.mockito.Incubating;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,9,import org.mockito.MockSettings;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,10,import org.mockito.Mockito;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,11,import org.mockito.exceptions.base.MockitoException;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,12,import org.mockito.internal.creation.MockSettingsImpl;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,13,import org.mockito.internal.util.Checks;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,14,import org.mockito.stubbing.Answer;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,16,import java.lang.reflect.*;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,17,import java.util.*;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,19,import static org.mockito.Mockito.withSettings;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,23,* This class can retrieve generic meta-data that the compiler stores on classes
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,24,* and accessible members.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,26,* <p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,27,*     The main idea of this code is to create a Map that will help to resolve return types.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,28,"*     In order to actually work with nested generics, this map will have to be passed along new instances"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,29,*     as a type context.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,30,* </p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,32,* <p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,33,*     Hence :
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,34,*     <ul>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,35,*         <li>the metadata is created using the {@link #from(Type)} method from a real
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,36,"*         Class or from a ParameterizedType, other types are not yet supported.</li>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,38,"*         <li>Then from this metadata, we can extract meta-data for a generic return type of a method, using"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,39,*         {@link #resolveGenericReturnType(Method)}.</li>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,41,"*         <li>Finally as we want to mock the actual type, but we want to pass along the contextual generics meta-data"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,42,"*         we need to create the mock ourselves as we know how to create it, depending on the kind of Type (Class,"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,43,"*         ParameterizedType, TypeVariable), the method {@link #toMock(Answer)} assumes this responsibility.</li>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,44,*     </ul>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,45,* </p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,47,* <p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,48,* For now this code support the following kind of generic declarations :
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,49,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,50,"* interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,51,*     Set&lt;Number&gt; remove(Object key); // override with fixed ParameterizedType
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,52,*     List&lt;? super Integer&gt; returning_wildcard_with_class_lower_bound();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,53,*     List&lt;? super K&gt; returning_wildcard_with_typeVar_lower_bound();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,54,*     List&lt;? extends K&gt; returning_wildcard_with_typeVar_upper_bound();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,55,*     K returningK();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,56,*     &lt;O extends K&gt; List&lt;O&gt; paramType_with_type_params();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,57,"*     &lt;S, T extends S&gt; T two_type_params();"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,58,*     &lt;O extends K&gt; O typeVar_with_type_params();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,59,*     Number returningNonGeneric();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,61,* </code></pre>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,63,* @see #from(Type)
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,64,* @see #resolveGenericReturnType(Method)
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,65,* @see #toMock(Answer)
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,66,* @see org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubs
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,68,@Incubating
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,69,public abstract class GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,71,// public static MockitoLogger logger = new ConsoleMockitoLogger();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,74,* Represents actual type variables resolved for current class.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,76,"protected Map<TypeVariable, Type> contextualActualTypeParameters = new HashMap<TypeVariable, Type>();"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,79,protected void registerTypeVariablesOn(Type classType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,80,if (!(classType instanceof ParameterizedType)) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,81,return;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,83,ParameterizedType parameterizedType = (ParameterizedType) classType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,84,TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,85,Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,86,for (int i = 0; i < actualTypeArguments.length; i++) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,87,TypeVariable typeParameter = typeParameters[i];
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,88,Type actualTypeArgument = actualTypeArguments[i];
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,90,if (actualTypeArgument instanceof WildcardType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,91,"contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,92,} else {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,93,"contextualActualTypeParameters.put(typeParameter, actualTypeArgument);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,95,"// logger.log(""For '"" + parameterizedType + ""' found type variable : { '"" + typeParameter + ""("" + System.identityHashCode(typeParameter) + "")"" + ""' : '"" + actualTypeArgument + ""("" + System.identityHashCode(typeParameter) + "")"" + ""' }"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,99,protected void registerTypeParametersOn(TypeVariable[] typeParameters) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,100,for (TypeVariable typeParameter : typeParameters) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,101,"contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,102,"// logger.log(""For '"" + typeParameter.getGenericDeclaration() + ""' found type variable : { '"" + typeParameter + ""("" + System.identityHashCode(typeParameter) + "")"" + ""' : '"" + boundsOf(typeParameter) + ""' }"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,107,* @param typeParameter The TypeVariable parameter
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,108,"* @return A {@link BoundedType} for easy bound information, if first bound is a TypeVariable"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,109,*         then retrieve BoundedType of this TypeVariable
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,111,private BoundedType boundsOf(TypeVariable typeParameter) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,112,if (typeParameter.getBounds()[0] instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,113,return boundsOf((TypeVariable) typeParameter.getBounds()[0]);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,115,return new TypeVarBoundedType(typeParameter);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,119,* @param wildCard The WildCard type
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,120,"* @return A {@link BoundedType} for easy bound information, if first bound is a TypeVariable"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,121,*         then retrieve BoundedType of this TypeVariable
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,123,private BoundedType boundsOf(WildcardType wildCard) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,125,*  According to JLS(http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1):
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,126,"*  - Lower and upper can't coexist: (for instance, this is not allowed: <? extends List<String> & super MyInterface>)"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,127,"*  - Multiple bounds are not supported (for instance, this is not allowed: <? extends List<String> & MyInterface>)"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,130,WildCardBoundedType wildCardBoundedType = new WildCardBoundedType(wildCard);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,131,if (wildCardBoundedType.firstBound() instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,132,return boundsOf((TypeVariable) wildCardBoundedType.firstBound());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,135,return wildCardBoundedType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,141,* @return Raw type of the current instance.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,143,public abstract Class<?> rawType();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,148,"* @return Returns extra interfaces if relevant, otherwise empty List."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,150,public List<Type> extraInterfaces() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,151,return Collections.emptyList();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,157,* @return Actual type arguments matching the type variables of the raw type represented by this {@link GenericMetadataSupport} instance.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,159,"public Map<TypeVariable, Type> actualTypeArguments() {"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,160,TypeVariable[] typeParameters = rawType().getTypeParameters();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,161,"LinkedHashMap<TypeVariable, Type> actualTypeArguments = new LinkedHashMap<TypeVariable, Type>();"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,163,for (TypeVariable typeParameter : typeParameters) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,165,Type actualType = getActualTypeArgumentFor(typeParameter);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,167,"actualTypeArguments.put(typeParameter, actualType);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,168,"// logger.log(""For '"" + rawType().getCanonicalName() + ""' returning explicit TypeVariable : { '"" + typeParameter + ""("" + System.identityHashCode(typeParameter) + "")"" + ""' : '"" + actualType +""' }"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,171,return actualTypeArguments;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,174,protected Type getActualTypeArgumentFor(TypeVariable typeParameter) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,175,Type type = this.contextualActualTypeParameters.get(typeParameter);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,176,if (type instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,177,TypeVariable typeVariable = (TypeVariable) type;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,178,return getActualTypeArgumentFor(typeVariable);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,181,return type;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,187,* Creates a mock using the Generics Metadata represented by this instance.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,189,* @param answer The answer to use in mock settings.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,190,* @return The mock or null if not mockable.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,192,public Object toMock(Answer answer) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,193,"return createMock(rawType(), ((MockSettingsImpl) withSettings().defaultAnswer(answer)).parameterizedInfo(this));"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,196,"private Object createMock(Class<?> rawType, MockSettings mockSettings) {"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,197,"return Mockito.mock(rawType, mockSettings);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,202,* Resolve current method generic return type to a {@link GenericMetadataSupport}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,204,* @param method Method to resolve the return type.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,205,* @return {@link GenericMetadataSupport} representing this generic return type.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,207,public GenericMetadataSupport resolveGenericReturnType(Method method) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,208,Type genericReturnType = method.getGenericReturnType();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,209,"// logger.log(""Method '"" + method.toGenericString() + ""' has return type : "" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + "" : "" + genericReturnType);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,211,if (genericReturnType instanceof Class) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,212,return new NotGenericReturnTypeSupport(genericReturnType);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,214,if (genericReturnType instanceof ParameterizedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,215,"return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,217,if (genericReturnType instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,218,"return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,221,"throw new MockitoException(""Ouch, it shouldn't happen, type '"" + genericReturnType.getClass().getCanonicalName() + ""' on method : '"" + method.toGenericString() + ""' is not supported : "" + genericReturnType);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,225,* Create an new GenericMetadataSupport from a {@link Type}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,227,* <p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,228,"*     Supports only {@link Class} and {@link ParameterizedType}, otherwise throw a {@link MockitoException}."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,229,* </p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,231,* @param type The class from which the {@link GenericMetadataSupport} should be built.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,232,* @return The new {@link GenericMetadataSupport}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,233,* @throws MockitoException Raised if type is not a {@link Class} or a {@link ParameterizedType}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,235,public static GenericMetadataSupport from(Type type) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,236,"Checks.checkNotNull(type, ""type"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,237,if (type instanceof Class) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,238,return new FromClassGenericMetadataSupport((Class<?>) type);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,240,if (type instanceof ParameterizedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,241,return new FromParameterizedTypeGenericMetadataSupport((ParameterizedType) type);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,244,"throw new MockitoException(""Type meta-data for this Type ("" + type.getClass().getCanonicalName() + "") is not supported : "" + type);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,249,* Metadata for source {@link Class}
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,251,private static class FromClassGenericMetadataSupport extends GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,252,private Class<?> clazz;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,254,public FromClassGenericMetadataSupport(Class<?> clazz) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,255,this.clazz = clazz;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,256,readActualTypeParametersOnDeclaringClass();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,259,private void readActualTypeParametersOnDeclaringClass() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,260,registerTypeParametersOn(clazz.getTypeParameters());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,261,registerTypeVariablesOn(clazz.getGenericSuperclass());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,262,for (Type genericInterface : clazz.getGenericInterfaces()) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,263,registerTypeVariablesOn(genericInterface);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,267,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,268,public Class<?> rawType() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,269,return clazz;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,275,* Metadata for source {@link ParameterizedType}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,276,* Don't work with ParameterizedType returned in {@link Method#getGenericReturnType()}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,278,private static class FromParameterizedTypeGenericMetadataSupport extends GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,279,private ParameterizedType parameterizedType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,281,public FromParameterizedTypeGenericMetadataSupport(ParameterizedType parameterizedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,282,this.parameterizedType = parameterizedType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,283,readActualTypeParameters();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,286,private void readActualTypeParameters() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,287,registerTypeVariablesOn(parameterizedType.getRawType());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,288,registerTypeVariablesOn(parameterizedType);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,291,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,292,public Class<?> rawType() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,293,return (Class<?>) parameterizedType.getRawType();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,299,* Metadata specific to {@link ParameterizedType} generic return types.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,301,private static class ParameterizedReturnType extends GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,302,private final ParameterizedType parameterizedType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,303,private final TypeVariable[] typeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,305,"public ParameterizedReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, ParameterizedType parameterizedType) {"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,306,this.parameterizedType = parameterizedType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,307,this.typeParameters = typeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,308,this.contextualActualTypeParameters = source.contextualActualTypeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,310,readTypeParameters();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,311,readTypeVariables();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,314,private void readTypeParameters() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,315,registerTypeParametersOn(typeParameters);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,318,private void readTypeVariables() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,319,registerTypeVariablesOn(parameterizedType);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,322,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,323,public Class<?> rawType() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,324,return (Class<?>) parameterizedType.getRawType();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,331,* Metadata specific to {@link TypeVariable} generic return type.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,333,private static class TypeVariableReturnType extends GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,334,private final TypeVariable typeVariable;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,335,private final TypeVariable[] typeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,336,private Class<?> rawType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,340,"public TypeVariableReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, TypeVariable typeVariable) {"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,341,this.typeParameters = typeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,342,this.typeVariable = typeVariable;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,343,this.contextualActualTypeParameters = source.contextualActualTypeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,345,readTypeParameters();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,346,readTypeVariables();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,349,private void readTypeParameters() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,350,registerTypeParametersOn(typeParameters);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,353,private void readTypeVariables() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,354,for (Type type : typeVariable.getBounds()) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,355,registerTypeVariablesOn(type);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,357,registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,360,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,361,public Class<?> rawType() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,362,if (rawType == null) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,363,rawType = extractRawTypeOf(typeVariable);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,365,return rawType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,368,private Class<?> extractRawTypeOf(Type type) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,369,if (type instanceof Class) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,370,return (Class<?>) type;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,372,if (type instanceof ParameterizedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,373,return (Class<?>) ((ParameterizedType) type).getRawType();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,375,if (type instanceof BoundedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,376,return extractRawTypeOf(((BoundedType) type).firstBound());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,378,if (type instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,380,"* If type is a TypeVariable, then it is needed to gather data elsewhere. Usually TypeVariables are declared"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,381,"* on the class definition, such as such as List<E>."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,383,return extractRawTypeOf(contextualActualTypeParameters.get(type));
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,385,"throw new MockitoException(""Raw extraction not supported for : '"" + type + ""'"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,388,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,389,public List<Type> extraInterfaces() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,390,Type type = extractActualBoundedTypeOf(typeVariable);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,391,if (type instanceof BoundedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,392,return Arrays.asList(((BoundedType) type).interfaceBounds());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,394,if (type instanceof ParameterizedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,395,return Collections.singletonList(type);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,397,if (type instanceof Class) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,398,return Collections.emptyList();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,400,"throw new MockitoException(""Cannot extract extra-interfaces from '"" + typeVariable + ""' : '"" + type + ""'"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,403,private Class<?>[] rawExtraInterfaces() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,404,List<Type> extraInterfaces = extraInterfaces();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,405,List<Class<?>> rawExtraInterfaces = new ArrayList<Class<?>>();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,406,for (Type extraInterface : extraInterfaces) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,407,Class<?> rawInterface = extractRawTypeOf(extraInterface);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,408,"// avoid interface collision with actual raw type (with typevariables, resolution ca be quite aggressive)"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,409,if(!rawType().equals(rawInterface)) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,410,rawExtraInterfaces.add(rawInterface);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,413,return rawExtraInterfaces.toArray(new Class[rawExtraInterfaces.size()]);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,416,private Type extractActualBoundedTypeOf(Type type) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,417,if (type instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,419,"If type is a TypeVariable, then it is needed to gather data elsewhere. Usually TypeVariables are declared"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,420,"on the class definition, such as such as List<E>."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,422,return extractActualBoundedTypeOf(contextualActualTypeParameters.get(type));
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,424,if (type instanceof BoundedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,425,Type actualFirstBound = extractActualBoundedTypeOf(((BoundedType) type).firstBound());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,426,if (!(actualFirstBound instanceof BoundedType)) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,427,"return type; // avoid going one step further, ie avoid : O(TypeVar) -> K(TypeVar) -> Some ParamType"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,429,return actualFirstBound;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,431,"return type; // irrelevant, we don't manage other types."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,434,public Object toMock(Answer answer) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,435,Class<?>[] rawExtraInterfaces = rawExtraInterfaces();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,436,if (rawExtraInterfaces.length <= 0) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,437,return super.toMock(answer);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,440,return super.createMock(
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,441,"rawType(),"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,442,((MockSettingsImpl) withSettings()
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,443,.defaultAnswer(answer)
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,444,.extraInterfaces(rawExtraInterfaces))
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,445,.parameterizedInfo(this)
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,453,* Metadata specific to {@link Class} return type.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,455,private static class NotGenericReturnTypeSupport extends GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,456,private final Class<?> returnType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,458,public NotGenericReturnTypeSupport(Type genericReturnType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,459,returnType = (Class<?>) genericReturnType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,462,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,463,public Class<?> rawType() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,464,return returnType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,471,* Type representing bounds of a type
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,473,* @see TypeVarBoundedType
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,474,"* @see <a href=""http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4"">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,475,* @see WildCardBoundedType
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,476,"* @see <a href=""http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1"">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1</a>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,478,public static interface BoundedType extends Type {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,479,Type firstBound();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,481,Type[] interfaceBounds();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,485,"* Type representing bounds of a type variable, allows to keep all bounds information."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,487,"* <p>It uses the first bound in the array, as this array is never null and always contains at least"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,488,* one element (Object is always here if no bounds are declared).</p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,490,"* <p>If upper bounds are declared with SomeClass and additional interfaces, then firstBound will be SomeClass and"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,491,* interfacesBound will be an array of the additional interfaces.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,493,* i.e. <code>SomeClass</code>.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,494,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,495,*     interface UpperBoundedTypeWithClass<E extends Comparable<E> & Cloneable> {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,496,*         E get();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,498,*     // will return Comparable type
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,499,* </code></pre>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,500,* </p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,502,"* @see <a href=""http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4"">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,504,public static class TypeVarBoundedType implements BoundedType {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,505,private TypeVariable typeVariable;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,508,public TypeVarBoundedType(TypeVariable typeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,509,this.typeVariable = typeVariable;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,513,"* @return either a class or an interface (parameterized or not), if no bounds declared Object is returned."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,515,public Type firstBound() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,516,return typeVariable.getBounds()[0]; //
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,520,"* On a Type Variable (typeVar extends C_0 & I_1 & I_2 & etc), will return an array"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,521,* containing I_1 and I_2.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,523,"* @return other bounds for this type, these bounds can only be only interfaces as the JLS says,"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,524,* empty array if no other bound declared.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,526,public Type[] interfaceBounds() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,527,Type[] interfaceBounds = new Type[typeVariable.getBounds().length - 1];
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,528,"System.arraycopy(typeVariable.getBounds(), 1, interfaceBounds, 0, typeVariable.getBounds().length - 1);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,529,return interfaceBounds;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,532,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,533,public boolean equals(Object o) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,534,if (this == o) return true;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,535,if (o == null || getClass() != o.getClass()) return false;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,537,return typeVariable.equals(((TypeVarBoundedType) o).typeVariable);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,541,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,542,public int hashCode() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,543,return typeVariable.hashCode();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,546,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,547,public String toString() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,548,final StringBuilder sb = new StringBuilder();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,549,"sb.append(""{firstBound="").append(firstBound());"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,550,"sb.append("", interfaceBounds="").append(Arrays.deepToString(interfaceBounds()));"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,551,sb.append('}');
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,552,return sb.toString();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,555,public TypeVariable typeVariable() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,556,return typeVariable;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,561,"* Type representing bounds of a wildcard, allows to keep all bounds information."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,563,"* <p>The JLS says that lower bound and upper bound are mutually exclusive, and that multiple bounds"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,564,* are not allowed.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,566,"* @see <a href=""http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4"">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,568,public static class WildCardBoundedType implements BoundedType {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,569,private WildcardType wildcard;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,572,public WildCardBoundedType(WildcardType wildcard) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,573,this.wildcard = wildcard;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,577,"* @return The first bound, either a type or a reference to a TypeVariable"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,579,public Type firstBound() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,580,Type[] lowerBounds = wildcard.getLowerBounds();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,581,Type[] upperBounds = wildcard.getUpperBounds();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,583,return lowerBounds.length != 0 ? lowerBounds[0] : upperBounds[0];
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,587,"* @return An empty array as, wildcard don't support multiple bounds."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,589,public Type[] interfaceBounds() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,590,return new Type[0];
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,593,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,594,public boolean equals(Object o) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,595,if (this == o) return true;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,596,if (o == null || getClass() != o.getClass()) return false;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,598,return wildcard.equals(((TypeVarBoundedType) o).typeVariable);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,602,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,603,public int hashCode() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,604,return wildcard.hashCode();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,607,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,608,public String toString() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,609,final StringBuilder sb = new StringBuilder();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,610,"sb.append(""{firstBound="").append(firstBound());"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,611,"sb.append("", interfaceBounds=[]}"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,612,return sb.toString();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,615,public WildcardType wildCard() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,616,return wildcard;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,5,package org.mockito.internal.stubbing.defaultanswers;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,7,import org.junit.Test;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,9,import java.util.Iterator;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,10,import java.util.List;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,11,import java.util.Map;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,12,import java.util.Set;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,14,import static org.fest.assertions.Assertions.assertThat;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,15,import static org.mockito.Mockito.mock;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,17,"@SuppressWarnings(""unused"")"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,18,public class ReturnsGenericDeepStubsTest {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,19,interface ListOfInteger extends List<Integer> {}
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,21,"interface GenericsNest<K extends Comparable<K> & Cloneable> extends Map<K, Set<Number>> {"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,22,Set<Number> remove(Object key); // override with fixed ParameterizedType
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,23,List<? super Number> returningWildcard();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,24,"Map<String, K> returningNonMockableNestedGeneric();"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,25,K returningK();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,26,<O extends K> List<O> paramTypeWithTypeParams();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,27,"<S extends Appendable, T extends S> T twoTypeParams(S s);"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,28,<O extends K> O typeVarWithTypeParams();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,29,Number returnsNormalType();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,32,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,33,public void returning_deep_stubs_1() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,34,"GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,36,"Set<? extends Map.Entry<? extends Cloneable, Set<Number>>> entries = mock.entrySet();"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,37,"Iterator<? extends Map.Entry<? extends Cloneable,Set<Number>>> entriesIterator = mock.entrySet().iterator();"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,38,"Map.Entry<? extends Cloneable, Set<Number>> nextEntry = mock.entrySet().iterator().next();"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,40,Cloneable cloneableKey = mock.entrySet().iterator().next().getKey();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,41,Comparable<?> comparableKey = mock.entrySet().iterator().next().getKey();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,43,Set<Number> value = mock.entrySet().iterator().next().getValue();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,44,Iterator<Number> numbersIterator = mock.entrySet().iterator().next().getValue().iterator();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,45,Number number = mock.entrySet().iterator().next().getValue().iterator().next();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,48,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,49,public void returning_deep_stubs_2() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,50,"GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,52,Cloneable cloneable1 = mock.paramTypeWithTypeParams().get(0);
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,53,Comparable<?> comparable1 = mock.paramTypeWithTypeParams().get(0);
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,54,Cloneable cloneable2 = mock.returningK();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,55,Comparable<?> comparable2 = mock.returningK();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,56,Cloneable cloneable3 = (Cloneable) mock.typeVarWithTypeParams();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,59,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,60,public void returning_deep_stubs_3() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,61,"GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,63,List<? super Integer> objects = mock.returningWildcard();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,64,Number n = (Number) mock.returningWildcard().get(45);
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,65,n.floatValue();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,68,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,69,public void returning_deep_stubs_4() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,70,"GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,72,Number n = mock.returnsNormalType();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,73,n.floatValue();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,76,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,77,public void return_default_value_on_non_mockable_nested_generic() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,78,"GenericsNest<?> genericsNest = mock(GenericsNest.class, new ReturnsGenericDeepStubs());"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,79,"ListOfInteger listOfInteger = mock(ListOfInteger.class, new ReturnsGenericDeepStubs());"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,81,assertThat(genericsNest.returningNonMockableNestedGeneric().keySet().iterator().next()).isNull();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,82,assertThat(listOfInteger.get(25)).isEqualTo(0);
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,85,@Test(expected = ClassCastException.class)
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,86,public void returning_deep_stub_dont_work_because_StringBuilder_is_subject_to_erasure() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,87,"GenericsNest<?> mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,89,StringBuilder stringBuilder = mock.twoTypeParams(new StringBuilder()).append(2).append(3); // ClassCastException
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,2, Copyright (c) 2007 Mockito contributors
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,3, This program is made available under the terms of the MIT License.
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,3,* This program is made available under the terms of the MIT License.
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,7,mport static org.junit.Assert.*;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,7,import org.junit.Test;
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,10,mport java.util.Collection;
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,11,mport java.util.List;
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,12,mport java.util.Map;
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,13,mport java.util.Set;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,10,import java.lang.reflect.Type;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,11,import java.util.*;
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,15,mport org.junit.Test;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,13,import static org.junit.Assert.assertEquals;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,26,public interface ListSet extends List<Set> {}
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,27,"public interface MapNumberString extends Map<Number, String> {}"
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,28,"public class HashMapNumberString<K extends Number> extends HashMap<K, String> {}"
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,30,public List<Number> numberList() { return null; }
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,31,public Comparable<Number> numberComparable() { return null; }
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,32,public List rawList() { return null; }
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,33,public List<? extends Type> typeList() { return null; }
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,29,ublic void shouldFindGenericClass() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,38,public void should_find_generic_class() throws Exception {
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,36,ublic void shouldGetObjectForNonGeneric() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,45,public void should_get_object_for_non_generic() throws Exception {
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,41,ublic void shouldDealWithNestedGenerics() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,50,public void should_deal_with_nested_generics() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,5,package org.mockito.internal.util.reflection;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,7,import org.junit.Test;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,8,import org.mockito.exceptions.base.MockitoException;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,10,import java.io.Serializable;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,11,import java.lang.reflect.Method;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,12,import java.lang.reflect.Type;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,13,import java.lang.reflect.TypeVariable;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,14,import java.util.Collection;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,15,import java.util.List;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,16,import java.util.Map;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,17,import java.util.Set;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,19,import static org.fest.assertions.Assertions.assertThat;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,20,import static org.junit.Assert.fail;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,21,import static org.mockito.Mockito.RETURNS_DEFAULTS;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,22,import static org.mockito.internal.util.reflection.GenericMetadataSupport.from;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,24,"@SuppressWarnings(""unused"")"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,25,public class GenericMetadataSupportTest {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,27,interface UpperBoundedTypeWithClass<E extends Number & Comparable<E>> {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,28,E get();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,30,interface UpperBoundedTypeWithInterfaces<E extends Comparable<E> & Cloneable> {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,31,E get();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,33,interface ListOfNumbers extends List<Number> {}
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,34,interface ListOfAnyNumbers<N extends Number & Cloneable> extends List<N> {}
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,36,"interface GenericsNest<K extends Comparable<K> & Cloneable> extends Map<K, Set<Number>> {"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,37,Set<Number> remove(Object key); // override with fixed ParameterizedType
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,38,List<? super Integer> returning_wildcard_with_class_lower_bound();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,39,List<? super K> returning_wildcard_with_typeVar_lower_bound();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,40,List<? extends K> returning_wildcard_with_typeVar_upper_bound();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,41,K returningK();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,42,<O extends K> List<O> paramType_with_type_params();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,43,"<S, T extends S> T two_type_params();"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,44,<O extends K> O typeVar_with_type_params();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,47,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,48,public void can_get_raw_type_from_Class() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,49,assertThat(from(ListOfAnyNumbers.class).rawType()).isEqualTo(ListOfAnyNumbers.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,50,assertThat(from(ListOfNumbers.class).rawType()).isEqualTo(ListOfNumbers.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,51,assertThat(from(GenericsNest.class).rawType()).isEqualTo(GenericsNest.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,55,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,56,public void can_get_raw_type_from_ParameterizedType() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,57,assertThat(from(ListOfAnyNumbers.class.getGenericInterfaces()[0]).rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,58,assertThat(from(ListOfNumbers.class.getGenericInterfaces()[0]).rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,59,assertThat(from(GenericsNest.class.getGenericInterfaces()[0]).rawType()).isEqualTo(Map.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,62,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,63,public void can_get_type_variables_from_Class() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,64,"assertThat(from(GenericsNest.class).actualTypeArguments().keySet()).hasSize(1).onProperty(""name"").contains(""K"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,65,assertThat(from(ListOfNumbers.class).actualTypeArguments().keySet()).isEmpty();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,66,"assertThat(from(ListOfAnyNumbers.class).actualTypeArguments().keySet()).hasSize(1).onProperty(""name"").contains(""N"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,67,"assertThat(from(Map.class).actualTypeArguments().keySet()).hasSize(2).onProperty(""name"").contains(""K"", ""V"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,68,assertThat(from(Serializable.class).actualTypeArguments().keySet()).isEmpty();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,71,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,72,public void can_get_type_variables_from_ParameterizedType() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,73,"assertThat(from(GenericsNest.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).hasSize(2).onProperty(""name"").contains(""K"", ""V"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,74,"assertThat(from(ListOfAnyNumbers.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).hasSize(1).onProperty(""name"").contains(""E"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,75,"assertThat(from(Integer.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).hasSize(1).onProperty(""name"").contains(""T"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,76,assertThat(from(StringBuilder.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).isEmpty();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,79,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,80,public void typeVariable_return_type_of____get____resolved_to_Set_and_type_argument_to_Number() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,81,"GenericMetadataSupport genericMetadata = from(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""get"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,83,assertThat(genericMetadata.rawType()).isEqualTo(Set.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,84,assertThat(genericMetadata.actualTypeArguments().values()).contains(Number.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,87,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,88,public void bounded_typeVariable_return_type_of____returningK____resolved_to_Comparable_and_with_BoundedType() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,89,"GenericMetadataSupport genericMetadata = from(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""returningK"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,91,assertThat(genericMetadata.rawType()).isEqualTo(Comparable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,92,GenericMetadataSupport extraInterface_0 = from(genericMetadata.extraInterfaces().get(0));
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,93,assertThat(extraInterface_0.rawType()).isEqualTo(Cloneable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,96,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,97,public void fixed_ParamType_return_type_of____remove____resolved_to_Set_and_type_argument_to_Number() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,98,"GenericMetadataSupport genericMetadata = from(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""remove"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,100,assertThat(genericMetadata.rawType()).isEqualTo(Set.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,101,assertThat(genericMetadata.actualTypeArguments().values()).contains(Number.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,104,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,105,public void paramType_return_type_of____values____resolved_to_Collection_and_type_argument_to_Parameterized_Set() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,106,"GenericMetadataSupport genericMetadata = from(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""values"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,108,assertThat(genericMetadata.rawType()).isEqualTo(Collection.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,109,"GenericMetadataSupport fromTypeVariableE = from(typeVariableValue(genericMetadata.actualTypeArguments(), ""E""));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,110,assertThat(fromTypeVariableE.rawType()).isEqualTo(Set.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,111,assertThat(fromTypeVariableE.actualTypeArguments().values()).contains(Number.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,114,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,115,public void paramType_with_type_parameters_return_type_of____paramType_with_type_params____resolved_to_Collection_and_type_argument_to_Parameterized_Set() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,116,"GenericMetadataSupport genericMetadata = from(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""paramType_with_type_params"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,118,assertThat(genericMetadata.rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,119,"Type firstBoundOfE = ((GenericMetadataSupport.TypeVarBoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), ""E"")).firstBound();"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,120,assertThat(from(firstBoundOfE).rawType()).isEqualTo(Comparable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,123,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,124,public void typeVariable_with_type_parameters_return_type_of____typeVar_with_type_params____resolved_K_hence_to_Comparable_and_with_BoundedType() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,125,"GenericMetadataSupport genericMetadata = from(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""typeVar_with_type_params"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,127,assertThat(genericMetadata.rawType()).isEqualTo(Comparable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,128,GenericMetadataSupport extraInterface_0 = from(genericMetadata.extraInterfaces().get(0));
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,129,assertThat(extraInterface_0.rawType()).isEqualTo(Cloneable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,132,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,133,public void class_return_type_of____append____resolved_to_StringBuilder_and_type_arguments() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,134,"GenericMetadataSupport genericMetadata = from(StringBuilder.class).resolveGenericReturnType(firstNamedMethod(""append"", StringBuilder.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,136,assertThat(genericMetadata.rawType()).isEqualTo(StringBuilder.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,137,assertThat(genericMetadata.actualTypeArguments()).isEmpty();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,142,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,143,public void paramType_with_wildcard_return_type_of____returning_wildcard_with_class_lower_bound____resolved_to_List_and_type_argument_to_Integer() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,144,"GenericMetadataSupport genericMetadata = from(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""returning_wildcard_with_class_lower_bound"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,146,assertThat(genericMetadata.rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,147,"GenericMetadataSupport.BoundedType boundedType = (GenericMetadataSupport.BoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), ""E"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,148,assertThat(boundedType.firstBound()).isEqualTo(Integer.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,149,assertThat(boundedType.interfaceBounds()).isEmpty();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,152,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,153,public void paramType_with_wildcard_return_type_of____returning_wildcard_with_typeVar_lower_bound____resolved_to_List_and_type_argument_to_Integer() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,154,"GenericMetadataSupport genericMetadata = from(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""returning_wildcard_with_typeVar_lower_bound"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,156,assertThat(genericMetadata.rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,157,"GenericMetadataSupport.BoundedType boundedType = (GenericMetadataSupport.BoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), ""E"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,159,assertThat(from(boundedType.firstBound()).rawType()).isEqualTo(Comparable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,160,assertThat(boundedType.interfaceBounds()).contains(Cloneable.class);    }
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,162,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,163,public void paramType_with_wildcard_return_type_of____returning_wildcard_with_typeVar_upper_bound____resolved_to_List_and_type_argument_to_Integer() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,164,"GenericMetadataSupport genericMetadata = from(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""returning_wildcard_with_typeVar_upper_bound"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,166,assertThat(genericMetadata.rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,167,"GenericMetadataSupport.BoundedType boundedType = (GenericMetadataSupport.BoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), ""E"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,169,assertThat(from(boundedType.firstBound()).rawType()).isEqualTo(Comparable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,170,assertThat(boundedType.interfaceBounds()).contains(Cloneable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,176,@Test(expected = MockitoException.class)
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,177,public void toMock_propagate_MockitoException_if_type_unmockable() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,178,"GenericMetadataSupport genericMetadata = from(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""returning_wildcard_with_class_lower_bound"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,180,"GenericMetadataSupport.BoundedType boundedType = (GenericMetadataSupport.BoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), ""E"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,182,from(boundedType.firstBound()).toMock(RETURNS_DEFAULTS);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,185,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,186,public void toMock_returns_mock_of_correct_type() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,187,"GenericMetadataSupport genericMetadata = from(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""returningK"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,189,assertThat(genericMetadata.toMock(RETURNS_DEFAULTS)).isInstanceOf(Comparable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,190,assertThat(genericMetadata.toMock(RETURNS_DEFAULTS)).isInstanceOf(Cloneable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,194,"private Type typeVariableValue(Map<TypeVariable, Type> typeVariables, String typeVariableName) {"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,195,"for (Map.Entry<TypeVariable, Type> typeVariableTypeEntry : typeVariables.entrySet()) {"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,196,if (typeVariableTypeEntry.getKey().getName().equals(typeVariableName)) {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,197,return typeVariableTypeEntry.getValue();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,201,"fail(""'"" + typeVariableName + ""' was not found in "" + typeVariables);"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,202,return null; // unreachable
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,205,"private Method firstNamedMethod(String methodName, Class<?> clazz) {"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,206,for (Method method : clazz.getMethods()) {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,207,if (method.getName().contains(methodName)) {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,208,return method;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,211,"throw new IllegalStateException(""The method : '"" + methodName + ""' do not exist in '"" + clazz.getSimpleName() + ""'"");"

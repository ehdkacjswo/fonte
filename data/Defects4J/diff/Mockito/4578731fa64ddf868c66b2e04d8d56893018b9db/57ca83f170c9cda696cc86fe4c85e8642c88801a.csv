is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,28,     then arguments are resolved with mocks declared in the test only.
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,28,*     then arguments are resolved with mocks declared in the test only. If the object is successfully created
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,29,"*     with the constructor, then <strong>Mockito won't try the other strategies</strong>. Mockito has decided to no"
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,30,*     corrupt an object if it has a parametered constructor.
False,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,33,"     <li><strong>Property setter injection</strong>; mocks will first be resolved by type,"
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,35,*     <li><strong>Property setter injection</strong>; mocks will first be resolved by type (if a single type match
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,36,"*     injection will happen regardless of the name),"
False,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,40,"     <li><strong>Field injection</strong>; mocks will first be resolved by type,"
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,43,*     <li><strong>Field injection</strong>; mocks will first be resolved by type (if a single type match
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,44,"*     injection will happen regardless of the name),"
False,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,76, In the above example the field ArticleManager annotated with &#064;InjectMocks can have
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,80,* In the above example the field <code>ArticleManager</code> annotated with <code>&#064;InjectMocks</code> can have
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,149,* <p>
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,150,"* Mockito is not an dependency injection framework, don't expect this shorthand utility to inject a complex graph of objects"
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,151,* be it mocks/spies or real objects.
True,src/org/mockito/InjectMocks.java,src/org/mockito/InjectMocks.java,152,* </p>
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,764," Note that &#064;{@link InjectMocks} can only be used in combination with the &#064;{@link Spy} annotation, it means"
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,765," that Mockito will inject mocks in a partial mock under testing. As a remainder, please read point 16 about partial mocks."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,764,"* Note that &#064;{@link InjectMocks} can also be used in combination with the &#064;{@link Spy} annotation, it means"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,765,* that Mockito will inject mocks into the partial mock under test. This complexity is another good reason why you
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,766,* should only use partial mocks as a last resort. See point 16 about partial mocks.
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,32,     if the mock settings is set to be serializable it will add the {@link org.mockito.internal.creation.AcrossJVMSerializationFeature.AcrossJVMMockitoMockSerializable} interface.
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,33,     This interface defines a the {@link org.mockito.internal.creation.AcrossJVMSerializationFeature.AcrossJVMMockitoMockSerializable#writeReplace()}
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,32,*     if the mock settings is set to be serializable it will add the {@link AcrossJVMSerializationFeature.AcrossJVMMockitoMockSerializable}
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,33,*     interface.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,34,*     This interface defines a the {@link AcrossJVMSerializationFeature.AcrossJVMMockitoMockSerializable#writeReplace()}
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,80,"         At this point, the code will return an {@link AcrossJVMMockSerializationProxy}.</p>"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,81,"*         At this point, the code will return an"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,82,*         {@link org.mockito.internal.creation.AcrossJVMSerializationFeature.AcrossJVMMockSerializationProxy}.</p>
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,83,"         <p>Now, in the constructor {@link AcrossJVMMockSerializationProxy#AcrossJVMMockSerializationProxy(Object)}"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,84,         the mock is being serialized in a custom way (using {@link MockitoMockObjectOutputStream}) to a
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,85,"*         <p>Now, in the constructor"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,86,*         {@link org.mockito.internal.creation.AcrossJVMSerializationFeature.AcrossJVMMockSerializationProxy#AcrossJVMMockSerializationProxy(Object)}
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,87,*         the mock is being serialized in a custom way (using
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,88,*         {@link org.mockito.internal.creation.AcrossJVMSerializationFeature.MockitoMockObjectOutputStream}) to a
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,173, custom {@link MockitoMockObjectOutputStream} that will annotate the mock class in the stream.
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,174, other information are used in this class in order to facilitate deserialization.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,177,* custom {@link org.mockito.internal.creation.AcrossJVMSerializationFeature.MockitoMockObjectOutputStream} that
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,178,* will annotate the mock class in the stream.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,179,* Other information are used in this class in order to facilitate deserialization.
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,190," <p>Immediately serializes the Mockito mock using specifically crafted {@link MockitoMockObjectOutputStream},"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,195,* <p>Immediately serializes the Mockito mock using specifically crafted
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,196,"* {@link org.mockito.internal.creation.AcrossJVMSerializationFeature.MockitoMockObjectOutputStream},"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,255,     The mirror method used for serializing the mock is {@link MockitoMockObjectOutputStream#annotateClass(Class)}.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,261,*     The mirror method used for serializing the mock is
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,262,*     {@link org.mockito.internal.creation.AcrossJVMSerializationFeature.MockitoMockObjectOutputStream#annotateClass(Class)}.

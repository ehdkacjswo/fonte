is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,20,eturn (Class) actual;
True,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,20,if (actual instanceof Class) {
True,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,21,return (Class) actual;
True,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,22,} else if (actual instanceof ParameterizedType) {
True,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,23,//in case of nested generics we don't go deep
True,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,24,return (Class) ((ParameterizedType) actual).getRawType();
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,6,import java.util.Collection;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,21,List<Set<String>> nested;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,22,List<Set<Collection<String>>> multiNested;
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,23,"ssertEquals(m.getGenericType(field(""one"")), String.class);"
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,24,"ssertEquals(m.getGenericType(field(""two"")), Integer.class);"
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,25,"ssertEquals(m.getGenericType(field(""map"")), Double.class);"
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,26,"assertEquals(String.class, m.getGenericType(field(""one"")));"
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,27,"assertEquals(Integer.class, m.getGenericType(field(""two"")));"
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,28,"assertEquals(Double.class, m.getGenericType(field(""map"")));"
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,30,"ssertEquals(m.getGenericType(field(""nonGeneric"")), Object.class);"
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,33,"assertEquals(Object.class, m.getGenericType(field(""nonGeneric"")));"
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,36,@Test
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,37,public void shouldDealWithNestedGenerics() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,38,"assertEquals(Set.class, m.getGenericType(field(""nested"")));"
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,39,"assertEquals(Set.class, m.getGenericType(field(""multiNested"")));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,14, Allows mock creation with additional mock settings.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,15, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,16, Don't use it too often.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,17, Consider writing simple tests that use simple mocks.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,14,* Allows mock creation with additional mock settings.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,15,* <p/>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,16,* Don't use it too often.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,17,* Consider writing simple tests that use simple mocks.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,20, <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,20,* <p/>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,25,       .defaultAnswer(RETURNS_SMART_NULLS)
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,26,"       .name(""cool mockie""));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,25,*                                .defaultAnswer(RETURNS_SMART_NULLS)
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,26,"*                                .name(""cool mockie"")"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,30,       .defaultAnswer(RETURNS_SMART_NULLS)
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,31,"       .name(""cool mockie"")"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,32,       .extraInterfaces(Bar.class));
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,31,*                                .defaultAnswer(RETURNS_SMART_NULLS)
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,32,"*                                .name(""cool mockie"")"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,33,*                                .extraInterfaces(Bar.class));
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,34, {@link MockSettings} has been introduced for two reasons.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,35,* {@link MockSettings} has been introduced for two reasons.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,42," For background, see issue 51 <a href=""http://code.google.com/p/mockito/issues/detail?id=51"">here</a>"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,43,"* For background, see issue 51 <a href=""http://code.google.com/p/mockito/issues/detail?id=51"">here</a>"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,44, This mysterious feature should be used very occasionally.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,45,* This mysterious feature should be used very occasionally.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,47, <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,48,* <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,63, Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,64,* Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,65, Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,66,* Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,84, Sets the real implementation to be called when the method is called on a mock object.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,86,* Sets the instance that will be spied. Actually copies the internal fields of the passed instance to the mock.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,88," How does partial mock fit into this paradigm? Well, it just doesn't..."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,90,"* How does partial mock fit into this paradigm? Well, it just doesn't..."
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,92," However, there are rare cases when partial mocks come handy:"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,94,"* However, there are rare cases when partial mocks come handy:"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,98,"   Foo foo = mock(Foo.class, spiedInstance(fooInstance));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,100,"*   Foo foo = mock(Foo.class, withSettings().spiedInstance(fooInstance));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,106,"* About stubbing for a partial mock, as it is a spy it will always call the real method, unless you use the"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,107,* <code>doReturn</code>|<code>Throw</code>|<code>Answer</code>|<code>CallRealMethod</code> stubbing style. Example:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,109,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,110,*   List list = new LinkedList();
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,111,*   List spy = spy(list);
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,113,*   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,114,"*   when(spy.get(0)).thenReturn(""foo"");"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,116,*   //You have to use doReturn() for stubbing
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,117,"*   doReturn(""foo"").when(spy).get(0);"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,118,* </code>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,110, Specifies default answers to interactions.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,126,* Specifies default answers to interactions.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,170, order in which the listeners are notified.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,186,* order in which the listeners are notified.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,201,* Specifies the delegated instance on which a mock should forward calls.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,203,* Makes sense only for spies or partial mocks of objects that are difficult to mock or spy using the usual spy API.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,204,* Possible use cases :
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,205,* <ul>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,206,*     <li>Final classes but with an interface</li>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,207,*     <li>Already custom proxied object</li>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,208,"*     <li>Special objects with a finalize method, that should be executed 2 times</li>"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,209,*     <li>...</li>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,210,* </ul>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,211,* Sets the real implementation to be called when the method is called on a mock object.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,212,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,213,* As usual you are going to read <b>the partial mock warning</b>:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,214,"* Object oriented programming is more or less about tackling complexity by dividing the complexity into separate, specific, SRPy objects."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,215,"* How does partial mock fit into this paradigm? Well, it just doesn't..."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,216,* Partial mock usually means that the complexity has been moved to a different method on the same object.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,217,"* In most cases, this is not the way you want to design your application."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,218,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,219,"* However, there are rare cases when partial mocks come handy:"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,220,"* dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,221,"* However, I wouldn't use partial mocks for new, test-driven & well-designed code."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,222,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,223,"* Enough warnings about partial mocks, see an example how spiedInstance() works:"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,224,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,225,*   final class DontMessTheCodeOfThisList implements list { ... }
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,227,*   DontMessTheCodeOfThisList awesomeList = new DontMessTheCodeOfThisList();
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,229,"*   List listWithDelegate = mock(List.class, withSettings().forwardTo(awesomeList));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,230,* </code></pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,232,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,233,* This features suffer from the same drawback as the spy. The mock will always call the delegate.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,234,* This mean that you have to use the doReturn|Throw|Answer|CallRealMethod stubbing style. Example:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,236,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,237,"*   List listWithDelegate = mock(List.class, withSettings().forwardTo(awesomeList));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,239,*   //Impossible: real method is called so listWithDelegate.get(0) throws IndexOutOfBoundsException (the list is yet empty)
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,240,"*   when(listWithDelegate.get(0)).thenReturn(""foo"");"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,242,*   //You have to use doReturn() for stubbing
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,243,"*   doReturn(""foo"").when(listWithDelegate).get(0);"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,244,* </code>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,246,* @param delegate The delegate to forward calls to.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,247,* @return settings instance so that you can fluently specify other settings
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,249,MockSettings forwardTo(Object delegate) ;
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1106, Therefore when using spies please consider <code>doReturn</code>|<code>Answer</code>|<code>Throw()</code> family of methods for stubbing. Example:
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1106,* Therefore when using spies please consider <code>doReturn</code>|<code>Answer</code>|<code>Throw()</code>|<code>CallRealMethod</code>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1107,* family of methods for stubbing. Example:
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,675,"public void mockedTypeIsInconsistentWithDelegatedInstanceType(Class mockedType, Object delegatedInstance) {"
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,676,throw new MockitoException(join(
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,677,"""Mocked type must be the same as the type of your delegated instance."","
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,678,"""Mocked type must be: "" + delegatedInstance.getClass().getSimpleName() + "", but is: "" + mockedType.getSimpleName(),"
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,679,"""  //correct delegate:"","
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,680,"""  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new ArrayList()<- );"","
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,681,"""  //incorrect - types don't match:"","
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,682,"""  spy = mock( ->List.class<- , withSettings().delegatedInstance( ->new HashSet()<- );"""
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,686,public void spyAndDelegateAreMutuallyExclusive() {
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,687,throw new MockitoException(join(
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,688,"""Settings should not define a spy instance and a delegated instance at the same time."""
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,10,import org.mockito.internal.stubbing.defaultanswers.ReturnsDelegate;
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,25,private Object delegatedInstance ;
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,64,public Object getDelegatedInstance() {
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,65,return this.delegatedInstance ;
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,140,public MockSettings forwardTo(Object delegatedInstance) {
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,141,this.delegatedInstance = delegatedInstance ;
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,142,return defaultAnswer(new ReturnsDelegate(this.delegatedInstance)) ;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,3,* This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,5,package org.mockito.internal.stubbing.defaultanswers;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,7,import org.mockito.internal.util.Primitives;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,8,import org.mockito.invocation.InvocationOnMock;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,9,import org.mockito.stubbing.Answer;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,11,import java.io.Serializable;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,12,import java.lang.reflect.Method;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,14,"public class ReturnsDelegate implements Answer<Object>, Serializable {"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,16,private static final long serialVersionUID = -8343690268123254910L;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,18,private Object delegatedObject = null ;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,20,public ReturnsDelegate(Object delegatedObject) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,21,this.delegatedObject = delegatedObject ;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,24,public Object answer(InvocationOnMock invocation) throws Throwable {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,25,Method method = invocation.getMethod() ;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,26,"Object ret = method.invoke(delegatedObject, invocation.getArguments()) ;"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,27,if (ret != null) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,28,return ret;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,31,return returnValueFor(invocation.getMethod().getReturnType());
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,34,Object returnValueFor(Class<?> type) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,35,if (type.isPrimitive()) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,36,return primitiveOf(type);
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,37,} else if (Primitives.isPrimitiveWrapper(type)) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,38,return Primitives.primitiveWrapperOf(type);
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,39,"//new instances are used instead of Collections.emptyList(), etc."
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,40,//to avoid UnsupportedOperationException if code under test modifies returned collection
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,43,return null ;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,46,private Object primitiveOf(Class<?> type) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,47,if (type == Boolean.TYPE) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,48,return false;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,49,} else if (type == Character.TYPE) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,50,return (char) 0;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,51,} else {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDelegate.java,52,return 0;
False,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,2, Copyright (c) 2007 Mockito contributors
False,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,3, This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,3,* This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,8,import org.mockito.internal.creation.MockSettingsImpl;
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,45,"public void validateDelegatedInstance(Class classToMock, Object delegatedInstance) {"
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,46,if (classToMock == null || delegatedInstance == null) {
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,47,return;
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,49,if (delegatedInstance.getClass().isAssignableFrom(classToMock)) {
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,50,"new Reporter().mockedTypeIsInconsistentWithDelegatedInstanceType(classToMock, delegatedInstance);"
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,54,public void validateMutualExclusionForSpyOrDelegate(MockSettingsImpl settings) {
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,55,if (settings.getDelegatedInstance() != null && settings.getSpiedInstance() != null) {
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,56,new Reporter().spyAndDelegateAreMutuallyExclusive() ;
False,src/org/mockito/internal/util/MockUtil.java,src/org/mockito/internal/util/MockUtil.java,7,mport java.io.Serializable;
False,src/org/mockito/internal/util/MockUtil.java,src/org/mockito/internal/util/MockUtil.java,9,mport org.mockito.plugins.MockMaker;
True,src/org/mockito/internal/util/MockUtil.java,src/org/mockito/internal/util/MockUtil.java,14,import org.mockito.plugins.MockMaker;
True,src/org/mockito/internal/util/MockUtil.java,src/org/mockito/internal/util/MockUtil.java,16,import java.io.Serializable;
True,src/org/mockito/internal/util/MockUtil.java,src/org/mockito/internal/util/MockUtil.java,36,"creationValidator.validateDelegatedInstance(classToMock, settings.getDelegatedInstance()) ;"
True,src/org/mockito/internal/util/MockUtil.java,src/org/mockito/internal/util/MockUtil.java,37,creationValidator.validateMutualExclusionForSpyOrDelegate(settings) ;
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,1,package org.mockitousage.stubbing;
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,3,import org.junit.Test;
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,4,import org.mockito.Mockito;
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,6,import java.util.ArrayList;
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,7,import java.util.List;
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,9,import static junit.framework.Assert.assertEquals;
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,10,import static org.mockito.Mockito.doReturn;
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,11,import static org.mockito.Mockito.mock;
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,12,import static org.mockito.Mockito.withSettings;
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,14,"@SuppressWarnings(""unchecked"")"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,15,public class StubbingWithDelegate {
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,17,@Test
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,18,public void when_not_stubbed_delegate_should_be_called() {
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,19,List<String> delegatedList = new ArrayList<String>();
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,20,"delegatedList.add(""un"") ;"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,22,"List<String> mock = mock(List.class, withSettings().forwardTo(delegatedList)) ;"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,24,"mock.add(""two"") ;"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,26,"assertEquals(2, mock.size());"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,29,@Test
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,30,public void when_stubbed_the_delegate_should_not_be_called() {
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,31,List<String> delegatedList = new ArrayList<String>();
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,32,"delegatedList.add(""un"") ;"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,33,"List<String> mock = mock(List.class, withSettings().forwardTo(delegatedList)) ;"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,35,doReturn(10).when(mock).size();
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,37,"mock.add(""two"") ;"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,39,"assertEquals(10, mock.size());"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,40,"assertEquals(2, delegatedList.size());"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,43,@Test
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,44,public void delegate_should_not_be_called_when_stubbed2() {
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,45,List<String> delegatedList = new ArrayList<String>();
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,46,"delegatedList.add(""un"") ;"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,47,"List<String> mockedList = mock(List.class, withSettings().forwardTo(delegatedList)) ;"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,49,doReturn(false).when(mockedList).add(Mockito.anyString()) ;
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,51,"mockedList.add(""two"") ;"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,53,"assertEquals(1, mockedList.size()) ;"
True,test/org/mockitousage/stubbing/StubbingWithDelegate.java,test/org/mockitousage/stubbing/StubbingWithDelegate.java,54,"assertEquals(1, delegatedList.size()) ;"

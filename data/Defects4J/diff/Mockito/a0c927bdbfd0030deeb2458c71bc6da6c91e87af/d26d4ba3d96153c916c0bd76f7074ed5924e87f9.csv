is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/internal/creation/MockFactory.java,src/org/mockito/internal/creation/MockFactory.java,11,import net.sf.cglib.core.DefaultNamingPolicy;
True,src/org/mockito/internal/creation/MockFactory.java,src/org/mockito/internal/creation/MockFactory.java,12,import net.sf.cglib.core.NamingPolicy;
True,src/org/mockito/internal/creation/MockFactory.java,src/org/mockito/internal/creation/MockFactory.java,13,import net.sf.cglib.core.Predicate;
True,src/org/mockito/internal/creation/MockFactory.java,src/org/mockito/internal/creation/MockFactory.java,32,if (toMock.getSigners() != null) {
True,src/org/mockito/internal/creation/MockFactory.java,src/org/mockito/internal/creation/MockFactory.java,33,//TODO think about a test that can cover this scenario
True,src/org/mockito/internal/creation/MockFactory.java,src/org/mockito/internal/creation/MockFactory.java,34,enhancer.setNamingPolicy(ALLOWS_MOCKING_CLASSES_IN_SIGNED_PACKAGES);
True,src/org/mockito/internal/creation/MockFactory.java,src/org/mockito/internal/creation/MockFactory.java,92,private static final NamingPolicy ALLOWS_MOCKING_CLASSES_IN_SIGNED_PACKAGES = new DefaultNamingPolicy() {
True,src/org/mockito/internal/creation/MockFactory.java,src/org/mockito/internal/creation/MockFactory.java,93,@Override
True,src/org/mockito/internal/creation/MockFactory.java,src/org/mockito/internal/creation/MockFactory.java,94,"public String getClassName(String prefix, String source, Object key, Predicate names) {"
True,src/org/mockito/internal/creation/MockFactory.java,src/org/mockito/internal/creation/MockFactory.java,95,"return ""codegen."" + super.getClassName(prefix, source, key, names);"

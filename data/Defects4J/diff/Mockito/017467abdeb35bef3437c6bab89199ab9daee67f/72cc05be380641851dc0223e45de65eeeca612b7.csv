is_addition,old_file_path,new_file_path,line_num,content
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,10,import java.util.HashMap;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,12,import java.util.Map;
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,12,ublic class ClassLoaders {
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,13,rivate final ArrayList<String> privateCopyPrefixes = new ArrayList<String>();
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,14,rivate final ArrayList<URL> codeSourceUrls = new ArrayList<URL>();
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,14,public abstract class ClassLoaders {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,15,protected ClassLoaders() {}
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,16,ublic static ClassLoaders isolatedClassLoader() {
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,17,eturn new ClassLoaders();
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,17,public static IsolatedURLClassLoaderBuilder isolatedClassLoader() {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,18,return new IsolatedURLClassLoaderBuilder();
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,20,ublic ClassLoaders withPrivateCopyOf(String... privatePrefixes) {
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,21,rivateCopyPrefixes.addAll(asList(privatePrefixes));
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,22,eturn this;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,21,public static InMemoryClassLoaderBuilder inMemoryClassLoader() {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,22,return new InMemoryClassLoaderBuilder();
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,25,ublic ClassLoaders withCodeSourceUrls(String... urls) {
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,26,odeSourceUrls.addAll(pathsToURLs(urls));
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,27,eturn this;
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,30,ublic ClassLoaders withCurrentCodeSourceUrls() {
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,31,odeSourceUrls.add(obtainClassPathOF(ClassLoaders.class.getName()));
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,32,eturn this;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,26,public static class IsolatedURLClassLoaderBuilder extends ClassLoaders {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,27,private final ArrayList<String> privateCopyPrefixes = new ArrayList<String>();
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,28,private final ArrayList<URL> codeSourceUrls = new ArrayList<URL>();
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,30,public IsolatedURLClassLoaderBuilder withPrivateCopyOf(String... privatePrefixes) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,31,privateCopyPrefixes.addAll(asList(privatePrefixes));
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,32,return this;
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,36,rivate static URL obtainClassPathOF(String className) {
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,37,"tring path = className.replace('.', '/') + "".class"";"
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,38,tring url = ClassLoaders.class.getClassLoader().getResource(path).toExternalForm();
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,35,public IsolatedURLClassLoaderBuilder withCodeSourceUrls(String... urls) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,36,codeSourceUrls.addAll(pathsToURLs(urls));
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,37,return this;
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,40,ry {
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,41,"eturn new URL(url.substring(0, url.length() - path.length()));"
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,42, catch (MalformedURLException e) {
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,43,"hrow new RuntimeException(""Classloader couldn't obtain a proper classpath URL"", e);"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,40,public IsolatedURLClassLoaderBuilder withCurrentCodeSourceUrls() {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,41,codeSourceUrls.add(obtainClassPathOf(ClassLoaders.class.getName()));
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,42,return this;
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,47,ublic ClassLoader build() {
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,48,eturn new LocalIsolatedURLClassLoader(
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,49,"odeSourceUrls.toArray(new URL[codeSourceUrls.size()]),"
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,50,rivateCopyPrefixes
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,45,public ClassLoader build() {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,46,return new LocalIsolatedURLClassLoader(
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,47,"codeSourceUrls.toArray(new URL[codeSourceUrls.size()]),"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,48,privateCopyPrefixes
False,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,76,rivate List<URL> pathsToURLs(String... codeSourceUrls) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,75,public static class InMemoryClassLoaderBuilder extends ClassLoaders {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,76,"private Map<String , byte[]> inMemoryClassObjects = new HashMap<String , byte[]>();"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,78,"public InMemoryClassLoaderBuilder withClassDefinition(String name, byte[] classDefinition) {"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,79,"inMemoryClassObjects.put(name, classDefinition);"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,80,return this;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,83,public ClassLoader build() {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,84,return new InMemoryClassLoader(inMemoryClassObjects);
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,88,static class InMemoryClassLoader extends ClassLoader {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,89,"private Map<String , byte[]> inMemoryClassObjects = new HashMap<String , byte[]>();"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,91,"public InMemoryClassLoader(Map<String, byte[]> inMemoryClassObjects) {"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,92,this.inMemoryClassObjects = inMemoryClassObjects;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,95,protected Class findClass(String name) throws ClassNotFoundException {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,96,byte[] classDefinition = inMemoryClassObjects.get(name);
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,97,if (classDefinition != null) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,98,"return defineClass(name, classDefinition, 0, classDefinition.length);"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,100,throw new ClassNotFoundException(name);
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,106,protected URL obtainClassPathOf(String className) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,107,"String path = className.replace('.', '/') + "".class"";"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,108,String url = ClassLoaders.class.getClassLoader().getResource(path).toExternalForm();
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,110,try {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,111,"return new URL(url.substring(0, url.length() - path.length()));"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,112,} catch (MalformedURLException e) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,113,"throw new RuntimeException(""Classloader couldn't obtain a proper classpath URL"", e);"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,117,protected List<URL> pathsToURLs(String... codeSourceUrls) {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,9,"public static final String CLASS_NAME_USING_INTERFACE = ""org.mockitoutil.ClassLoadersTest$ClassUsingInterface1"";"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,10,"public static final String INTERFACE_NAME = ""org.mockitoutil.ClassLoadersTest$Interface1"";"
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,21,ublic void isolated_class_loader_cannot_load_classes_If_no_code_source_path() throws Exception {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,24,public void isolated_class_loader_cannot_load_classes_if_no_code_source_path() throws Exception {
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,24,"withPrivateCopyOf(""org.mockitoutil.ClassLoadersTest$ClassUsingInterface1"")"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,27,.withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,29,"l.loadClass(""org.mockitoutil.ClassLoadersTest$ClassUsingInterface1"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,32,cl.loadClass(CLASS_NAME_USING_INTERFACE);
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,32,"ssertThat(e.getMessage()).contains(""org.mockitoutil.ClassLoadersTest$ClassUsingInterface1"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,35,assertThat(e.getMessage()).contains(CLASS_NAME_USING_INTERFACE);
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,37,ublic void isolated_class_loader_cannot_load_classes_that_require_other_non_declared_classes() throws Exception {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,40,public void isolated_class_loader_cannot_load_classes_not_matching_the_prefix() throws Exception {
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,41,"withPrivateCopyOf(""org.mockitoutil.ClassLoadersTest$ClassUsingInterface1"")"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,44,.withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,46,"l.loadClass(""org.mockitoutil.ClassLoadersTest$ClassUsingInterface1"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,49,cl.loadClass(CLASS_NAME_USING_INTERFACE);
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,54,ublic void isolated_class_loader_can_load_all_classes_if_all_prefixes_are_correct() throws Exception {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,57,public void isolated_class_loader_can_load_all_classes_unless_all_classes_mathch_the_prefixes() throws Exception {
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,58,"withPrivateCopyOf(""org.mockitoutil.ClassLoadersTest$ClassUsingInterface1"")"
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,59,"withPrivateCopyOf(""org.mockitoutil.ClassLoadersTest$Interface1"")"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,61,.withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,62,.withPrivateCopyOf(INTERFACE_NAME)
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,63,"lass<?> aClass = cl.loadClass(""org.mockitoutil.ClassLoadersTest$ClassUsingInterface1"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,66,Class<?> aClass = cl.loadClass(CLASS_NAME_USING_INTERFACE);
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,75,"withPrivateCopyOf(""org.mockitoutil.ClassLoadersTest$ClassUsingInterface1"")"
False,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,76,"withPrivateCopyOf(""org.mockitoutil.ClassLoadersTest$Interface1"")"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,78,.withPrivateCopyOf(CLASS_NAME_USING_INTERFACE)
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,79,.withPrivateCopyOf(INTERFACE_NAME)
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,86,@Test
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,87,public void can_not_load_a_class_not_previously_registered_in_builder() throws Exception {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,88,// given
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,89,ClassLoader cl = ClassLoaders
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,90,.inMemoryClassLoader()
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,91,".withClassDefinition(""yop.Dude"", SimpleClassGenerator.makeMarkerInterface(""yop.Dude""))"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,92,.build();
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,94,// when
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,95,try {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,96,"cl.loadClass(""not.Defined"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,97,} catch (ClassNotFoundException e) {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,98,// then
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,99,"assertThat(e.getMessage()).contains(""not.Defined"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,103,@Test
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,104,public void can_load_a_class_in_memory_from_bytes() throws Exception {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,105,// given
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,106,ClassLoader cl = ClassLoaders
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,107,.inMemoryClassLoader()
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,108,".withClassDefinition(""yop.Dude"", SimpleClassGenerator.makeMarkerInterface(""yop.Dude""))"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,109,.build();
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,111,// when
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,112,"Class<?> aClass = cl.loadClass(""yop.Dude"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,114,// then
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,115,assertThat(aClass).isNotNull();
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,116,assertThat(aClass.getClassLoader()).isEqualTo(cl);
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,117,"assertThat(aClass.getName()).isEqualTo(""yop.Dude"");"
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,1,package org.mockitoutil;
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,3,import static org.mockito.asm.Opcodes.ACC_ABSTRACT;
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,4,import static org.mockito.asm.Opcodes.ACC_INTERFACE;
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,5,import static org.mockito.asm.Opcodes.ACC_PUBLIC;
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,6,import static org.mockito.asm.Opcodes.V1_6;
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,7,import org.mockito.asm.ClassWriter;
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,9,public class SimpleClassGenerator {
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,11,public static byte[] makeMarkerInterface(String qualifiedName) {
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,12,"String relativePath = qualifiedName.replace('.', '/');"
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,14,ClassWriter cw = new ClassWriter(0);
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,15,"cw.visit(V1_6, ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE, relativePath, null, ""java/lang/Object"", null);"
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,16,cw.visitEnd();
True,test/org/mockitoutil/SimpleClassGenerator.java,test/org/mockitoutil/SimpleClassGenerator.java,18,return cw.toByteArray();

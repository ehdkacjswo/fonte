is_addition,old_file_path,new_file_path,line_num,content
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,1,package org.mockitousage;
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,3,import static org.mockito.Mockito.*;
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,5,import org.junit.Ignore;
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,6,import org.junit.Test;
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,7,import org.junit.runner.RunWith;
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,8,import org.mockito.Mock;
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,9,import org.mockitoutil.TestBase;
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,11,@RunWith(org.mockito.runners.MockitoJUnit44Runner.class)
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,12,"@SuppressWarnings(""unchecked"")"
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,13,"@Ignore(""this issue is a little bit unclear to me. Let's wait until we have some more data"")"
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,14,public class ThreadReuseTest extends TestBase {
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,16,private static ThreadLocal<Class> l = new ThreadLocal<Class>();
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,17,@Mock IMethods mock;
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,19,@Test(timeout = 100)
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,20,public void test1() throws Exception {
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,21,"when(mock.simpleMethod()).thenReturn(""foo"");"
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,22,assertNull(l.get());
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,23,l.set(getClass());
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,26,@Test
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,27,public void test2() throws Exception {
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,28,System.out.println(mock.simpleMethod());
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,29,assertNull(l.get());
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,30,l.set(getClass());
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,33,@Test(timeout = 100)
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,34,public void test3() throws Exception {
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,35,doThrow(new RuntimeException()).when(mock).voidMethod();
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,36,assertNull(l.get());
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,37,l.set(getClass());
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,40,@Test(timeout = 100)
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,41,public void test4() throws Exception {
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,42,mock.voidMethod();
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,43,assertNull(l.get());
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,44,l.set(getClass());
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,47,//    @Test
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,48,//    public void test5() throws Exception {
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,49,"//        when(mock.simpleMethod()).thenReturn(""bar"");"
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,50,//        assertNull(l.get());
True,test/org/mockitousage/ThreadReuseTest.java,test/org/mockitousage/ThreadReuseTest.java,51,//        l.set(getClass());
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,5,package org.mockitousage.matchers;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,7,import static org.mockito.Mockito.*;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,9,import org.junit.Ignore;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,10,import org.junit.Test;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,11,import org.mockito.Mock;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,12,import org.mockitousage.IMethods;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,13,import org.mockitoutil.TestBase;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,15,"@SuppressWarnings(""unchecked"")"
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,16,public class ArgumentMatchingWithFancyAssertionsTest extends TestBase {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,18,class Person {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,20,private final int age;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,22,public Person(int age) {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,23,this.age = age;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,26,public int getAge() {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,27,return age;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,31,class Foo {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,33,private IMethods methods;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,35,public Foo(IMethods methods) {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,36,this.methods = methods;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,39,public void bar() {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,40,Person person = new Person(12);
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,41,methods.simpleMethod(person);
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,45,@Mock IMethods mock;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,47,"@Ignore(""assertion idea is not for current release I guess"")"
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,48,@Test
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,49,public void shouldUseAssertor() {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,50,Foo foo = new Foo(mock);
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,51,foo.bar();
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,52,verify(mock).simpleMethod(argThat(new Assertion<Person>() {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,53,public void asserts(Person person) {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,54,"assertEquals(12, person.getAge());"
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,59,public static <T> T argThat(Assertion<T> assertion) {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,60,return null;
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,63,public interface Assertion<T> {
True,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java,64,void asserts(T object);
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,2, Copyright (c) 2007 Mockito contributors
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,5,ackage org.mockitousage.matchers;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,7,mport static org.mockito.Matchers.*;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,8,mport static org.mockito.Mockito.*;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,10,mport org.junit.Test;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,11,mport org.mockito.ArgumentMatcher;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,12,mport org.mockito.Mock;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,13,mport org.mockitousage.IMethods;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,14,mport org.mockitoutil.TestBase;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,16,"SuppressWarnings(""unchecked"")"
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,17,ublic class CapturingMatchersTest extends TestBase {
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,19,rivate final class ArgumentCaptor<T> extends ArgumentMatcher<T> {
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,20,rivate T argument;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,22,Override
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,23,ublic boolean matches(Object argument) {
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,24,his.argument = (T) argument;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,25,eturn true;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,28,ublic T getArgument() {
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,29,eturn argument;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,33,Mock private IMethods mock;
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,35,Test
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,36,ublic void shouldAllowCapturingArguments() throws Exception {
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,37,bject object = new Object();
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,38,ock.simpleMethod(object);
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,40,rgumentCaptor captor = new ArgumentCaptor();
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,41,erify(mock).simpleMethod(capturedArg(captor));
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,43,"ssertSame(object, captor.getArgument());"
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,46,rivate Object capturedArg(ArgumentCaptor captor) {
False,test/org/mockitousage/matchers/CapturingMatchersTest.java,test/org/mockitousage/matchers/CapturingMatchersTest.java,47,eturn argThat(captor);

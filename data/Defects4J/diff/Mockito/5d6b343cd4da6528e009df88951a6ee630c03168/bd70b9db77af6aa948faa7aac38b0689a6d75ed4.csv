is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,10,* @author SG0897539
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,14,//TODO: validate javadoc
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,17,* Specifies extra interfaces the mock should implement. Might be useful for legacy code or some corner cases.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,18,"* For background, see issue 51 <a href=""http://code.google.com/p/mockito/issues/detail?id=51"">here</a>"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,19,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,20,* This mysterious feature should be used very occasionally.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,21,* The object under test should know exactly its collaborators & dependencies.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,22,"* If you happen to use it often than please make sure you are really producing simple, clean & readable code."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,23,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,24,* Examples:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,25,* <pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,26,"*   Foo foo = mock(Foo.class, withSettings().extraInterfaces(Bar.class, Baz.class));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,28,"*   //now, the mock implements extra interfaces, so following casting is possible:"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,29,*   Bar bar = (Bar) foo;
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,30,*   Baz baz = (Baz) foo;
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,31,* </pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,34,* @param interfaces extra interfaces the should implement.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,35,* @return settings instance so that you can fluently specify other settings
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,40,* Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,41,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,42,* Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,43,* <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,44,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,45,* <b>If you use &#064;Mock annotation then you've got naming mocks for free!</b> &#064;Mock uses field name as mock name. {@link Mock Read more.}
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,46,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,47,* Examples:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,48,* <pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,49,"*   Foo foo = mock(Foo.class, withSettings().name(""foo""));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,51,*   //Below does exactly the same:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,52,"*   Foo foo = mock(Foo.class, ""foo"");"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,53,* </pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,54,"* @param name the name of the mock, later used in all verification errors"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,55,* @return settings instance so that you can fluently specify other settings
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,608, Creates mock with a name. Naming mocks can be helpful for debugging.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,608,* Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1347,/TODO: javadoc
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1348,* Allows mock creation with additional mock settings.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1349,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1350,* Don't use it too often.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1351,* Consider writing simple tests that use simple mocks.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1352,"* Repeat after me: simple tests push simple, KISSy, readable & maintainable code."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1353,* If you cannot write a test in a simple way - refactor the code under test.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1354,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1355,* Examples of mock settings:
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1356,* <pre>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1357,*   //Creates mock with different default answer & name
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1358,"*   Foo mock = mock(Foo.class, withSettings()"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1359,*       .defaultAnswer(RETURNS_SMART_NULLS)
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1360,"*       .name(""cool mockie""));"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1362,"*   //Creates mock with different default answer, descriptive name and extra interfaces"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1363,"*   Foo mock = mock(Foo.class, withSettings()"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1364,*       .defaultAnswer(RETURNS_SMART_NULLS)
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1365,"*       .name(""cool mockie"")"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1366,*       .extraInterfaces(Bar.class));
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1367,* </pre>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1368,* {@link MockSettings} has been introduced for two reasons.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1369,"* Firstly, to make it easy to add another mock settings when the demand comes."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1370,"* Secondly, to enable combining different mock settings without introducing zillions of overloaded mock() methods."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1371,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1372,* See javadoc for {@link MockSettings} to learn about possible mock settings.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1373,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1375,* @return mock settings instance with defaults.

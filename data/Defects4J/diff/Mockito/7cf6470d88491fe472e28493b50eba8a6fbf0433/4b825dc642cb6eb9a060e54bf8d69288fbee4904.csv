is_addition,old_file_path,new_file_path,line_num,content
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,5,package org.easymock;
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,8,* A convenience implementation of {@link ArgumentsMatcher}. A subclass that
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,9,* does not redefine any method will behave like
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,10,* {@link MockControl#EQUALS_MATCHER}.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,12,"* @deprecated Since EasyMock 2.0, <code>ArgumentsMatcher</code>s are only supported"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,13,* for the legacy <code>MockControl</code>. For mock objects generated by the methods
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,14,"* on <code>EasyMock</code>, there are per-argument matchers available. For more"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,15,"* information, see the EasyMock documentation."
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,17,public abstract class AbstractMatcher implements ArgumentsMatcher {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,20,* Checks whether an expected argument matches an actual argument; the method
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,21,* is used by
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,22,"* {@link AbstractMatcher#matches(Object[], Object[])}. The arguments"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,23,* provided to this method are always not <code>null</code>.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,25,* @param expected
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,26,*            the expected argument.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,27,* @param actual
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,28,*            the actual argument.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,29,"* @return true if the arguments match, false otherwise."
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,31,"protected boolean argumentMatches(Object expected, Object actual) {"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,32,return expected.equals(actual);
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,36,"* Converts an argument to a String, used by"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,37,* {@link AbstractMatcher#toString(Object[])}.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,39,* @param argument
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,40,*            the argument to convert to a String.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,41,* @return a <code>String</code> representation of the argument.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,43,protected String argumentToString(Object argument) {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,44,if (argument instanceof String) {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,45,"return ""\"""" + argument + ""\"""";"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,47,"return """" + argument;"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,51,* Checks whether an expected argument array matches an actual argument array.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,52,* This convenience implementation uses
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,53,"* <code>argumentMatches(Object, Object)</code> to check whether arguments"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,54,"* pairs match. If all the arguments match, true is returned, otherwise"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,55,"* false. In two cases, <code>argumentMatches(Object, Object)</code> is"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,56,"* not called: If both argument arrays are null, they match; if one and only"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,57,"* one is null, they do not match."
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,59,* @param expected
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,60,*            the expected arguments.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,61,* @param actual
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,62,*            the actual arguments.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,63,"* @return true if the arguments match, false otherwise."
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,65,"public boolean matches(Object[] expected, Object[] actual) {"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,66,if (expected == actual) {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,67,return true;
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,69,if (expected == null || actual == null) {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,70,return false;
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,72,if (expected.length != actual.length) {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,73,return false;
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,75,for (int i = 0; i < expected.length; i++) {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,76,Object expectedObject = expected[i];
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,77,Object actualObject = actual[i];
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,79,if (expectedObject == null && actualObject == null) {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,80,continue;
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,83,if (expectedObject == null && actualObject != null) {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,84,return false;
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,87,if (expectedObject != null && actualObject == null) {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,88,return false;
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,91,"if (!argumentMatches(expectedObject, actualObject)) {"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,92,return false;
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,95,return true;
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,99,* Returns a string representation of the matcher. This convenience
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,100,* implementation calls {@link AbstractMatcher#argumentToString(Object)}
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,101,* for every argument in the given array and returns the string representations
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,102,* of the arguments separated by commas.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,104,* @param arguments
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,105,*            the arguments to be used in the string representation.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,106,* @return a string representation of the matcher.
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,108,public String toString(Object[] arguments) {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,109,if (arguments == null)
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,110,arguments = new Object[0];
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,112,StringBuffer result = new StringBuffer();
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,114,for (int i = 0; i < arguments.length; i++) {
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,115,if (i > 0)
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,116,"result.append("", "");"
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,117,result.append(argumentToString(arguments[i]));
True,src/org/easymock/AbstractMatcher.java,src/org/easymock/AbstractMatcher.java,119,return result.toString();
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,5,package org.easymock;
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,8,* A comparison function that is used to match arguments.
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,10,* @see MockControl#setDefaultMatcher
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,11,* @see MockControl#setMatcher
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,12,* @see MockControl#EQUALS_MATCHER
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,13,* @see MockControl#ARRAY_MATCHER
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,14,* @see MockControl#ALWAYS_MATCHER
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,16,"* @deprecated Since EasyMock 2.0, <code>ArgumentsMatcher</code>s are only supported"
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,17,* for the legacy <code>MockControl</code>. For mock objects generated by the methods
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,18,"* on <code>EasyMock</code>, there are per-argument matchers available. For more"
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,19,"* information, see the EasyMock documentation."
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,21,public interface ArgumentsMatcher {
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,24,* Matches two arrays of arguments.
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,26,* @param expected
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,27,*            the expected arguments.
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,28,* @param actual
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,29,*            the actual arguments.
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,30,"* @return true if the arguments match, false otherwise."
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,32,"boolean matches(Object[] expected, Object[] actual);"
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,35,* Returns a string representation of the arguments.
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,37,* @param arguments
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,38,*            the arguments to be used in the string representation.
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,39,* @return a string representation of the arguments.
True,src/org/easymock/ArgumentsMatcher.java,src/org/easymock/ArgumentsMatcher.java,41,String toString(Object[] arguments);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,2,"* Copyright (c) 2003-2006 OFFIS, Henri Tremblay."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,5,package org.easymock;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,7,import java.lang.reflect.Proxy;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,8,import java.util.Comparator;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,10,import org.easymock.internal.ClassExtensionHelper;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,11,import org.easymock.internal.LastArguments;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,12,import org.easymock.internal.LastControl;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,13,import org.easymock.internal.MockInvocationHandler;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,14,import org.easymock.internal.MocksControl;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,15,import org.easymock.internal.ObjectMethodsFilter;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,16,import org.easymock.internal.matchers.Any;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,17,import org.easymock.internal.matchers.ArrayEquals;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,18,import org.easymock.internal.matchers.Compare;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,19,import org.easymock.internal.matchers.CompareEqual;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,20,import org.easymock.internal.matchers.Contains;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,21,import org.easymock.internal.matchers.EndsWith;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,22,import org.easymock.internal.matchers.Equals;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,23,import org.easymock.internal.matchers.EqualsWithDelta;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,24,import org.easymock.internal.matchers.Find;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,25,import org.easymock.internal.matchers.GreaterOrEqual;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,26,import org.easymock.internal.matchers.GreaterThan;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,27,import org.easymock.internal.matchers.InstanceOf;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,28,import org.easymock.internal.matchers.LessOrEqual;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,29,import org.easymock.internal.matchers.LessThan;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,30,import org.easymock.internal.matchers.Matches;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,31,import org.easymock.internal.matchers.NotNull;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,32,import org.easymock.internal.matchers.Null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,33,import org.easymock.internal.matchers.Same;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,34,import org.easymock.internal.matchers.StartsWith;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,36,public class EasyMock {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,39,"* Creates a mock object that implements the given interface, order checking"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,40,* is enabled by default.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,42,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,43,*            the interface that the mock object should implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,44,* @param toMock
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,45,*            the class of the interface that the mock object should
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,46,*            implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,47,* @return the mock object.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,49,public static <T> T createStrictMock(Class<T> toMock) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,50,return createStrictControl().createMock(toMock);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,54,"* Creates a mock object that implements the given interface, order checking"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,55,* is enabled by default.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,56,* @param name the name of the mock object.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,57,* @param toMock
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,58,*            the class of the interface that the mock object should
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,59,*            implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,60,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,61,*            the interface that the mock object should implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,62,* @return the mock object.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,63,* @throws IllegalArgumentException if the name is not a valid Java identifier.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,65,"public static <T> T createStrictMock(String name, Class<T> toMock) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,66,"return createStrictControl().createMock(name, toMock);"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,70,"* Creates a mock object that implements the given interface, order checking"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,71,* is disabled by default.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,73,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,74,*            the interface that the mock object should implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,75,* @param toMock
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,76,*            the class of the interface that the mock object should
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,77,*            implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,78,* @return the mock object.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,80,public static <T> T createMock(Class<T> toMock) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,81,return createControl().createMock(toMock);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,85,"* Creates a mock object that implements the given interface, order checking"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,86,* is disabled by default.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,87,* @param name the name of the mock object.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,88,* @param toMock
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,89,*            the class of the interface that the mock object should
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,90,*            implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,92,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,93,*            the interface that the mock object should implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,94,* @return the mock object.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,95,* @throws IllegalArgumentException if the name is not a valid Java identifier.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,97,"public static <T> T createMock(String name, Class<T> toMock) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,98,"return createControl().createMock(name, toMock);"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,102,"* Creates a mock object that implements the given interface, order checking"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,103,"* is disabled by default, and the mock object will return <code>0</code>,"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,104,* <code>null</code> or <code>false</code> for unexpected invocations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,106,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,107,*            the interface that the mock object should implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,108,* @param toMock
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,109,*            the class of the interface that the mock object should
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,110,*            implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,111,* @return the mock object.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,113,public static <T> T createNiceMock(Class<T> toMock) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,114,return createNiceControl().createMock(toMock);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,118,"* Creates a mock object that implements the given interface, order checking"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,119,"* is disabled by default, and the mock object will return <code>0</code>,"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,120,* <code>null</code> or <code>false</code> for unexpected invocations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,121,* @param name the name of the mock object.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,122,* @param toMock
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,123,*            the class of the interface that the mock object should
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,124,*            implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,126,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,127,*            the interface that the mock object should implement.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,128,* @return the mock object.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,129,* @throws IllegalArgumentException if the name is not a valid Java identifier.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,131,"public static <T> T createNiceMock(String name, Class<T> toMock) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,132,"return createNiceControl().createMock(name, toMock);"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,136,"* Creates a control, order checking is enabled by default."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,138,* @return the control.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,140,public static IMocksControl createStrictControl() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,141,return new MocksControl(MocksControl.MockType.STRICT);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,145,"* Creates a control, order checking is disabled by default."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,147,* @return the control.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,149,public static IMocksControl createControl() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,150,return new MocksControl(MocksControl.MockType.DEFAULT);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,154,"* Creates a control, order checking is disabled by default, and the mock"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,155,"* objects created by this control will return <code>0</code>,"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,156,* <code>null</code> or <code>false</code> for unexpected invocations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,158,* @return the control.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,160,public static IMocksControl createNiceControl() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,161,return new MocksControl(MocksControl.MockType.NICE);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,165,* Returns the expectation setter for the last expected invocation in the
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,166,* current thread.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,168,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,169,*            the parameter is used to transport the type to the
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,170,*            ExpectationSetter. It allows writing the expected call as
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,171,"*            argument, i.e."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,172,"*            <code>expect(mock.getName()).andReturn(""John Doe"")<code>."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,174,* @return the expectation setter.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,176,"@SuppressWarnings(""unchecked"")"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,177,public static <T> IExpectationSetters<T> expect(T value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,178,return getControlForLastCall();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,182,* Returns the expectation setter for the last expected invocation in the
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,183,* current thread. This method is used for expected invocations on void
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,184,* methods.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,186,* @return the expectation setter.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,188,"@SuppressWarnings(""unchecked"")"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,189,public static IExpectationSetters<Object> expectLastCall() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,190,return getControlForLastCall();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,193,private static IExpectationSetters getControlForLastCall() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,194,MocksControl lastControl = LastControl.lastControl();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,195,if (lastControl == null) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,196,"throw new IllegalStateException(""no last call on a mock available"");"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,198,return lastControl;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,202,"* Expects any boolean argument. For details, see the EasyMock"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,203,* documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,205,* @return <code>false</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,207,public static boolean anyBoolean() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,208,reportMatcher(Any.ANY);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,209,return false;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,213,"* Expects any byte argument. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,215,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,217,public static byte anyByte() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,218,reportMatcher(Any.ANY);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,219,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,223,"* Expects any char argument. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,225,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,227,public static char anyChar() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,228,reportMatcher(Any.ANY);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,229,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,233,"* Expects any int argument. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,235,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,237,public static int anyInt() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,238,reportMatcher(Any.ANY);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,239,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,243,"* Expects any long argument. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,245,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,247,public static long anyLong() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,248,reportMatcher(Any.ANY);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,249,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,253,"* Expects any float argument. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,255,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,257,public static float anyFloat() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,258,reportMatcher(Any.ANY);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,259,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,263,"* Expects any double argument. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,265,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,267,public static double anyDouble() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,268,reportMatcher(Any.ANY);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,269,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,273,"* Expects any short argument. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,275,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,277,public static short anyShort() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,278,reportMatcher(Any.ANY);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,279,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,283,"* Expects any Object argument. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,285,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,287,public static Object anyObject() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,288,reportMatcher(Any.ANY);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,289,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,293,"* Expects a comparable argument greater than or equal the given value. For details, see"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,294,* the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,296,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,297,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,298,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,300,public static <T extends Comparable<T>> T geq(Comparable<T> value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,301,reportMatcher(new GreaterOrEqual<T>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,302,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,306,* Expects a byte argument greater than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,307,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,309,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,310,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,311,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,313,public static byte geq(byte value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,314,reportMatcher(new GreaterOrEqual<Byte>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,315,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,319,* Expects a double argument greater than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,320,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,322,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,323,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,324,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,326,public static double geq(double value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,327,reportMatcher(new GreaterOrEqual<Double>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,328,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,332,* Expects a float argument greater than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,333,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,335,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,336,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,337,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,339,public static float geq(float value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,340,reportMatcher(new GreaterOrEqual<Float>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,341,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,345,* Expects an int argument greater than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,346,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,348,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,349,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,350,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,352,public static int geq(int value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,353,reportMatcher(new GreaterOrEqual<Integer>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,354,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,358,* Expects a long argument greater than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,359,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,361,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,362,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,363,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,365,public static long geq(long value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,366,reportMatcher(new GreaterOrEqual<Long>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,367,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,371,* Expects a short argument greater than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,372,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,374,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,375,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,376,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,378,public static short geq(short value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,379,reportMatcher(new GreaterOrEqual<Short>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,380,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,384,"* Expects a comparable argument less than or equal the given value. For details, see"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,385,* the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,387,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,388,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,389,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,391,public static <T extends Comparable<T>> T leq(Comparable<T> value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,392,reportMatcher(new LessOrEqual<T>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,393,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,397,* Expects a byte argument less than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,398,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,400,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,401,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,402,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,404,public static byte leq(byte value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,405,reportMatcher(new LessOrEqual<Byte>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,406,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,410,* Expects a double argument less than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,411,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,413,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,414,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,415,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,417,public static double leq(double value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,418,reportMatcher(new LessOrEqual<Double>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,419,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,423,* Expects a float argument less than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,424,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,426,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,427,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,428,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,430,public static float leq(float value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,431,reportMatcher(new LessOrEqual<Float>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,432,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,436,* Expects an int argument less than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,437,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,439,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,440,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,441,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,443,public static int leq(int value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,444,reportMatcher(new LessOrEqual<Integer>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,445,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,449,* Expects a long argument less than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,450,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,452,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,453,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,454,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,456,public static long leq(long value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,457,reportMatcher(new LessOrEqual<Long>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,458,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,462,* Expects a short argument less than or equal to the given value. For
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,463,"* details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,465,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,466,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,467,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,469,public static short leq(short value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,470,reportMatcher(new LessOrEqual<Short>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,471,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,475,"* Expects a comparable argument greater than the given value. For details, see"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,476,* the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,478,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,479,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,480,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,482,public static <T extends Comparable<T>> T gt(Comparable<T> value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,483,reportMatcher(new GreaterThan<T>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,484,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,488,"* Expects a byte argument greater than the given value. For details, see"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,489,* the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,491,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,492,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,493,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,495,public static byte gt(byte value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,496,reportMatcher(new GreaterThan<Byte>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,497,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,501,"* Expects a double argument greater than the given value. For details, see"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,502,* the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,504,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,505,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,506,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,508,public static double gt(double value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,509,reportMatcher(new GreaterThan<Double>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,510,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,514,"* Expects a float argument greater than the given value. For details, see"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,515,* the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,517,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,518,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,519,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,521,public static float gt(float value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,522,reportMatcher(new GreaterThan<Float>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,523,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,527,"* Expects an int argument greater than the given value. For details, see"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,528,* the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,530,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,531,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,532,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,534,public static int gt(int value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,535,reportMatcher(new GreaterThan<Integer>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,536,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,540,"* Expects a long argument greater than the given value. For details, see"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,541,* the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,543,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,544,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,545,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,547,public static long gt(long value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,548,reportMatcher(new GreaterThan<Long>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,549,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,553,"* Expects a short argument greater than the given value. For details, see"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,554,* the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,556,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,557,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,558,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,560,public static short gt(short value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,561,reportMatcher(new GreaterThan<Short>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,562,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,566,"* Expects a comparable argument less than the given value. For details, see"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,567,* the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,569,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,570,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,571,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,573,public static <T extends Comparable<T>> T lt(Comparable<T> value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,574,reportMatcher(new LessThan<T>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,575,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,579,"* Expects a byte argument less than the given value. For details, see the"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,580,* EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,582,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,583,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,584,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,586,public static byte lt(byte value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,587,reportMatcher(new LessThan<Byte>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,588,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,592,"* Expects a double argument less than the given value. For details, see the"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,593,* EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,595,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,596,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,597,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,599,public static double lt(double value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,600,reportMatcher(new LessThan<Double>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,601,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,605,"* Expects a float argument less than the given value. For details, see the"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,606,* EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,608,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,609,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,610,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,612,public static float lt(float value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,613,reportMatcher(new LessThan<Float>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,614,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,618,"* Expects an int argument less than the given value. For details, see the"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,619,* EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,621,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,622,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,623,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,625,public static int lt(int value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,626,reportMatcher(new LessThan<Integer>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,627,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,631,"* Expects a long argument less than the given value. For details, see the"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,632,* EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,634,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,635,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,636,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,638,public static long lt(long value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,639,reportMatcher(new LessThan<Long>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,640,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,644,"* Expects a short argument less than the given value. For details, see the"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,645,* EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,647,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,648,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,649,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,651,public static short lt(short value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,652,reportMatcher(new LessThan<Short>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,653,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,657,"* Expects an object implementing the given class. For details, see the"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,658,* EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,660,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,661,*            the accepted type.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,662,* @param clazz
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,663,*            the class of the accepted type.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,664,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,666,public static <T> T isA(Class<T> clazz) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,667,reportMatcher(new InstanceOf(clazz));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,668,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,672,"* Expects a string that contains the given substring. For details, see the"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,673,* EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,675,* @param substring
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,676,*            the substring.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,677,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,679,public static String contains(String substring) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,680,reportMatcher(new Contains(substring));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,681,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,685,* Expects a boolean that matches both given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,687,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,688,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,689,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,690,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,691,* @return <code>false</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,693,"public static boolean and(boolean first, boolean second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,694,LastArguments.reportAnd(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,695,return false;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,699,* Expects a byte that matches both given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,701,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,702,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,703,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,704,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,705,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,707,"public static byte and(byte first, byte second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,708,LastArguments.reportAnd(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,709,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,713,* Expects a char that matches both given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,715,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,716,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,717,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,718,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,719,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,721,"public static char and(char first, char second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,722,LastArguments.reportAnd(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,723,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,727,* Expects a double that matches both given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,729,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,730,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,731,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,732,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,733,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,735,"public static double and(double first, double second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,736,LastArguments.reportAnd(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,737,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,741,* Expects a float that matches both given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,743,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,744,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,745,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,746,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,747,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,749,"public static float and(float first, float second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,750,LastArguments.reportAnd(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,751,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,755,* Expects an int that matches both given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,757,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,758,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,759,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,760,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,761,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,763,"public static int and(int first, int second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,764,LastArguments.reportAnd(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,765,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,769,* Expects a long that matches both given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,771,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,772,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,773,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,774,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,775,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,777,"public static long and(long first, long second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,778,LastArguments.reportAnd(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,779,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,783,* Expects a short that matches both given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,785,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,786,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,787,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,788,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,789,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,791,"public static short and(short first, short second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,792,LastArguments.reportAnd(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,793,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,797,* Expects an Object that matches both given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,799,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,800,"*            the type of the object, it is passed through to prevent casts."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,801,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,802,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,803,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,804,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,805,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,807,"public static <T> T and(T first, T second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,808,LastArguments.reportAnd(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,809,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,813,* Expects a boolean that matches one of the given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,815,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,816,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,817,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,818,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,819,* @return <code>false</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,821,"public static boolean or(boolean first, boolean second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,822,LastArguments.reportOr(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,823,return false;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,827,* Expects a byte that matches one of the given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,829,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,830,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,831,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,832,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,833,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,835,"public static byte or(byte first, byte second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,836,LastArguments.reportOr(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,837,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,841,* Expects a char that matches one of the given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,843,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,844,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,845,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,846,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,847,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,849,"public static char or(char first, char second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,850,LastArguments.reportOr(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,851,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,855,* Expects a double that matches one of the given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,857,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,858,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,859,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,860,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,861,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,863,"public static double or(double first, double second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,864,LastArguments.reportOr(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,865,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,869,* Expects a float that matches one of the given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,871,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,872,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,873,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,874,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,875,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,877,"public static float or(float first, float second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,878,LastArguments.reportOr(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,879,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,883,* Expects an int that matches one of the given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,885,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,886,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,887,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,888,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,889,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,891,"public static int or(int first, int second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,892,LastArguments.reportOr(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,893,return first;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,897,* Expects a long that matches one of the given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,899,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,900,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,901,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,902,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,903,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,905,"public static long or(long first, long second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,906,LastArguments.reportOr(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,907,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,911,* Expects a short that matches one of the given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,913,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,914,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,915,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,916,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,917,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,919,"public static short or(short first, short second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,920,LastArguments.reportOr(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,921,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,925,* Expects an Object that matches one of the given expectations.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,927,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,928,"*            the type of the object, it is passed through to prevent casts."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,929,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,930,*            placeholder for the first expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,931,* @param second
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,932,*            placeholder for the second expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,933,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,935,"public static <T> T or(T first, T second) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,936,LastArguments.reportOr(2);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,937,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,941,* Expects a boolean that does not match the given expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,943,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,944,*            placeholder for the expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,945,* @return <code>false</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,947,public static boolean not(boolean first) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,948,LastArguments.reportNot();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,949,return false;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,953,* Expects a byte that does not match the given expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,955,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,956,*            placeholder for the expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,957,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,959,public static byte not(byte first) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,960,LastArguments.reportNot();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,961,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,965,* Expects a char that does not match the given expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,967,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,968,*            placeholder for the expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,969,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,971,public static char not(char first) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,972,LastArguments.reportNot();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,973,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,977,* Expects a double that does not match the given expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,979,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,980,*            placeholder for the expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,981,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,983,public static double not(double first) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,984,LastArguments.reportNot();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,985,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,989,* Expects a float that does not match the given expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,991,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,992,*            placeholder for the expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,993,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,995,public static float not(float first) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,996,LastArguments.reportNot();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,997,return first;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1001,* Expects an int that does not match the given expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1003,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1004,*            placeholder for the expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1005,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1007,public static int not(int first) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1008,LastArguments.reportNot();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1009,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1013,* Expects a long that does not match the given expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1015,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1016,*            placeholder for the expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1017,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1019,public static long not(long first) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1020,LastArguments.reportNot();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1021,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1025,* Expects a short that does not match the given expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1027,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1028,*            placeholder for the expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1029,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1031,public static short not(short first) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1032,LastArguments.reportNot();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1033,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1037,* Expects an Object that does not match the given expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1039,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1040,"*            the type of the object, it is passed through to prevent casts."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1041,* @param first
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1042,*            placeholder for the expectation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1043,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1045,public static <T> T not(T first) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1046,LastArguments.reportNot();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1047,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1051,* Expects a boolean that is equal to the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1053,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1054,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1055,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1057,public static boolean eq(boolean value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1058,reportMatcher(new Equals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1059,return false;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1063,* Expects a byte that is equal to the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1065,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1066,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1067,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1069,public static byte eq(byte value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1070,reportMatcher(new Equals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1071,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1075,* Expects a char that is equal to the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1077,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1078,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1079,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1081,public static char eq(char value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1082,reportMatcher(new Equals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1083,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1087,* Expects a double that is equal to the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1089,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1090,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1091,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1093,public static double eq(double value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1094,reportMatcher(new Equals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1095,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1099,* Expects a float that is equal to the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1101,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1102,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1103,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1105,public static float eq(float value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1106,reportMatcher(new Equals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1107,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1111,* Expects an int that is equal to the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1113,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1114,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1115,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1117,public static int eq(int value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1118,reportMatcher(new Equals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1119,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1123,* Expects a long that is equal to the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1125,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1126,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1127,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1129,public static long eq(long value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1130,reportMatcher(new Equals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1131,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1135,* Expects a short that is equal to the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1137,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1138,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1139,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1141,public static short eq(short value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1142,reportMatcher(new Equals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1143,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1147,* Expects an Object that is equal to the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1149,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1150,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1151,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1153,public static <T> T eq(T value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1154,reportMatcher(new Equals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1155,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1159,"* Expects a boolean array that is equal to the given array, i.e. it has to"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1160,"* have the same length, and each element has to be equal."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1162,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1163,*            the given arry.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1164,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1166,public static boolean[] aryEq(boolean[] value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1167,reportMatcher(new ArrayEquals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1168,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1172,"* Expects a byte array that is equal to the given array, i.e. it has to"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1173,"* have the same length, and each element has to be equal."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1175,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1176,*            the given arry.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1177,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1179,public static byte[] aryEq(byte[] value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1180,reportMatcher(new ArrayEquals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1181,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1185,"* Expects a char array that is equal to the given array, i.e. it has to"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1186,"* have the same length, and each element has to be equal."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1188,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1189,*            the given arry.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1190,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1192,public static char[] aryEq(char[] value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1193,reportMatcher(new ArrayEquals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1194,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1198,"* Expects a double array that is equal to the given array, i.e. it has to"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1199,"* have the same length, and each element has to be equal."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1201,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1202,*            the given arry.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1203,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1205,public static double[] aryEq(double[] value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1206,reportMatcher(new ArrayEquals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1207,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1211,"* Expects a float array that is equal to the given array, i.e. it has to"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1212,"* have the same length, and each element has to be equal."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1214,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1215,*            the given arry.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1216,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1218,public static float[] aryEq(float[] value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1219,reportMatcher(new ArrayEquals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1220,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1224,"* Expects an int array that is equal to the given array, i.e. it has to"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1225,"* have the same length, and each element has to be equal."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1227,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1228,*            the given arry.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1229,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1231,public static int[] aryEq(int[] value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1232,reportMatcher(new ArrayEquals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1233,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1237,"* Expects a long array that is equal to the given array, i.e. it has to"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1238,"* have the same length, and each element has to be equal."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1240,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1241,*            the given arry.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1242,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1244,public static long[] aryEq(long[] value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1245,reportMatcher(new ArrayEquals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1246,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1250,"* Expects a short array that is equal to the given array, i.e. it has to"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1251,"* have the same length, and each element has to be equal."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1253,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1254,*            the given arry.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1255,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1257,public static short[] aryEq(short[] value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1258,reportMatcher(new ArrayEquals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1259,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1263,"* Expects an Object array that is equal to the given array, i.e. it has to"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1264,"* have the same type, length, and each element has to be equal."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1266,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1267,"*            the type of the array, it is passed through to prevent casts."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1268,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1269,*            the given arry.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1270,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1272,public static <T> T[] aryEq(T[] value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1273,reportMatcher(new ArrayEquals(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1274,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1278,* Expects null.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1280,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1282,public static Object isNull() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1283,reportMatcher(Null.NULL);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1284,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1288,* Expects not null.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1290,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1292,public static Object notNull() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1293,reportMatcher(NotNull.NOT_NULL);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1294,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1298,* Expects a string that contains a substring that matches the given regular
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1299,"* expression. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1301,* @param regex
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1302,*            the regular expression.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1303,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1305,public static String find(String regex) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1306,reportMatcher(new Find(regex));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1307,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1311,"* Expects a string that matches the given regular expression. For details,"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1312,* see the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1314,* @param regex
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1315,*            the regular expression.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1316,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1318,public static String matches(String regex) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1319,reportMatcher(new Matches(regex));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1320,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1324,"* Expects a string that starts with the given prefix. For details, see the"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1325,* EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1327,* @param prefix
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1328,*            the prefix.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1329,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1331,public static String startsWith(String prefix) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1332,reportMatcher(new StartsWith(prefix));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1333,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1337,"* Expects a string that ends with the given suffix. For details, see the"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1338,* EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1340,* @param suffix
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1341,*            the suffix.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1342,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1344,public static String endsWith(String suffix) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1345,reportMatcher(new EndsWith(suffix));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1346,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1350,* Expects a double that has an absolute difference to the given value that
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1351,"* is less than the given delta. For details, see the EasyMock"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1352,* documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1354,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1355,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1356,* @param delta
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1357,*            the given delta.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1358,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1360,"public static double eq(double value, double delta) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1361,"reportMatcher(new EqualsWithDelta(value, delta));"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1362,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1366,* Expects a float that has an absolute difference to the given value that
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1367,"* is less than the given delta. For details, see the EasyMock"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1368,* documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1370,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1371,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1372,* @param delta
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1373,*            the given delta.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1374,* @return <code>0</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1376,"public static float eq(float value, float delta) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1377,"reportMatcher(new EqualsWithDelta(value, delta));"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1378,return 0;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1382,"* Expects an Object that is the same as the given value. For details, see"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1383,* the EasyMock documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1385,* @param <T>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1386,"*            the type of the object, it is passed through to prevent casts."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1387,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1388,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1389,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1391,public static <T> T same(T value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1392,reportMatcher(new Same(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1393,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1397,* Switches the given mock objects (more exactly: the controls of the mock
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1398,"* objects) to replay mode. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1400,* @param mocks
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1401,*            the mock objects.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1403,public static void replay(Object... mocks) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1404,for (Object mock : mocks) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1405,ClassExtensionHelper.getControl(mock).replay();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1410,* Resets the given mock objects (more exactly: the controls of the mock
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1411,"* objects). For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1413,* @param mocks
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1414,*            the mock objects.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1416,public static void reset(Object... mocks) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1417,for (Object mock : mocks) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1418,ClassExtensionHelper.getControl(mock).reset();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1423,* Verifies the given mock objects (more exactly: the controls of the mock
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1424,* objects).
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1426,* @param mocks
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1427,*            the mock objects.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1429,public static void verify(Object... mocks) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1430,for (Object mock : mocks) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1431,ClassExtensionHelper.getControl(mock).verify();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1436,* Switches order checking of the given mock object (more exactly: the
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1437,"* control of the mock object) the on and off. For details, see the EasyMock"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1438,* documentation.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1440,* @param mock
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1441,*            the mock object.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1442,* @param state
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1443,"*            <code>true</code> switches order checking on,"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1444,*            <code>false</code> switches it off.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1446,"public static void checkOrder(Object mock, boolean state) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1447,ClassExtensionHelper.getControl(mock).checkOrder(state);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1451,* Reports an argument matcher. This method is needed to define own argument
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1452,"* matchers. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1454,* @param matcher
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1456,public static void reportMatcher(IArgumentMatcher matcher) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1457,LastArguments.reportMatcher(matcher);
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1460,private static MocksControl getControl(Object mock) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1461,return ((ObjectMethodsFilter<MockInvocationHandler>) Proxy
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1462,.getInvocationHandler(mock)).getDelegate().getControl();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1466,"* Returns the arguments of the current mock method call, if inside an"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1467,"* <code>IAnswer</code> callback - be careful here, reordering parameters of"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1468,* method changes the semantics of your tests.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1470,* @return the arguments of the current mock method call.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1471,* @throws IllegalStateException
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1472,*             if called outside of <code>IAnswer</code> callbacks.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1474,public static Object[] getCurrentArguments() {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1475,Object[] result = LastArguments.getCurrentArguments();
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1476,if (result == null) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1477,throw new IllegalStateException(
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1478,"""current arguments are only available when executing callback methods"");"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1480,return result;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1484,* Expects a comparable argument equals to the given value according to their
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1485,"* compareTo method. For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1487,* @param value
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1488,*            the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1489,* @return <code>null</code>.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1491,public static <T extends Comparable<T>> T cmpEq(Comparable<T> value) {
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1492,reportMatcher(new CompareEqual<T>(value));
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1493,return null;
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1497,* Expects an argument that will be compared using the provided comparator.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1498,* The following comparison will take place:
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1499,* <p>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1500,"* <code>comparator.compare(actual, expected) operator 0</code>"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1501,* </p>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1502,"* For details, see the EasyMock documentation."
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1504,* @param value the given value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1505,* @param comparator Comparator used to compare the actual with expected value.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1506,* @param operator The comparison operator.
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1507,* @return <code>null</code>
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1509,"public static <T> T cmp(T value, Comparator<T> comparator, LogicalOperator operator) {"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1510,"reportMatcher(new Compare<T>(value, comparator, operator));"
True,src/org/easymock/EasyMock.java,src/org/easymock/EasyMock.java,1511,return null;
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,5,package org.easymock;
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,7,import org.easymock.classextension.*;
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,10,* Used to answer expected calls.
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,11,* @param <T> the type to return.
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,13,public interface IAnswer<T> {
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,15,* is called by EasyMock to answer an expected call.
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,16,"* The answer may be to return a value, or to throw an exception."
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,17,* The arguments of the call for which the answer is generated
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,18,* are available via {@link EasyMock#getCurrentArguments()} - be careful
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,19,"* here, using the arguments is not refactoring-safe."
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,21,* @return the value to be returned
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,22,* @throws Throwable the throwable to be thrown
True,src/org/easymock/IAnswer.java,src/org/easymock/IAnswer.java,24,T answer() throws Throwable;
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,2,"* Copyright (c) 2001-2006 OFFIS, Tammo Freese."
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,5,package org.easymock;
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,8,* Decides whether an actual argument is accepted.
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,10,public interface IArgumentMatcher {
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,13,* Returns whether this matcher accepts the given argument.
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,14,* <p>
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,15,"* Like Object.equals(), it should be aware that the argument passed might"
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,16,* be null and of any type. So you will usually start the method with an
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,17,* instanceof and/or null check.
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,18,* <p>
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,19,* The method should <b>never</b> assert if the argument doesn't match. It
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,20,* should only return false. EasyMock will take care of asserting if the
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,21,* call is really unexpected.
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,23,* @param argument the argument
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,24,* @return whether this matcher accepts the given argument.
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,26,boolean matches(Object argument);
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,29,* Appends a string representation of this matcher to the given buffer. In case
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,30,"* of failure, the printed message will show this string to allow to know which"
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,31,* matcher was used for the failing call.
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,33,* @param buffer the buffer to which the string representation is appended.
True,src/org/easymock/IArgumentMatcher.java,src/org/easymock/IArgumentMatcher.java,35,void appendTo(StringBuffer buffer);
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,5,package org.easymock;
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,7,import org.mockito.MockitoExpectation;
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,10,* Allows setting expectations for an associated expected invocation.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,11,* Implementations of this interface are returned by
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,12,"* {@link EasyMock#expect(Object)}, and by {@link EasyMock#expectLastCall()}."
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,14,public interface IExpectationSetters<T> {
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,17,* Sets a return value that will be returned for the expected invocation.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,19,* @param value
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,20,*            the value to return.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,21,* @return this object to allow method call chaining.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,23,IExpectationSetters<T> andReturn(T value);
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,26,* Sets a throwable that will be thrown for the expected invocation.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,28,* @param throwable
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,29,*            the throwable to throw.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,30,* @return this object to allow method call chaining.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,32,IExpectationSetters<T> andThrow(Throwable throwable);
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,35,* Sets an object that will be used to calculate the answer for the expected
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,36,"* invocation (either return a value, or throw an exception)."
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,38,* @param answer
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,39,*            the object used to answer the invocation.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,40,* @return this object to allow method call chaining.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,42,IExpectationSetters<T> andAnswer(IAnswer<T> answer);
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,45,* Sets a stub return value that will be returned for the expected
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,46,* invocation.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,48,* @param value
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,49,*            the value to return.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,51,void andStubReturn(T value);
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,54,* Sets a stub throwable that will be thrown for the expected invocation.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,56,* @param throwable
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,57,*            the throwable to throw.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,59,void andStubThrow(Throwable throwable);
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,62,* Sets a stub object that will be used to calculate the answer for the
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,63,"* expected invocation (either return a value, or throw an exception)."
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,65,* @param answer
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,66,*            the object used to answer the invocation.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,68,void andStubAnswer(IAnswer<T> answer);
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,71,* Sets stub behavior for the expected invocation (this is needed for void
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,72,* methods).
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,74,void asStub();
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,77,* Expect the last invocation <code>count</code> times.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,79,* @param count
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,80,*            the number of invocations expected.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,81,* @return this object to allow method call chaining.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,83,IExpectationSetters<T> times(int count);
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,86,* Expect the last invocation between <code>min</code> and
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,87,* <code>max</code> times.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,89,* @param min
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,90,*            the minimum number of invocations expected.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,91,* @param max
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,92,*            the maximum number of invocations expected.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,93,* @return this object to allow method call chaining.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,95,"IExpectationSetters<T> times(int min, int max);"
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,98,* Expect the last invocation once. This is default in EasyMock.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,100,* @return this object to allow method call chaining.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,102,IExpectationSetters<T> once();
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,105,* Expect the last invocation at least once.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,107,* @return this object to allow method call chaining.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,109,IExpectationSetters<T> atLeastOnce();
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,112,* Expect the last invocation any times.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,114,* @return this object to allow method call chaining.
True,src/org/easymock/IExpectationSetters.java,src/org/easymock/IExpectationSetters.java,116,IExpectationSetters<T> anyTimes();
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,5,package org.easymock;
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,8,* Controls all the mock objects created by it.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,9,"* For details, see the EasyMock documentation."
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,11,public interface IMocksControl extends IExpectationSetters {
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,13,* Creates a mock object that implements the given interface.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,14,* @param <T> the interface that the mock object should implement.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,15,* @param toMock the class of the interface that the mock object should implement.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,16,* @return the mock object.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,18,<T> T createMock(Class<T> toMock);
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,21,* Creates a mock object that implements the given interface.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,22,* @param name the name of the mock object .
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,23,* @param toMock the class of the interface that the mock object should implement.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,24,* @param <T> the interface that the mock object should implement.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,25,* @return the mock object.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,26,* @throws IllegalArgumentException if the name is not a valid Java identifier.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,28,"<T> T createMock(String name, Class<T> toMock);"
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,31,* Removes all expectations for the mock objects of this control.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,33,void reset();
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,36,* Switches the control from record mode to replay mode.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,38,void replay();
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,41,* Verifies that all expectations were met.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,43,void verify();
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,46,* Switches order checking on and off.
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,47,"* @param state <code>true</code> switches order checking on, <code>false</code> switches it off."
True,src/org/easymock/IMocksControl.java,src/org/easymock/IMocksControl.java,49,void checkOrder(boolean state);
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,2,"* Copyright (c) 2001-2007 OFFIS, Henri Tremblay."
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,5,package org.easymock;
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,8,* See {@link EasyMock#cmp}
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,10,public enum LogicalOperator {
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,11,"LESS_THAN(""<"") {"
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,12,public boolean matchResult(int result) {
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,13,return result < 0;
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,16,"LESS_OR_EQUAL(""<="") {"
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,17,public boolean matchResult(int result) {
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,18,return result <= 0;
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,21,"EQUAL(""=="") {"
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,22,public boolean matchResult(int result) {
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,23,return result == 0;
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,26,"GREATER_OR_EQUAL("">="") {"
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,27,public boolean matchResult(int result) {
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,28,return result >= 0;
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,31,"GREATER("">"") {"
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,32,public boolean matchResult(int result) {
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,33,return result > 0;
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,37,private String symbol;
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,39,private LogicalOperator(String symbol) {
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,40,this.symbol = symbol;
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,43,public String getSymbol() {
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,44,return symbol;
True,src/org/easymock/LogicalOperator.java,src/org/easymock/LogicalOperator.java,47,public abstract boolean matchResult(int result);
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,2,"* Copyright (c) 2003-2006 OFFIS, Henri Tremblay."
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,5,package org.easymock;
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,7,import static org.easymock.internal.ClassExtensionHelper.getInterceptor;
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,9,import java.lang.reflect.Method;
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,11,import org.easymock.internal.MocksControl;
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,14,* Instances of <code>MockClassControl</code> control the behavior of their
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,15,"* associated mock objects. For more information, see the EasyMock"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,16,* documentation.
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,18,"* @see <a href=""http://www.easymock.org/"">EasyMock</a>"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,19,* @deprecated Use org.easymock.classextension.EasyMock instead
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,21,public class MockClassControl<T> extends MockControl<T> {
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,24,* Creates a mock control object for the specified class or interface. The
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,25,* {@link MockClassControl}and its associated mock object will not check
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,26,* the order of expected method calls. An unexpected method call on the mock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,27,* object will lead to an <code>AssertionFailedError</code>.
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,29,* @param classToMock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,30,*            the class to mock.
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,31,* @return the mock control (which is a {@link MockClassControl}instance)
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,33,public static <T> MockControl<T> createControl(Class<T> classToMock) {
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,34,return new MockClassControl<T>(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,35,"(MocksControl) EasyMock.createControl(),"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,36,classToMock);
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,40,* Same as {@link #createControl(Class)}but allows to pass a list of
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,41,* methods to mock. All the other methods won't be. It means that if these
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,42,"* methods are called, their real code will be executed."
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,44,* @param classToMock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,45,*            the class to mock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,46,* @param mockedMethods
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,47,"*            Methods to be mocked. If null, all methods will be mocked."
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,48,* @return the mock control
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,50,"public static <T> MockClassControl<T> createControl(Class<T> classToMock,"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,51,Method[] mockedMethods) {
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,52,return new MockClassControl<T>(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,53,"(MocksControl) EasyMock.createControl(),"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,54,"classToMock, mockedMethods);"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,58,* Creates a mock control object for the specified class or interface. The
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,59,* {@link MockClassControl}and its associated mock object will check the
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,60,* order of expected method calls. An unexpected method call on the mock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,61,* object will lead to an <code>AssertionFailedError</code>.
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,63,* @param classToMock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,64,*            the class to mock.
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,65,* @return the mock control (which is a {@link MockClassControl}instance)
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,67,public static <T> MockControl<T> createStrictControl(Class<T> classToMock) {
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,68,return new MockClassControl<T>(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,69,(MocksControl) EasyMock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,70,".createStrictControl(), classToMock);"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,74,* Same as {@link #createStrictControl(Class)}but allows to pass a list of
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,75,* methods to mock. All the other methods won't be. It means that if these
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,76,"* methods are called, their real code will be executed."
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,78,* @param classToMock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,79,*            the class to mock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,80,* @param mockedMethods
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,81,"*            Methods to be mocked. If null, all methods will be mocked."
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,82,* @return the mock control
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,84,public static <T> MockClassControl<T> createStrictControl(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,85,"Class<T> classToMock, Method[] mockedMethods) {"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,86,return new MockClassControl<T>(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,87,(MocksControl) EasyMock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,88,".createStrictControl(), classToMock, mockedMethods);"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,92,* Creates a mock control object for the specified class or interface. The
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,93,* {@link MockClassControl}and its associated mock object will check not
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,94,* the order of expected method calls. An unexpected method call on the mock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,95,"* object will return an empty value (0, null, false)."
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,97,* @param classToMock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,98,*            the class to mock.
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,99,* @return the mock control (which is a {@link MockClassControl}instance)
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,101,public static <T> MockControl<T> createNiceControl(Class<T> classToMock) {
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,102,return new MockClassControl<T>(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,103,"(MocksControl) EasyMock.createNiceControl(),"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,104,classToMock);
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,108,"* Same as {@link #createNiceControl(Class, Method[])}but allows to pass a"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,109,* list of methods to mock. All the other methods won't be. It means that if
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,110,"* these methods are called, their real code will be executed."
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,112,* @param classToMock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,113,*            the class to mock
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,114,* @param mockedMethods
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,115,"*            Methods to be mocked. If null, all methods will be mocked."
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,116,* @return the mock control
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,118,public static <T> MockClassControl<T> createNiceControl(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,119,"Class<T> classToMock, Method[] mockedMethods) {"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,120,return new MockClassControl<T>(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,121,"(MocksControl) EasyMock.createNiceControl(),"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,122,"classToMock, mockedMethods);"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,126,* @deprecated No need to pick a constructor anymore. Constructor arguments
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,127,*             are now ignored. Just use {@link #createControl(Class)}
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,129,"public static <T> MockClassControl<T> createControl(Class<T> classToMock,"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,130,"Class[] constructorTypes, Object[] constructorArgs) {"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,131,return (MockClassControl<T>) createControl(classToMock);
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,135,* @deprecated No need to pick a constructor anymore. Constructor arguments
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,136,*             are now ignored. Just use
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,137,"*             {@link #createControl(Class, Method[])}"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,139,"public static <T> MockClassControl<T> createControl(Class<T> classToMock,"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,140,"Class[] constructorTypes, Object[] constructorArgs,"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,141,Method[] mockedMethods) {
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,142,"return (MockClassControl<T>) createControl(classToMock, mockedMethods);"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,146,* @deprecated No need to pick a constructor anymore. Constructor arguments
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,147,*             are now ignored. Just use {@link #createStrictControl(Class)}
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,149,public static <T> MockClassControl<T> createStrictControl(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,150,"Class<T> classToMock, Class[] constructorTypes,"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,151,Object[] constructorArgs) {
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,152,return (MockClassControl<T>) createStrictControl(classToMock);
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,156,* @deprecated No need to pick a constructor anymore. Constructor arguments
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,157,*             are now ignored. Just use
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,158,"*             {@link #createStrictControl(Class, Method[])}"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,160,public static <T> MockClassControl<T> createStrictControl(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,161,"Class<T> classToMock, Class[] constructorTypes,"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,162,"Object[] constructorArgs, Method[] mockedMethods) {"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,163,"return (MockClassControl<T>) createStrictControl(classToMock,"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,164,mockedMethods);
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,168,* @deprecated No need to pick a constructor anymore. Constructor arguments
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,169,*             are now ignored. Just use {@link #createNiceControl(Class)}
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,171,public static <T> MockClassControl<T> createNiceControl(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,172,"Class<T> classToMock, Class[] constructorTypes,"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,173,Object[] constructorArgs) {
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,174,return (MockClassControl<T>) createNiceControl(classToMock);
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,178,* @deprecated No need to pick a constructor anymore. Constructor arguments
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,179,*             are now ignored. Just use
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,180,"*             {@link #createNiceControl(Class, Method[])}"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,182,public static <T> MockClassControl<T> createNiceControl(
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,183,"Class<T> classToMock, Class[] constructorTypes,"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,184,"Object[] constructorArgs, Method[] mockedMethods) {"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,185,"return (MockClassControl<T>) createNiceControl(classToMock,"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,186,mockedMethods);
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,189,"private MockClassControl(MocksControl ctrl, Class<T> classToMock,"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,190,Method[] mockedMethods) {
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,191,"super(ctrl, classToMock);"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,192,// Set the mocked methods on the interceptor
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,193,getInterceptor(getMock()).setMockedMethods(mockedMethods);
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,196,"private MockClassControl(MocksControl ctrl, Class<T> classToMock) {"
True,src/org/easymock/MockClassControl.java,src/org/easymock/MockClassControl.java,197,"super(ctrl, classToMock);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,5,package org.easymock;
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,7,import static org.easymock.EasyMock.expect;
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,9,import org.easymock.classextension.*;
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,10,import org.easymock.internal.*;
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,13,* A <code>MockControl</code> object controls the behavior of its associated
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,14,"* mock object. For more information, see the EasyMock documentation."
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,16,"* @deprecated Since EasyMock 2.0, static methods on <code>EasyMock</code> are"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,17,* used to create and control mock objects.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,19,public class MockControl<T> {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,20,private final T mock;
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,22,private final MocksControl ctrl;
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,24,"protected MockControl(MocksControl ctrl, Class<T> toMock) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,25,this.ctrl = ctrl;
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,26,this.mock = ctrl.createMock(toMock);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,30,* Creates a mock control object for the specified interface. The
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,31,* <code>MockControl</code> and its associated mock object will not check
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,32,* the order of expected method calls. An unexpected method call on the mock
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,33,* object will lead to an <code>AssertionError</code>.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,35,* @param toMock
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,36,*            the class of the interface to mock.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,37,* @return the mock control.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,39,public static <T> MockControl<T> createControl(Class<T> toMock) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,40,"return new MockControl<T>((MocksControl) EasyMock.createControl(),"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,41,toMock);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,45,* Creates a mock control object for the specified interface. The
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,46,* <code>MockControl</code> and its associated mock object will check the
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,47,* order of expected method calls. An unexpected method call on the mock
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,48,* object will lead to an <code>AssertionError</code>.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,50,* @param toMock
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,51,*            the class of the interface to mock.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,52,* @return the mock control.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,54,public static <T> MockControl<T> createStrictControl(Class<T> toMock) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,55,return new MockControl<T>(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,56,"(MocksControl) EasyMock.createStrictControl(), toMock);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,60,* Creates a mock control object for the specified interface. The
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,61,* <code>MockControl</code> and its associated mock object will not check
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,62,* the order of expected method calls. An unexpected method call on the mock
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,63,"* object will return an empty value (0, null, false)."
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,65,* @param toMock
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,66,*            the class of the interface to mock.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,67,* @return the mock control.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,69,public static <T> MockControl<T> createNiceControl(Class<T> toMock) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,70,"return new MockControl<T>((MocksControl) EasyMock.createNiceControl(),"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,71,toMock);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,75,* Returns the mock object.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,77,* @return the mock object of this control
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,79,public T getMock() {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,80,return mock;
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,84,* Resets the mock control and the mock object to the state directly after
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,85,* creation.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,87,public final void reset() {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,88,ctrl.reset();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,92,* Switches the mock object from record state to replay state. For more
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,93,"* information, see the EasyMock documentation."
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,95,* @throws IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,96,*             if the mock object already is in replay state.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,98,public void replay() {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,99,ctrl.replay();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,103,"* Verifies that all expectations have been met. For more information, see"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,104,* the EasyMock documentation.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,106,* @throws IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,107,*             if the mock object is in record state.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,108,* @throws AssertionError
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,109,*             if any expectation has not been met.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,111,public void verify() {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,112,ctrl.verify();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,116,"* Records that the mock object will expect the last method call once, and"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,117,* will react by returning silently.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,119,* @exception IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,120,"*                if the mock object is in replay state, if no method was"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,121,"*                called on the mock object before, or if the last method"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,122,*                called on the mock was no void method.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,124,public void setVoidCallable() {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,125,expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,126,"""method call on the mock needed before setting void callable"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,127,.once();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,131,"* Records that the mock object will expect the last method call once, and"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,132,* will react by throwing the provided Throwable.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,134,* @param throwable
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,135,*            the Throwable to throw.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,136,* @exception IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,137,*                if the mock object is in replay state or if no method was
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,138,*                called on the mock object before.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,139,* @exception IllegalArgumentException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,140,*                if the last method called on the mock cannot throw the
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,141,*                provided Throwable.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,142,* @exception NullPointerException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,143,*                if throwable is null.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,145,public void setThrowable(Throwable throwable) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,146,expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,147,"""method call on the mock needed before setting Throwable"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,148,.andThrow(throwable).once();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,152,"* Records that the mock object will expect the last method call once, and"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,153,* will react by returning the provided return value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,155,* @param value
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,156,*            the return value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,157,* @throws IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,158,"*             if the mock object is in replay state, if no method was"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,159,*             called on the mock object before. or if the last method
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,160,*             called on the mock does not return <code>boolean</code>.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,162,public void setReturnValue(Object value) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,163,expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,164,"""method call on the mock needed before setting return value"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,165,.andReturn(value).once();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,169,* Records that the mock object will expect the last method call a fixed
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,170,"* number of times, and will react by returning silently."
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,172,* @param times
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,173,*            the number of times that the call is expected.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,174,* @exception IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,175,"*                if the mock object is in replay state, if no method was"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,176,"*                called on the mock object before, or if the last method"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,177,*                called on the mock was no void method.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,179,public void setVoidCallable(int times) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,180,expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,181,"""method call on the mock needed before setting void callable"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,182,.times(times);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,186,* Records that the mock object will expect the last method call a fixed
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,187,"* number of times, and will react by throwing the provided Throwable."
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,189,* @param throwable
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,190,*            the Throwable to throw.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,191,* @param times
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,192,*            the number of times that the call is expected.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,193,* @exception IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,194,*                if the mock object is in replay state or if no method was
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,195,*                called on the mock object before.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,196,* @exception IllegalArgumentException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,197,*                if the last method called on the mock cannot throw the
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,198,*                provided Throwable.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,199,* @exception NullPointerException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,200,*                if throwable is null.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,202,"public void setThrowable(Throwable throwable, int times) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,203,expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,204,"""method call on the mock needed before setting Throwable"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,205,.andThrow(throwable).times(times);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,209,* Records that the mock object will expect the last method call a fixed
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,210,"* number of times, and will react by returning the provided return value."
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,212,* @param value
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,213,*            the return value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,214,* @param times
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,215,*            the number of times that the call is expected.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,216,* @throws IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,217,"*             if the mock object is in replay state, if no method was"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,218,*             called on the mock object before. or if the last method
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,219,*             called on the mock does not return <code>boolean</code>.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,221,"public void setReturnValue(Object value, int times) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,222,expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,223,"""method call on the mock needed before setting return value"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,224,.andReturn(value).times(times);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,228,* Records that the mock object will expect the last method call a fixed
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,229,"* number of times, and will react by returning the provided return value."
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,231,* @param value
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,232,*            the return value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,233,* @param range
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,234,*            the number of times that the call is expected.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,235,* @throws IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,236,"*             if the mock object is in replay state, if no method was"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,237,*             called on the mock object before. or if the last method
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,238,*             called on the mock does not return <code>boolean</code>.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,240,"public void setReturnValue(Object value, Range range) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,241,IExpectationSetters setter = expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,242,"""method call on the mock needed before setting return value"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,243,.andReturn(value);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,244,"callWithConvertedRange(setter, range);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,248,* Records that the mock object will by default allow the last method
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,249,* specified by a method call.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,251,* @exception IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,252,"*                if the mock object is in replay state, if no method was"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,253,"*                called on the mock object before, or if the last method"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,254,*                called on the mock was no void method.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,256,public void setDefaultVoidCallable() {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,257,"((MocksControl) expectLastCall(""method call on the mock needed before setting default void callable""))"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,258,.setLegacyDefaultVoidCallable();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,262,* Records that the mock object will by default allow the last method
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,263,"* specified by a method call, and will react by throwing the provided"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,264,* Throwable.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,266,* @param throwable
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,267,*            throwable the throwable to be thrown
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,268,* @exception IllegalArgumentException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,269,*                if the last method called on the mock cannot throw the
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,270,*                provided Throwable.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,271,* @exception NullPointerException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,272,*                if throwable is null.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,273,* @exception IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,274,"*                if the mock object is in replay state, or if no method was"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,275,*                called on the mock object before.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,277,public void setDefaultThrowable(Throwable throwable) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,278,ctrl.setLegacyDefaultThrowable(throwable);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,282,* Records that the mock object will by default allow the last method
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,283,"* specified by a method call, and will react by returning the provided"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,284,* return value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,286,* @param value
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,287,*            the return value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,288,* @throws IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,289,"*             if the mock object is in replay state, if no method was"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,290,*             called on the mock object before. or if the last method
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,291,*             called on the mock does not return <code>boolean</code>.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,293,public void setDefaultReturnValue(Object value) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,294,ctrl.setLegacyDefaultReturnValue(value);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,298,* Sets the ArgumentsMatcher for the last method called on the mock object.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,299,* The matcher must be set before any behavior for the method is defined.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,301,* @throws IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,302,"*             if called in replay state, or if no method was called on the"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,303,*             mock object before.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,305,public void setMatcher(ArgumentsMatcher matcher) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,306,ctrl.setLegacyMatcher(matcher);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,310,* Records that the mock object will expect the last method call between
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,311,"* <code>minCount</code> and <code>maxCount</code> times, and will react"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,312,* by returning silently.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,314,* @param minCount
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,315,*            the minimum number of times that the call is expected.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,316,* @param maxCount
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,317,*            the maximum number of times that the call is expected.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,318,* @exception IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,319,"*                if the mock object is in replay state, if no method was"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,320,"*                called on the mock object before, or if the last method"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,321,*                called on the mock was no void method.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,323,"public void setVoidCallable(int minCount, int maxCount) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,324,expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,325,"""method call on the mock needed before setting void callable"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,326,".times(minCount, maxCount);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,329,public void setVoidCallable(Range range) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,330,"IExpectationSetters setter = expectLastCall(""method call on the mock needed before setting void callable"");"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,331,"callWithConvertedRange(setter, range);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,335,* Records that the mock object will expect the last method call between
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,336,"* <code>minCount</code> and <code>maxCount</code> times, and will react"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,337,* by throwing the provided Throwable.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,339,* @param throwable
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,340,*            the Throwable to throw.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,341,* @param minCount
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,342,*            the minimum number of times that the call is expected.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,343,* @param maxCount
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,344,*            the maximum number of times that the call is expected.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,345,* @exception IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,346,*                if the mock object is in replay state or if no method was
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,347,*                called on the mock object before.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,348,* @exception IllegalArgumentException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,349,*                if the last method called on the mock cannot throw the
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,350,*                provided Throwable.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,351,* @exception NullPointerException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,352,*                if throwable is null.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,354,"public void setThrowable(Throwable throwable, int minCount, int maxCount) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,355,expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,356,"""method call on the mock needed before setting Throwable"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,357,".andThrow(throwable).times(minCount, maxCount);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,360,"public void setThrowable(Throwable throwable, Range range) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,361,IExpectationSetters setter = expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,362,"""method call on the mock needed before setting Throwable"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,363,.andThrow(throwable);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,364,"callWithConvertedRange(setter, range);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,368,* Records that the mock object will expect the last method call between
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,369,"* <code>minCount</code> and <code>maxCount</code> times, and will react"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,370,* by returning the provided return value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,372,* @param value
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,373,*            the return value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,374,* @param minCount
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,375,*            the minimum number of times that the call is expected.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,376,* @param maxCount
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,377,*            the maximum number of times that the call is expected.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,378,* @throws IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,379,"*             if the mock object is in replay state, if no method was"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,380,*             called on the mock object before. or if the last method
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,381,*             called on the mock does not return <code>boolean</code>.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,383,"public void setReturnValue(Object value, int minCount, int maxCount) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,384,expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,385,"""method call on the mock needed before setting return value"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,386,".andReturn(value).times(minCount, maxCount);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,390,* Exactly one call.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,392,public static final Range ONE = MocksControl.ONCE;
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,395,* One or more calls.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,397,public static final Range ONE_OR_MORE = MocksControl.AT_LEAST_ONCE;
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,400,* Zero or more calls.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,402,public static final Range ZERO_OR_MORE = MocksControl.ZERO_OR_MORE;
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,405,* Matches if each expected argument is equal to the corresponding actual
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,406,* argument.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,408,public static final ArgumentsMatcher EQUALS_MATCHER = new EqualsMatcher();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,411,* Matches always.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,413,public static final ArgumentsMatcher ALWAYS_MATCHER = new AlwaysMatcher();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,416,* Matches if each expected argument is equal to the corresponding actual
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,417,* argument for non-array arguments; array arguments are compared with the
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,418,* appropriate <code>java.util.Arrays.equals()</code> -method.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,420,public static final ArgumentsMatcher ARRAY_MATCHER = new ArrayMatcher();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,423,* Sets the default ArgumentsMatcher for all methods of the mock object. The
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,424,* matcher must be set before any behavior is defined on the mock object.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,426,* @throws IllegalStateException
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,427,"*             if called in replay state, or if any behavior is already"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,428,*             defined on the mock object.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,430,public void setDefaultMatcher(ArgumentsMatcher matcher) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,431,ctrl.setLegacyDefaultMatcher(matcher);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,435,"* Same as {@link MockControl#setReturnValue(Object)}. For explanation, see"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,436,"* ""Convenience Methods for Return Values"" in the EasyMock documentation."
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,438,* @param ignored
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,439,*            an ignored value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,441,"public <V1, V2 extends V1> void expectAndReturn(V1 ignored, V2 value) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,442,EasyMock.expectLastCall().andReturn(value).once();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,445,"public void expectAndReturn(int ignored, int value) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,446,"this.expectAndReturn((Object) ignored, (Object) value);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,450,"* Same as {@link MockControl#setReturnValue(Object, Range)}. For"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,451,"* explanation, see ""Convenience Methods for Return Values"" in the EasyMock"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,452,* documentation.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,454,* @param ignored
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,455,*            an ignored value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,457,"public <V1, V2 extends V1> void expectAndReturn(V1 ignored, V2 value,"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,458,Range range) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,459,IExpectationSetters expectAndReturn = EasyMock.expectLastCall()
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,460,.andReturn(value);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,461,"callWithConvertedRange(expectAndReturn, range);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,464,"public void expectAndReturn(int ignored, int value, Range range) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,465,"this.expectAndReturn((Object) ignored, (Object) value, range);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,469,"* Same as {@link MockControl#setReturnValue(Object, int)}. For"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,470,"* explanation, see ""Convenience Methods for Return Values"" in the EasyMock"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,471,* documentation.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,473,* @param ignored
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,474,*            an ignored value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,476,"public <V1, V2 extends V1> void expectAndReturn(V1 ignored, V2 value,"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,477,int count) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,478,EasyMock.expectLastCall().andReturn(value).times(count);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,481,"public void expectAndReturn(int ignored, int value, int count) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,482,"this.expectAndReturn((Object) ignored, (Object) value, count);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,486,"* Same as {@link MockControl#setReturnValue(Object, int, int)}. For"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,487,"* explanation, see ""Convenience Methods for Return Values"" in the EasyMock"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,488,* documentation.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,490,* @param ignored
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,491,*            an ignored value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,493,"public <V1, V2 extends V1> void expectAndReturn(V1 ignored, V2 value,"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,494,"int min, int max) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,495,"EasyMock.expectLastCall().andReturn(value).times(min, max);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,498,"public void expectAndReturn(int ignored, int value, int min, int max) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,499,"this.expectAndReturn((Object) ignored, (Object) value, min, max);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,503,"* Same as {@link MockControl#setThrowable(Throwable)}. For explanation,"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,504,"* see ""Convenience Methods for Throwables"" in the EasyMock documentation."
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,506,* @param ignored
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,507,*            an ignored value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,509,"public void expectAndThrow(Object ignored, Throwable throwable) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,510,EasyMock.expect(ignored).andThrow(throwable).once();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,514,"* Same as {@link MockControl#setThrowable(Throwable, Range)}. For"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,515,"* explanation, see ""Convenience Methods for Throwables"" in the EasyMock"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,516,* documentation.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,518,* @param ignored
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,519,*            an ignored value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,521,"public void expectAndThrow(Object ignored, Throwable throwable, Range range) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,522,IExpectationSetters setter = EasyMock.expect(ignored).andThrow(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,523,throwable);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,524,"callWithConvertedRange(setter, range);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,528,"* Same as {@link MockControl#setThrowable(Throwable, int)}. For"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,529,"* explanation, see ""Convenience Methods for Throwables"" in the EasyMock"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,530,* documentation.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,532,* @param ignored
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,533,*            an ignored value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,535,"public void expectAndThrow(Object ignored, Throwable throwable, int count) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,536,expect(ignored).andThrow(throwable).times(count);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,540,"* Same as {@link MockControl#setThrowable(Throwable, int, int)}. For"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,541,"* explanation, see ""Convenience Methods for Throwables"" in the EasyMock"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,542,* documentation.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,544,* @param ignored
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,545,*            an ignored value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,547,"public void expectAndThrow(Object ignored, Throwable throwable, int min,"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,548,int max) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,549,"expect(ignored).andThrow(throwable).times(min, max);"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,553,* Same as {@link MockControl#setDefaultReturnValue(Object)}. For
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,554,"* explanation, see ""Convenience Methods for Return Values"" in the EasyMock"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,555,* documentation.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,557,* @param ignored
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,558,*            an ignored value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,560,"public <V1, V2 extends V1> void expectAndDefaultReturn(V1 ignored, V2 value) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,561,EasyMock.expectLastCall().andStubReturn(value);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,565,* Same as {@link MockControl#setDefaultThrowable(Throwable)}. For
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,566,"* explanation, see ""Convenience Methods for Throwables"" in the EasyMock"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,567,* documentation.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,569,* @param ignored
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,570,*            an ignored value.
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,572,"public void expectAndDefaultThrow(Object ignored, Throwable throwable) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,573,expectLastCall(
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,574,"""method call on the mock needed before setting default Throwable"")"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,575,.andStubThrow(throwable);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,578,private IExpectationSetters<Object> expectLastCall(String failureMessage) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,579,try {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,580,return EasyMock.expectLastCall();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,581,} catch (IllegalStateException e) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,582,throw new IllegalStateException(failureMessage);
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,586,"private void callWithConvertedRange(IExpectationSetters setter, Range range) {"
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,587,if (range == ONE) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,588,setter.once();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,589,} else if (range == ONE_OR_MORE) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,590,setter.atLeastOnce();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,591,} else if (range == ZERO_OR_MORE) {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,592,setter.anyTimes();
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,593,} else {
True,src/org/easymock/MockControl.java,src/org/easymock/MockControl.java,594,"throw new IllegalArgumentException(""Unexpected Range"");"
True,src/org/easymock/ObjenesisClassInstantiator.java,src/org/easymock/ObjenesisClassInstantiator.java,1,package org.easymock;
True,src/org/easymock/ObjenesisClassInstantiator.java,src/org/easymock/ObjenesisClassInstantiator.java,3,import org.objenesis.ObjenesisHelper;
True,src/org/easymock/ObjenesisClassInstantiator.java,src/org/easymock/ObjenesisClassInstantiator.java,5,public class ObjenesisClassInstantiator {
True,src/org/easymock/ObjenesisClassInstantiator.java,src/org/easymock/ObjenesisClassInstantiator.java,7,public static Object newInstance(Class clazz) throws InstantiationException {
True,src/org/easymock/ObjenesisClassInstantiator.java,src/org/easymock/ObjenesisClassInstantiator.java,8,return ObjenesisHelper.newInstance(clazz);
True,src/org/easymock/internal/AlwaysMatcher.java,src/org/easymock/internal/AlwaysMatcher.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/AlwaysMatcher.java,src/org/easymock/internal/AlwaysMatcher.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/AlwaysMatcher.java,src/org/easymock/internal/AlwaysMatcher.java,5,package org.easymock.internal;
True,src/org/easymock/internal/AlwaysMatcher.java,src/org/easymock/internal/AlwaysMatcher.java,7,import org.easymock.AbstractMatcher;
True,src/org/easymock/internal/AlwaysMatcher.java,src/org/easymock/internal/AlwaysMatcher.java,9,public class AlwaysMatcher extends AbstractMatcher {
True,src/org/easymock/internal/AlwaysMatcher.java,src/org/easymock/internal/AlwaysMatcher.java,10,"public boolean matches(Object[] expected, Object[] actual) {"
True,src/org/easymock/internal/AlwaysMatcher.java,src/org/easymock/internal/AlwaysMatcher.java,11,return true;
True,src/org/easymock/internal/AlwaysMatcher.java,src/org/easymock/internal/AlwaysMatcher.java,14,protected String argumentToString(Object argument) {
True,src/org/easymock/internal/AlwaysMatcher.java,src/org/easymock/internal/AlwaysMatcher.java,15,"return ""<any>"";"
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,5,package org.easymock.internal;
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,7,import org.easymock.AbstractMatcher;
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,8,import org.easymock.internal.matchers.ArrayEquals;
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,10,public class ArrayMatcher extends AbstractMatcher {
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,11,public String argumentToString(Object argument) {
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,12,StringBuffer result = new StringBuffer();
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,13,new ArrayEquals(argument).appendTo(result);
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,14,return result.toString();
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,17,"public boolean argumentMatches(Object expected, Object actual) {"
True,src/org/easymock/internal/ArrayMatcher.java,src/org/easymock/internal/ArrayMatcher.java,18,return new ArrayEquals(expected).matches(actual);
True,src/org/easymock/internal/AssertionErrorWrapper.java,src/org/easymock/internal/AssertionErrorWrapper.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/AssertionErrorWrapper.java,src/org/easymock/internal/AssertionErrorWrapper.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/AssertionErrorWrapper.java,src/org/easymock/internal/AssertionErrorWrapper.java,5,package org.easymock.internal;
True,src/org/easymock/internal/AssertionErrorWrapper.java,src/org/easymock/internal/AssertionErrorWrapper.java,7,public class AssertionErrorWrapper extends RuntimeException {
True,src/org/easymock/internal/AssertionErrorWrapper.java,src/org/easymock/internal/AssertionErrorWrapper.java,8,private final AssertionError error;
True,src/org/easymock/internal/AssertionErrorWrapper.java,src/org/easymock/internal/AssertionErrorWrapper.java,10,public AssertionErrorWrapper(AssertionError error) {
True,src/org/easymock/internal/AssertionErrorWrapper.java,src/org/easymock/internal/AssertionErrorWrapper.java,11,this.error = error;
True,src/org/easymock/internal/AssertionErrorWrapper.java,src/org/easymock/internal/AssertionErrorWrapper.java,14,public AssertionError getAssertionError() {
True,src/org/easymock/internal/AssertionErrorWrapper.java,src/org/easymock/internal/AssertionErrorWrapper.java,15,return error;
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,2,"* Copyright (c) 2003-2006 OFFIS, Henri Tremblay."
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,5,package org.easymock.internal;
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,7,import java.lang.reflect.Proxy;
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,9,import net.sf.cglib.proxy.Enhancer;
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,10,import net.sf.cglib.proxy.Factory;
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,12,import org.easymock.internal.ClassProxyFactory.MockMethodInterceptor;
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,14,public final class ClassExtensionHelper {
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,16,private ClassExtensionHelper() {
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,19,public static MockMethodInterceptor getInterceptor(Object mock) {
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,20,Factory factory = (Factory) mock;
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,21,return (MockMethodInterceptor) factory.getCallback(0);
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,24,public static MocksControl getControl(Object mock) {
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,25,ObjectMethodsFilter<MockInvocationHandler> handler;
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,27,try {
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,28,if (Enhancer.isEnhanced(mock.getClass())) {
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,29,handler = (ObjectMethodsFilter) getInterceptor(mock)
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,30,.getHandler();
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,31,} else if (Proxy.isProxyClass(mock.getClass())) {
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,32,handler = (ObjectMethodsFilter) Proxy
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,33,.getInvocationHandler(mock);
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,34,} else {
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,35,throw new RuntimeExceptionWrapper(new IllegalArgumentException(
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,36,"""Not a mock: "" + mock.getClass().getName()));"
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,39,return handler.getDelegate().getControl();
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,40,} catch (ClassCastException e) {
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,41,throw new RuntimeExceptionWrapper(new IllegalArgumentException(
True,src/org/easymock/internal/ClassExtensionHelper.java,src/org/easymock/internal/ClassExtensionHelper.java,42,"""Not a mock: "" + mock.getClass().getName()));"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,2,"* Copyright (c) 2003-2006 OFFIS, Henri Tremblay."
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,5,package org.easymock.internal;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,7,import java.lang.reflect.*;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,8,import java.lang.reflect.InvocationHandler;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,9,import java.util.*;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,11,import net.sf.cglib.core.*;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,12,import net.sf.cglib.proxy.*;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,14,import org.easymock.ObjenesisClassInstantiator;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,15,import org.mockito.MockAwareInvocationHandler;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,18,* Factory generating a mock for a class.
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,19,* <p>
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,20,* Note that this class is stateful
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,22,public class ClassProxyFactory<T> {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,24,public static interface MockMethodInterceptor extends MethodInterceptor {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,25,InvocationHandler getHandler();
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,27,void setMockedMethods(Method[] mockedMethods);
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,30,"@SuppressWarnings(""unchecked"")"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,31,"public T createProxy(Class<T> toMock, final MockAwareInvocationHandler handler) {"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,33,// Dirty trick to fix ObjectMethodsFilter
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,34,"// It will replace the equals, hashCode, toString methods it kept that"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,35,// are the ones
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,36,// from Object.class by the correct ones since they might have been
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,37,// overloaded
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,38,// in the mocked class.
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,39,if (!toMock.isInterface()) {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,40,try {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,42,"updateMethod(handler, toMock.getMethod(""equals"","
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,43,new Class[] { Object.class }));
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,44,"updateMethod(handler, toMock.getMethod(""hashCode"", new Class[0]));"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,45,"updateMethod(handler, toMock.getMethod(""toString"", new Class[0]));"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,46,} catch (NoSuchMethodException e) {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,47,throw new RuntimeException(
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,48,"""We strangly failed to retrieve methods that always exist on an object..."");"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,52,MethodInterceptor interceptor = new MockMethodInterceptor() {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,54,private Set<Method> mockedMethods;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,56,"public Object intercept(Object obj, Method method, Object[] args,"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,57,MethodProxy proxy) throws Throwable {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,58,if (method.isBridge()) {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,59,"return proxy.invokeSuper(obj, args);"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,61,if (mockedMethods != null && !mockedMethods.contains(method)) {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,62,"return proxy.invokeSuper(obj, args);"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,64,"return handler.invoke(obj, method, args);"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,67,public InvocationHandler getHandler() {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,68,return handler;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,71,public void setMockedMethods(Method[] mockedMethods) {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,72,this.mockedMethods = new HashSet<Method>(Arrays
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,73,.asList(mockedMethods));
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,77,// Create the mock
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,78,Enhancer enhancer = new Enhancer() {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,80,* Filter all private constructors but do not check that there are
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,81,* some left
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,83,"protected void filterConstructors(Class sc, List constructors) {"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,84,"CollectionUtils.filter(constructors, new VisibilityPredicate("
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,85,"sc, true));"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,89,//TODO not tested
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,90,if (toMock.isInterface()) {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,91,enhancer.setInterfaces(new Class[] { toMock });
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,92,} else {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,93,enhancer.setSuperclass(toMock);
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,96,enhancer.setCallbackType(interceptor.getClass());
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,98,Class mockClass = enhancer.createClass();
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,99,"Enhancer.registerCallbacks(mockClass, new Callback[] { interceptor });"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,101,Factory mock;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,102,try {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,103,mock = (Factory) ObjenesisClassInstantiator.newInstance(mockClass);
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,104,} catch (InstantiationException e) {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,105,"throw new RuntimeException(""Fail to instantiate mock for "" + toMock"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,106,"+ "" on "" + System.getProperty(""java.vm.vendor"") + "" JVM"");"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,109,"// This call is required. Cglib has some ""magic code"" making sure a"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,110,// callback is used by only one instance of a given class. So only the
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,111,// instance created right after registering the callback will get it.
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,112,"// However, this is done in the construtor which I'm bypassing to"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,113,// allow class instantiation without calling a constructor.
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,114,"// Fortunatly, the ""magic code"" is also called in getCallback which is"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,115,// why I'm calling it here mock.getCallback(0);
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,116,mock.getCallback(0);
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,118,handler.setMock(mock);
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,119,return (T) mock;
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,122,"private void updateMethod(InvocationHandler objectMethodsFilter,"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,123,Method correctMethod) {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,124,"Field methodField = retrieveField(ObjectMethodsFilter.class,"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,125,"correctMethod.getName() + ""Method"");"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,126,"updateField(objectMethodsFilter, correctMethod, methodField);"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,129,"private Field retrieveField(Class clazz, String field) {"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,130,try {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,131,return clazz.getDeclaredField(field);
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,132,} catch (NoSuchFieldException e) {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,133,throw new InternalError(
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,134,"""There must be some refactoring because the "" + field"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,135,"+ "" field was there..."");"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,139,"private void updateField(Object instance, Object value, Field field) {"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,140,boolean accessible = field.isAccessible();
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,141,field.setAccessible(true);
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,142,try {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,143,"field.set(instance, value);"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,144,} catch (IllegalAccessException e) {
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,145,throw new InternalError(
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,146,"""Should be accessible since we set it ourselves"");"
True,src/org/easymock/internal/ClassProxyFactory.java,src/org/easymock/internal/ClassProxyFactory.java,148,field.setAccessible(accessible);
True,src/org/easymock/internal/EqualsMatcher.java,src/org/easymock/internal/EqualsMatcher.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/EqualsMatcher.java,src/org/easymock/internal/EqualsMatcher.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/EqualsMatcher.java,src/org/easymock/internal/EqualsMatcher.java,5,package org.easymock.internal;
True,src/org/easymock/internal/EqualsMatcher.java,src/org/easymock/internal/EqualsMatcher.java,7,import org.easymock.AbstractMatcher;
True,src/org/easymock/internal/EqualsMatcher.java,src/org/easymock/internal/EqualsMatcher.java,9,"@SuppressWarnings(""deprecation"")"
True,src/org/easymock/internal/EqualsMatcher.java,src/org/easymock/internal/EqualsMatcher.java,10,public class EqualsMatcher extends AbstractMatcher {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,5,package org.easymock.internal;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,7,import java.lang.reflect.Method;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,8,import java.util.ArrayList;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,9,import java.util.Iterator;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,10,import java.util.List;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,12,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,13,import org.easymock.internal.matchers.Equals;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,15,public class ExpectedInvocation {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,17,protected final Invocation invocation;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,19,"@SuppressWarnings(""deprecation"")"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,20,private final org.easymock.ArgumentsMatcher matcher;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,22,private final List<IArgumentMatcher> matchers;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,24,"public ExpectedInvocation(Invocation invocation,"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,25,List<IArgumentMatcher> matchers) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,26,"this(invocation, matchers, null);"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,29,"private ExpectedInvocation(Invocation invocation,"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,30,"List<IArgumentMatcher> matchers, @SuppressWarnings(""deprecation"")"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,31,org.easymock.ArgumentsMatcher matcher) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,32,this.invocation = invocation;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,33,this.matcher = matcher;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,34,"this.matchers = (matcher == null) ? createMissingMatchers(invocation,"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,35,matchers) : null;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,38,"private List<IArgumentMatcher> createMissingMatchers(Invocation invocation,"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,39,List<IArgumentMatcher> matchers) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,40,if (matchers != null) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,41,if (matchers.size() != invocation.getArguments().length) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,42,"throw new IllegalStateException("""""
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,43,+ invocation.getArguments().length
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,44,"+ "" matchers expected, "" + matchers.size()"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,45,"+ "" recorded."");"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,48,return matchers;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,50,List<IArgumentMatcher> result = new ArrayList<IArgumentMatcher>();
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,51,for (Object argument : invocation.getArguments()) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,52,result.add(new Equals(argument));
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,54,return result;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,57,public boolean equals(Object o) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,58,if (o == null || !this.getClass().equals(o.getClass()))
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,59,return false;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,61,ExpectedInvocation other = (ExpectedInvocation) o;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,62,return this.invocation.equals(other.invocation)
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,63,&& ((this.matcher == null && other.matcher == null) || (this.matcher != null && this.matcher
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,64,.equals(other.matcher)))
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,65,&& ((this.matchers == null && other.matchers == null) || (this.matchers != null && this.matchers
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,66,.equals(other.matchers)));
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,69,public int hashCode() {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,70,return 1; //invocation.hashCode();
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,73,public boolean matches(Invocation actual) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,74,return matchers != null ? this.invocation.getMock().equals(
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,75,actual.getMock())
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,76,&& this.invocation.getMethod().equals(actual.getMethod())
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,77,&& matches(actual.getArguments()) : this.invocation.matches(
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,78,"actual, matcher);"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,81,private boolean matches(Object[] arguments) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,82,if (arguments.length != matchers.size()) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,83,return false;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,85,for (int i = 0; i < arguments.length; i++) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,86,if (!matchers.get(i).matches(arguments[i])) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,87,return false;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,90,return true;
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,93,public String toString() {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,94,return matchers != null ? myToString() : invocation.toString(matcher);
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,97,private String myToString() {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,98,StringBuffer result = new StringBuffer();
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,99,result.append(invocation.getMockAndMethodName());
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,100,"result.append(""("");"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,101,for (Iterator<IArgumentMatcher> it = matchers.iterator(); it.hasNext();) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,102,it.next().appendTo(result);
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,103,if (it.hasNext()) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,104,"result.append("", "");"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,107,"result.append("")"");"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,108,return result.toString();
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,111,public Method getMethod() {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,112,return invocation.getMethod();
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,115,"public ExpectedInvocation withMatcher(@SuppressWarnings(""deprecation"")"
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,116,org.easymock.ArgumentsMatcher matcher) {
True,src/org/easymock/internal/ExpectedInvocation.java,src/org/easymock/internal/ExpectedInvocation.java,117,"return new ExpectedInvocation(invocation, null, matcher);"
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,5,package org.easymock.internal;
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,7,public class ExpectedInvocationAndResult {
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,8,ExpectedInvocation expectedInvocation;
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,10,Result result;
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,12,"public ExpectedInvocationAndResult(ExpectedInvocation expectedInvocation,"
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,13,Result result) {
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,14,this.expectedInvocation = expectedInvocation;
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,15,this.result = result;
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,18,public ExpectedInvocation getExpectedInvocation() {
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,19,return expectedInvocation;
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,22,public Result getResult() {
True,src/org/easymock/internal/ExpectedInvocationAndResult.java,src/org/easymock/internal/ExpectedInvocationAndResult.java,23,return result;
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,5,package org.easymock.internal;
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,7,public class ExpectedInvocationAndResults {
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,8,ExpectedInvocation expectedInvocation;
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,10,Results results;
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,12,"public ExpectedInvocationAndResults(ExpectedInvocation expectedInvocation,"
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,13,Results results) {
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,14,this.expectedInvocation = expectedInvocation;
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,15,this.results = results;
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,18,public ExpectedInvocation getExpectedInvocation() {
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,19,return expectedInvocation;
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,22,public Results getResults() {
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,23,return results;
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,26,@Override
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,27,public String toString() {
True,src/org/easymock/internal/ExpectedInvocationAndResults.java,src/org/easymock/internal/ExpectedInvocationAndResults.java,28,"return expectedInvocation.toString() + "": "" + results.toString();"
True,src/org/easymock/internal/ILegacyMatcherMethods.java,src/org/easymock/internal/ILegacyMatcherMethods.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/ILegacyMatcherMethods.java,src/org/easymock/internal/ILegacyMatcherMethods.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/ILegacyMatcherMethods.java,src/org/easymock/internal/ILegacyMatcherMethods.java,5,package org.easymock.internal;
True,src/org/easymock/internal/ILegacyMatcherMethods.java,src/org/easymock/internal/ILegacyMatcherMethods.java,7,import java.lang.reflect.Method;
True,src/org/easymock/internal/ILegacyMatcherMethods.java,src/org/easymock/internal/ILegacyMatcherMethods.java,9,import org.easymock.ArgumentsMatcher;
True,src/org/easymock/internal/ILegacyMatcherMethods.java,src/org/easymock/internal/ILegacyMatcherMethods.java,11,public interface ILegacyMatcherMethods {
True,src/org/easymock/internal/ILegacyMatcherMethods.java,src/org/easymock/internal/ILegacyMatcherMethods.java,13,void setDefaultMatcher(ArgumentsMatcher matcher);
True,src/org/easymock/internal/ILegacyMatcherMethods.java,src/org/easymock/internal/ILegacyMatcherMethods.java,15,"void setMatcher(Method method, ArgumentsMatcher matcher);"
True,src/org/easymock/internal/ILegacyMethods.java,src/org/easymock/internal/ILegacyMethods.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/ILegacyMethods.java,src/org/easymock/internal/ILegacyMethods.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/ILegacyMethods.java,src/org/easymock/internal/ILegacyMethods.java,5,package org.easymock.internal;
True,src/org/easymock/internal/ILegacyMethods.java,src/org/easymock/internal/ILegacyMethods.java,7,public interface ILegacyMethods extends ILegacyMatcherMethods {
True,src/org/easymock/internal/ILegacyMethods.java,src/org/easymock/internal/ILegacyMethods.java,8,void setDefaultReturnValue(Object value);
True,src/org/easymock/internal/ILegacyMethods.java,src/org/easymock/internal/ILegacyMethods.java,10,void setDefaultThrowable(Throwable throwable);
True,src/org/easymock/internal/ILegacyMethods.java,src/org/easymock/internal/ILegacyMethods.java,12,void setDefaultVoidCallable();
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,5,package org.easymock.internal;
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,7,public interface IMocksBehavior extends ILegacyMatcherMethods {
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,9,// record
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,10,"void addExpected(ExpectedInvocation expected, Result result, Range count);"
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,12,"void addStub(ExpectedInvocation expected, Result result);"
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,14,void checkOrder(boolean value);
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,16,// replay
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,17,Result addActual(Invocation invocation);
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,19,// verify
True,src/org/easymock/internal/IMocksBehavior.java,src/org/easymock/internal/IMocksBehavior.java,20,void verify();
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,5,package org.easymock.internal;
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,7,import org.easymock.IAnswer;
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,9,public interface IMocksControlState extends ILegacyMethods {
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,11,Object invoke(Invocation invocation) throws Throwable;
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,13,void assertRecordState();
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,15,void andReturn(Object value);
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,17,void andThrow(Throwable throwable);
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,19,void andAnswer(IAnswer answer);
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,21,void andStubReturn(Object value);
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,23,void andStubThrow(Throwable throwable);
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,25,void andStubAnswer(IAnswer answer);
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,27,void asStub();
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,29,void times(Range range);
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,31,void checkOrder(boolean value);
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,33,void replay();
True,src/org/easymock/internal/IMocksControlState.java,src/org/easymock/internal/IMocksControlState.java,35,void verify();
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,5,package org.easymock.internal;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,7,import static java.lang.Character.*;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,9,import java.lang.reflect.Method;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,11,import org.easymock.ArgumentsMatcher;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,12,import org.easymock.internal.matchers.ArrayEquals;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,14,public class Invocation {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,16,private final Object mock;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,18,private final Method method;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,20,private final Object[] arguments;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,22,"public Invocation(Object mock, Method method, Object[] args) {"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,23,this.mock = mock;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,24,this.method = method;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,25,"this.arguments = expandVarArgs(method.isVarArgs(), args);"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,28,"private static Object[] expandVarArgs(final boolean isVarArgs,"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,29,final Object[] args) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,30,if (!isVarArgs || isVarArgs && args[args.length - 1] != null
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,31,&& !args[args.length - 1].getClass().isArray()) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,32,return args == null ? new Object[0] : args;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,34,Object[] varArgs = ArrayEquals.createObjectArray(args[args.length - 1]);
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,35,final int nonVarArgsCount = args.length - 1;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,36,final int varArgsCount = varArgs.length;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,37,Object[] newArgs = new Object[nonVarArgsCount + varArgsCount];
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,38,"System.arraycopy(args, 0, newArgs, 0, nonVarArgsCount);"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,39,"System.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,40,return newArgs;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,43,public Object getMock() {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,44,return mock;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,47,public Method getMethod() {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,48,return method;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,51,public Object[] getArguments() {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,52,return arguments;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,55,public boolean equals(Object o) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,56,if (o == null || !o.getClass().equals(this.getClass()))
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,57,return false;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,59,Invocation other = (Invocation) o;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,61,return this.mock.equals(other.mock) && this.method.equals(other.method)
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,62,&& this.equalArguments(other.arguments);
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,65,//    public int hashCode() {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,66,"//        throw new UnsupportedOperationException(""hashCode() is not implemented"");"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,69,private boolean equalArguments(Object[] arguments) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,70,if (this.arguments.length != arguments.length) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,71,return false;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,73,for (int i = 0; i < this.arguments.length; i++) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,74,Object myArgument = this.arguments[i];
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,75,Object otherArgument = arguments[i];
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,77,if (isPrimitiveParameter(i)) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,78,if (!myArgument.equals(otherArgument)) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,79,return false;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,81,} else {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,82,if (myArgument != otherArgument) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,83,return false;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,87,return true;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,90,private boolean isPrimitiveParameter(int parameterPosition) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,91,Class<?>[] parameterTypes = method.getParameterTypes();
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,92,if (method.isVarArgs()) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,93,"parameterPosition = Math.min(parameterPosition,"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,94,parameterTypes.length - 1);
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,96,return parameterTypes[parameterPosition].isPrimitive();
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,99,"public boolean matches(Invocation actual, ArgumentsMatcher matcher) {"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,100,return this.mock.equals(actual.mock)
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,101,&& this.method.equals(actual.method)
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,102,"&& matcher.matches(this.arguments, actual.arguments);"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,105,public String toString(ArgumentsMatcher matcher) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,106,"return getMockAndMethodName() + ""("" + matcher.toString(arguments) + "")"";"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,109,public String getMockAndMethodName() {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,110,String mockName = mock.toString();
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,111,String methodName = method.getName();
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,112,if (toStringIsDefined(mock) && isJavaIdentifier(mockName)) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,113,"return mockName + ""."" + methodName;"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,114,} else {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,115,return methodName;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,119,private boolean toStringIsDefined(Object o) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,120,try {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,121,"o.getClass().getDeclaredMethod(""toString"", (Class[]) null)"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,122,.getModifiers();
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,123,return true;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,124,} catch (SecurityException ignored) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,126,return false;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,128,} catch (NoSuchMethodException shouldNeverHappen) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,130,"throw new RuntimeException(""The toString() method could not be found!"");"
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,135,public static boolean isJavaIdentifier(String mockName) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,136,if (mockName.length() == 0 || mockName.indexOf(' ') > -1
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,137,|| !Character.isJavaIdentifierStart(mockName.charAt(0))) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,138,return false;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,140,for (char c : mockName.substring(1).toCharArray()) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,141,if (!isJavaIdentifierPart(c)) {
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,142,return false;
True,src/org/easymock/internal/Invocation.java,src/org/easymock/internal/Invocation.java,145,return true;
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,5,package org.easymock.internal;
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,7,import java.util.*;
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,9,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,10,import org.easymock.internal.matchers.And;
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,11,import org.easymock.internal.matchers.Not;
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,12,import org.easymock.internal.matchers.Or;
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,14,public class LastArguments {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,15,private static final ThreadLocal<Stack<Object[]>> threadToCurrentArguments = new ThreadLocal<Stack<Object[]>>();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,17,private static final ThreadLocal<Stack<IArgumentMatcher>> threadToArgumentMatcherStack = new ThreadLocal<Stack<IArgumentMatcher>>();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,19,public static synchronized void reportMatcher(IArgumentMatcher matcher) {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,20,Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,21,if (stack == null) {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,22,stack = new Stack<IArgumentMatcher>();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,23,threadToArgumentMatcherStack.set(stack);
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,25,stack.push(matcher);
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,28,public static synchronized List<IArgumentMatcher> pullMatchers() {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,29,Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,30,if (stack == null) {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,31,return null;
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,33,threadToArgumentMatcherStack.remove();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,34,return new ArrayList<IArgumentMatcher>(stack);
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,37,public static synchronized void reportAnd(int count) {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,38,Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,39,"assertState(stack != null, ""no matchers found."");"
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,40,stack.push(new And(popLastArgumentMatchers(count)));
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,43,public static synchronized void reportNot() {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,44,Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,45,"assertState(stack != null, ""no matchers found."");"
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,46,stack.push(new Not(popLastArgumentMatchers(1).get(0)));
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,49,private static List<IArgumentMatcher> popLastArgumentMatchers(int count) {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,50,Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,51,"assertState(stack != null, ""no matchers found."");"
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,52,"assertState(stack.size() >= count, """" + count + "" matchers expected, """
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,53,"+ stack.size() + "" recorded."");"
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,54,List<IArgumentMatcher> result = new LinkedList<IArgumentMatcher>();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,55,"result.addAll(stack.subList(stack.size() - count, stack.size()));"
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,56,for (int i = 0; i < count; i++) {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,57,stack.pop();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,59,return result;
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,62,"private static void assertState(boolean toAssert, String message) {"
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,63,if (!toAssert) {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,64,threadToArgumentMatcherStack.remove();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,65,throw new IllegalStateException(message);
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,69,public static void reportOr(int count) {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,70,Stack<IArgumentMatcher> stack = threadToArgumentMatcherStack.get();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,71,"assertState(stack != null, ""no matchers found."");"
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,72,stack.push(new Or(popLastArgumentMatchers(count)));
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,75,public static Object[] getCurrentArguments() {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,76,Stack<Object[]> stack = threadToCurrentArguments.get();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,77,if (stack == null || stack.empty()) {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,78,return null;
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,80,return stack.lastElement();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,83,public static void pushCurrentArguments(Object[] args) {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,84,Stack<Object[]> stack = threadToCurrentArguments.get();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,85,if (stack == null) {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,86,stack = new Stack<Object[]>();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,87,threadToCurrentArguments.set(stack);
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,89,stack.push(args);
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,92,public static void popCurrentArguments() {
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,93,Stack<Object[]> stack = threadToCurrentArguments.get();
True,src/org/easymock/internal/LastArguments.java,src/org/easymock/internal/LastArguments.java,94,stack.pop();
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,5,package org.easymock.internal;
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,7,import java.util.*;
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,9,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,10,import org.easymock.internal.matchers.And;
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,11,import org.easymock.internal.matchers.Not;
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,12,import org.easymock.internal.matchers.Or;
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,14,public class LastControl {
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,15,private static final ThreadLocal<MocksControl> threadToControl = new ThreadLocal<MocksControl>();
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,17,public static synchronized void reportLastControl(MocksControl control) {
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,18,if (control != null) {
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,19,threadToControl.set(control);
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,20,} else {
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,21,threadToControl.remove();
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,25,public static synchronized MocksControl lastControl() {
True,src/org/easymock/internal/LastControl.java,src/org/easymock/internal/LastControl.java,26,return threadToControl.get();
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,5,package org.easymock.internal;
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,7,import java.lang.reflect.Method;
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,8,import java.util.HashMap;
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,9,import java.util.Map;
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,11,import org.easymock.ArgumentsMatcher;
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,12,import org.easymock.MockControl;
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,14,public class LegacyMatcherProvider {
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,16,private ArgumentsMatcher defaultMatcher;
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,18,private boolean defaultMatcherSet;
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,20,"private Map<Method, ArgumentsMatcher> matchers = new HashMap<Method, ArgumentsMatcher>();"
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,22,public ArgumentsMatcher getMatcher(Method method) {
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,23,if (!matchers.containsKey(method)) {
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,24,if (!defaultMatcherSet) {
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,25,setDefaultMatcher(MockControl.EQUALS_MATCHER);
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,27,"matchers.put(method, defaultMatcher);"
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,29,return matchers.get(method);
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,32,public void setDefaultMatcher(ArgumentsMatcher matcher) {
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,33,if (defaultMatcherSet) {
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,34,throw new RuntimeExceptionWrapper(
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,35,new IllegalStateException(
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,36,"""default matcher can only be set once directly after creation of the MockControl""));"
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,38,defaultMatcher = matcher;
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,39,defaultMatcherSet = true;
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,42,"public void setMatcher(Method method, ArgumentsMatcher matcher) {"
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,43,if (matchers.containsKey(method) && matchers.get(method) != matcher) {
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,44,throw new RuntimeExceptionWrapper(new IllegalStateException(
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,45,"""for method """
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,46,+ method.getName()
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,48,"+ (method.getParameterTypes().length == 0 ? """""
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,50,"+ ""), a matcher has already been set""));"
True,src/org/easymock/internal/LegacyMatcherProvider.java,src/org/easymock/internal/LegacyMatcherProvider.java,52,"matchers.put(method, matcher);"
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,5,package org.easymock.internal;
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,7,import java.lang.reflect.InvocationHandler;
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,8,import java.lang.reflect.Method;
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,10,import org.mockito.MockAwareInvocationHandler;
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,12,"public class MockInvocationHandler implements InvocationHandler, MockAwareInvocationHandler {"
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,14,protected final MocksControl control;
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,16,public MockInvocationHandler(MocksControl control) {
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,17,this.control = control;
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,20,"public Object invoke(Object proxy, Method method, Object[] args)"
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,21,throws Throwable {
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,22,try {
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,23,if (control.getState() instanceof RecordState) {
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,24,LastControl.reportLastControl(control);
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,26,return control.getState().invoke(
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,27,"new Invocation(proxy, method, args));"
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,28,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,29,throw e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,30,} catch (AssertionErrorWrapper e) {
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,31,throw e.getAssertionError().fillInStackTrace();
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,32,} catch (ThrowableWrapper t) {
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,33,throw t.getThrowable().fillInStackTrace();
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,37,public MocksControl getControl() {
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,38,return control;
True,src/org/easymock/internal/MockInvocationHandler.java,src/org/easymock/internal/MockInvocationHandler.java,41,public void setMock(Object mock) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,5,package org.easymock.internal;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,7,import java.lang.reflect.Method;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,8,import java.util.ArrayList;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,9,import java.util.List;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,11,import org.easymock.ArgumentsMatcher;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,12,import org.easymock.MockControl;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,14,public class MocksBehavior implements IMocksBehavior {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,16,private final List<UnorderedBehavior> behaviorLists = new ArrayList<UnorderedBehavior>();
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,18,private List<ExpectedInvocationAndResult> stubResults = new ArrayList<ExpectedInvocationAndResult>();
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,20,private final boolean nice;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,22,private boolean checkOrder;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,24,private int position = 0;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,26,public MocksBehavior(boolean nice) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,27,this.nice = nice;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,30,"public final void addStub(ExpectedInvocation expected, Result result) {"
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,31,"stubResults.add(new ExpectedInvocationAndResult(expected, result));"
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,34,"public void addExpected(ExpectedInvocation expected, Result result,"
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,35,Range count) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,36,if (legacyMatcherProvider != null) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,37,expected = expected.withMatcher(legacyMatcherProvider
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,38,.getMatcher(expected.getMethod()));
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,40,addBehaviorListIfNecessary(expected);
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,41,"lastBehaviorList().addExpected(expected, result, count);"
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,44,private final Result getStubResult(Invocation actual) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,45,for (ExpectedInvocationAndResult each : stubResults) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,46,if (each.getExpectedInvocation().matches(actual)) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,47,return each.getResult();
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,50,return null;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,53,private void addBehaviorListIfNecessary(ExpectedInvocation expected) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,54,if (behaviorLists.isEmpty()
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,55,"|| !lastBehaviorList().allowsExpectedInvocation(expected,"
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,56,checkOrder)) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,57,behaviorLists.add(new UnorderedBehavior(checkOrder));
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,61,private UnorderedBehavior lastBehaviorList() {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,62,return behaviorLists.get(behaviorLists.size() - 1);
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,65,public final Result addActual(Invocation actual) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,66,int tempPosition = position;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,67,"String errorMessage = """";"
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,68,while (position < behaviorLists.size()) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,69,Result result = behaviorLists.get(position).addActual(actual);
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,70,if (result != null) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,71,return result;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,73,errorMessage += behaviorLists.get(position).toString(actual);
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,74,if (!behaviorLists.get(position).verify()) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,75,break;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,77,position++;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,79,Result stubOrNice = getStubResult(actual);
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,80,if (stubOrNice == null && nice) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,81,stubOrNice = Result.createReturnResult(ToTypeMappings.emptyReturnValueFor(actual.getMethod().getReturnType()));
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,83,if (stubOrNice != null) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,84,position = tempPosition;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,85,return stubOrNice;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,87,throw new AssertionErrorWrapper(new AssertionError(
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,88,"""\n  Unexpected method call """
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,89,"+ actual.toString(MockControl.EQUALS_MATCHER) + "":"""
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,90,+ errorMessage.toString()));
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,93,public void verify() {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,94,boolean verified = true;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,95,StringBuffer errorMessage = new StringBuffer();
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,97,"for (UnorderedBehavior behaviorList : behaviorLists.subList(position,"
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,98,behaviorLists.size())) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,99,errorMessage.append(behaviorList.toString());
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,100,if (!behaviorList.verify()) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,101,verified = false;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,104,if (verified) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,105,return;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,108,throw new AssertionErrorWrapper(new AssertionError(
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,109,"""\n  Expectation failure on verify:"" + errorMessage.toString()));"
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,112,public void checkOrder(boolean value) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,113,this.checkOrder = value;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,116,private LegacyMatcherProvider legacyMatcherProvider;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,118,public LegacyMatcherProvider getLegacyMatcherProvider() {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,119,if (legacyMatcherProvider == null) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,120,legacyMatcherProvider = new LegacyMatcherProvider();
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,122,return legacyMatcherProvider;
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,125,public void setDefaultMatcher(ArgumentsMatcher matcher) {
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,126,getLegacyMatcherProvider().setDefaultMatcher(matcher);
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,129,"public void setMatcher(Method method, ArgumentsMatcher matcher) {"
True,src/org/easymock/internal/MocksBehavior.java,src/org/easymock/internal/MocksBehavior.java,130,"getLegacyMatcherProvider().setMatcher(method, matcher);"
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,5,package org.easymock.internal;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,7,import org.easymock.ArgumentsMatcher;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,8,import org.easymock.IAnswer;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,9,import org.easymock.IExpectationSetters;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,10,import org.easymock.IMocksControl;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,12,public class MocksControl implements IMocksControl {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,14,private IMocksControlState state;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,16,private IMocksBehavior behavior;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,18,public enum MockType {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,19,"NICE, DEFAULT, STRICT"
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,22,private MockType type;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,24,public MocksControl(MockType type) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,25,this.type = type;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,26,reset();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,29,public IMocksControlState getState() {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,30,return state;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,33,public <T> T createMock(Class<T> toMock) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,34,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,35,state.assertRecordState();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,36,ClassProxyFactory<T> proxyFactory = new ClassProxyFactory<T>();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,37,"return proxyFactory.createProxy(toMock, new ObjectMethodsFilter("
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,38,"toMock, new MockInvocationHandler(this), null));"
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,39,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,40,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,44,"public <T> T createMock(String name, Class<T> toMock) {"
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,45,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,46,state.assertRecordState();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,47,ClassProxyFactory<T> proxyFactory = new ClassProxyFactory<T>();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,48,"return proxyFactory.createProxy(toMock, new ObjectMethodsFilter("
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,49,"toMock, new MockInvocationHandler(this), name));"
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,50,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,51,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,55,public final void reset() {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,56,behavior = new MocksBehavior(type == MockType.NICE);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,57,behavior.checkOrder(type == MockType.STRICT);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,58,state = new RecordState(behavior);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,59,LastControl.reportLastControl(null);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,62,public void replay() {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,63,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,64,state.replay();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,65,state = new ReplayState(behavior);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,66,LastControl.reportLastControl(null);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,67,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,68,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,72,public void verify() {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,73,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,74,state.verify();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,75,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,76,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,77,} catch (AssertionErrorWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,78,throw (AssertionError) e.getAssertionError().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,82,public void checkOrder(boolean value) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,83,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,84,state.checkOrder(value);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,85,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,86,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,90,// methods from IBehaviorSetters
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,92,public IExpectationSetters andReturn(Object value) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,93,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,94,state.andReturn(value);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,95,return this;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,96,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,97,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,101,public IExpectationSetters andThrow(Throwable throwable) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,102,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,103,state.andThrow(throwable);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,104,return this;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,105,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,106,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,110,public IExpectationSetters andAnswer(IAnswer answer) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,111,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,112,state.andAnswer(answer);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,113,return this;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,114,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,115,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,119,public void andStubReturn(Object value) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,120,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,121,state.andStubReturn(value);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,122,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,123,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,127,public void andStubThrow(Throwable throwable) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,128,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,129,state.andStubThrow(throwable);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,130,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,131,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,135,public void andStubAnswer(IAnswer answer) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,136,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,137,state.andStubAnswer(answer);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,138,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,139,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,143,public void asStub() {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,144,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,145,state.asStub();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,146,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,147,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,151,public IExpectationSetters times(int times) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,152,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,153,state.times(new Range(times));
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,154,return this;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,155,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,156,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,160,"public IExpectationSetters times(int min, int max) {"
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,161,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,162,"state.times(new Range(min, max));"
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,163,return this;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,164,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,165,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,169,public IExpectationSetters once() {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,170,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,171,state.times(ONCE);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,172,return this;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,173,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,174,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,178,public IExpectationSetters atLeastOnce() {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,179,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,180,state.times(AT_LEAST_ONCE);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,181,return this;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,182,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,183,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,187,public IExpectationSetters anyTimes() {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,188,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,189,state.times(ZERO_OR_MORE);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,190,return this;
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,191,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,192,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,197,* Exactly one call.
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,199,public static final Range ONCE = new Range(1);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,202,* One or more calls.
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,204,"public static final Range AT_LEAST_ONCE = new Range(1, Integer.MAX_VALUE);"
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,207,* Zero or more calls.
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,209,"public static final Range ZERO_OR_MORE = new Range(0, Integer.MAX_VALUE);"
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,211,public void setLegacyDefaultMatcher(ArgumentsMatcher matcher) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,212,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,213,state.setDefaultMatcher(matcher);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,214,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,215,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,219,public void setLegacyMatcher(ArgumentsMatcher matcher) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,220,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,221,"state.setMatcher(null, matcher);"
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,222,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,223,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,227,public void setLegacyDefaultReturnValue(Object value) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,228,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,229,state.setDefaultReturnValue(value);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,230,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,231,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,235,public void setLegacyDefaultVoidCallable() {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,236,state.setDefaultVoidCallable();
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,239,public void setLegacyDefaultThrowable(Throwable throwable) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,240,try {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,241,state.setDefaultThrowable(throwable);
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,242,} catch (RuntimeExceptionWrapper e) {
True,src/org/easymock/internal/MocksControl.java,src/org/easymock/internal/MocksControl.java,243,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,5,package org.easymock.internal;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,7,import java.lang.reflect.Method;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,9,import org.mockito.MockAwareInvocationHandler;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,11,public class ObjectMethodsFilter<T extends MockAwareInvocationHandler> implements MockAwareInvocationHandler {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,12,private final Method equalsMethod;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,14,private final Method hashCodeMethod;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,16,private final Method toStringMethod;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,18,private final T delegate;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,20,private final String name;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,22,"@SuppressWarnings(""unchecked"")"
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,23,"public ObjectMethodsFilter(Class toMock, T delegate,"
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,24,String name) {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,25,if (name != null && !Invocation.isJavaIdentifier(name)) {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,26,"throw new IllegalArgumentException(String.format(""'%s' is not a valid Java identifier."", name));"
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,29,try {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,30,if (toMock.isInterface()) {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,31,toMock = Object.class;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,33,"equalsMethod = toMock.getMethod(""equals"","
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,34,new Class[] { Object.class });
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,35,"hashCodeMethod = toMock.getMethod(""hashCode"", (Class[]) null);"
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,36,"toStringMethod = toMock.getMethod(""toString"", (Class[]) null);"
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,37,} catch (NoSuchMethodException e) {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,38,"throw new RuntimeException(""An Object method could not be found!"");"
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,40,this.delegate = delegate;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,41,this.name = name;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,44,"public final Object invoke(Object proxy, Method method, Object[] args)"
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,45,throws Throwable {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,46,if (equalsMethod.equals(method)) {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,47,return Boolean.valueOf(proxy == args[0]);
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,49,if (hashCodeMethod.equals(method)) {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,50,return new Integer(System.identityHashCode(proxy));
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,52,if (toStringMethod.equals(method)) {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,53,return mockToString(proxy);
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,55,"return delegate.invoke(proxy, method, args);"
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,58,private String mockToString(Object proxy) {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,59,"return (name != null) ? name : ""EasyMock for "" + mockType(proxy);"
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,62,//TODO unit test it or check if tested properly
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,63,private String mockType(Object proxy) {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,64,if (proxy.getClass().getInterfaces().length == 2) {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,65,return proxy.getClass().getInterfaces()[0].toString();
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,66,} else {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,67,return proxy.getClass().getSuperclass().toString();
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,71,public T getDelegate() {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,72,return delegate;
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,75,public void setMock(Object mock) {
True,src/org/easymock/internal/ObjectMethodsFilter.java,src/org/easymock/internal/ObjectMethodsFilter.java,76,delegate.setMock(mock);
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,5,package org.easymock.internal;
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,7,public class Range {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,8,private int minimum;
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,10,private int maximum;
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,12,public Range(int count) {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,13,"this(count, count);"
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,16,"public Range(int minimum, int maximum) {"
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,17,if (!(minimum <= maximum)) {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,18,throw new RuntimeExceptionWrapper(new IllegalArgumentException(
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,19,"""minimum must be <= maximum""));"
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,22,if (!(minimum >= 0)) {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,23,throw new RuntimeExceptionWrapper(new IllegalArgumentException(
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,24,"""minimum must be >= 0""));"
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,27,if (!(maximum >= 1)) {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,28,throw new RuntimeExceptionWrapper(new IllegalArgumentException(
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,29,"""maximum must be >= 1""));"
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,31,this.minimum = minimum;
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,32,this.maximum = maximum;
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,35,public boolean hasFixedCount() {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,36,return minimum == maximum;
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,39,public int getMaximum() {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,40,return maximum;
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,43,public int getMinimum() {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,44,return minimum;
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,47,public String toString() {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,48,if (hasFixedCount()) {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,49,"return """" + minimum;"
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,50,} else if (hasOpenCount()) {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,51,"return ""at least "" + minimum;"
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,52,} else {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,53,"return ""between "" + minimum + "" and "" + maximum;"
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,57,public String expectedAndActual(int count) {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,58,"return ""expected: "" + this.toString() + "", actual: "" + count;"
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,61,public boolean contains(int count) {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,62,return minimum <= count && count <= maximum;
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,65,public boolean hasOpenCount() {
True,src/org/easymock/internal/Range.java,src/org/easymock/internal/Range.java,66,return maximum == Integer.MAX_VALUE;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,5,package org.easymock.internal;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,7,import java.lang.reflect.Method;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,8,import java.util.*;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,10,import org.easymock.ArgumentsMatcher;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,11,import org.easymock.IAnswer;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,12,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,13,import org.easymock.MockControl;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,15,public class RecordState implements IMocksControlState {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,17,protected ExpectedInvocation lastInvocation;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,19,protected boolean lastInvocationUsed = true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,21,protected Result lastResult;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,23,protected IMocksBehavior behavior;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,25,public RecordState(IMocksBehavior behavior) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,26,this.behavior = behavior;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,29,public void assertRecordState() {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,32,public java.lang.Object invoke(Invocation invocation) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,33,closeMethod();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,34,List<IArgumentMatcher> lastMatchers = LastArguments.pullMatchers();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,35,"lastInvocation = new ExpectedInvocation(invocation, lastMatchers);"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,36,lastInvocationUsed = false;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,37,return ToTypeMappings.emptyReturnValueFor(invocation.getMethod().getReturnType());
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,40,public void replay() {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,41,closeMethod();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,42,if (LastArguments.pullMatchers() != null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,43,"throw new IllegalStateException(""matcher calls were used outside expectations"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,47,public void verify() {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,48,throw new RuntimeExceptionWrapper(new IllegalStateException(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,49,"""calling verify is not allowed in record state""));"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,52,public void andReturn(Object value) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,53,"requireMethodCall(""return value"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,54,value = convertNumberClassIfNeccessary(value);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,55,requireAssignable(value);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,56,if (lastResult != null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,57,times(MocksControl.ONCE);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,59,lastResult = Result.createReturnResult(value);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,62,public void andThrow(Throwable throwable) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,63,"requireMethodCall(""Throwable"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,64,requireValidThrowable(throwable);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,65,if (lastResult != null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,66,times(MocksControl.ONCE);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,68,lastResult = Result.createThrowResult(throwable);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,71,public void andAnswer(IAnswer answer) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,72,"requireMethodCall(""answer"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,73,requireValidAnswer(answer);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,74,if (lastResult != null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,75,times(MocksControl.ONCE);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,77,lastResult = Result.createAnswerResult(answer);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,80,public void andStubReturn(Object value) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,81,"requireMethodCall(""stub return value"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,82,value = convertNumberClassIfNeccessary(value);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,83,requireAssignable(value);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,84,if (lastResult != null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,85,times(MocksControl.ONCE);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,87,"behavior.addStub(lastInvocation, Result.createReturnResult(value));"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,88,lastInvocationUsed = true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,91,public void setDefaultReturnValue(Object value) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,92,"requireMethodCall(""default return value"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,93,value = convertNumberClassIfNeccessary(value);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,94,requireAssignable(value);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,95,if (lastResult != null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,96,times(MocksControl.ONCE);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,98,behavior.addStub(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,99,"lastInvocation.withMatcher(MockControl.ALWAYS_MATCHER), Result"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,100,.createReturnResult(value));
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,101,lastInvocationUsed = true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,104,public void asStub() {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,105,"requireMethodCall(""stub behavior"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,106,requireVoidMethod();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,107,"behavior.addStub(lastInvocation, Result.createReturnResult(null));"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,108,lastInvocationUsed = true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,111,public void setDefaultVoidCallable() {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,112,"requireMethodCall(""default void callable"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,113,requireVoidMethod();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,114,behavior.addStub(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,115,"lastInvocation.withMatcher(MockControl.ALWAYS_MATCHER), Result"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,116,.createReturnResult(null));
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,117,lastInvocationUsed = true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,120,public void andStubThrow(Throwable throwable) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,121,"requireMethodCall(""stub Throwable"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,122,requireValidThrowable(throwable);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,123,if (lastResult != null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,124,times(MocksControl.ONCE);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,126,"behavior.addStub(lastInvocation, Result.createThrowResult(throwable));"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,127,lastInvocationUsed = true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,130,public void setDefaultThrowable(Throwable throwable) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,131,"requireMethodCall(""default Throwable"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,132,requireValidThrowable(throwable);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,133,if (lastResult != null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,134,times(MocksControl.ONCE);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,136,behavior.addStub(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,137,"lastInvocation.withMatcher(MockControl.ALWAYS_MATCHER), Result"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,138,.createThrowResult(throwable));
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,139,lastInvocationUsed = true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,142,public void andStubAnswer(IAnswer answer) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,143,"requireMethodCall(""stub answer"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,144,requireValidAnswer(answer);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,145,if (lastResult != null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,146,times(MocksControl.ONCE);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,148,"behavior.addStub(lastInvocation, Result.createAnswerResult(answer));"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,149,lastInvocationUsed = true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,152,public void times(Range range) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,153,"requireMethodCall(""times"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,154,requireLastResultOrVoidMethod();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,156,"behavior.addExpected(lastInvocation, lastResult != null ? lastResult"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,157,": Result.createReturnResult(null), range);"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,158,lastInvocationUsed = true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,159,lastResult = null;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,162,"protected Object createNumberObject(Object value, Class returnType) {"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,163,if (!(value instanceof Number)) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,164,return value;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,166,Number number = (Number) value;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,167,if (returnType.equals(Byte.TYPE)) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,168,return number.byteValue();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,169,} else if (returnType.equals(Short.TYPE)) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,170,return number.shortValue();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,171,} else if (returnType.equals(Character.TYPE)) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,172,return (char) number.intValue();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,173,} else if (returnType.equals(Integer.TYPE)) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,174,return number.intValue();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,175,} else if (returnType.equals(Long.TYPE)) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,176,return number.longValue();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,177,} else if (returnType.equals(Float.TYPE)) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,178,return number.floatValue();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,179,} else if (returnType.equals(Double.TYPE)) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,180,return number.doubleValue();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,181,} else {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,182,return number;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,186,protected Object convertNumberClassIfNeccessary(Object o) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,187,Class returnType = lastInvocation.getMethod().getReturnType();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,188,"return createNumberObject(o, returnType);"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,191,protected void closeMethod() {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,192,if (lastInvocationUsed && lastResult == null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,193,return;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,195,if (!isLastResultOrVoidMethod()) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,196,throw new RuntimeExceptionWrapper(new IllegalStateException(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,197,"""missing behavior definition for the preceeding method call """
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,198,+ lastInvocation.toString()));
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,200,this.times(MockControl.ONE);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,203,protected void requireMethodCall(String failMessage) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,204,if (lastInvocation == null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,205,throw new RuntimeExceptionWrapper(new IllegalStateException(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,206,"""method call on the mock needed before setting """
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,207,+ failMessage));
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,211,protected void requireAssignable(Object returnValue) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,212,if (lastMethodIsVoidMethod()) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,213,throw new RuntimeExceptionWrapper(new IllegalStateException(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,214,"""void method cannot return a value""));"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,216,if (returnValue == null) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,217,return;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,219,Class<?> returnedType = lastInvocation.getMethod().getReturnType();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,220,if (returnedType.isPrimitive()) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,221,returnedType = ToTypeMappings.primitiveToWrapperType.get(returnedType);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,223,if (!returnedType.isAssignableFrom(returnValue.getClass())) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,224,throw new RuntimeExceptionWrapper(new IllegalStateException(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,225,"""incompatible return value type""));"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,229,protected void requireValidThrowable(Throwable throwable) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,230,if (throwable == null)
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,231,throw new RuntimeExceptionWrapper(new NullPointerException(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,232,"""null cannot be thrown""));"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,233,if (isValidThrowable(throwable))
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,234,return;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,236,throw new RuntimeExceptionWrapper(new IllegalArgumentException(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,237,"""last method called on mock cannot throw """
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,238,+ throwable.getClass().getName()));
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,241,protected void requireValidAnswer(IAnswer answer) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,242,if (answer == null)
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,243,throw new RuntimeExceptionWrapper(new NullPointerException(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,244,"""answer object must not be null""));"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,247,protected void requireLastResultOrVoidMethod() {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,248,if (isLastResultOrVoidMethod()) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,249,return;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,251,throw new RuntimeExceptionWrapper(new IllegalStateException(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,252,"""last method called on mock is not a void method""));"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,255,protected void requireVoidMethod() {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,256,if (lastMethodIsVoidMethod()) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,257,return;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,259,throw new RuntimeExceptionWrapper(new IllegalStateException(
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,260,"""last method called on mock is not a void method""));"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,263,protected boolean isLastResultOrVoidMethod() {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,264,return lastResult != null || lastMethodIsVoidMethod();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,267,protected boolean lastMethodIsVoidMethod() {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,268,Class returnType = lastInvocation.getMethod().getReturnType();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,269,return returnType.equals(Void.TYPE);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,272,protected boolean isValidThrowable(Throwable throwable) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,273,if (throwable instanceof RuntimeException) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,274,return true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,276,if (throwable instanceof Error) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,277,return true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,279,Class<?>[] exceptions = lastInvocation.getMethod().getExceptionTypes();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,280,Class<?> throwableClass = throwable.getClass();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,281,for (Class<?> exception : exceptions) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,282,if (exception.isAssignableFrom(throwableClass))
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,283,return true;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,285,return false;
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,288,public void checkOrder(boolean value) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,289,closeMethod();
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,290,behavior.checkOrder(value);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,293,public void setDefaultMatcher(ArgumentsMatcher matcher) {
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,294,behavior.setDefaultMatcher(matcher);
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,297,"public void setMatcher(Method method, ArgumentsMatcher matcher) {"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,298,"requireMethodCall(""matcher"");"
True,src/org/easymock/internal/RecordState.java,src/org/easymock/internal/RecordState.java,299,"behavior.setMatcher(lastInvocation.getMethod(), matcher);"
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,5,package org.easymock.internal;
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,7,import java.lang.reflect.Method;
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,9,import org.easymock.ArgumentsMatcher;
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,10,import org.easymock.IAnswer;
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,12,public class ReplayState implements IMocksControlState {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,14,private IMocksBehavior behavior;
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,16,public ReplayState(IMocksBehavior behavior) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,17,this.behavior = behavior;
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,20,public Object invoke(Invocation invocation) throws Throwable {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,21,Result result = behavior.addActual(invocation);
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,22,LastArguments.pushCurrentArguments(invocation.getArguments());
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,23,try {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,24,try {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,25,return result.answer();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,26,} catch (Throwable t) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,27,throw new ThrowableWrapper(t);
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,29,} finally {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,30,LastArguments.popCurrentArguments();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,34,public void verify() {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,35,behavior.verify();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,38,public void replay() {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,39,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,42,public void callback(Runnable runnable) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,43,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,46,public void checkOrder(boolean value) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,47,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,50,public void andReturn(Object value) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,51,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,54,public void andThrow(Throwable throwable) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,55,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,58,public void andAnswer(IAnswer answer) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,59,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,62,public void andStubReturn(Object value) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,63,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,66,public void andStubThrow(Throwable throwable) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,67,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,70,public void andStubAnswer(IAnswer answer) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,71,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,74,public void asStub() {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,75,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,78,public void times(Range range) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,79,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,82,"public void setMatcher(Method method, ArgumentsMatcher matcher) {"
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,83,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,86,public void setDefaultMatcher(ArgumentsMatcher matcher) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,87,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,90,public void setDefaultReturnValue(Object value) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,91,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,94,public void setDefaultThrowable(Throwable throwable) {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,95,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,98,public void setDefaultVoidCallable() {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,99,throwWrappedIllegalStateException();
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,102,private void throwWrappedIllegalStateException() {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,103,throw new RuntimeExceptionWrapper(new IllegalStateException(
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,104,"""This method must not be called in replay state.""));"
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,107,public void assertRecordState() {
True,src/org/easymock/internal/ReplayState.java,src/org/easymock/internal/ReplayState.java,108,throwWrappedIllegalStateException();
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,5,package org.easymock.internal;
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,7,import org.easymock.IAnswer;
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,9,public class Result implements IAnswer {
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,11,private IAnswer value;
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,13,private Result(IAnswer value) {
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,14,this.value = value;
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,17,public static Result createThrowResult(final Throwable throwable) {
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,18,return new Result(new IAnswer<Object>() {
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,19,public Object answer() throws Throwable {
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,20,throw throwable;
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,24,public static Result createReturnResult(final Object value) {
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,26,return new Result(new IAnswer<Object>() {
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,27,public Object answer() throws Throwable {
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,28,return value;
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,33,public static Result createAnswerResult(IAnswer answer) {
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,34,return new Result(answer);
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,37,public Object answer() throws Throwable {
True,src/org/easymock/internal/Result.java,src/org/easymock/internal/Result.java,38,return value.answer();
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,5,package org.easymock.internal;
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,7,import java.util.ArrayList;
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,8,import java.util.LinkedList;
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,9,import java.util.List;
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,11,public class Results {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,13,private int callCount;
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,15,private LinkedList<Range> ranges = new LinkedList<Range>();
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,17,private List<Result> results = new ArrayList<Result>();
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,19,"public void add(Result result, Range range) {"
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,20,if (!ranges.isEmpty()) {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,21,Range lastRange = ranges.getLast();
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,22,if (!lastRange.hasFixedCount())
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,23,throw new RuntimeExceptionWrapper(
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,24,new IllegalStateException(
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,25,"""last method called on mock already has a non-fixed count set.""));"
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,27,ranges.add(range);
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,28,results.add(result);
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,31,public Result next() {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,32,int currentPosition = 0;
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,33,for (int i = 0; i < ranges.size(); i++) {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,34,Range interval = ranges.get(i);
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,35,if (interval.hasOpenCount()) {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,36,callCount += 1;
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,37,return results.get(i);
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,39,currentPosition += interval.getMaximum();
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,40,if (currentPosition > callCount) {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,41,callCount += 1;
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,42,return results.get(i);
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,45,return null;
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,48,public boolean hasValidCallCount() {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,49,return getMainInterval().contains(getCallCount());
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,52,@Override
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,53,public String toString() {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,54,return getMainInterval().expectedAndActual(getCallCount());
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,57,private Range getMainInterval() {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,58,"int min = 0, max = 0;"
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,60,for (Range interval : ranges) {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,61,min += interval.getMinimum();
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,62,if (interval.hasOpenCount() || max == Integer.MAX_VALUE) {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,63,max = Integer.MAX_VALUE;
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,64,} else {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,65,max += interval.getMaximum();
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,69,"return new Range(min, max);"
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,72,public int getCallCount() {
True,src/org/easymock/internal/Results.java,src/org/easymock/internal/Results.java,73,return callCount;
True,src/org/easymock/internal/RuntimeExceptionWrapper.java,src/org/easymock/internal/RuntimeExceptionWrapper.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/RuntimeExceptionWrapper.java,src/org/easymock/internal/RuntimeExceptionWrapper.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/RuntimeExceptionWrapper.java,src/org/easymock/internal/RuntimeExceptionWrapper.java,5,package org.easymock.internal;
True,src/org/easymock/internal/RuntimeExceptionWrapper.java,src/org/easymock/internal/RuntimeExceptionWrapper.java,7,public class RuntimeExceptionWrapper extends RuntimeException {
True,src/org/easymock/internal/RuntimeExceptionWrapper.java,src/org/easymock/internal/RuntimeExceptionWrapper.java,8,private final RuntimeException runtimeException;
True,src/org/easymock/internal/RuntimeExceptionWrapper.java,src/org/easymock/internal/RuntimeExceptionWrapper.java,10,public RuntimeExceptionWrapper(final RuntimeException runtimeException) {
True,src/org/easymock/internal/RuntimeExceptionWrapper.java,src/org/easymock/internal/RuntimeExceptionWrapper.java,11,this.runtimeException = runtimeException;
True,src/org/easymock/internal/RuntimeExceptionWrapper.java,src/org/easymock/internal/RuntimeExceptionWrapper.java,14,public RuntimeException getRuntimeException() {
True,src/org/easymock/internal/RuntimeExceptionWrapper.java,src/org/easymock/internal/RuntimeExceptionWrapper.java,15,return runtimeException;
True,src/org/easymock/internal/ThrowableWrapper.java,src/org/easymock/internal/ThrowableWrapper.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/ThrowableWrapper.java,src/org/easymock/internal/ThrowableWrapper.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/ThrowableWrapper.java,src/org/easymock/internal/ThrowableWrapper.java,5,package org.easymock.internal;
True,src/org/easymock/internal/ThrowableWrapper.java,src/org/easymock/internal/ThrowableWrapper.java,7,public class ThrowableWrapper extends Throwable {
True,src/org/easymock/internal/ThrowableWrapper.java,src/org/easymock/internal/ThrowableWrapper.java,8,private final Throwable throwable;
True,src/org/easymock/internal/ThrowableWrapper.java,src/org/easymock/internal/ThrowableWrapper.java,10,public ThrowableWrapper(final Throwable throwable) {
True,src/org/easymock/internal/ThrowableWrapper.java,src/org/easymock/internal/ThrowableWrapper.java,11,this.throwable = throwable;
True,src/org/easymock/internal/ThrowableWrapper.java,src/org/easymock/internal/ThrowableWrapper.java,14,public Throwable getThrowable() {
True,src/org/easymock/internal/ThrowableWrapper.java,src/org/easymock/internal/ThrowableWrapper.java,15,return throwable;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,1,package org.easymock.internal;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,3,import java.util.ArrayList;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,4,import java.util.Collection;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,5,import java.util.HashMap;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,6,import java.util.HashSet;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,7,import java.util.LinkedHashMap;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,8,import java.util.LinkedHashSet;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,9,import java.util.LinkedList;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,10,import java.util.List;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,11,import java.util.Map;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,12,import java.util.Set;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,13,import java.util.SortedMap;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,14,import java.util.SortedSet;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,15,import java.util.TreeMap;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,16,import java.util.TreeSet;
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,18,public class ToTypeMappings {
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,20,"@SuppressWarnings(""unchecked"")"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,21,"protected static Map<Class, Object> emptyReturnValueToPrimitiveType = new HashMap<Class, Object>();"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,23,static {
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,24,"emptyReturnValueToPrimitiveType.put(Void.TYPE, null);"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,25,"emptyReturnValueToPrimitiveType.put(Boolean.TYPE, Boolean.FALSE);"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,26,"emptyReturnValueToPrimitiveType.put(Byte.TYPE, new Byte((byte) 0));"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,27,"emptyReturnValueToPrimitiveType.put(Short.TYPE, new Short((short) 0));"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,28,"emptyReturnValueToPrimitiveType.put(Character.TYPE, new Character((char) 0));"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,29,"emptyReturnValueToPrimitiveType.put(Integer.TYPE, new Integer(0));"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,30,"emptyReturnValueToPrimitiveType.put(Long.TYPE, new Long(0));"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,31,"emptyReturnValueToPrimitiveType.put(Float.TYPE, new Float(0));"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,32,"emptyReturnValueToPrimitiveType.put(Double.TYPE, new Double(0));"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,35,"@SuppressWarnings(""unchecked"")"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,36,"protected static Map<Class, Class> primitiveToWrapperType = new HashMap<Class, Class>();"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,38,static {
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,39,"primitiveToWrapperType.put(Boolean.TYPE, Boolean.class);"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,40,"primitiveToWrapperType.put(Byte.TYPE, Byte.class);"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,41,"primitiveToWrapperType.put(Short.TYPE, Short.class);"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,42,"primitiveToWrapperType.put(Character.TYPE, Character.class);"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,43,"primitiveToWrapperType.put(Integer.TYPE, Integer.class);"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,44,"primitiveToWrapperType.put(Long.TYPE, Long.class);"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,45,"primitiveToWrapperType.put(Float.TYPE, Float.class);"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,46,"primitiveToWrapperType.put(Double.TYPE, Double.class);"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,49,public static Object emptyReturnValueFor(Class type) {
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,50,if (type.isPrimitive()) {
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,51,return emptyReturnValueToPrimitiveType.get(type);
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,54,return emptyReturnValueToType.get(type);
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,57,"@SuppressWarnings(""unchecked"")"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,58,"protected static Map<Class, Object> emptyReturnValueToType = new HashMap<Class, Object>();"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,60,static {
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,61,"emptyReturnValueToType.put(Collection.class, new LinkedList<Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,63,"emptyReturnValueToType.put(Set.class, new HashSet<Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,64,"emptyReturnValueToType.put(HashSet.class, new HashSet<Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,65,"emptyReturnValueToType.put(SortedSet.class, new TreeSet<Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,66,"emptyReturnValueToType.put(TreeSet.class, new TreeSet<Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,67,"emptyReturnValueToType.put(LinkedHashSet.class, new LinkedHashSet<Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,69,"emptyReturnValueToType.put(List.class, new LinkedList<Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,70,"emptyReturnValueToType.put(LinkedList.class, new LinkedList<Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,71,"emptyReturnValueToType.put(ArrayList.class, new ArrayList<Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,73,"emptyReturnValueToType.put(Map.class, new HashMap<Object, Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,74,"emptyReturnValueToType.put(HashMap.class, new HashMap<Object, Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,75,"emptyReturnValueToType.put(SortedMap.class, new TreeMap<Object, Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,76,"emptyReturnValueToType.put(TreeMap.class, new TreeMap<Object, Object>());"
True,src/org/easymock/internal/ToTypeMappings.java,src/org/easymock/internal/ToTypeMappings.java,77,"emptyReturnValueToType.put(LinkedHashMap.class, new LinkedHashMap<Object, Object>());"
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,5,package org.easymock.internal;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,7,import java.util.ArrayList;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,8,import java.util.List;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,10,public class UnorderedBehavior {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,12,private final List<ExpectedInvocationAndResults> results = new ArrayList<ExpectedInvocationAndResults>();
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,14,private final boolean checkOrder;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,16,public UnorderedBehavior(boolean checkOrder) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,17,this.checkOrder = checkOrder;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,20,"public void addExpected(ExpectedInvocation expected, Result result,"
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,21,Range count) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,22,for (ExpectedInvocationAndResults entry : results) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,23,if (entry.getExpectedInvocation().equals(expected)) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,24,"entry.getResults().add(result, count);"
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,25,return;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,28,Results list = new Results();
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,29,"list.add(result, count);"
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,30,"results.add(new ExpectedInvocationAndResults(expected, list));"
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,33,public Result addActual(Invocation actual) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,34,for (ExpectedInvocationAndResults entry : results) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,35,if (!entry.getExpectedInvocation().matches(actual)) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,36,continue;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,38,Result result = entry.getResults().next();
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,39,if (result != null) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,40,return result;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,43,return null;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,46,public boolean verify() {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,47,for (ExpectedInvocationAndResults entry : results) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,48,if (!entry.getResults().hasValidCallCount()) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,49,return false;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,52,return true;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,55,@Override
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,56,public String toString() {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,57,return toString(null);
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,60,public String toString(Invocation invocation) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,61,StringBuffer result = new StringBuffer();
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,62,for (ExpectedInvocationAndResults entry : results) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,63,boolean unordered = !checkOrder;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,64,boolean validCallCount = entry.getResults().hasValidCallCount();
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,65,boolean match = invocation != null
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,66,&& entry.getExpectedInvocation().matches(invocation);
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,68,if (unordered && validCallCount && !match) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,69,continue;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,71,"result.append(""\n    "" + entry.toString());"
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,72,if (match) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,73,"result.append("" (+1)"");"
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,76,return result.toString();
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,79,"public boolean allowsExpectedInvocation(ExpectedInvocation expected,"
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,80,boolean checkOrder) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,81,if (this.checkOrder != checkOrder) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,82,return false;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,83,} else if (results.isEmpty() || !this.checkOrder) {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,84,return true;
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,85,} else {
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,86,ExpectedInvocation lastMethodCall = results.get(results.size() - 1)
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,87,.getExpectedInvocation();
True,src/org/easymock/internal/UnorderedBehavior.java,src/org/easymock/internal/UnorderedBehavior.java,88,return lastMethodCall.equals(expected);
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,7,import java.util.Iterator;
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,8,import java.util.List;
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,10,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,12,public class And implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,14,private final List<IArgumentMatcher> matchers;
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,16,public And(List<IArgumentMatcher> matchers) {
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,17,this.matchers = matchers;
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,20,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,21,for (IArgumentMatcher matcher : matchers) {
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,22,if (!matcher.matches(actual)) {
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,23,return false;
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,26,return true;
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,29,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,30,"buffer.append(""and("");"
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,31,for (Iterator<IArgumentMatcher> it = matchers.iterator(); it.hasNext();) {
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,32,it.next().appendTo(buffer);
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,33,if (it.hasNext()) {
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,34,"buffer.append("", "");"
True,src/org/easymock/internal/matchers/And.java,src/org/easymock/internal/matchers/And.java,37,"buffer.append("")"");"
True,src/org/easymock/internal/matchers/Any.java,src/org/easymock/internal/matchers/Any.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/Any.java,src/org/easymock/internal/matchers/Any.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/Any.java,src/org/easymock/internal/matchers/Any.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/Any.java,src/org/easymock/internal/matchers/Any.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/Any.java,src/org/easymock/internal/matchers/Any.java,9,public class Any implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/Any.java,src/org/easymock/internal/matchers/Any.java,11,public static final Any ANY = new Any();
True,src/org/easymock/internal/matchers/Any.java,src/org/easymock/internal/matchers/Any.java,13,private Any() {
True,src/org/easymock/internal/matchers/Any.java,src/org/easymock/internal/matchers/Any.java,17,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/Any.java,src/org/easymock/internal/matchers/Any.java,18,return true;
True,src/org/easymock/internal/matchers/Any.java,src/org/easymock/internal/matchers/Any.java,21,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Any.java,src/org/easymock/internal/matchers/Any.java,22,"buffer.append(""<any>"");"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,7,import java.lang.reflect.Array;
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,8,import java.util.Arrays;
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,10,public class ArrayEquals extends Equals {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,12,public ArrayEquals(Object expected) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,13,super(expected);
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,16,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,17,Object expected = getExpected();
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,18,if (expected instanceof boolean[]
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,19,&& (actual == null || actual instanceof boolean[])) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,20,"return Arrays.equals((boolean[]) expected, (boolean[]) actual);"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,21,} else if (expected instanceof byte[]
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,22,&& (actual == null || actual instanceof byte[])) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,23,"return Arrays.equals((byte[]) expected, (byte[]) actual);"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,24,} else if (expected instanceof char[]
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,25,&& (actual == null || actual instanceof char[])) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,26,"return Arrays.equals((char[]) expected, (char[]) actual);"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,27,} else if (expected instanceof double[]
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,28,&& (actual == null || actual instanceof double[])) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,29,"return Arrays.equals((double[]) expected, (double[]) actual);"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,30,} else if (expected instanceof float[]
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,31,&& (actual == null || actual instanceof float[])) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,32,"return Arrays.equals((float[]) expected, (float[]) actual);"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,33,} else if (expected instanceof int[]
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,34,&& (actual == null || actual instanceof int[])) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,35,"return Arrays.equals((int[]) expected, (int[]) actual);"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,36,} else if (expected instanceof long[]
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,37,&& (actual == null || actual instanceof long[])) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,38,"return Arrays.equals((long[]) expected, (long[]) actual);"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,39,} else if (expected instanceof short[]
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,40,&& (actual == null || actual instanceof short[])) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,41,"return Arrays.equals((short[]) expected, (short[]) actual);"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,42,} else if (expected instanceof Object[]
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,43,&& (actual == null || actual instanceof Object[])) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,44,"return Arrays.equals((Object[]) expected, (Object[]) actual);"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,45,} else {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,46,return super.matches(actual);
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,50,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,51,if (getExpected() != null && getExpected().getClass().isArray()) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,52,"appendArray(createObjectArray(getExpected()), buffer);"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,53,} else {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,54,super.appendTo(buffer);
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,58,"private void appendArray(Object[] array, StringBuffer buffer) {"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,59,"buffer.append(""["");"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,60,for (int i = 0; i < array.length; i++) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,61,new Equals(array[i]).appendTo(buffer);
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,62,if (i != array.length - 1) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,63,"buffer.append("", "");"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,66,"buffer.append(""]"");"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,69,public static Object[] createObjectArray(Object array) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,70,if (array instanceof Object[]) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,71,return (Object[]) array;
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,73,Object[] result = new Object[Array.getLength(array)];
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,74,for (int i = 0; i < Array.getLength(array); i++) {
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,75,"result[i] = Array.get(array, i);"
True,src/org/easymock/internal/matchers/ArrayEquals.java,src/org/easymock/internal/matchers/ArrayEquals.java,77,return result;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,2,"* Copyright (c) 2001-2007 OFFIS, Henri Tremblay."
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,7,import java.util.Comparator;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,9,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,10,import org.easymock.LogicalOperator;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,12,public class Compare<T> implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,14,private T expected;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,16,private Comparator<T> comparator;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,18,private LogicalOperator operator;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,20,"public Compare(T expected, Comparator<T> comparator, LogicalOperator result) {"
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,21,this.expected = expected;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,22,this.comparator = comparator;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,23,this.operator = result;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,26,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,27,"buffer.append(comparator + ""("" + expected + "") "" + operator.getSymbol()"
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,28,"+ "" 0"");"
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,31,"@SuppressWarnings(""unchecked"")"
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,32,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,33,if(actual == null) {
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,34,return false;
True,src/org/easymock/internal/matchers/Compare.java,src/org/easymock/internal/matchers/Compare.java,36,"return operator.matchResult(comparator.compare((T) actual, expected));"
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,7,public class CompareEqual<T extends Comparable<T>> extends CompareTo<T> {
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,9,public CompareEqual(Comparable<T> value) {
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,10,super(value);
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,13,@Override
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,14,protected String getName() {
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,15,"return ""cmpEq"";"
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,18,@Override
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,19,protected boolean matchResult(int result) {
True,src/org/easymock/internal/matchers/CompareEqual.java,src/org/easymock/internal/matchers/CompareEqual.java,20,return result == 0;
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,9,public abstract class CompareTo<T extends Comparable<T>> implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,10,private final Comparable<T> expected;
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,12,public CompareTo(Comparable<T> value) {
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,13,this.expected = value;
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,16,"@SuppressWarnings(""unchecked"")"
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,17,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,19,if(!(actual instanceof Comparable)) {
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,20,return false;
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,23,return matchResult(((Comparable) actual).compareTo(expected));
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,26,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,27,"buffer.append(getName() + ""("" + expected + "")"");"
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,30,protected abstract String getName();
True,src/org/easymock/internal/matchers/CompareTo.java,src/org/easymock/internal/matchers/CompareTo.java,32,protected abstract boolean matchResult(int result);
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,9,public class Contains implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,11,private final String substring;
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,13,public Contains(String substring) {
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,14,this.substring = substring;
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,17,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,18,return (actual instanceof String)
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,19,&& ((String) actual).indexOf(substring) >= 0;
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,22,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Contains.java,src/org/easymock/internal/matchers/Contains.java,23,"buffer.append(""contains(\"""" + substring + ""\"")"");"
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,9,public class EndsWith implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,11,private final String suffix;
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,13,public EndsWith(String suffix) {
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,14,this.suffix = suffix;
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,17,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,18,return (actual instanceof String) && ((String) actual).endsWith(suffix);
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,21,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/EndsWith.java,src/org/easymock/internal/matchers/EndsWith.java,22,"buffer.append(""endsWith(\"""" + suffix + ""\"")"");"
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,9,public class Equals implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,11,private final Object expected;
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,13,public Equals(Object expected) {
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,14,this.expected = expected;
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,17,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,18,if (this.expected == null) {
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,19,return actual == null;
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,21,return expected.equals(actual);
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,24,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,25,appendQuoting(buffer);
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,26,buffer.append(expected);
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,27,appendQuoting(buffer);
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,30,private void appendQuoting(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,31,if (expected instanceof String) {
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,32,"buffer.append(""\"""");"
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,33,} else if (expected instanceof Character) {
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,34,"buffer.append(""'"");"
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,38,protected final Object getExpected() {
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,39,return expected;
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,42,@Override
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,43,public boolean equals(Object o) {
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,44,if (o == null || !this.getClass().equals(o.getClass()))
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,45,return false;
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,46,Equals other = (Equals) o;
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,47,return this.expected == null && other.expected == null
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,48,|| this.expected != null
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,49,&& this.expected.equals(other.expected);
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,52,@Override
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,53,public int hashCode() {
True,src/org/easymock/internal/matchers/Equals.java,src/org/easymock/internal/matchers/Equals.java,54,"throw new UnsupportedOperationException(""hashCode() is not supported"");"
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,9,public class EqualsWithDelta implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,10,private final Number expected;
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,12,private final Number delta;
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,14,"public EqualsWithDelta(Number value, Number delta) {"
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,15,this.expected = value;
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,16,this.delta = delta;
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,19,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,20,Number actualNumber = (Number) actual;
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,21,return expected.doubleValue() - delta.doubleValue() <= actualNumber
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,22,.doubleValue()
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,23,&& actualNumber.doubleValue() <= expected.doubleValue()
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,24,+ delta.doubleValue();
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,27,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/EqualsWithDelta.java,src/org/easymock/internal/matchers/EqualsWithDelta.java,28,"buffer.append(""eq("" + expected + "", "" + delta + "")"");"
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,7,import java.util.regex.Pattern;
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,9,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,11,public class Find implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,13,private final String regex;
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,15,public Find(String regex) {
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,16,this.regex = regex;
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,19,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,20,return (actual instanceof String)
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,21,&& Pattern.compile(regex).matcher((String) actual).find();
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,24,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Find.java,src/org/easymock/internal/matchers/Find.java,25,"buffer.append(""find(\"""" + regex.replaceAll(""\\\\"", ""\\\\\\\\"") + ""\"")"");"
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,7,public class GreaterOrEqual<T extends Comparable<T>> extends CompareTo<T> {
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,9,public GreaterOrEqual(Comparable<T> value) {
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,10,super(value);
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,13,@Override
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,14,protected String getName() {
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,15,"return ""geq"";"
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,18,@Override
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,19,protected boolean matchResult(int result) {
True,src/org/easymock/internal/matchers/GreaterOrEqual.java,src/org/easymock/internal/matchers/GreaterOrEqual.java,20,return result >= 0;
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,7,public class GreaterThan<T extends Comparable<T>> extends CompareTo<T> {
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,9,public GreaterThan(Comparable<T> value) {
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,10,super(value);
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,13,@Override
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,14,protected String getName() {
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,15,"return ""gt"";"
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,18,@Override
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,19,protected boolean matchResult(int result) {
True,src/org/easymock/internal/matchers/GreaterThan.java,src/org/easymock/internal/matchers/GreaterThan.java,20,return result > 0;
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,9,public class InstanceOf implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,11,private final Class<?> clazz;
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,13,public InstanceOf(Class clazz) {
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,14,this.clazz = clazz;
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,17,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,18,return (actual != null) && clazz.isAssignableFrom(actual.getClass());
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,21,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/InstanceOf.java,src/org/easymock/internal/matchers/InstanceOf.java,22,"buffer.append(""isA("" + clazz.getName() + "")"");"
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,7,public class LessOrEqual<T extends Comparable<T>> extends CompareTo<T> {
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,9,public LessOrEqual(Comparable<T> value) {
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,10,super(value);
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,13,@Override
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,14,protected String getName() {
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,15,"return ""leq"";"
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,18,@Override
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,19,protected boolean matchResult(int result) {
True,src/org/easymock/internal/matchers/LessOrEqual.java,src/org/easymock/internal/matchers/LessOrEqual.java,20,return result <= 0;
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,7,public class LessThan<T extends Comparable<T>> extends CompareTo<T> {
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,9,public LessThan(Comparable<T> value) {
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,10,super(value);
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,13,@Override
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,14,protected String getName() {
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,15,"return ""lt"";"
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,18,@Override
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,19,protected boolean matchResult(int result) {
True,src/org/easymock/internal/matchers/LessThan.java,src/org/easymock/internal/matchers/LessThan.java,20,return result < 0;
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,9,public class Matches implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,11,private final String regex;
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,13,public Matches(String regex) {
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,14,this.regex = regex;
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,17,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,18,return (actual instanceof String) && ((String) actual).matches(regex);
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,21,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Matches.java,src/org/easymock/internal/matchers/Matches.java,22,"buffer.append(""matches(\"""" + regex.replaceAll(""\\\\"", ""\\\\\\\\"")"
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,9,public class Not implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,11,private final IArgumentMatcher first;
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,13,public Not(IArgumentMatcher first) {
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,14,this.first = first;
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,17,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,18,return !first.matches(actual);
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,21,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,22,"buffer.append(""not("");"
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,23,first.appendTo(buffer);
True,src/org/easymock/internal/matchers/Not.java,src/org/easymock/internal/matchers/Not.java,24,"buffer.append("")"");"
True,src/org/easymock/internal/matchers/NotNull.java,src/org/easymock/internal/matchers/NotNull.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/NotNull.java,src/org/easymock/internal/matchers/NotNull.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/NotNull.java,src/org/easymock/internal/matchers/NotNull.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/NotNull.java,src/org/easymock/internal/matchers/NotNull.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/NotNull.java,src/org/easymock/internal/matchers/NotNull.java,9,public class NotNull implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/NotNull.java,src/org/easymock/internal/matchers/NotNull.java,11,public static final NotNull NOT_NULL = new NotNull();
True,src/org/easymock/internal/matchers/NotNull.java,src/org/easymock/internal/matchers/NotNull.java,13,private NotNull() {
True,src/org/easymock/internal/matchers/NotNull.java,src/org/easymock/internal/matchers/NotNull.java,17,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/NotNull.java,src/org/easymock/internal/matchers/NotNull.java,18,return actual != null;
True,src/org/easymock/internal/matchers/NotNull.java,src/org/easymock/internal/matchers/NotNull.java,21,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/NotNull.java,src/org/easymock/internal/matchers/NotNull.java,22,"buffer.append(""notNull()"");"
True,src/org/easymock/internal/matchers/Null.java,src/org/easymock/internal/matchers/Null.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/Null.java,src/org/easymock/internal/matchers/Null.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/Null.java,src/org/easymock/internal/matchers/Null.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/Null.java,src/org/easymock/internal/matchers/Null.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/Null.java,src/org/easymock/internal/matchers/Null.java,9,public class Null implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/Null.java,src/org/easymock/internal/matchers/Null.java,11,public static final Null NULL = new Null();
True,src/org/easymock/internal/matchers/Null.java,src/org/easymock/internal/matchers/Null.java,13,private Null() {
True,src/org/easymock/internal/matchers/Null.java,src/org/easymock/internal/matchers/Null.java,16,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/Null.java,src/org/easymock/internal/matchers/Null.java,17,return actual == null;
True,src/org/easymock/internal/matchers/Null.java,src/org/easymock/internal/matchers/Null.java,20,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Null.java,src/org/easymock/internal/matchers/Null.java,21,"buffer.append(""isNull()"");"
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,7,import java.util.Iterator;
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,8,import java.util.List;
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,10,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,12,public class Or implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,14,private final List<IArgumentMatcher> matchers;
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,16,public Or(List<IArgumentMatcher> matchers) {
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,17,this.matchers = matchers;
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,20,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,21,for (IArgumentMatcher matcher : matchers) {
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,22,if (matcher.matches(actual)) {
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,23,return true;
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,26,return false;
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,29,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,30,"buffer.append(""or("");"
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,31,for (Iterator<IArgumentMatcher> it = matchers.iterator(); it.hasNext();) {
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,32,it.next().appendTo(buffer);
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,33,if (it.hasNext()) {
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,34,"buffer.append("", "");"
True,src/org/easymock/internal/matchers/Or.java,src/org/easymock/internal/matchers/Or.java,37,"buffer.append("")"");"
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,9,public class Same implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,11,private final Object expected;
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,13,public Same(Object expected) {
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,14,this.expected = expected;
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,17,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,18,return expected == actual;
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,21,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,22,"buffer.append(""same("");"
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,23,appendQuoting(buffer);
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,24,buffer.append(expected);
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,25,appendQuoting(buffer);
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,26,"buffer.append("")"");"
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,29,private void appendQuoting(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,30,if (expected instanceof String) {
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,31,"buffer.append(""\"""");"
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,32,} else if (expected instanceof Character) {
True,src/org/easymock/internal/matchers/Same.java,src/org/easymock/internal/matchers/Same.java,33,"buffer.append(""'"");"
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,3,* This program is made available under the terms of the MIT License.
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,5,package org.easymock.internal.matchers;
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,7,import org.easymock.IArgumentMatcher;
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,9,public class StartsWith implements IArgumentMatcher {
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,11,private final String prefix;
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,13,public StartsWith(String prefix) {
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,14,this.prefix = prefix;
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,17,public boolean matches(Object actual) {
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,18,return (actual instanceof String)
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,19,&& ((String) actual).startsWith(prefix);
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,22,public void appendTo(StringBuffer buffer) {
True,src/org/easymock/internal/matchers/StartsWith.java,src/org/easymock/internal/matchers/StartsWith.java,23,"buffer.append(""startsWith(\"""" + prefix + ""\"")"");"
True,src/org/mockito/InvocationWithMatchers.java,src/org/mockito/InvocationWithMatchers.java,1,package org.mockito;
True,src/org/mockito/InvocationWithMatchers.java,src/org/mockito/InvocationWithMatchers.java,3,import java.util.List;
True,src/org/mockito/InvocationWithMatchers.java,src/org/mockito/InvocationWithMatchers.java,5,import org.easymock.IArgumentMatcher;
True,src/org/mockito/InvocationWithMatchers.java,src/org/mockito/InvocationWithMatchers.java,6,import org.easymock.internal.*;
True,src/org/mockito/InvocationWithMatchers.java,src/org/mockito/InvocationWithMatchers.java,8,public class InvocationWithMatchers extends ExpectedInvocation {
True,src/org/mockito/InvocationWithMatchers.java,src/org/mockito/InvocationWithMatchers.java,10,"public InvocationWithMatchers(Invocation invocation, List<IArgumentMatcher> matchers) {"
True,src/org/mockito/InvocationWithMatchers.java,src/org/mockito/InvocationWithMatchers.java,11,"super(invocation, matchers);"
True,src/org/mockito/InvocationWithMatchers.java,src/org/mockito/InvocationWithMatchers.java,14,MockitoInvocation getInvocation() {
True,src/org/mockito/InvocationWithMatchers.java,src/org/mockito/InvocationWithMatchers.java,15,return (MockitoInvocation) this.invocation;
True,src/org/mockito/MethodSelector.java,src/org/mockito/MethodSelector.java,1,package org.mockito;
True,src/org/mockito/MethodSelector.java,src/org/mockito/MethodSelector.java,3,public interface MethodSelector<T> {
True,src/org/mockito/MethodSelector.java,src/org/mockito/MethodSelector.java,5,T on();
True,src/org/mockito/MockAwareInvocationHandler.java,src/org/mockito/MockAwareInvocationHandler.java,1,package org.mockito;
True,src/org/mockito/MockAwareInvocationHandler.java,src/org/mockito/MockAwareInvocationHandler.java,3,import java.lang.reflect.InvocationHandler;
True,src/org/mockito/MockAwareInvocationHandler.java,src/org/mockito/MockAwareInvocationHandler.java,5,public interface MockAwareInvocationHandler extends InvocationHandler {
True,src/org/mockito/MockAwareInvocationHandler.java,src/org/mockito/MockAwareInvocationHandler.java,6,void setMock(Object mock);
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,2,* Copyright (c) 2007 Szczepan Faber
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,3,* This program is made available under the terms of the MIT License.
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,5,package org.mockito;
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,7,import net.sf.cglib.proxy.*;
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,9,import org.easymock.internal.ObjectMethodsFilter;
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,10,import org.easymock.internal.ClassProxyFactory.MockMethodInterceptor;
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,11,import org.mockito.exceptions.NotAMockException;
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,13,public class MockUtil {
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,15,private static MockMethodInterceptor getInterceptor(Object mock) {
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,16,Factory factory = (Factory) mock;
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,17,return (MockMethodInterceptor) factory.getCallback(0);
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,20,"@SuppressWarnings(""unchecked"")"
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,21,public static <T> MockitoControl<T> getControl(T mock) {
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,22,ObjectMethodsFilter<MockitoControl<T>> handler;
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,24,try {
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,25,if (Enhancer.isEnhanced(mock.getClass())) {
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,26,handler = (ObjectMethodsFilter) getInterceptor(mock)
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,27,.getHandler();
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,28,} else {
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,29,throw new NotAMockException(mock);
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,32,return handler.getDelegate();
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,33,} catch (ClassCastException e) {
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,34,throw new NotAMockException(mock);
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,38,public static void validateMock(Object mock) {
True,src/org/mockito/MockUtil.java,src/org/mockito/MockUtil.java,39,getControl(mock);
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1,package org.mockito;
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,3,import org.easymock.internal.*;
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,4,import org.mockito.exceptions.NotAMockMethodException;
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,5,import org.mockito.matchers.*;
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,7,public class Mockito {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,9,public static <T> T mock(Class<T> classToMock) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,10,try {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,11,ClassProxyFactory<T> proxyFactory = new ClassProxyFactory<T>();
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,12,"return proxyFactory.createProxy(classToMock, new ObjectMethodsFilter<MockitoControl>("
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,13,"classToMock, new MockitoControl<T>(), null));"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,14,} catch (RuntimeExceptionWrapper e) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,15,throw (RuntimeException) e.getRuntimeException().fillInStackTrace();
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,19,public static <T> MockitoExpectation<T> stub(T methodCallToStub) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,20,//TODO increment number of stubs
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,21,//TODO stub has to be removed from MockitoOperations.controlToBeStubbed!!!!!!!
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,22,MockitoExpectation controlToStub = MockitoOperations.controlToBeStubbed();
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,23,if (controlToStub == null) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,24,throw new NotAMockMethodException();
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,26,return controlToStub;
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,29,public static <T> T verify(T mock) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,30,MockUtil.validateMock(mock);
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,31,MockitoOperations.reportVerifyingMode(VerifyingMode.anyTimes());
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,32,return mock;
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,35,"public static <T> T verify(T mock, int exactNumberOfInvocations) {"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,36,//TODO validate mock everywhere
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,37,//TODO validate if there is unfinished stubbing
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,38,MockitoOperations.reportVerifyingMode(VerifyingMode.times(exactNumberOfInvocations));
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,39,return mock;
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,42,public static void verifyNoMoreInteractions(Object ... mocks) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,43,for (Object mock : mocks) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,44,MockUtil.getControl(mock).verifyNoMoreInteractions();
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,48,public static void verifyZeroInteractions(Object ... mocks) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,49,verifyNoMoreInteractions(mocks);
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,52,public static <T> T assertInvoked(T mock) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,53,return verify(mock);
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,56,"public static <T> T assertInvoked(T mock, int exactNumberOfInvocations) {"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,57,"return verify(mock, exactNumberOfInvocations);"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,60,public static void assertNoMoreInteractions(Object ... mocks) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,61,verifyNoMoreInteractions(mocks);
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,64,public static void assertZeroInteractions(Object ... mocks) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,65,verifyZeroInteractions(mocks);
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,68,public static <T> T assertThat(MockitoMatcher<T> matcher) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,69,return verify(matcher.getMock());
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,72,public static <T> MockitoMatcher<T> wasInvoked(T mock) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,73,return new WasInvokedMatcher<T>(mock);
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,76,"public static <T> MockitoMatcher<T> wasInvoked(T mock, int exactNumberOfInvocations) {"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,77,"return new WasInvokedMatcher<T>(mock, exactNumberOfInvocations);"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,80,public static <T> MockitoMatcher<T> noMoreInteractions(T mock) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,81,return new HasNoMoreIvocationsMatcher<T>(mock);
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,84,public static <T> MockitoMatcher<T> zeroInteractions(T mock) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,85,return new HasNoIvocationsMatcher<T>(mock);
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,88,public static <T> VoidMethodExpectation<T> stubVoid(T mock) {
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,89,//TODO validate mock
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,90,//        MockitoOperations.reportControlForStubbing(mockitoControl)
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,91,return MockUtil.getControl(mock);
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,1,package org.mockito;
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,3,import java.util.*;
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,5,import org.easymock.internal.*;
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,6,import org.mockito.exceptions.*;
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,8,public class MockitoBehavior {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,10,private List<MockitoInvocation> registeredInvocations = new LinkedList<MockitoInvocation>();
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,11,"private Map<MockitoInvocation, Result> results = new HashMap<MockitoInvocation, Result>();"
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,13,public void addInvocation(MockitoInvocation invocation) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,14,this.registeredInvocations.add(invocation);
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,17,public void addResult(Result result) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,18,"this.results.put(registeredInvocations.remove(registeredInvocations.size()-1), result);"
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,21,"public void verify(InvocationWithMatchers invocation, VerifyingMode verifyingMode) {"
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,22,int actuallyInvoked = numberOfActualInvocations(invocation);
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,24,if (verifyingMode.numberOfInvocationsMatters()) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,25,int expectedInvoked = verifyingMode.getExactNumberOfInvocations();
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,27,if (actuallyInvoked != expectedInvoked) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,28,"throw new NumberOfInvocationsAssertionError(expectedInvoked, actuallyInvoked);"
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,30,} else {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,31,if (actuallyInvoked == 0) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,32,throw new MockVerificationAssertionError();
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,37,private int numberOfActualInvocations(InvocationWithMatchers expectedInvocation) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,38,int verifiedInvocations = 0;
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,39,for (MockitoInvocation registeredInvocation : registeredInvocations) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,40,if (expectedInvocation.matches(registeredInvocation)) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,41,verifiedInvocations += 1;
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,42,registeredInvocation.markVerified();
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,43,} else {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,44,verifiedInvocations += 0;
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,48,return verifiedInvocations;
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,51,public void verifyNoMoreInteractions() {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,52,for (MockitoInvocation registeredInvocation : registeredInvocations) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,53,if (!registeredInvocation.isVerified()) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,54,throw new MockVerificationAssertionError();
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,59,public Object resultFor(MockitoInvocation invocation) throws Throwable {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,60,if (results.get(invocation) == null) {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,61,return ToTypeMappings.emptyReturnValueFor(invocation.getMethod().getReturnType());
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,62,} else {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,63,return results.get(invocation).answer();
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,67,public MockitoInvocation lastInvocation() {
True,src/org/mockito/MockitoBehavior.java,src/org/mockito/MockitoBehavior.java,68,return registeredInvocations.get(registeredInvocations.size() - 1);
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,1,package org.mockito;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,3,import java.lang.reflect.*;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,4,import java.util.List;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,6,import org.easymock.IArgumentMatcher;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,7,import org.easymock.internal.*;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,9,"public class MockitoControl<T> implements MockAwareInvocationHandler, InvocationHandler, MockitoExpectation<T>, VoidMethodExpectation<T>, MethodSelector<T> {"
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,11,private MockitoBehavior behavior = new MockitoBehavior();
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,12,private Object mock;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,14,public MockitoControl() {}
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,16,"public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {"
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,17,List<IArgumentMatcher> lastMatchers = LastArguments.pullMatchers();
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,19,"MockitoInvocation invocation = new MockitoInvocation(proxy, method, args);"
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,20,"InvocationWithMatchers invocationWithMatchers = new InvocationWithMatchers(invocation, lastMatchers);"
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,22,if (MockitoOperations.mockVerificationScenario()) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,23,VerifyingMode verifyingMode = MockitoOperations.removeVerifyingMode();
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,25,"behavior.verify(invocationWithMatchers, verifyingMode);"
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,26,return ToTypeMappings.emptyReturnValueFor(method.getReturnType());
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,29,MockitoOperations.reportControlForStubbing(this);
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,31,behavior.addInvocation(invocation);
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,33,if (MockitoOperations.settingThrowableOnVoidMethodScenario()) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,34,Throwable throwable = MockitoOperations.removeThrowableToBeSetOnVoidMethod();
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,36,andThrows(throwable);
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,37,return null;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,40,return behavior.resultFor(invocation);
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,43,public void verifyNoMoreInteractions() {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,44,behavior.verifyNoMoreInteractions();
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,47,public void andReturn(T value) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,48,//      TODO count number of andReturn vs number of stubbing
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,49,//      TODO why do we need that in easyMock?
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,50,//      value = convertNumberClassIfNeccessary(value);
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,51,behavior.addResult(Result.createReturnResult(value));
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,54,public void andThrows(Throwable throwable) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,55,validateThrowable(throwable);
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,56,//TODO count number of andReturn vs number of stubbing
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,57,behavior.addResult(Result.createThrowResult(throwable));
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,60,private void validateThrowable(Throwable throwable) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,61,if (throwable == null) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,62,"throw new IllegalArgumentException(""Cannot set null throwable"");"
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,65,if (throwable instanceof RuntimeException || throwable instanceof Error) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,66,return;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,69,if (! isValidCheckedException(throwable)) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,70,"throw new IllegalArgumentException(""Given checked exception is invalid for this method"");"
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,74,private boolean isValidCheckedException(Throwable throwable) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,75,MockitoInvocation lastInvocation = behavior.lastInvocation();
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,77,Class<?>[] exceptions = lastInvocation.getMethod().getExceptionTypes();
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,78,Class<?> throwableClass = throwable.getClass();
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,79,for (Class<?> exception : exceptions) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,80,if (exception.isAssignableFrom(throwableClass)) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,81,return true;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,85,return false;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,88,public MethodSelector<T> toThrow(Throwable throwable) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,89,//TODO refactor so we don't use static state to keep the throwable
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,90,MockitoOperations.reportThrowableToBeSetOnVoidMethod(throwable);
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,91,return this;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,94,public T on() {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,95,// TODO check if mock can be of the type T
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,96,return (T) mock;
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,99,public void setMock(Object mock) {
True,src/org/mockito/MockitoControl.java,src/org/mockito/MockitoControl.java,100,this.mock = mock;
True,src/org/mockito/MockitoExpectation.java,src/org/mockito/MockitoExpectation.java,1,package org.mockito;
True,src/org/mockito/MockitoExpectation.java,src/org/mockito/MockitoExpectation.java,4,public interface MockitoExpectation<T> {
True,src/org/mockito/MockitoExpectation.java,src/org/mockito/MockitoExpectation.java,6,void andReturn(T value);
True,src/org/mockito/MockitoExpectation.java,src/org/mockito/MockitoExpectation.java,8,void andThrows(Throwable throwable);
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,1,package org.mockito;
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,3,import java.lang.reflect.Method;
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,4,import java.util.List;
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,6,import org.easymock.IArgumentMatcher;
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,7,import org.easymock.internal.*;
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,9,public class MockitoInvocation extends Invocation {
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,11,private boolean verified;
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,13,"public MockitoInvocation(Object mock, Method method, Object[] args) {"
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,14,"super(mock, method, args);"
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,17,public void markVerified() {
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,18,verified = true;
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,21,public boolean isVerified() {
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,22,return verified;
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,25,@Override
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,26,public int hashCode() {
True,src/org/mockito/MockitoInvocation.java,src/org/mockito/MockitoInvocation.java,27,return 1;
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,1,package org.mockito;
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,4,* static state. therefore dangerous and may have nasty bugs.
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,5,* TODO look at every method that changes state and make sure the state is cleared afterwards
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,7,* @author sfaber
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,9,public class MockitoOperations {
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,11,private final static ThreadLocal<MockitoControl> controlForStubbing = new ThreadLocal<MockitoControl>();
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,12,private final static ThreadLocal<VerifyingMode> verifyingModeLocal = new ThreadLocal<VerifyingMode>();
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,13,private final static ThreadLocal<Throwable> throwableToBeSetOnVoidMethod = new ThreadLocal<Throwable>();
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,15,public static synchronized void reportControlForStubbing(MockitoControl mockitoControl) {
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,16,controlForStubbing.set(mockitoControl);
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,19,public static synchronized MockitoExpectation controlToBeStubbed() {
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,20,return controlForStubbing.get();
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,23,public static synchronized void reportVerifyingMode(VerifyingMode verify) {
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,24,verifyingModeLocal.set(verify);
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,27,public static synchronized boolean mockVerificationScenario() {
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,28,return verifyingModeLocal.get() != null;
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,31,public static synchronized VerifyingMode removeVerifyingMode() {
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,32,VerifyingMode verifyingMode = verifyingModeLocal.get();
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,33,verifyingModeLocal.set(null);
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,34,return verifyingMode;
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,37,public static void reportThrowableToBeSetOnVoidMethod(Throwable throwable) {
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,38,throwableToBeSetOnVoidMethod.set(throwable);
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,41,public static Throwable removeThrowableToBeSetOnVoidMethod() {
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,42,Throwable throwable = throwableToBeSetOnVoidMethod.get();
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,43,throwableToBeSetOnVoidMethod.set(null);
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,44,return throwable;
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,47,public static boolean settingThrowableOnVoidMethodScenario() {
True,src/org/mockito/MockitoOperations.java,src/org/mockito/MockitoOperations.java,48,return throwableToBeSetOnVoidMethod.get() != null;
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,1,package org.mockito;
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,3,import org.mockito.exceptions.MockVerificationAssertionError;
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,5,public class VerifyingMode {
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,7,private static final int ANY_NUMBER_OF_TIMES = -1;
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,8,private final int exactNumberOfInvocations;
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,10,public VerifyingMode(int exactNumberOfTimes) {
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,11,this.exactNumberOfInvocations = exactNumberOfTimes;
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,14,public static VerifyingMode anyTimes() {
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,15,return new VerifyingMode(ANY_NUMBER_OF_TIMES);
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,18,public static VerifyingMode times(int exactNumberOfInvocations) {
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,19,if (exactNumberOfInvocations < 0) {
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,20,"throw new IllegalArgumentException(""Negative value is not allowed here"");"
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,22,return new VerifyingMode(exactNumberOfInvocations);
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,25,public boolean numberOfInvocationsMatters() {
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,26,return exactNumberOfInvocations != ANY_NUMBER_OF_TIMES;
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,29,public int getExactNumberOfInvocations() {
True,src/org/mockito/VerifyingMode.java,src/org/mockito/VerifyingMode.java,30,return exactNumberOfInvocations;
True,src/org/mockito/VoidMethodExpectation.java,src/org/mockito/VoidMethodExpectation.java,1,package org.mockito;
True,src/org/mockito/VoidMethodExpectation.java,src/org/mockito/VoidMethodExpectation.java,3,public interface VoidMethodExpectation<T> {
True,src/org/mockito/VoidMethodExpectation.java,src/org/mockito/VoidMethodExpectation.java,5,MethodSelector<T> toThrow(Throwable throwable);
True,src/org/mockito/exceptions/MockVerificationAssertionError.java,src/org/mockito/exceptions/MockVerificationAssertionError.java,1,package org.mockito.exceptions;
True,src/org/mockito/exceptions/MockVerificationAssertionError.java,src/org/mockito/exceptions/MockVerificationAssertionError.java,3,import java.util.*;
True,src/org/mockito/exceptions/MockVerificationAssertionError.java,src/org/mockito/exceptions/MockVerificationAssertionError.java,5,public class MockVerificationAssertionError extends AssertionError {
True,src/org/mockito/exceptions/MockVerificationAssertionError.java,src/org/mockito/exceptions/MockVerificationAssertionError.java,7,public MockVerificationAssertionError() {
True,src/org/mockito/exceptions/MockVerificationAssertionError.java,src/org/mockito/exceptions/MockVerificationAssertionError.java,8,"super(""Mock verification failed"");"
True,src/org/mockito/exceptions/MockVerificationAssertionError.java,src/org/mockito/exceptions/MockVerificationAssertionError.java,10,List<StackTraceElement> filteredStackTrace = new LinkedList<StackTraceElement>();
True,src/org/mockito/exceptions/MockVerificationAssertionError.java,src/org/mockito/exceptions/MockVerificationAssertionError.java,11,for(StackTraceElement trace : getStackTrace()) {
True,src/org/mockito/exceptions/MockVerificationAssertionError.java,src/org/mockito/exceptions/MockVerificationAssertionError.java,13,//            filteredStackTrace
True,src/org/mockito/exceptions/NotAMockException.java,src/org/mockito/exceptions/NotAMockException.java,1,package org.mockito.exceptions;
True,src/org/mockito/exceptions/NotAMockException.java,src/org/mockito/exceptions/NotAMockException.java,3,public class NotAMockException extends RuntimeException {
True,src/org/mockito/exceptions/NotAMockException.java,src/org/mockito/exceptions/NotAMockException.java,5,public NotAMockException(Object object) {
True,src/org/mockito/exceptions/NotAMockException.java,src/org/mockito/exceptions/NotAMockException.java,6,"super(""Not a mock: "" + object.getClass().getName());"
True,src/org/mockito/exceptions/NotAMockMethodException.java,src/org/mockito/exceptions/NotAMockMethodException.java,1,package org.mockito.exceptions;
True,src/org/mockito/exceptions/NotAMockMethodException.java,src/org/mockito/exceptions/NotAMockMethodException.java,3,public class NotAMockMethodException extends RuntimeException {
True,src/org/mockito/exceptions/NotAMockMethodException.java,src/org/mockito/exceptions/NotAMockMethodException.java,5,public NotAMockMethodException() {
True,src/org/mockito/exceptions/NotAMockMethodException.java,src/org/mockito/exceptions/NotAMockMethodException.java,6,"super(""stub() requires an argument which has to be a proper method call on a mock object"");"
True,src/org/mockito/exceptions/NumberOfInvocationsAssertionError.java,src/org/mockito/exceptions/NumberOfInvocationsAssertionError.java,1,package org.mockito.exceptions;
True,src/org/mockito/exceptions/NumberOfInvocationsAssertionError.java,src/org/mockito/exceptions/NumberOfInvocationsAssertionError.java,3,public class NumberOfInvocationsAssertionError extends AssertionError {
True,src/org/mockito/exceptions/NumberOfInvocationsAssertionError.java,src/org/mockito/exceptions/NumberOfInvocationsAssertionError.java,5,"public NumberOfInvocationsAssertionError(int expectedInvoked, int actuallyInvoked) {"
True,src/org/mockito/exceptions/NumberOfInvocationsAssertionError.java,src/org/mockito/exceptions/NumberOfInvocationsAssertionError.java,6,"super(""Expected to be invoked "" + expectedInvoked + "" times but was "" + actuallyInvoked);"
True,src/org/mockito/exceptions/UnfinishedStubbingException.java,src/org/mockito/exceptions/UnfinishedStubbingException.java,1,package org.mockito.exceptions;
True,src/org/mockito/exceptions/UnfinishedStubbingException.java,src/org/mockito/exceptions/UnfinishedStubbingException.java,3,public class UnfinishedStubbingException extends RuntimeException {
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,4,package org.mockito.matchers;
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,6,import org.hamcrest.BaseMatcher;
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,7,import org.hamcrest.Description;
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,9,public class HasNoIvocationsMatcher<T> extends BaseMatcher<T> implements MockitoMatcher<T> {
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,11,private final T mock;
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,13,public HasNoIvocationsMatcher(T mock) {
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,14,this.mock = mock;
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,17,public boolean matches(Object arg0) {
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,18,return false;
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,21,public void describeTo(Description arg0) {
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,24,public T getMock() {
True,src/org/mockito/matchers/HasNoIvocationsMatcher.java,src/org/mockito/matchers/HasNoIvocationsMatcher.java,25,return mock;
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,4,package org.mockito.matchers;
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,6,import org.hamcrest.BaseMatcher;
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,7,import org.hamcrest.Description;
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,9,public class HasNoMoreIvocationsMatcher<T> extends BaseMatcher<T> implements MockitoMatcher<T> {
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,11,private final T mock;
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,13,public HasNoMoreIvocationsMatcher(T mock) {
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,14,this.mock = mock;
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,17,public boolean matches(Object arg0) {
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,18,return false;
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,21,public void describeTo(Description arg0) {
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,24,public T getMock() {
True,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,src/org/mockito/matchers/HasNoMoreIvocationsMatcher.java,25,return mock;
True,src/org/mockito/matchers/MockitoMatcher.java,src/org/mockito/matchers/MockitoMatcher.java,1,package org.mockito.matchers;
True,src/org/mockito/matchers/MockitoMatcher.java,src/org/mockito/matchers/MockitoMatcher.java,3,import org.hamcrest.Matcher;
True,src/org/mockito/matchers/MockitoMatcher.java,src/org/mockito/matchers/MockitoMatcher.java,5,public interface MockitoMatcher<T> extends Matcher<T> {
True,src/org/mockito/matchers/MockitoMatcher.java,src/org/mockito/matchers/MockitoMatcher.java,6,T getMock();
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,4,package org.mockito.matchers;
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,6,import org.hamcrest.BaseMatcher;
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,7,import org.hamcrest.Description;
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,9,public class WasInvokedMatcher<T> extends BaseMatcher<T> implements MockitoMatcher<T> {
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,10,private final T mock;
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,11,private final int exactNumberOfInvocations;
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,13,public WasInvokedMatcher(T mock) {
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,14,"this(mock, -1);"
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,17,"public WasInvokedMatcher(T mock, int exactNumberOfInvocations) {"
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,18,this.mock = mock;
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,19,this.exactNumberOfInvocations = exactNumberOfInvocations;
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,22,public boolean matches(Object arg0) {
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,23,return true;
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,26,public void describeTo(Description arg0) {
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,29,public T getMock() {
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,30,return mock;
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,33,public int getExactNumberOfInvocations() {
True,src/org/mockito/matchers/WasInvokedMatcher.java,src/org/mockito/matchers/WasInvokedMatcher.java,34,return exactNumberOfInvocations;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,2,"* Copyright (c) 2003-2006 OFFIS, Henri Tremblay."
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,5,package org.easymock.classextension;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,7,import java.lang.reflect.Method;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,8,import java.util.ArrayList;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,10,import junit.framework.TestCase;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,11,import net.sf.cglib.proxy.Callback;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,12,import net.sf.cglib.proxy.Enhancer;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,13,import net.sf.cglib.proxy.Factory;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,14,import net.sf.cglib.proxy.MethodInterceptor;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,15,import net.sf.cglib.proxy.MethodProxy;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,17,import org.easymock.ObjenesisClassInstantiator;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,18,import org.junit.Test;
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,21,* This test case is used to make sure that the way cglib is used is providing the expected behavior
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,23,public class CglibTest extends TestCase {
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,26,* Check that an interceptor is used by only one instance of a class
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,27,* @throws Exception
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,29,@Test public void test() throws Exception {
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,31,Factory f1 = createMock();
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,32,Factory f2 = createMock();
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,34,"assertNotSame(f1.getCallback(0), f2.getCallback(0));"
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,37,private Factory createMock() throws Exception {
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,38,MethodInterceptor interceptor = new MethodInterceptor() {
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,39,"public Object intercept(Object obj, Method method, Object[] args,"
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,40,MethodProxy proxy) throws Throwable {
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,41,"return proxy.invokeSuper(obj, args);"
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,45,Enhancer enhancer = new Enhancer();
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,46,enhancer.setSuperclass(ArrayList.class);
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,47,enhancer.setCallbackType(MethodInterceptor.class);
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,49,Class mockClass = enhancer.createClass();
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,51,"Enhancer.registerCallbacks(mockClass, new Callback[] { interceptor });"
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,53,Factory f = (Factory) ObjenesisClassInstantiator.newInstance(mockClass);
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,55,f.getCallback(0);
True,test/org/easymock/classextension/CglibTest.java,test/org/easymock/classextension/CglibTest.java,57,return f;
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,1,package org.easymock.classextension.internal;
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,3,import static org.junit.Assert.*;
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,4,import static org.hamcrest.CoreMatchers.*;
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,6,import java.lang.reflect.Method;
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,8,import org.easymock.internal.ClassProxyFactory;
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,9,import org.junit.*;
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,10,import org.mockito.MockAwareInvocationHandler;
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,12,public class ClassProxyFactoryTest {
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,14,@Test public void shouldNotRewriteObjectMethodsForInterface() throws Exception {
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,15,ClassProxyFactory<SomeInterface> factory = new ClassProxyFactory<SomeInterface>();
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,16,SomeInterface proxy = null;
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,17,try {
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,18,"proxy = factory.createProxy(SomeInterface.class, new MockAwareInvocationHandler() {"
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,19,public void setMock(Object mock) {}
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,20,"public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {"
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,21,return null;
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,23,} catch (RuntimeException e) {
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,24,"fail(""should not lookup Object methods since they are not available on interfaces"");"
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,27,"assertThat(proxy, notNullValue());"
True,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,test/org/easymock/classextension/internal/ClassProxyFactoryTest.java,30,private interface SomeInterface {};
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,1,package org.easymock.internal;
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,3,import static org.junit.Assert.*;
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,5,import java.util.*;
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,7,import org.junit.Test;
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,9,public class ToTypeMappingsTest {
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,11,"@SuppressWarnings(""unchecked"")"
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,12,@Test public void shouldReturnEmptyCollectionsOrNullForNonCollections() {
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,13,assertTrue(((Collection)ToTypeMappings.emptyReturnValueFor(Collection.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,15,assertTrue(((Set)ToTypeMappings.emptyReturnValueFor(Set.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,16,assertTrue(((SortedSet)ToTypeMappings.emptyReturnValueFor(SortedSet.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,17,assertTrue(((HashSet)ToTypeMappings.emptyReturnValueFor(HashSet.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,18,assertTrue(((TreeSet)ToTypeMappings.emptyReturnValueFor(TreeSet.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,19,assertTrue(((LinkedHashSet)ToTypeMappings.emptyReturnValueFor(LinkedHashSet.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,21,assertTrue(((List)ToTypeMappings.emptyReturnValueFor(List.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,22,assertTrue(((ArrayList)ToTypeMappings.emptyReturnValueFor(ArrayList.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,23,assertTrue(((LinkedList)ToTypeMappings.emptyReturnValueFor(LinkedList.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,25,assertTrue(((Map)ToTypeMappings.emptyReturnValueFor(Map.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,26,assertTrue(((SortedMap)ToTypeMappings.emptyReturnValueFor(SortedMap.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,27,assertTrue(((HashMap)ToTypeMappings.emptyReturnValueFor(HashMap.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,28,assertTrue(((TreeMap)ToTypeMappings.emptyReturnValueFor(TreeMap.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,29,assertTrue(((LinkedHashMap)ToTypeMappings.emptyReturnValueFor(LinkedHashMap.class)).isEmpty());
True,test/org/easymock/internal/ToTypeMappingsTest.java,test/org/easymock/internal/ToTypeMappingsTest.java,31,assertNull(ToTypeMappings.emptyReturnValueFor(String.class));
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,9,import org.easymock.AbstractMatcher;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,10,import org.easymock.ArgumentsMatcher;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,11,import org.easymock.MockControl;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,12,import org.junit.Before;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,13,import org.junit.Test;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,15,public class ArgumentsMatcherTest {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,17,MockControl<IMethods> control;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,19,IMethods mock;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,21,@Before
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,22,public void setUp() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,23,control = MockControl.createStrictControl(IMethods.class);
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,24,mock = control.getMock();
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,27,@Test
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,28,public void expectedArgumentsDelegatedToMatcher() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,29,"mock.twoArgumentMethod(0, 5);"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,30,control.setMatcher(new AbstractMatcher() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,31,@Override
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,32,"public boolean matches(Object[] expected, Object[] actual) {"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,33,"assertEquals(0, ((Integer) expected[0]).intValue());"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,34,"assertEquals(5, ((Integer) expected[1]).intValue());"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,35,"assertEquals(1, ((Integer) actual[0]).intValue());"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,36,"assertEquals(6, ((Integer) actual[1]).intValue());"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,37,return true;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,40,mock.simpleMethod();
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,41,control.replay();
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,42,"mock.twoArgumentMethod(1, 6);"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,43,mock.simpleMethod();
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,44,control.verify();
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,47,@Test
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,48,public void expectedArgumentsDelegatedToMatcher2() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,49,"mock.threeArgumentMethod(7, """", ""A test"");"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,50,control.setMatcher(new AbstractMatcher() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,51,@Override
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,52,"public boolean matches(Object[] expected, Object[] actual) {"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,53,int expectedInt = ((Integer) expected[0]).intValue();
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,54,int actualInt = ((Integer) actual[0]).intValue();
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,55,return expectedInt < actualInt;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,58,"control.setReturnValue(""1"");"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,59,"mock.threeArgumentMethod(6, """", ""A test"");"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,60,"control.setReturnValue(""2"");"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,61,"mock.threeArgumentMethod(12, """", ""A test"");"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,62,"control.setReturnValue(""3"");"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,64,control.replay();
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,65,"mock.threeArgumentMethod(9, ""test"", ""test"");"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,66,"mock.threeArgumentMethod(8, ""test"", ""test"");"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,67,"mock.threeArgumentMethod(13, ""test"", ""test"");"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,68,control.verify();
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,71,@Test
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,72,public void errorString() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,73,"mock.twoArgumentMethod(0, 5);"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,74,control.setMatcher(new ArgumentsMatcher() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,75,"public boolean matches(Object[] expected, Object[] actual) {"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,76,return false;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,79,public String toString(Object[] arguments) {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,80,"return ""<<"" + arguments[0] + "">>"";"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,83,control.replay();
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,84,boolean failed = false;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,85,try {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,86,"mock.twoArgumentMethod(1, 5);"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,87,} catch (AssertionError expected) {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,88,failed = true;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,89,"assertEquals(""\n  Unexpected method call twoArgumentMethod(1, 5):"""
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,90,"+ ""\n    twoArgumentMethod(<<0>>): expected: 1, actual: 0"","
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,91,expected.getMessage());
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,93,if (!failed) {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,94,"fail(""exception expected"");"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,98,@Test
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,99,public void settingTheSameMatcherIsOk() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,100,try {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,101,"mock.twoArgumentMethod(1, 2);"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,102,control.setMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,103,control.setMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,104,"mock.twoArgumentMethod(1, 2);"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,105,control.setMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,107,} catch (IllegalStateException unexpected) {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,108,"fail(""no exception should be thrown if the same matcher is set twice"");"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,112,@Test
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,113,public void abstractMatcher() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,114,AbstractMatcher trueMatcher = new AbstractMatcher() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,115,"protected boolean parameterMatches(Object expected, Object actual) {"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,116,return true;
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,119,Object[] arrayWithNull = new Object[] { null };
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,120,Object[] arrayWithObject = new Object[] { new Object() };
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,121,"assertFalse(trueMatcher.matches(arrayWithNull, arrayWithObject));"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,122,"assertFalse(trueMatcher.matches(arrayWithObject, arrayWithNull));"
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,125,@Test
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,126,public void abstractMatcherToStringHandlesNullArray() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,127,AbstractMatcher matcher = new AbstractMatcher() {
True,test/org/easymock/tests/ArgumentsMatcherTest.java,test/org/easymock/tests/ArgumentsMatcherTest.java,129,"assertEquals("""", matcher.toString(null));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,9,import org.easymock.ArgumentsMatcher;
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,10,import org.easymock.MockControl;
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,13,public class ArrayMatcherTest {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,15,private static ArgumentsMatcher MATCHER = MockControl.ARRAY_MATCHER;
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,17,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,18,public void booleanArray() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,19,"assertTrue(equals(new boolean[] { true }, new boolean[] { true }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,20,"assertFalse(equals(new boolean[] { true }, new boolean[] { false }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,23,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,24,public void byteArray() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,25,"assertTrue(equals(new byte[] { 6 }, new byte[] { 6 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,26,"assertFalse(equals(new byte[] { 6 }, new byte[] { 7 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,29,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,30,public void charArray() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,31,"assertTrue(equals(new char[] { 'x' }, new char[] { 'x' }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,32,"assertFalse(equals(new char[] { 'x' }, new char[] { 'y' }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,35,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,36,public void doubleArray() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,37,"assertTrue(equals(new double[] { 6.0 }, new double[] { 6.0 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,38,"assertFalse(equals(new double[] { 6.0 }, new double[] { 7.0 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,41,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,42,public void floatArray() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,43,"assertTrue(equals(new float[] { 6.0F }, new float[] { 6.0F }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,44,"assertFalse(equals(new float[] { 6.0F }, new float[] { 7.0F }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,47,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,48,public void intArray() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,49,"assertTrue(equals(new int[] { 6 }, new int[] { 6 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,50,"assertFalse(equals(new int[] { 6 }, new int[] { 7 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,53,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,54,public void longArray() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,55,"assertTrue(equals(new long[] { 6 }, new long[] { 6 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,56,"assertFalse(equals(new long[] { 6 }, new long[] { 7 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,59,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,60,public void shortArray() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,61,"assertTrue(equals(new short[] { 6 }, new short[] { 6 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,62,"assertFalse(equals(new short[] { 6 }, new short[] { 7 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,65,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,66,public void objectArray() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,67,"assertTrue(equals(new String[] { ""1"", ""2"" }, new String[] { ""1"", ""2"" }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,68,"assertFalse(equals(new String[] { ""1"", ""2"" }, new String[] { ""2"", ""2"" }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,71,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,72,public void nonArray() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,73,"assertTrue(equals(""1"", ""1""));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,74,"assertFalse(equals(""1"", ""2""));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,77,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,78,public void testToString() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,79,"assertEquals(""[true, false]"", stringFor(new boolean[] { true, false }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,80,"assertEquals(""[6, 7]"", stringFor(new byte[] { 6, 7 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,81,"assertEquals(""['x', 'y']"", stringFor(new char[] { 'x', 'y' }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,82,"assertEquals(""[6.0, 7.0]"", stringFor(new double[] { 6, 7 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,83,"assertEquals(""[6.0, 7.0]"", stringFor(new float[] { 6, 7 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,84,"assertEquals(""[6, 7]"", stringFor(new int[] { 6, 7 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,85,"assertEquals(""[6, 7]"", stringFor(new long[] { 6, 7 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,86,"assertEquals(""[6, 7]"", stringFor(new short[] { 6, 7 }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,87,"assertEquals(""[\""1\"", \""2\""]"", stringFor(new String[] { ""1"", ""2"" }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,88,"assertEquals(""[\""1\"", \""2\""]"", stringFor(new Object[] { ""1"", ""2"" }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,91,@Test
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,92,public void toStringMixed() {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,93,"assertEquals(""3, [\""1\"", 2.0], \""Test\"""", MATCHER"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,94,".toString(new Object[] { new Integer(3),"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,95,"new Object[] { ""1"", new Float(2.0) }, ""Test"" }));"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,98,private String stringFor(Object argument) {
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,99,return MATCHER.toString(new Object[] { argument });
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,102,"private boolean equals(Object o1, Object o2) {"
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,103,Object[] expected = new Object[] { o1 };
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,104,Object[] actual = new Object[] { o2 };
True,test/org/easymock/tests/ArrayMatcherTest.java,test/org/easymock/tests/ArrayMatcherTest.java,105,"return MATCHER.matches(expected, actual);"
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,13,public class DefaultMatcherTest {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,15,public static interface ArrayInterface {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,16,void methodA(int[] argument);
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,18,void methodB(int[] argument);
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,21,private MockControl<ArrayInterface> control;
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,23,private ArrayInterface mock;
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,25,@Before
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,26,public void setup() {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,27,control = MockControl.createControl(ArrayInterface.class);
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,28,mock = control.getMock();
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,31,@Test
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,32,public void defaultMatcher() {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,33,control.setDefaultMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,35,"mock.methodA(new int[] { 1, 1 });"
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,36,"mock.methodB(new int[] { 2, 2 });"
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,38,control.replay();
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,40,"mock.methodA(new int[] { 1, 1 });"
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,41,"mock.methodB(new int[] { 2, 2 });"
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,43,control.verify();
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,46,@Test
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,47,public void failInReplayState() {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,48,control.replay();
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,49,try {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,50,control.setDefaultMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,51,fail();
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,52,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,56,@Test
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,57,public void failIfDefaultMatcherSetTwice() {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,58,control.setDefaultMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,59,try {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,60,control.setDefaultMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,61,fail();
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,62,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,63,assertEquals(
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,64,"""default matcher can only be set once directly after creation of the MockControl"","
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,65,expected.getMessage());
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,69,@Test
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,70,public void defaultMatcherSetTooLate() {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,71,"int[] integers = new int[] { 1, 1 };"
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,72,"int[] integers2 = new int[] { 2, 2 };"
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,73,mock.methodA(integers);
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,74,control.setVoidCallable();
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,75,control.setDefaultMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,76,mock.methodA(integers2);
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,77,control.setVoidCallable();
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,78,control.replay();
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,80,boolean failed = true;
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,81,try {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,82,"mock.methodA(new int[] { 1, 1 });"
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,83,failed = false;
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,84,} catch (AssertionError expected) {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,86,if (!failed) {
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,87,fail();
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,89,mock.methodA(integers);
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,90,"mock.methodA(new int[] { 2, 2 });"
True,test/org/easymock/tests/DefaultMatcherTest.java,test/org/easymock/tests/DefaultMatcherTest.java,91,control.verify();
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,9,import org.easymock.ArgumentsMatcher;
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,10,import org.easymock.MockControl;
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,13,public class EqualsMatcherTest {
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,14,final ArgumentsMatcher MATCHER = MockControl.EQUALS_MATCHER;
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,16,@Test
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,17,public void equalsMatcher() {
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,18,"assertTrue(MATCHER.matches(null, null));"
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,19,"assertFalse(MATCHER.matches(null, new Object[0]));"
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,20,"assertFalse(MATCHER.matches(new Object[0], null));"
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,21,"assertFalse(MATCHER.matches(new Object[] { """" }, new Object[] { null }));"
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,22,"assertFalse(MATCHER.matches(new Object[] { null }, new Object[] { """" }));"
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,23,assertTrue(MATCHER
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,24,".matches(new Object[] { null }, new Object[] { null }));"
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,25,"assertTrue(MATCHER.matches(new Object[] { ""x"" }, new Object[] { ""x"" }));"
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,28,@Test
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,29,public void differentNumberOfArguments() {
True,test/org/easymock/tests/EqualsMatcherTest.java,test/org/easymock/tests/EqualsMatcherTest.java,30,"assertFalse(MATCHER.matches(new Object[2], new Object[3]));"
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,9,import java.lang.reflect.Method;
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,11,import org.easymock.internal.ExpectedInvocation;
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,12,import org.easymock.internal.Invocation;
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,13,import org.junit.Before;
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,14,import org.junit.Test;
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,16,public class ExpectedMethodCallTest {
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,18,private ExpectedInvocation call;
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,20,@Before
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,21,"public void setup() throws SecurityException, NoSuchMethodException {"
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,22,"Object[] arguments1 = new Object[] { """" };"
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,23,"Method m = Object.class.getMethod(""equals"","
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,24,new Class[] { Object.class });
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,25,"call = new ExpectedInvocation(new Invocation(null, m, arguments1), null);"
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,28,//    @Test
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,29,//    public void testHashCode() {
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,30,//        try {
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,31,//            call.hashCode();
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,32,//            fail();
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,33,//        } catch (UnsupportedOperationException expected) {
True,test/org/easymock/tests/ExpectedMethodCallTest.java,test/org/easymock/tests/ExpectedMethodCallTest.java,34,"//            assertEquals(""hashCode() is not implemented"", expected.getMessage());"
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,5,package org.easymock.tests;
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,7,import java.io.IOException;
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,9,public interface IMethods {
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,11,boolean booleanReturningMethod(int index);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,13,byte byteReturningMethod(int index);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,15,short shortReturningMethod(int index);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,17,char charReturningMethod(int index);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,19,int intReturningMethod(int index);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,21,long longReturningMethod(int index);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,23,float floatReturningMethod(int index);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,25,double doubleReturningMethod(int index);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,27,Object objectReturningMethod(int index);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,29,String oneArg(boolean value);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,31,String oneArg(byte value);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,33,String oneArg(short value);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,35,String oneArg(char value);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,37,String oneArg(int value);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,39,String oneArg(long value);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,41,String oneArg(float value);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,43,String oneArg(double value);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,45,String oneArg(Object value);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,47,String oneArg(String value);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,49,public String throwsNothing(boolean value);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,51,public String throwsIOException(int count) throws IOException;
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,53,public String throwsError(int count) throws Error;
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,55,void simpleMethod();
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,57,void simpleMethodWithArgument(String argument);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,59,"Object threeArgumentMethod(int valueOne, Object valueTwo, String valueThree);"
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,61,"void twoArgumentMethod(int one, int two);"
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,63,void arrayMethod(String[] strings);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,65,String oneArray(boolean[] array);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,67,String oneArray(byte[] array);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,69,String oneArray(char[] array);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,71,String oneArray(double[] array);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,73,String oneArray(float[] array);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,75,String oneArray(int[] array);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,77,String oneArray(long[] array);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,79,String oneArray(short[] array);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,81,String oneArray(Object[] array);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,83,String oneArray(String[] array);
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,85,"void varargsString(int i, String... string);"
True,test/org/easymock/tests/IMethods.java,test/org/easymock/tests/IMethods.java,87,"void varargsObject(int i, Object... object);"
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,5,package org.easymock.tests;
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,7,public interface IVarArgs {
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,8,"public void withVarargsString(int value, String... s);"
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,10,"public void withVarargsObject(int value, Object... o);"
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,12,"public void withVarargsBoolean(int value, boolean... b);"
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,14,"public void withVarargsByte(int value, byte... b);"
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,16,"public void withVarargsChar(int value, char... c);"
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,18,"public void withVarargsDouble(int value, double... d);"
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,20,"public void withVarargsFloat(int value, float... f);"
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,22,"public void withVarargsInt(int value, int... i);"
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,24,"public void withVarargsLong(int value, long... l);"
True,test/org/easymock/tests/IVarArgs.java,test/org/easymock/tests/IVarArgs.java,26,"public void withVarargsShort(int value, short... s);"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,9,import java.lang.reflect.Method;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,11,import org.easymock.internal.EqualsMatcher;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,12,import org.easymock.internal.Invocation;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,13,import org.junit.Before;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,14,import org.junit.Test;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,16,public class InvocationTest {
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,18,private Invocation call;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,20,private Invocation equalCall;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,22,private Invocation nonEqualCall;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,24,@Before
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,25,"public void setup() throws SecurityException, NoSuchMethodException {"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,26,"Object[] arguments1 = new Object[] { """" };"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,27,"Object[] arguments2 = new Object[] { """" };"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,28,"Object[] arguments3 = new Object[] { ""X"" };"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,29,"Method m = Object.class.getMethod(""equals"","
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,30,new Class[] { Object.class });
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,31,Object mock = new Object();
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,32,"call = new Invocation(mock, m, arguments1);"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,33,"equalCall = new Invocation(mock, m, arguments2);"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,34,"nonEqualCall = new Invocation(mock, m, arguments3);"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,37,@Test
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,38,public void testEquals() {
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,39,assertFalse(call.equals(null));
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,40,"assertFalse(call.equals(""""));"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,41,assertTrue(call.equals(equalCall));
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,42,assertFalse(call.equals(nonEqualCall));
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,45,//    @Test
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,46,//    public void testHashCode() {
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,47,//        try {
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,48,//            call.hashCode();
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,49,//            fail();
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,50,//        } catch (UnsupportedOperationException expected) {
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,51,"//            assertEquals(""hashCode() is not implemented"", expected.getMessage());"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,55,@Test
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,56,public void testShouldDisplayMocksToStringIfValidJavaIdentifier()
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,57,"throws SecurityException, NoSuchMethodException {"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,58,class ToString {
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,59,private final String name;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,61,public ToString(String name) {
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,62,this.name = name;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,65,@Override
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,66,public String toString() {
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,67,return name;
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,70,public void aMethod() {
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,74,"Method method = ToString.class.getMethod(""aMethod"", new Class[0]);"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,75,"Invocation invocation = new Invocation(new ToString(""validJavaIdentifier""),"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,76,"method, null);"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,78,"assertEquals(invocation.toString(new EqualsMatcher()),"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,79,"""validJavaIdentifier.aMethod()"");"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,81,"invocation = new Invocation(new ToString(""no-valid-java-identifier""),"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,82,"method, null);"
True,test/org/easymock/tests/InvocationTest.java,test/org/easymock/tests/InvocationTest.java,84,"assertEquals(invocation.toString(new EqualsMatcher()), ""aMethod()"");"
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,5,package org.easymock.tests;
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,9,import java.io.IOException;
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,11,import org.easymock.MockControl;
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,12,import org.junit.Test;
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,14,public class LegacyBehaviorTests {
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,16,@Test
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,17,public void throwAfterThrowable() throws IOException {
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,19,MockControl<IMethods> control = MockControl
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,20,.createControl(IMethods.class);
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,21,IMethods mock = control.getMock();
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,23,mock.throwsIOException(0);
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,24,control.setThrowable(new IOException());
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,25,"control.setThrowable(new IOException(), MockControl.ONE_OR_MORE);"
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,27,control.replay();
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,29,try {
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,30,mock.throwsIOException(0);
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,31,"fail(""IOException expected"");"
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,32,} catch (IOException expected) {
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,35,boolean exceptionOccured = true;
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,36,try {
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,37,control.verify();
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,38,exceptionOccured = false;
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,39,} catch (AssertionError expected) {
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,40,assertEquals(
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,41,"""\n  Expectation failure on verify:"""
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,42,"+ ""\n    throwsIOException(0): expected: at least 2, actual: 1"","
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,43,expected.getMessage());
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,46,if (!exceptionOccured)
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,47,"fail(""exception expected"");"
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,49,try {
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,50,mock.throwsIOException(0);
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,51,"fail(""IOException expected"");"
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,52,} catch (IOException expected) {
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,55,control.verify();
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,57,try {
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,58,mock.throwsIOException(0);
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,59,"fail(""IOException expected"");"
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,60,} catch (IOException expected) {
True,test/org/easymock/tests/LegacyBehaviorTests.java,test/org/easymock/tests/LegacyBehaviorTests.java,63,control.verify();
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,9,import java.lang.reflect.Method;
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,11,import org.easymock.internal.ExpectedInvocation;
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,12,import org.easymock.internal.Invocation;
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,13,import org.junit.Before;
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,14,import org.junit.Test;
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,16,public class MatchableArgumentsTest {
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,18,private Object[] arguments;
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,20,private Object[] arguments2;
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,22,@Before
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,23,public void setup() {
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,24,"arguments = new Object[] { """" };"
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,25,"arguments2 = new Object[] { """", """" };"
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,28,@Test
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,29,"public void testEquals() throws SecurityException, NoSuchMethodException {"
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,30,Method toPreventNullPointerExceptionm = Object.class.getMethod(
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,31,"""toString"", new Class[] {});"
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,33,Object mock = new Object();
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,35,ExpectedInvocation matchableArguments = new ExpectedInvocation(
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,36,"new Invocation(mock, toPreventNullPointerExceptionm, arguments),"
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,37,null);
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,38,ExpectedInvocation nonEqualMatchableArguments = new ExpectedInvocation(
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,39,"new Invocation(mock, toPreventNullPointerExceptionm, arguments2),"
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,40,null);
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,42,assertFalse(matchableArguments.equals(null));
True,test/org/easymock/tests/MatchableArgumentsTest.java,test/org/easymock/tests/MatchableArgumentsTest.java,43,assertFalse(matchableArguments.equals(nonEqualMatchableArguments));
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,9,import org.easymock.*;
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,10,import org.junit.*;
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,12,public class MockNameTest {
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,14,private MockControl<IMethods> control;
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,16,@Test
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,17,public void defaultName() {
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,18,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,19,"String expected = ""EasyMock for "" + IMethods.class.toString();"
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,20,String actual = control.getMock().toString();
True,test/org/easymock/tests/MockNameTest.java,test/org/easymock/tests/MockNameTest.java,21,"assertEquals(expected, actual);"
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,13,public class NiceMockControlLongCompatibleReturnValueTest {
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,15,MockControl<IMethods> control;
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,17,IMethods mock;
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,19,@Before
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,20,public void setup() {
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,21,control = MockControl.createNiceControl(IMethods.class);
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,22,mock = control.getMock();
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,23,control.replay();
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,26,@Test
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,27,public void byteReturningValue() {
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,28,"assertEquals((byte) 0, mock.byteReturningMethod(12));"
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,29,control.verify();
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,32,@Test
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,33,public void shortReturningValue() {
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,34,"assertEquals((short) 0, mock.shortReturningMethod(12));"
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,35,control.verify();
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,38,@Test
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,39,public void charReturningValue() {
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,40,"assertEquals((char) 0, mock.charReturningMethod(12));"
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,41,control.verify();
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,44,@Test
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,45,public void intReturningValue() {
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,46,"assertEquals(0, mock.intReturningMethod(12));"
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,47,control.verify();
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,50,@Test
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,51,public void longReturningValue() {
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,52,"assertEquals((long) 0, mock.longReturningMethod(12));"
True,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,test/org/easymock/tests/NiceMockControlLongCompatibleReturnValueTest.java,53,control.verify();
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,13,public class NiceMockControlTest {
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,14,MockControl<IMethods> control;
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,16,IMethods mock;
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,18,@Before
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,19,public void setup() {
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,20,control = MockControl.createNiceControl(IMethods.class);
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,21,mock = control.getMock();
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,22,control.replay();
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,25,@Test
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,26,public void defaultReturnValueBoolean() {
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,27,"assertEquals(false, mock.booleanReturningMethod(12));"
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,28,control.verify();
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,31,@Test
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,32,public void defaultReturnValueFloat() {
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,33,"assertEquals(0.0f, mock.floatReturningMethod(12), 0.0f);"
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,34,control.verify();
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,37,@Test
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,38,public void defaultReturnValueDouble() {
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,39,"assertEquals(0.0d, mock.doubleReturningMethod(12), 0.0d);"
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,40,control.verify();
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,43,@Test
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,44,public void defaultReturnValueObject() {
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,45,"assertEquals(null, mock.objectReturningMethod(12));"
True,test/org/easymock/tests/NiceMockControlTest.java,test/org/easymock/tests/NiceMockControlTest.java,46,control.verify();
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,9,import java.lang.reflect.Method;
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,11,import org.easymock.MockControl;
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,12,import org.easymock.internal.MockInvocationHandler;
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,13,import org.easymock.internal.ObjectMethodsFilter;
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,14,import org.junit.Before;
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,15,import org.junit.Test;
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,17,public class ObjectMethodsTest {
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,18,private MockControl<EmptyInterface> control;
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,20,private EmptyInterface mock;
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,22,private interface EmptyInterface {
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,25,@Before
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,26,public void setup() {
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,27,control = MockControl.createControl(EmptyInterface.class);
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,28,mock = control.getMock();
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,31,@Test
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,32,public void equalsBeforeActivation() {
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,33,"assertEquals(mock, mock);"
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,34,assertTrue(!mock.equals(null));
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,37,@Test
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,38,public void equalsAfterActivation() {
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,39,control.replay();
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,40,"assertEquals(mock, mock);"
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,41,assertTrue(!mock.equals(null));
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,44,@Test
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,45,public void testHashCode() {
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,46,int hashCodeBeforeActivation = mock.hashCode();
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,47,control.replay();
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,48,int hashCodeAfterActivation = mock.hashCode();
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,49,"assertEquals(hashCodeBeforeActivation, hashCodeAfterActivation);"
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,52,@Test
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,53,public void toStringBeforeActivation() {
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,54,"assertEquals(""EasyMock for "" + EmptyInterface.class.toString(), mock"
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,55,.toString());
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,58,@Test
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,59,public void toStringAfterActivation() {
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,60,control.replay();
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,61,"assertEquals(""EasyMock for "" + EmptyInterface.class.toString(), mock"
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,62,.toString());
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,65,private static class MockedClass {
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,68,private static class DummyProxy extends MockedClass {
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,71,"// if the class is no Proxy, ObjectMethodFilter should use the"
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,72,// superclasses' name. This is needed for the class extension.
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,73,@Test
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,74,public void toStringForClasses() throws Throwable {
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,75,"ObjectMethodsFilter filter = new ObjectMethodsFilter(Object.class, null, null);"
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,76,"Method toString = Object.class.getMethod(""toString"", new Class[0]);"
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,77,"assertEquals(""EasyMock for "" + MockedClass.class.toString(), filter"
True,test/org/easymock/tests/ObjectMethodsTest.java,test/org/easymock/tests/ObjectMethodsTest.java,78,".invoke(new DummyProxy(), toString, new Object[0]));"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,13,public class RecordStateInvalidDefaultReturnValueTest {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,14,MockControl<IMethods> control;
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,16,IMethods mock;
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,18,@Before
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,19,public void setup() {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,20,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,21,mock = control.getMock();
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,24,@Test
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,25,public void setInvalidDefaultBooleanReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,26,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,27,try {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,28,control.setDefaultReturnValue(false);
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,29,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,30,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,31,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,35,@Test
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,36,public void setInvalidDefaultLongReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,37,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,38,try {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,39,control.setDefaultReturnValue((long) 0);
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,40,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,41,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,42,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,46,@Test
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,47,public void setInvalidDefaultFloatReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,48,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,49,try {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,50,control.setDefaultReturnValue((float) 0);
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,51,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,52,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,53,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,57,@Test
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,58,public void setInvalidDefaultDoubleReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,59,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,60,try {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,61,control.setDefaultReturnValue((double) 0);
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,62,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,63,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,64,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,68,@Test
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,69,public void setInvalidObjectDefaultReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,70,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,71,try {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,72,control.setDefaultReturnValue(new Object());
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,73,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,74,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,75,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,79,@Test
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,80,public void setDefaultReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,81,try {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,82,control.setDefaultReturnValue(new Object());
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,83,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,84,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,85,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,86,"""method call on the mock needed before setting default return value"","
True,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidDefaultReturnValueTest.java,87,e.getMessage());
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,9,import java.io.IOException;
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,11,import org.easymock.MockControl;
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,12,import org.junit.Before;
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,13,import org.junit.Test;
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,15,public class RecordStateInvalidDefaultThrowableTest {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,16,MockControl<IMethods> control;
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,18,IMethods mock;
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,20,private class CheckedException extends Exception {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,23,@Before
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,24,public void setup() {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,25,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,26,mock = control.getMock();
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,29,@Test
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,30,public void throwNull() {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,31,mock.throwsNothing(false);
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,32,try {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,33,control.setDefaultThrowable(null);
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,34,"fail(""NullPointerException expected"");"
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,35,} catch (NullPointerException expected) {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,36,"assertEquals(""null cannot be thrown"", expected.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,41,@Test
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,42,public void throwCheckedExceptionWhereNoCheckedExceptionIsThrown() {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,43,mock.throwsNothing(false);
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,44,try {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,45,control.setDefaultThrowable(new CheckedException());
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,46,"fail(""IllegalArgumentException expected"");"
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,47,} catch (IllegalArgumentException expected) {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,48,"assertEquals(""last method called on mock cannot throw """
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,49,"+ this.getClass().getName() + ""$CheckedException"", expected"
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,50,.getMessage());
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,54,@Test
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,55,public void throwWrongCheckedException() throws IOException {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,56,mock.throwsIOException(0);
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,57,try {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,58,control.setDefaultThrowable(new CheckedException());
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,59,"fail(""IllegalArgumentException expected"");"
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,60,} catch (IllegalArgumentException expected) {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,61,"assertEquals(""last method called on mock cannot throw """
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,62,"+ this.getClass().getName() + ""$CheckedException"", expected"
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,63,.getMessage());
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,67,@Test
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,68,public void setDefaultThrowableWithoutMethodCall() throws IOException {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,69,try {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,70,control.setDefaultThrowable(new RuntimeException());
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,71,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,72,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,73,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,74,"""method call on the mock needed before setting default Throwable"","
True,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,test/org/easymock/tests/RecordStateInvalidDefaultThrowableTest.java,75,expected.getMessage());
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,13,public class RecordStateInvalidMatcherTest {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,14,MockControl<IMethods> control;
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,16,IMethods mock;
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,18,@Before
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,19,public void setup() {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,20,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,21,mock = control.getMock();
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,24,@Test
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,25,public void setMatcherBeforeCallingMethods() {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,26,try {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,27,control.setMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,28,fail();
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,29,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,30,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,31,"""method call on the mock needed before setting matcher"","
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,32,expected.getMessage());
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,36,@Test
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,37,public void setMatcherTwice() {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,38,mock.simpleMethod();
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,39,control.setMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,40,try {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,41,control.setMatcher(MockControl.EQUALS_MATCHER);
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,42,fail();
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,43,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,44,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,45,"""for method simpleMethod(), a matcher has already been set"","
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,46,expected.getMessage());
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,50,@Test
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,51,public void setMatcherTwice2() {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,52,"mock.simpleMethodWithArgument("""");"
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,53,control.setMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,54,try {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,55,control.setMatcher(MockControl.EQUALS_MATCHER);
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,56,fail();
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,57,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,58,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,59,"""for method simpleMethodWithArgument(...), a matcher has already been set"","
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,60,expected.getMessage());
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,64,@Test
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,65,public void setSameMatcherTwice() {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,66,mock.simpleMethod();
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,67,control.setMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,68,try {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,69,control.setMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,70,} catch (IllegalStateException unexpected) {
True,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,test/org/easymock/tests/RecordStateInvalidMatcherTest.java,71,"fail(""setting the same matcher should work"");"
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,13,public class RecordStateInvalidRangeTest {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,15,MockControl<IMethods> control;
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,17,IMethods mock;
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,19,@Before
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,20,public void setUp() {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,21,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,22,mock = control.getMock();
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,25,@Test
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,26,public void setOpenCallCountTwice() {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,27,mock.simpleMethod();
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,28,control.setVoidCallable(MockControl.ONE_OR_MORE);
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,29,try {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,30,control.setVoidCallable(MockControl.ONE_OR_MORE);
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,31,fail();
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,32,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,33,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,34,"""last method called on mock already has a non-fixed count set."","
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,35,expected.getMessage());
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,39,@Test
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,40,public void setIllegalMinimumCount() {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,41,mock.simpleMethod();
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,42,int NEGATIVE = -1;
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,43,try {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,44,"control.setVoidCallable(NEGATIVE, 2);"
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,45,fail();
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,46,} catch (IllegalArgumentException expected) {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,47,"assertEquals(""minimum must be >= 0"", expected.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,51,@Test
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,52,public void setIllegalMaximumCount() {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,53,mock.simpleMethod();
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,54,int NON_POSITIVE = 0;
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,55,try {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,56,"control.setVoidCallable(0, NON_POSITIVE);"
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,57,fail();
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,58,} catch (IllegalArgumentException expected) {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,59,"assertEquals(""maximum must be >= 1"", expected.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,63,@Test
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,64,public void setMinimumBiggerThanMaximum() {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,65,mock.simpleMethod();
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,66,try {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,67,"control.setVoidCallable(4, 3);"
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,68,fail();
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,69,} catch (IllegalArgumentException expected) {
True,test/org/easymock/tests/RecordStateInvalidRangeTest.java,test/org/easymock/tests/RecordStateInvalidRangeTest.java,70,"assertEquals(""minimum must be <= maximum"", expected.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,13,public class RecordStateInvalidReturnValueTest {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,14,MockControl<IMethods> control;
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,16,IMethods mock;
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,18,@Before
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,19,public void setup() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,20,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,21,mock = control.getMock();
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,24,@Test
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,25,public void setInvalidBooleanReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,26,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,27,try {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,28,control.setReturnValue(false);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,29,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,30,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,31,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,36,@Test
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,37,public void setInvalidLongReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,38,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,39,try {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,40,control.setReturnValue((long) 0);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,41,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,42,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,43,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,47,@Test
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,48,public void setInvalidFloatReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,49,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,50,try {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,51,control.setReturnValue((float) 0);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,52,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,53,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,54,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,58,@Test
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,59,public void setInvalidDoubleReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,60,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,61,try {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,62,control.setReturnValue((double) 0);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,63,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,64,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,65,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,69,@Test
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,70,public void setInvalidObjectReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,71,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,72,try {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,73,control.setReturnValue(new Object());
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,74,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,75,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,76,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,80,@Test
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,81,public void setInvalidBooleanReturnValueCount() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,82,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,83,try {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,84,"control.setReturnValue(false, 3);"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,85,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,86,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,87,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,92,@Test
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,93,public void setInvalidLongReturnValueCount() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,94,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,95,try {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,96,"control.setReturnValue((long) 0, 3);"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,97,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,98,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,99,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,103,@Test
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,104,public void setInvalidFloatReturnValueCount() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,105,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,106,try {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,107,"control.setReturnValue((float) 0, 3);"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,108,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,109,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,110,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,114,@Test
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,115,public void setInvalidDoubleReturnValueCount() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,116,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,117,try {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,118,"control.setReturnValue((double) 0, 3);"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,119,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,120,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,121,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,125,@Test
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,126,public void setInvalidObjectReturnValueCount() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,127,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,128,try {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,129,"control.setReturnValue(new Object(), 3);"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,130,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,131,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,132,"assertEquals(""incompatible return value type"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,136,@Test
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,137,public void setReturnValueForVoidMethod() {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,138,mock.simpleMethod();
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,139,try {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,140,control.setReturnValue(null);
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,141,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,142,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,test/org/easymock/tests/RecordStateInvalidReturnValueTest.java,143,"assertEquals(""void method cannot return a value"", e.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,10,import org.easymock.internal.RecordState;
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,11,import org.junit.Before;
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,12,import org.junit.Test;
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,14,public class RecordStateInvalidStateChangeTest {
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,15,MockControl<IMethods> control;
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,17,IMethods mock;
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,19,@Before
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,20,public void setup() {
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,21,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,22,mock = control.getMock();
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,25,@Test
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,26,public void activateWithoutReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,27,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,28,try {
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,29,control.replay();
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,30,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,31,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,32,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,33,"""missing behavior definition for the preceeding method call oneArg(false)"","
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,34,e.getMessage());
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,35,"assertTrue(""stack trace must be cut"", Util.getStackTrace(e)"
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,36,.indexOf(RecordState.class.getName()) == -1);
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,40,@Test
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,41,public void secondCallWithoutReturnValue() {
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,42,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,43,try {
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,44,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,45,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,46,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,47,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,48,"""missing behavior definition for the preceeding method call oneArg(false)"","
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,49,e.getMessage());
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,50,"assertTrue(""stack trace must be cut"", Util.getStackTrace(e)"
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,51,.indexOf(RecordState.class.getName()) == -1);
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,55,@Test
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,56,public void verifyWithoutActivation() {
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,57,try {
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,58,control.verify();
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,59,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,60,} catch (IllegalStateException e) {
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,61,"assertEquals(""calling verify is not allowed in record state"", e"
True,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,test/org/easymock/tests/RecordStateInvalidStateChangeTest.java,62,.getMessage());
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,9,import java.io.IOException;
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,11,import org.easymock.MockControl;
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,12,import org.junit.Before;
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,13,import org.junit.Test;
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,15,public class RecordStateInvalidThrowableTest {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,17,MockControl<IMethods> control;
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,19,IMethods mock;
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,21,private class CheckedException extends Exception {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,24,@Before
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,25,public void setup() {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,26,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,27,mock = control.getMock();
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,30,@Test
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,31,public void throwNull() {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,32,mock.throwsNothing(false);
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,33,try {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,34,control.setThrowable(null);
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,35,"fail(""NullPointerException expected"");"
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,36,} catch (NullPointerException expected) {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,37,"assertEquals(""null cannot be thrown"", expected.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,42,@Test
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,43,public void throwCheckedExceptionWhereNoCheckedExceptionIsThrown() {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,44,mock.throwsNothing(false);
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,45,try {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,46,control.setThrowable(new CheckedException());
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,47,"fail(""IllegalArgumentException expected"");"
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,48,} catch (IllegalArgumentException expected) {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,49,"assertEquals(""last method called on mock cannot throw """
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,50,"+ CheckedException.class.getName(), expected.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,54,@Test
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,55,public void throwWrongCheckedException() throws IOException {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,56,mock.throwsIOException(0);
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,57,try {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,58,control.setThrowable(new CheckedException());
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,59,"fail(""IllegalArgumentException expected"");"
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,60,} catch (IllegalArgumentException expected) {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,61,"assertEquals(""last method called on mock cannot throw """
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,62,"+ CheckedException.class.getName(), expected.getMessage());"
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,66,@Test
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,67,public void throwAfterThrowable() throws IOException {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,68,mock.throwsIOException(0);
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,69,"control.setThrowable(new IOException(), MockControl.ONE_OR_MORE);"
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,70,try {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,71,control.setThrowable(new IOException());
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,72,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,73,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,74,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,75,"""last method called on mock already has a non-fixed count set."","
True,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,test/org/easymock/tests/RecordStateInvalidThrowableTest.java,76,expected.getMessage());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,13,public class RecordStateInvalidUsageTest {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,15,MockControl<IMethods> control;
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,17,IMethods mock;
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,19,@Before
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,20,public void setup() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,21,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,22,mock = control.getMock();
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,25,@Test
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,26,public void setReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,27,try {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,28,control.setReturnValue(false);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,29,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,30,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,31,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,32,"""method call on the mock needed before setting return value"","
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,33,expected.getMessage());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,37,@Test
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,38,public void setExpectedVoidCallCountWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,39,try {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,40,control.setVoidCallable(3);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,41,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,42,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,43,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,44,"""method call on the mock needed before setting void callable"","
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,45,expected.getMessage());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,49,@Test
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,50,public void openVoidCallCountWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,51,try {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,52,control.setVoidCallable();
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,53,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,54,} catch (Exception expected) {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,55,assertEquals(
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,56,"""method call on the mock needed before setting void callable"","
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,57,expected.getMessage());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,61,@Test
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,62,public void setWrongReturnValueBoolean() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,63,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,64,try {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,65,control.setReturnValue(false);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,66,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,67,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,68,"assertEquals(""incompatible return value type"", expected"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,69,.getMessage());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,73,@Test
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,74,public void setWrongReturnValueShort() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,75,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,76,try {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,77,control.setReturnValue((short) 0);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,78,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,79,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,80,"assertEquals(""incompatible return value type"", expected"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,81,.getMessage());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,85,@Test
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,86,public void setWrongReturnValueChar() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,87,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,88,try {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,89,control.setReturnValue((char) 0);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,90,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,91,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,92,"assertEquals(""incompatible return value type"", expected"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,93,.getMessage());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,97,@Test
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,98,public void setWrongReturnValueInt() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,99,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,100,try {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,101,control.setReturnValue(0);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,102,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,103,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,104,"assertEquals(""incompatible return value type"", expected"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,105,.getMessage());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,109,@Test
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,110,public void setWrongReturnValueLong() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,111,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,112,try {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,113,control.setReturnValue((long) 0);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,114,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,115,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,116,"assertEquals(""incompatible return value type"", expected"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,117,.getMessage());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,121,@Test
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,122,public void setWrongReturnValueFloat() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,123,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,124,try {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,125,control.setReturnValue((float) 0);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,126,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,127,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,128,"assertEquals(""incompatible return value type"", expected"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,129,.getMessage());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,133,@Test
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,134,public void setWrongReturnValueDouble() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,135,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,136,try {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,137,control.setReturnValue((double) 0);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,138,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,139,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,140,"assertEquals(""incompatible return value type"", expected"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,141,.getMessage());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,145,@Test
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,146,public void setWrongReturnValueObject() {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,147,mock.oneArg(false);
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,148,try {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,149,control.setReturnValue(new Object());
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,150,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,151,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,152,"assertEquals(""incompatible return value type"", expected"
True,test/org/easymock/tests/RecordStateInvalidUsageTest.java,test/org/easymock/tests/RecordStateInvalidUsageTest.java,153,.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,10,import org.easymock.MockControl;
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,11,import org.junit.Before;
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,12,import org.junit.Test;
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,14,public class RecordStateMethodCallMissingTest {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,15,MockControl<IMethods> control;
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,17,IMethods mock;
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,19,@Before
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,20,public void setup() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,21,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,22,mock = control.getMock();
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,25,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,26,public void setBooleanReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,27,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,28,control.setReturnValue(false);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,29,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,30,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,31,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,32,"""method call on the mock needed before setting return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,33,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,37,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,38,public void setLongReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,39,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,40,control.setReturnValue(0);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,41,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,42,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,43,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,44,"""method call on the mock needed before setting return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,45,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,49,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,50,public void setFloatReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,51,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,52,control.setReturnValue((float) 0.0);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,53,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,54,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,55,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,56,"""method call on the mock needed before setting return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,57,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,61,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,62,public void setDoubleReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,63,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,64,control.setReturnValue(0.0);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,65,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,66,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,67,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,68,"""method call on the mock needed before setting return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,69,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,73,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,74,public void setObjectReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,75,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,76,control.setReturnValue(null);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,77,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,78,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,79,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,80,"""method call on the mock needed before setting return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,81,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,85,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,86,public void setVoidCallableWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,87,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,88,control.setVoidCallable();
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,89,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,90,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,91,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,92,"""method call on the mock needed before setting void callable"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,93,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,97,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,98,public void setThrowableWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,99,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,100,control.setThrowable(new RuntimeException());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,101,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,102,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,103,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,104,"""method call on the mock needed before setting Throwable"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,105,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,109,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,110,public void setBooleanReturnValueCountWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,111,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,112,"control.setReturnValue(false, 3);"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,113,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,114,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,115,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,116,"""method call on the mock needed before setting return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,117,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,121,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,122,public void setLongReturnValueCountWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,123,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,124,"control.setReturnValue(0, 3);"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,125,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,126,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,127,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,128,"""method call on the mock needed before setting return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,129,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,133,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,134,public void setFloatReturnValueCountWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,135,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,136,"control.setReturnValue((float) 0.0, 3);"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,137,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,138,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,139,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,140,"""method call on the mock needed before setting return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,141,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,145,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,146,public void setDoubleReturnValueCountWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,147,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,148,"control.setReturnValue(0.0, 3);"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,149,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,150,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,151,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,152,"""method call on the mock needed before setting return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,153,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,157,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,158,public void setObjectReturnValueCountWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,159,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,160,"control.setReturnValue(null, 3);"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,161,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,162,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,163,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,164,"""method call on the mock needed before setting return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,165,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,169,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,170,public void setVoidCallableCountWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,171,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,172,control.setVoidCallable(3);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,173,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,174,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,175,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,176,"""method call on the mock needed before setting void callable"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,177,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,181,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,182,public void setThrowableCountWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,183,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,184,"control.setThrowable(new RuntimeException(), 3);"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,185,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,186,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,187,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,188,"""method call on the mock needed before setting Throwable"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,189,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,193,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,194,public void setBooleanDefaultReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,195,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,196,control.setDefaultReturnValue(false);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,197,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,198,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,199,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,200,"""method call on the mock needed before setting default return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,201,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,205,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,206,public void setLongDefaultReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,207,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,208,control.setDefaultReturnValue(0);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,209,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,210,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,211,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,212,"""method call on the mock needed before setting default return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,213,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,217,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,218,public void setFloatDefaultReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,219,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,220,control.setDefaultReturnValue((float) 0.0);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,221,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,222,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,223,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,224,"""method call on the mock needed before setting default return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,225,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,229,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,230,public void setDoubleDefaultReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,231,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,232,control.setDefaultReturnValue(0.0);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,233,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,234,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,235,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,236,"""method call on the mock needed before setting default return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,237,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,241,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,242,public void setObjectDefaultReturnValueWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,243,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,244,control.setDefaultReturnValue(null);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,245,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,246,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,247,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,248,"""method call on the mock needed before setting default return value"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,249,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,253,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,254,public void setDefaultVoidCallableWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,255,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,256,control.setDefaultVoidCallable();
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,257,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,258,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,259,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,260,"""method call on the mock needed before setting default void callable"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,261,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,265,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,266,public void setDefaultThrowableWithoutMethodCall() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,267,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,268,control.setDefaultThrowable(new RuntimeException());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,269,"fail(""IllegalStateException expected"");"
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,270,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,271,assertEquals(
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,272,"""method call on the mock needed before setting default Throwable"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,273,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,277,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,278,public void timesWithoutReturnValue() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,279,mock.booleanReturningMethod(1);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,280,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,281,expectLastCall().times(3);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,282,fail();
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,283,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,284,"assertEquals(""last method called on mock is not a void method"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,285,expected.getMessage());
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,289,@Test
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,290,public void asStubWithNonVoidMethod() {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,291,mock.booleanReturningMethod(1);
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,292,try {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,293,expectLastCall().asStub();
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,294,fail();
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,295,} catch (IllegalStateException expected) {
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,296,"assertEquals(""last method called on mock is not a void method"","
True,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,test/org/easymock/tests/RecordStateMethodCallMissingTest.java,297,expected.getMessage());
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,7,import org.easymock.MockControl;
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,8,import org.easymock.internal.MocksBehavior;
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,9,import org.easymock.internal.ReplayState;
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,10,import org.easymock.internal.RuntimeExceptionWrapper;
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,11,import org.junit.Before;
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,12,import org.junit.Test;
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,14,public class ReplayStateInvalidCallsTest {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,16,private ReplayState control;
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,18,private Exception exception;
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,20,@Before
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,21,public void setUp() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,22,exception = new Exception();
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,23,control = new ReplayState(new MocksBehavior(false));
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,26,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,27,public void expectAndThrowLongWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,28,control.andThrow(exception);
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,31,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,32,public void expectAndReturnObjectWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,33,"control.andReturn("""");"
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,36,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,37,public void setDefaultMatcher() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,38,control.setDefaultMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,41,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,42,public void asStub() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,43,control.asStub();
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,46,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,47,public void setMatcher() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,48,"control.setMatcher(null, MockControl.ARRAY_MATCHER);"
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,51,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,52,public void setDefaultReturnValue() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,53,"control.setDefaultReturnValue("""");"
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,56,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,57,public void setDefaultThrowable() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,58,control.setDefaultThrowable(exception);
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,61,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,62,public void setDefaultVoidCallable() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,63,control.setDefaultVoidCallable();
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,66,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,67,public void replay() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,68,control.replay();
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,71,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,72,public void checkOrder() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,73,control.checkOrder(true);
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,76,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,77,public void andStubReturn() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,78,"control.andStubReturn(""7"");"
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,81,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,82,public void andStubThrow() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,83,control.andStubThrow(new RuntimeException());
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,86,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,87,public void andStubAnswer() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,88,control.andStubAnswer(null);
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,91,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,92,public void times() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,93,control.times(MockControl.ONE);
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,96,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,97,public void callback() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,98,control.callback(new Runnable() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,99,public void run() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,104,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,105,public void andReturn() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,106,control.andReturn(null);
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,109,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,110,public void andThrow() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,111,control.andThrow(new RuntimeException());
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,114,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,115,public void andAnswer() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,116,control.andAnswer(null);
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,119,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,120,public void defaultThrowable() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,121,control.setDefaultThrowable(new RuntimeException());
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,124,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,125,public void defaultReturnValue() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,126,control.setDefaultReturnValue(null);
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,129,@Test(expected = RuntimeExceptionWrapper.class)
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,130,public void defaultVoidCallable() {
True,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,test/org/easymock/tests/ReplayStateInvalidCallsTest.java,131,control.setDefaultVoidCallable();
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,7,import org.easymock.EasyMock;
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,8,import org.easymock.IMocksControl;
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,10,import org.easymock.internal.ReplayState;
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,11,import org.junit.Before;
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,12,import org.junit.Test;
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,14,public class ReplayStateInvalidUsageTest {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,16,private MockControl<IMethods> control;
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,18,private Exception exception;
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,20,private ReplayState replayState;
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,22,private IMocksControl mocksControl;
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,24,@Before
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,25,public void setUp() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,26,exception = new Exception();
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,27,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,28,control.replay();
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,29,mocksControl = EasyMock.createControl();
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,30,mocksControl.replay();
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,33,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,34,public void expectAndThrowObjectWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,35,"control.expectAndThrow("""", exception, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,38,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,39,public void expectAndThrowDoubleWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,40,"control.expectAndThrow(0.0d, exception, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,43,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,44,public void expectAndThrowFloatWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,45,"control.expectAndThrow(0.0f, exception, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,48,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,49,public void expectAndThrowLongWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,50,"control.expectAndThrow(0, exception, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,53,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,54,public void expectAndThrowBooleanWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,55,"control.expectAndThrow(false, exception, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,58,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,59,public void expectAndThrowObjectWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,60,"control.expectAndThrow("""", exception, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,63,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,64,public void expectAndThrowDoubleWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,65,"control.expectAndThrow(0.0d, exception, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,68,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,69,public void expectAndThrowFloatWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,70,"control.expectAndThrow(0.0f, exception, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,73,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,74,public void expectAndThrowLongWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,75,"control.expectAndThrow(0, exception, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,78,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,79,public void expectAndThrowBooleanWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,80,"control.expectAndThrow(false, exception, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,83,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,84,public void expectAndThrowObjectWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,85,"control.expectAndThrow("""", exception, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,88,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,89,public void expectAndThrowDoubleWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,90,"control.expectAndThrow(0.0d, exception, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,93,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,94,public void expectAndThrowFloatWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,95,"control.expectAndThrow(0.0f, exception, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,98,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,99,public void expectAndThrowLongWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,100,"control.expectAndThrow(0, exception, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,103,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,104,public void expectAndThrowBooleanWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,105,"control.expectAndThrow(false, exception, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,108,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,109,public void expectAndThrowObject() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,110,"control.expectAndThrow("""", exception);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,113,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,114,public void expectAndThrowDouble() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,115,"control.expectAndThrow(0.0d, exception);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,118,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,119,public void expectAndThrowFloat() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,120,"control.expectAndThrow(0.0f, exception);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,123,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,124,public void expectAndThrowLong() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,125,"control.expectAndThrow(0, exception);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,128,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,129,public void expectAndThrowBoolean() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,130,"control.expectAndThrow(false, exception);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,133,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,134,public void expectAndReturnObjectWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,135,"control.expectAndReturn("""", """", 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,138,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,139,public void expectAndReturnDoubleWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,140,"control.expectAndReturn(0.0d, 0.0d, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,143,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,144,public void expectAndReturnFloatWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,145,"control.expectAndReturn(0.0f, 0.0f, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,148,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,149,public void expectAndReturnLongWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,150,"control.expectAndReturn(0, 0, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,153,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,154,public void expectAndReturnBooleanWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,155,"control.expectAndReturn(false, false, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,158,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,159,public void expectAndReturnObjectWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,160,"control.expectAndReturn("""", """", 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,163,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,164,public void expectAndReturnDoubleWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,165,"control.expectAndReturn(0.0d, 0.0d, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,168,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,169,public void expectAndReturnFloatWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,170,"control.expectAndReturn(0.0f, 0.0f, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,173,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,174,public void expectAndReturnLongWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,175,"control.expectAndReturn(0, 0, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,178,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,179,public void expectAndReturnBooleanWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,180,"control.expectAndReturn(false, false, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,183,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,184,public void expectAndReturnObjectWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,185,"control.expectAndReturn("""", """", MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,188,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,189,public void expectAndReturnDoubleWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,190,"control.expectAndReturn(0.0d, 0.0d, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,193,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,194,public void expectAndReturnFloatWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,195,"control.expectAndReturn(0.0f, 0.0f, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,198,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,199,public void expectAndReturnLongWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,200,"control.expectAndReturn(0, 0, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,203,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,204,public void expectAndReturnBooleanWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,205,"control.expectAndReturn(false, false, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,208,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,209,public void expectAndReturnObject() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,210,"control.expectAndReturn("""", """");"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,213,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,214,public void expectAndReturnDouble() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,215,"control.expectAndReturn(0.0d, 0.0d);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,218,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,219,public void expectAndReturnFloat() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,220,"control.expectAndReturn(0.0f, 0.0f);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,223,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,224,public void expectAndReturnLong() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,225,"control.expectAndReturn(0, 0);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,228,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,229,public void expectAndReturnBoolean() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,230,"control.expectAndReturn(false, false);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,233,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,234,public void setDefaultMatcher() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,235,control.setDefaultMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,238,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,239,public void setReturnValueObjectWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,240,"control.setReturnValue("""", 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,243,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,244,public void setReturnValueDoubleWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,245,"control.setReturnValue(0.0d, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,248,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,249,public void setReturnValueFloatWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,250,"control.setReturnValue(0.0f, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,253,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,254,public void setReturnValueLongWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,255,"control.setReturnValue(0, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,258,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,259,public void setReturnValueBooleanWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,260,"control.setReturnValue(false, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,263,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,264,public void setThrowableWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,265,"control.setThrowable(exception, 1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,268,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,269,public void setVoidCallableWithMinMax() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,270,"control.setVoidCallable(1, 2);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,273,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,274,public void setMatcher() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,275,control.setMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,278,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,279,public void setDefaultReturnValueObject() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,280,"control.setDefaultReturnValue("""");"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,283,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,284,public void setDefaultReturnValueDouble() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,285,control.setDefaultReturnValue(0.0d);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,288,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,289,public void setDefaultReturnValueFloat() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,290,control.setDefaultReturnValue(0.0f);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,293,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,294,public void setDefaultReturnValueLong() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,295,control.setDefaultReturnValue(0);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,298,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,299,public void setDefaultReturnValueBoolean() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,300,control.setDefaultReturnValue(false);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,303,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,304,public void setDefaultThrowable() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,305,control.setDefaultThrowable(exception);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,308,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,309,public void setDefaultVoidCallable() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,310,control.setDefaultVoidCallable();
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,313,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,314,public void setReturnValueObjectWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,315,"control.setReturnValue("""", MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,318,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,319,public void setReturnValueLongWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,320,"control.setReturnValue(0, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,323,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,324,public void setReturnValueFloatWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,325,"control.setReturnValue(0.0f, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,328,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,329,public void setReturnValueDoubleWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,330,"control.setReturnValue(0.0d, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,333,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,334,public void setReturnValueBooleanWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,335,"control.setReturnValue(false, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,338,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,339,public void setThrowableWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,340,"control.setThrowable(exception, MockControl.ONE);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,343,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,344,public void setVoidCallableWithRange() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,345,control.setVoidCallable(MockControl.ONE);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,348,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,349,public void setReturnValueObjectWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,350,"control.setReturnValue("""", 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,353,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,354,public void setReturnValueLongWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,355,"control.setReturnValue(0, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,358,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,359,public void setReturnValueFloatWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,360,"control.setReturnValue(0.0f, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,363,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,364,public void setReturnValueDoubleWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,365,"control.setReturnValue(0.0d, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,368,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,369,public void setReturnValueBooleanWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,370,"control.setReturnValue(false, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,373,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,374,public void setThrowableWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,375,"control.setThrowable(exception, 1);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,378,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,379,public void setVoidCallableWithCount() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,380,control.setVoidCallable(1);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,383,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,384,public void setReturnValueObject() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,385,"control.setReturnValue("""");"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,388,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,389,public void setReturnValueDouble() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,390,control.setReturnValue(0.0d);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,393,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,394,public void setReturnValueFloat() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,395,control.setReturnValue(0.0f);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,398,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,399,public void setReturnValueLong() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,400,control.setReturnValue(0);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,403,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,404,public void setReturnValueBoolean() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,405,control.setReturnValue(false);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,408,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,409,public void setThrowable() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,410,control.setThrowable(exception);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,413,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,414,public void setVoidCallable() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,415,control.setVoidCallable();
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,418,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,419,public void replay() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,420,control.replay();
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,423,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,424,public void createMock() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,425,mocksControl.createMock(IMethods.class);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,428,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,429,public void createMockWithName() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,430,"mocksControl.createMock("""", IMethods.class);"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,433,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,434,public void checkOrder() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,435,mocksControl.checkOrder(true);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,438,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,439,public void andStubReturn() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,440,"mocksControl.andStubReturn(""7"");"
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,443,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,444,public void andStubThrow() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,445,mocksControl.andStubThrow(new RuntimeException());
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,448,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,449,public void asStub() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,450,mocksControl.asStub();
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,453,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,454,public void times() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,455,mocksControl.times(3);
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,458,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,459,public void anyTimes() {
True,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,test/org/easymock/tests/ReplayStateInvalidUsageTest.java,460,mocksControl.anyTimes();
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,13,public class StacktraceTest {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,15,private MockControl<IMethods> control;
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,17,private IMethods mock;
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,19,@Before
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,20,public void setup() {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,21,control = MockControl.createStrictControl(IMethods.class);
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,22,mock = control.getMock();
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,25,private static class ToStringThrowsException {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,26,@Override
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,27,public String toString() {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,28,throw new NullPointerException();
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,32,@Test
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,33,public void assertRecordStateNoFillInStacktraceWhenExceptionNotFromEasyMock() {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,34,mock.oneArg(new ToStringThrowsException());
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,35,try {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,36,mock.oneArg(new ToStringThrowsException());
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,37,} catch (NullPointerException expected) {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,38,"assertTrue(""stack trace must not be cut"","
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,39,Util.getStackTrace(expected).indexOf(
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,40,ToStringThrowsException.class.getName()) > 0);
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,44,@Test
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,45,public void assertReplayNoFillInStacktraceWhenExceptionNotFromEasyMock() {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,46,mock.oneArg(new ToStringThrowsException());
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,47,try {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,48,control.replay();
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,49,} catch (NullPointerException expected) {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,50,"assertTrue(""stack trace must not be cut"","
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,51,Util.getStackTrace(expected).indexOf(
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,52,ToStringThrowsException.class.getName()) > 0);
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,56,@Test
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,57,public void assertReplayStateNoFillInStacktraceWhenExceptionNotFromEasyMock() {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,58,control.replay();
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,59,try {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,60,mock.oneArg(new ToStringThrowsException());
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,61,} catch (NullPointerException expected) {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,62,"assertTrue(""stack trace must not be cut"","
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,63,Util.getStackTrace(expected).indexOf(
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,64,ToStringThrowsException.class.getName()) > 0);
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,68,@Test
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,69,public void assertVerifyNoFillInStacktraceWhenExceptionNotFromEasyMock() {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,70,mock.oneArg(new ToStringThrowsException());
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,71,"control.setReturnValue("""");"
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,72,control.replay();
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,73,try {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,74,control.verify();
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,75,fail();
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,76,} catch (NullPointerException expected) {
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,77,"assertTrue(""stack trace must not be cut"","
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,78,Util.getStackTrace(expected).indexOf(
True,test/org/easymock/tests/StacktraceTest.java,test/org/easymock/tests/StacktraceTest.java,79,ToStringThrowsException.class.getName()) > 0);
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,13,public class UsageCallCountTest {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,15,private MockControl<VoidMethodInterface> control;
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,17,private VoidMethodInterface mock;
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,19,private interface VoidMethodInterface {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,20,void method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,23,@Before
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,24,public void setup() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,25,control = MockControl.createControl(VoidMethodInterface.class);
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,26,mock = control.getMock();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,29,@Test
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,30,public void mockWithNoExpectedCallsPassesWithNoCalls() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,31,control.replay();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,32,control.verify();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,35,@Test
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,36,public void mockWithNoExpectedCallsFailsAtFirstCall() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,37,control.replay();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,38,assertMethodCallFails();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,41,@Test
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,42,public void mockWithOneExpectedCallFailsAtVerify() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,43,callMethodOnce();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,44,control.replay();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,45,assertVerifyFails();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,48,@Test
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,49,public void mockWithOneExpectedCallPassesWithOneCall() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,50,callMethodOnce();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,51,control.replay();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,52,callMethodOnce();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,53,control.verify();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,56,@Test
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,57,public void mockWithOneExpectedCallFailsAtSecondCall() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,58,callMethodOnce();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,59,control.replay();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,60,callMethodOnce();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,61,assertMethodCallFails();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,64,@Test
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,65,public void tooFewCalls() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,66,callMethodThreeTimes();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,67,control.replay();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,68,callMethodTwice();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,69,assertVerifyFails();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,72,@Test
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,73,public void correctNumberOfCalls() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,74,callMethodThreeTimes();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,75,control.replay();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,76,callMethodThreeTimes();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,77,control.verify();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,80,@Test
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,81,public void tooManyCalls() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,82,callMethodThreeTimes();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,83,control.replay();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,84,callMethodThreeTimes();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,85,assertMethodCallFails();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,88,private void callMethodOnce() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,89,mock.method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,92,private void callMethodTwice() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,93,mock.method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,94,mock.method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,97,private void callMethodThreeTimes() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,98,mock.method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,99,mock.method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,100,mock.method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,103,private void assertVerifyFails() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,104,try {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,105,control.verify();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,106,"fail(""Expected AssertionError"");"
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,107,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,111,private void assertMethodCallFails() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,112,try {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,113,mock.method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,114,"fail(""Expected AssertionError"");"
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,115,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,119,@Test
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,120,public void noUpperLimitWithoutCallCountSet() {
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,121,mock.method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,122,control.setVoidCallable(MockControl.ONE_OR_MORE);
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,123,control.replay();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,124,assertVerifyFails();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,125,mock.method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,126,control.verify();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,127,mock.method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,128,control.verify();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,129,mock.method();
True,test/org/easymock/tests/UsageCallCountTest.java,test/org/easymock/tests/UsageCallCountTest.java,130,control.verify();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,10,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,11,import org.junit.Before;
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,12,import org.junit.Test;
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,14,public class UsageDefaultReturnValueTest {
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,15,MockControl<IMethods> control;
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,17,IMethods mock;
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,19,@Before
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,20,public void setup() {
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,21,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,22,mock = control.getMock();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,25,@Test
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,26,public void defaultReturnValue() {
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,27,"mock.threeArgumentMethod(7, """", ""test"");"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,28,"control.setReturnValue(""test"", 1);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,30,"mock.threeArgumentMethod(8, null, ""test2"");"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,31,"control.setReturnValue(""test2"", 1);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,33,Object defaultValue = new Object();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,34,control.setDefaultReturnValue(defaultValue);
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,36,control.replay();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,37,"assertEquals(""test"", mock.threeArgumentMethod(7, """", ""test""));"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,38,"assertEquals(""test2"", mock.threeArgumentMethod(8, null, ""test2""));"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,39,"assertSame(defaultValue, mock.threeArgumentMethod(7, new Object(),"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,40,"""test""));"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,41,"assertSame(defaultValue, mock.threeArgumentMethod(7, """", ""test""));"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,42,"assertSame(defaultValue, mock.threeArgumentMethod(8, null, ""test""));"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,43,"assertSame(defaultValue, mock.threeArgumentMethod(9, null, ""test""));"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,45,control.verify();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,48,@Test
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,49,public void defaultVoidCallable() {
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,51,"mock.twoArgumentMethod(1, 2);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,52,control.setDefaultVoidCallable();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,54,"mock.twoArgumentMethod(1, 1);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,55,RuntimeException expected = new RuntimeException();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,56,control.setThrowable(expected);
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,58,control.replay();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,59,"mock.twoArgumentMethod(2, 1);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,60,"mock.twoArgumentMethod(1, 2);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,61,"mock.twoArgumentMethod(3, 7);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,63,try {
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,64,"mock.twoArgumentMethod(1, 1);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,65,"fail(""RuntimeException expected"");"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,66,} catch (RuntimeException actual) {
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,67,"assertSame(expected, actual);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,72,@Test
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,73,public void defaultThrowable() {
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,74,"mock.twoArgumentMethod(1, 2);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,75,control.setVoidCallable();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,76,"mock.twoArgumentMethod(1, 1);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,77,control.setVoidCallable();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,79,RuntimeException expected = new RuntimeException();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,80,control.setDefaultThrowable(expected);
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,82,control.replay();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,84,"mock.twoArgumentMethod(1, 2);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,85,"mock.twoArgumentMethod(1, 1);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,86,try {
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,87,"mock.twoArgumentMethod(2, 1);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,88,"fail(""RuntimeException expected"");"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,89,} catch (RuntimeException actual) {
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,90,"assertSame(expected, actual);"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,94,@Test
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,95,public void defaultReturnValueBoolean() {
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,96,mock.booleanReturningMethod(12);
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,97,control.setReturnValue(true);
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,98,control.setDefaultReturnValue(false);
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,100,control.replay();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,102,assertFalse(mock.booleanReturningMethod(11));
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,103,assertTrue(mock.booleanReturningMethod(12));
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,104,assertFalse(mock.booleanReturningMethod(13));
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,106,control.verify();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,109,@Test
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,110,public void returnValueAndDefaultReturnValue() throws Exception {
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,112,"mock.oneArg("""");"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,114,"expectLastCall().andReturn(""1"");"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,115,"control.setDefaultReturnValue(""2"");"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,117,control.replay();
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,119,"assertEquals(""1"", mock.oneArg(""""));"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,120,"assertEquals(""2"", mock.oneArg(""""));"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,121,"assertEquals(""2"", mock.oneArg(""X""));"
True,test/org/easymock/tests/UsageDefaultReturnValueTest.java,test/org/easymock/tests/UsageDefaultReturnValueTest.java,123,control.verify();
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,14,* Same as UsageExpectAndReturnTest except that each mocked method is called
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,15,* twice to make sure the defaulting works fine.
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,17,* @author Henri Tremblay
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,19,public class UsageExpectAndDefaultReturnTest {
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,20,private MockControl<IMethods> control;
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,22,private IMethods mock;
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,24,@Before
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,25,public void setup() {
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,26,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,27,mock = control.getMock();
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,30,@Test
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,31,public void booleanType() {
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,32,"control.expectAndDefaultReturn(mock.booleanReturningMethod(4), true);"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,33,control.replay();
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,34,"assertEquals(true, mock.booleanReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,35,"assertEquals(true, mock.booleanReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,36,control.verify();
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,39,@Test
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,40,public void longType() {
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,41,"control.expectAndDefaultReturn(mock.longReturningMethod(4), 12l);"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,42,control.replay();
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,43,"assertEquals(12l, mock.longReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,44,"assertEquals(12l, mock.longReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,45,control.verify();
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,48,@Test
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,49,public void floatType() {
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,50,"control.expectAndDefaultReturn(mock.floatReturningMethod(4), 12f);"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,51,control.replay();
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,52,"assertEquals(12f, mock.floatReturningMethod(4), 0f);"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,53,"assertEquals(12f, mock.floatReturningMethod(4), 0f);"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,54,control.verify();
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,57,@Test
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,58,public void doubleType() {
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,59,"control.expectAndDefaultReturn(mock.doubleReturningMethod(4), 12.0);"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,60,control.replay();
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,61,"assertEquals(12.0, mock.doubleReturningMethod(4), 0.0);"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,62,"assertEquals(12.0, mock.doubleReturningMethod(4), 0.0);"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,63,control.verify();
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,66,@Test
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,67,public void objectType() {
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,68,"control.expectAndDefaultReturn(mock.objectReturningMethod(4), ""12"");"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,69,control.replay();
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,70,"assertEquals(""12"", mock.objectReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,71,"assertEquals(""12"", mock.objectReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,test/org/easymock/tests/UsageExpectAndDefaultReturnTest.java,72,control.verify();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,10,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,11,import org.junit.Before;
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,12,import org.junit.Test;
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,15,* Same as UsageExpectAndThrowTest except that each mocked method is called
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,16,* twice to make sure the defaulting works fine.
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,18,* @author Henri Tremblay
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,20,public class UsageExpectAndDefaultThrowTest {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,21,private MockControl<IMethods> control;
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,23,private IMethods mock;
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,25,private static RuntimeException EXCEPTION = new RuntimeException();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,27,@Before
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,28,public void setup() {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,29,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,30,mock = control.getMock();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,33,@Test
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,34,public void booleanType() {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,35,control
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,36,".expectAndDefaultThrow(mock.booleanReturningMethod(4),"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,37,EXCEPTION);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,38,control.replay();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,39,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,40,mock.booleanReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,41,fail();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,42,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,43,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,45,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,46,mock.booleanReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,47,fail();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,48,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,49,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,51,control.verify();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,54,@Test
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,55,public void longType() {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,56,"control.expectAndDefaultThrow(mock.longReturningMethod(4), EXCEPTION);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,57,control.replay();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,58,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,59,mock.longReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,60,fail();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,61,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,62,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,64,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,65,mock.longReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,66,fail();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,67,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,68,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,70,control.verify();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,73,@Test
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,74,public void floatType() {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,75,"control.expectAndDefaultThrow(mock.floatReturningMethod(4), EXCEPTION);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,76,control.replay();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,77,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,78,mock.floatReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,79,fail();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,80,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,81,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,83,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,84,mock.floatReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,85,fail();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,86,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,87,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,89,control.verify();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,92,@Test
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,93,public void doubleType() {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,94,"control.expectAndDefaultThrow(mock.doubleReturningMethod(4), EXCEPTION);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,95,control.replay();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,96,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,97,mock.doubleReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,98,fail();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,99,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,100,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,102,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,103,mock.doubleReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,104,fail();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,105,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,106,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,108,control.verify();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,111,@Test
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,112,public void object() {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,113,"control.expectAndDefaultThrow(mock.objectReturningMethod(4), EXCEPTION);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,114,control.replay();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,115,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,116,mock.objectReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,117,fail();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,118,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,119,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,121,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,122,mock.objectReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,123,fail();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,124,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,125,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,127,control.verify();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,130,@Test
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,131,public void throwableAndDefaultThrowable() throws Exception {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,133,"mock.oneArg(""1"");"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,135,expectLastCall().andThrow(new IllegalArgumentException());
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,136,control.setDefaultThrowable(new IllegalStateException());
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,138,control.replay();
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,140,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,141,"mock.oneArg(""1"");"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,142,} catch (IllegalArgumentException ignored) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,144,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,145,"mock.oneArg(""1"");"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,146,} catch (IllegalStateException ignored) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,148,try {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,149,"mock.oneArg(""2"");"
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,150,} catch (IllegalStateException ignored) {
True,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,test/org/easymock/tests/UsageExpectAndDefaultThrowTest.java,152,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,13,public class UsageExpectAndReturnTest {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,14,private MockControl<IMethods> control;
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,16,private IMethods mock;
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,18,@Before
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,19,public void setup() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,20,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,21,mock = control.getMock();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,24,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,25,public void booleanType() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,26,"control.expectAndReturn(mock.booleanReturningMethod(4), true);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,27,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,28,"assertEquals(true, mock.booleanReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,29,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,32,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,33,public void longType() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,34,"control.expectAndReturn(mock.longReturningMethod(4), 12l);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,35,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,36,"assertEquals((long) 12, mock.longReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,37,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,40,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,41,public void floatType() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,42,"control.expectAndReturn(mock.floatReturningMethod(4), 12f);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,43,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,44,"assertEquals(12f, mock.floatReturningMethod(4), 0f);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,45,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,48,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,49,public void doubleType() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,50,"control.expectAndReturn(mock.doubleReturningMethod(4), 12.0);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,51,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,52,"assertEquals(12.0, mock.doubleReturningMethod(4), 0.0);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,53,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,56,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,57,public void object() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,58,"control.expectAndReturn(mock.objectReturningMethod(4), ""12"");"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,59,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,60,"assertEquals(""12"", mock.objectReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,61,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,64,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,65,public void booleanAndRange() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,66,"control.expectAndReturn(mock.booleanReturningMethod(4), true,"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,67,MockControl.ONE);
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,68,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,69,"assertEquals(true, mock.booleanReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,70,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,73,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,74,public void longAndRange() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,75,"control.expectAndReturn(mock.longReturningMethod(4), 12l,"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,76,MockControl.ONE);
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,77,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,78,"assertEquals((long) 12, mock.longReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,79,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,82,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,83,public void floatAndRange() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,84,"control.expectAndReturn(mock.floatReturningMethod(4), 12f,"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,85,MockControl.ONE);
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,86,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,87,"assertEquals(12f, mock.floatReturningMethod(4), 0f);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,88,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,91,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,92,public void doubleAndRange() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,93,"control.expectAndReturn(mock.doubleReturningMethod(4), 12.0,"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,94,MockControl.ONE);
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,95,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,96,"assertEquals(12.0, mock.doubleReturningMethod(4), 0.0);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,97,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,100,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,101,public void objectAndRange() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,102,"control.expectAndReturn(mock.objectReturningMethod(4), ""12"","
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,103,MockControl.ONE);
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,104,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,105,"assertEquals(""12"", mock.objectReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,106,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,109,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,110,public void booleanAndCount() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,111,"control.expectAndReturn(mock.booleanReturningMethod(4), true, 2);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,112,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,113,"assertEquals(true, mock.booleanReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,114,"assertEquals(true, mock.booleanReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,115,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,118,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,119,public void longAndCount() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,120,"control.expectAndReturn(mock.longReturningMethod(4), 12l, 2);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,121,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,122,"assertEquals((long) 12, mock.longReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,123,"assertEquals((long) 12, mock.longReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,124,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,127,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,128,public void floatAndCount() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,129,"control.expectAndReturn(mock.floatReturningMethod(4), 12f, 2);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,130,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,131,"assertEquals(12f, mock.floatReturningMethod(4), 0f);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,132,"assertEquals(12f, mock.floatReturningMethod(4), 0f);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,133,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,136,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,137,public void doubleAndCount() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,138,"control.expectAndReturn(mock.doubleReturningMethod(4), 12.0, 2);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,139,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,140,"assertEquals(12.0, mock.doubleReturningMethod(4), 0.0);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,141,"assertEquals(12.0, mock.doubleReturningMethod(4), 0.0);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,142,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,145,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,146,public void objectAndCount() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,147,"control.expectAndReturn(mock.objectReturningMethod(4), ""12"", 2);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,148,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,149,"assertEquals(""12"", mock.objectReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,150,"assertEquals(""12"", mock.objectReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,151,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,154,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,155,public void booleanAndMinMax() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,156,"control.expectAndReturn(mock.booleanReturningMethod(4), true, 2, 3);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,157,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,158,"assertEquals(true, mock.booleanReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,159,"assertEquals(true, mock.booleanReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,160,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,163,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,164,public void longAndMinMax() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,165,"control.expectAndReturn(mock.longReturningMethod(4), 12l, 2, 3);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,166,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,167,"assertEquals((long) 12, mock.longReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,168,"assertEquals((long) 12, mock.longReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,169,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,172,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,173,public void floatAndMinMax() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,174,"control.expectAndReturn(mock.floatReturningMethod(4), 12f, 2, 3);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,175,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,176,"assertEquals(12f, mock.floatReturningMethod(4), 0f);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,177,"assertEquals(12f, mock.floatReturningMethod(4), 0f);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,178,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,181,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,182,public void doubleAndMinMax() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,183,"control.expectAndReturn(mock.doubleReturningMethod(4), 12.0, 2, 3);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,184,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,185,"assertEquals(12.0, mock.doubleReturningMethod(4), 0.0);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,186,"assertEquals(12.0, mock.doubleReturningMethod(4), 0.0);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,187,control.verify();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,190,@Test
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,191,public void objectAndMinMax() {
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,192,"control.expectAndReturn(mock.objectReturningMethod(4), ""12"", 2, 3);"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,193,control.replay();
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,194,"assertEquals(""12"", mock.objectReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,195,"assertEquals(""12"", mock.objectReturningMethod(4));"
True,test/org/easymock/tests/UsageExpectAndReturnTest.java,test/org/easymock/tests/UsageExpectAndReturnTest.java,196,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,13,public class UsageExpectAndThrowTest {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,14,private MockControl<IMethods> control;
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,16,private IMethods mock;
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,18,private static RuntimeException EXCEPTION = new RuntimeException();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,20,@Before
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,21,public void setup() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,22,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,23,mock = control.getMock();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,26,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,27,public void booleanType() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,28,"control.expectAndThrow(mock.booleanReturningMethod(4), EXCEPTION);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,29,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,30,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,31,mock.booleanReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,32,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,33,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,34,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,36,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,39,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,40,public void longType() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,41,"control.expectAndThrow(mock.longReturningMethod(4), EXCEPTION);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,42,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,43,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,44,mock.longReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,45,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,46,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,47,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,49,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,52,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,53,public void floatType() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,54,"control.expectAndThrow(mock.floatReturningMethod(4), EXCEPTION);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,55,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,56,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,57,mock.floatReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,58,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,59,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,60,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,62,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,65,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,66,public void doubleType() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,67,"control.expectAndThrow(mock.doubleReturningMethod(4), EXCEPTION);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,68,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,69,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,70,mock.doubleReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,71,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,72,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,73,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,75,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,78,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,79,public void object() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,80,"control.expectAndThrow(mock.objectReturningMethod(4), EXCEPTION);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,81,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,82,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,83,mock.objectReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,84,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,85,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,86,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,88,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,91,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,92,public void booleanAndRange() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,93,"control.expectAndThrow(mock.booleanReturningMethod(4), EXCEPTION,"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,94,MockControl.ONE);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,95,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,96,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,97,mock.booleanReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,98,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,99,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,100,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,102,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,105,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,106,public void longAndRange() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,107,"control.expectAndThrow(mock.longReturningMethod(4), EXCEPTION,"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,108,MockControl.ONE);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,109,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,110,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,111,mock.longReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,112,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,113,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,114,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,116,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,119,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,120,public void floatAndRange() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,121,"control.expectAndThrow(mock.floatReturningMethod(4), EXCEPTION,"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,122,MockControl.ONE);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,123,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,124,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,125,mock.floatReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,126,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,127,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,128,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,130,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,133,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,134,public void doubleAndRange() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,135,"control.expectAndThrow(mock.doubleReturningMethod(4), EXCEPTION,"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,136,MockControl.ONE);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,137,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,138,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,139,mock.doubleReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,140,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,141,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,142,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,144,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,147,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,148,public void objectAndRange() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,149,"control.expectAndThrow(mock.objectReturningMethod(4), EXCEPTION,"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,150,MockControl.ONE);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,151,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,152,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,153,mock.objectReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,154,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,155,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,156,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,158,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,161,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,162,public void booleanAndCount() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,163,"control.expectAndThrow(mock.booleanReturningMethod(4), EXCEPTION, 2);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,164,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,165,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,166,mock.booleanReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,167,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,168,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,169,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,171,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,172,mock.booleanReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,173,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,174,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,175,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,177,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,180,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,181,public void longAndCount() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,182,"control.expectAndThrow(mock.longReturningMethod(4), EXCEPTION, 2);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,183,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,184,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,185,mock.longReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,186,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,187,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,188,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,190,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,191,mock.longReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,192,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,193,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,194,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,196,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,199,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,200,public void floatAndCount() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,201,"control.expectAndThrow(mock.floatReturningMethod(4), EXCEPTION, 2);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,202,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,203,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,204,mock.floatReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,205,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,206,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,207,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,209,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,210,mock.floatReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,211,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,212,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,213,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,215,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,218,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,219,public void doubleAndCount() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,220,"control.expectAndThrow(mock.doubleReturningMethod(4), EXCEPTION, 2);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,221,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,222,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,223,mock.doubleReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,224,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,225,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,226,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,228,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,229,mock.doubleReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,230,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,231,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,232,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,234,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,237,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,238,public void objectAndCount() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,239,"control.expectAndThrow(mock.objectReturningMethod(4), EXCEPTION, 2);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,240,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,241,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,242,mock.objectReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,243,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,244,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,245,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,247,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,248,mock.objectReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,249,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,250,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,251,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,253,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,256,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,257,public void booleanAndMinMax() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,258,"control.expectAndThrow(mock.booleanReturningMethod(4), EXCEPTION, 2, 3);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,259,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,260,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,261,mock.booleanReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,262,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,263,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,264,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,266,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,267,mock.booleanReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,268,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,269,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,270,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,272,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,273,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,274,mock.booleanReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,275,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,276,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,277,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,279,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,282,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,283,public void longAndMinMax() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,284,"control.expectAndThrow(mock.longReturningMethod(4), EXCEPTION, 2, 3);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,285,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,286,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,287,mock.longReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,288,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,289,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,290,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,292,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,293,mock.longReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,294,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,295,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,296,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,298,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,299,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,300,mock.longReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,301,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,302,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,303,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,305,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,308,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,309,public void floatAndMinMax() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,310,"control.expectAndThrow(mock.floatReturningMethod(4), EXCEPTION, 2, 3);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,311,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,312,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,313,mock.floatReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,314,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,315,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,316,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,318,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,319,mock.floatReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,320,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,321,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,322,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,324,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,325,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,326,mock.floatReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,327,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,328,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,329,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,331,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,334,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,335,public void doubleAndMinMax() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,336,"control.expectAndThrow(mock.doubleReturningMethod(4), EXCEPTION, 2, 3);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,337,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,338,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,339,mock.doubleReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,340,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,341,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,342,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,344,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,345,mock.doubleReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,346,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,347,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,348,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,350,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,351,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,352,mock.doubleReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,353,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,354,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,355,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,357,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,360,@Test
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,361,public void objectAndMinMax() {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,362,"control.expectAndThrow(mock.objectReturningMethod(4), EXCEPTION, 2, 3);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,363,control.replay();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,364,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,365,mock.objectReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,366,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,367,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,368,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,370,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,371,mock.objectReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,372,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,373,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,374,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,376,control.verify();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,377,try {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,378,mock.objectReturningMethod(4);
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,379,fail();
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,380,} catch (RuntimeException exception) {
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,381,"assertSame(EXCEPTION, exception);"
True,test/org/easymock/tests/UsageExpectAndThrowTest.java,test/org/easymock/tests/UsageExpectAndThrowTest.java,383,control.verify();
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,13,public class UsageFloatingPointReturnValueTest {
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,14,MockControl<IMethods> control;
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,16,IMethods mock;
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,18,@Before
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,19,public void setup() {
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,20,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,21,mock = control.getMock();
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,24,@Test
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,25,public void returnFloat() {
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,26,mock.floatReturningMethod(0);
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,27,control.setReturnValue(25.0F);
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,28,control.setDefaultReturnValue(34.0F);
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,30,control.replay();
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,32,"assertEquals(25.0F, mock.floatReturningMethod(0), 0.0F);"
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,33,"assertEquals(34.0F, mock.floatReturningMethod(-4), 0.0F);"
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,34,"assertEquals(34.0F, mock.floatReturningMethod(12), 0.0F);"
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,36,control.verify();
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,39,@Test
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,40,public void returnDouble() {
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,41,mock.doubleReturningMethod(0);
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,42,control.setReturnValue(25.0);
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,43,control.setDefaultReturnValue(34.0);
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,45,control.replay();
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,47,"assertEquals(25.0, mock.doubleReturningMethod(0), 0.0);"
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,48,"assertEquals(34.0, mock.doubleReturningMethod(-4), 0.0);"
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,49,"assertEquals(34.0, mock.doubleReturningMethod(12), 0.0);"
True,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,test/org/easymock/tests/UsageFloatingPointReturnValueTest.java,51,control.verify();
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,13,public class UsageLongCompatibleReturnValueTest {
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,14,MockControl<IMethods> control;
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,16,IMethods mock;
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,18,@Before
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,19,public void setup() {
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,20,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,21,mock = control.getMock();
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,24,@Test
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,25,public void returnByte() {
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,26,mock.byteReturningMethod(0);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,27,control.setReturnValue(25);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,28,control.setDefaultReturnValue(34);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,30,control.replay();
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,32,"assertEquals((byte) 25, mock.byteReturningMethod(0));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,33,"assertEquals((byte) 34, mock.byteReturningMethod(-4));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,34,"assertEquals((byte) 34, mock.byteReturningMethod(12));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,36,control.verify();
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,39,@Test
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,40,public void returnShort() {
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,41,mock.shortReturningMethod(0);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,42,control.setReturnValue(25);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,43,control.setDefaultReturnValue(34);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,45,control.replay();
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,47,"assertEquals((short) 25, mock.shortReturningMethod(0));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,48,"assertEquals((short) 34, mock.shortReturningMethod(-4));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,49,"assertEquals((short) 34, mock.shortReturningMethod(12));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,51,control.verify();
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,54,@Test
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,55,public void returnChar() {
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,56,mock.charReturningMethod(0);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,57,control.setReturnValue(25);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,58,control.setDefaultReturnValue(34);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,60,control.replay();
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,62,"assertEquals((char) 25, mock.charReturningMethod(0));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,63,"assertEquals((char) 34, mock.charReturningMethod(-4));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,64,"assertEquals((char) 34, mock.charReturningMethod(12));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,66,control.verify();
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,69,@Test
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,70,public void returnInt() {
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,71,mock.intReturningMethod(0);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,72,control.setReturnValue(25);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,73,control.setDefaultReturnValue(34);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,75,control.replay();
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,77,"assertEquals(25, mock.intReturningMethod(0));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,78,"assertEquals(34, mock.intReturningMethod(-4));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,79,"assertEquals(34, mock.intReturningMethod(12));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,81,control.verify();
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,84,@Test
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,85,public void returnLong() {
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,86,mock.longReturningMethod(0);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,87,control.setReturnValue(25);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,88,control.setDefaultReturnValue(34);
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,90,control.replay();
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,92,"assertEquals((long) 25, mock.longReturningMethod(0));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,93,"assertEquals((long) 34, mock.longReturningMethod(-4));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,94,"assertEquals((long) 34, mock.longReturningMethod(12));"
True,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,test/org/easymock/tests/UsageLongCompatibleReturnValueTest.java,96,control.verify();
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,13,public class UsageOverloadedDefaultValueTest {
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,14,MockControl<IMethods> control;
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,16,IMethods mock;
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,18,@Before
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,19,public void setup() {
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,20,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,21,mock = control.getMock();
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,24,@Test
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,25,public void overloading() {
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,27,mock.oneArg(true);
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,28,"control.setReturnValue(""true"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,29,"control.setDefaultReturnValue(""false"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,31,mock.oneArg((byte) 0);
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,32,"control.setReturnValue(""byte 0"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,33,"control.setDefaultReturnValue(""byte 1"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,35,mock.oneArg((short) 0);
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,36,"control.setReturnValue(""short 0"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,37,"control.setDefaultReturnValue(""short 1"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,39,mock.oneArg((char) 0);
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,40,"control.setReturnValue(""char 0"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,41,"control.setDefaultReturnValue(""char 1"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,43,mock.oneArg(0);
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,44,"control.setReturnValue(""int 0"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,45,"control.setDefaultReturnValue(""int 1"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,47,mock.oneArg((long) 0);
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,48,"control.setReturnValue(""long 0"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,49,"control.setDefaultReturnValue(""long 1"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,51,mock.oneArg((float) 0);
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,52,"control.setReturnValue(""float 0"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,53,"control.setDefaultReturnValue(""float 1"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,55,mock.oneArg(0.0);
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,56,"control.setReturnValue(""double 0"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,57,"control.setDefaultReturnValue(""double 1"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,59,"mock.oneArg(""Object 0"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,60,"control.setReturnValue(""String 0"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,61,"control.setDefaultReturnValue(""String 1"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,63,control.replay();
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,65,"assertEquals(""true"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,66,"assertEquals(""false"", mock.oneArg(false));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,68,"assertEquals(""byte 0"", mock.oneArg((byte) 0));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,69,"assertEquals(""byte 1"", mock.oneArg((byte) 1));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,71,"assertEquals(""short 0"", mock.oneArg((short) 0));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,72,"assertEquals(""short 1"", mock.oneArg((short) 1));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,74,"assertEquals(""char 0"", mock.oneArg((char) 0));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,75,"assertEquals(""char 1"", mock.oneArg((char) 1));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,77,"assertEquals(""int 0"", mock.oneArg(0));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,78,"assertEquals(""int 1"", mock.oneArg(1));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,80,"assertEquals(""long 0"", mock.oneArg((long) 0));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,81,"assertEquals(""long 1"", mock.oneArg((long) 1));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,83,"assertEquals(""float 0"", mock.oneArg((float) 0.0));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,84,"assertEquals(""float 1"", mock.oneArg((float) 1.0));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,86,"assertEquals(""double 0"", mock.oneArg(0.0));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,87,"assertEquals(""double 1"", mock.oneArg(1.0));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,89,"assertEquals(""String 0"", mock.oneArg(""Object 0""));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,90,"assertEquals(""String 1"", mock.oneArg(""Object 1""));"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,92,control.verify();
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,95,@Test
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,96,public void defaultThrowable() {
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,98,"mock.oneArg(""Object"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,99,RuntimeException expected = new RuntimeException();
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,100,control.setDefaultThrowable(expected);
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,102,control.replay();
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,104,try {
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,105,"mock.oneArg(""Something else"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,106,"fail(""runtime exception expected"");"
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,107,} catch (RuntimeException expectedException) {
True,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,test/org/easymock/tests/UsageOverloadedDefaultValueTest.java,108,"assertSame(expected, expectedException);"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,13,public class UsageOverloadedMethodTest {
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,15,MockControl<IMethods> controller;
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,17,IMethods mock;
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,19,@Before
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,20,public void setup() {
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,21,controller = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,22,mock = controller.getMock();
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,25,@Test
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,26,public void overloading() {
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,28,mock.oneArg(true);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,29,"controller.setReturnValue(""true"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,30,mock.oneArg(false);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,31,"controller.setReturnValue(""false"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,33,mock.oneArg((byte) 0);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,34,"controller.setReturnValue(""byte 0"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,35,mock.oneArg((byte) 1);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,36,"controller.setReturnValue(""byte 1"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,38,mock.oneArg((short) 0);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,39,"controller.setReturnValue(""short 0"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,40,mock.oneArg((short) 1);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,41,"controller.setReturnValue(""short 1"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,43,mock.oneArg((char) 0);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,44,"controller.setReturnValue(""char 0"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,45,mock.oneArg((char) 1);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,46,"controller.setReturnValue(""char 1"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,48,mock.oneArg(0);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,49,"controller.setReturnValue(""int 0"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,50,mock.oneArg(1);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,51,"controller.setReturnValue(""int 1"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,53,mock.oneArg((long) 0);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,54,"controller.setReturnValue(""long 0"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,55,mock.oneArg((long) 1);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,56,"controller.setReturnValue(""long 1"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,58,mock.oneArg((float) 0);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,59,"controller.setReturnValue(""float 0"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,60,mock.oneArg((float) 1);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,61,"controller.setReturnValue(""float 1"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,63,mock.oneArg(0.0);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,64,"controller.setReturnValue(""double 0"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,65,mock.oneArg(1.0);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,66,"controller.setReturnValue(""double 1"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,68,"mock.oneArg(""Object 0"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,69,"controller.setReturnValue(""1"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,70,"mock.oneArg(""Object 1"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,71,"controller.setReturnValue(""2"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,73,controller.replay();
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,75,"assertEquals(""true"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,76,"assertEquals(""false"", mock.oneArg(false));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,78,"assertEquals(""byte 0"", mock.oneArg((byte) 0));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,79,"assertEquals(""byte 1"", mock.oneArg((byte) 1));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,81,"assertEquals(""short 0"", mock.oneArg((short) 0));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,82,"assertEquals(""short 1"", mock.oneArg((short) 1));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,84,"assertEquals(""char 0"", mock.oneArg((char) 0));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,85,"assertEquals(""char 1"", mock.oneArg((char) 1));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,87,"assertEquals(""int 0"", mock.oneArg(0));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,88,"assertEquals(""int 1"", mock.oneArg(1));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,90,"assertEquals(""long 0"", mock.oneArg((long) 0));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,91,"assertEquals(""long 1"", mock.oneArg((long) 1));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,93,"assertEquals(""float 0"", mock.oneArg((float) 0.0));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,94,"assertEquals(""float 1"", mock.oneArg((float) 1.0));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,96,"assertEquals(""double 1"", mock.oneArg(1.0));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,97,"assertEquals(""double 0"", mock.oneArg(0.0));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,99,"assertEquals(""1"", mock.oneArg(""Object 0""));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,100,"assertEquals(""2"", mock.oneArg(""Object 1""));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,102,controller.verify();
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,105,@Test
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,106,public void nullReturnValue() {
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,108,"mock.oneArg(""Object"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,109,controller.setReturnValue(null);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,111,controller.replay();
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,113,"assertNull(mock.oneArg(""Object""));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,117,@Test
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,118,public void moreThanOneResultAndOpenCallCount() {
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,119,mock.oneArg(true);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,120,"controller.setReturnValue(""First Result"", 4);"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,121,"controller.setReturnValue(""Second Result"", 2);"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,122,"controller.setThrowable(new RuntimeException(""Third Result""), 3);"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,123,"controller.setReturnValue(""Following Result"", MockControl.ONE_OR_MORE);"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,125,controller.replay();
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,127,"assertEquals(""First Result"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,128,"assertEquals(""First Result"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,129,"assertEquals(""First Result"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,130,"assertEquals(""First Result"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,132,"assertEquals(""Second Result"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,133,"assertEquals(""Second Result"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,135,try {
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,136,mock.oneArg(true);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,137,"fail(""expected exception"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,138,} catch (RuntimeException expected) {
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,139,"assertEquals(""Third Result"", expected.getMessage());"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,142,try {
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,143,mock.oneArg(true);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,144,"fail(""expected exception"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,145,} catch (RuntimeException expected) {
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,146,"assertEquals(""Third Result"", expected.getMessage());"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,149,try {
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,150,mock.oneArg(true);
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,151,"fail(""expected exception"");"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,152,} catch (RuntimeException expected) {
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,153,"assertEquals(""Third Result"", expected.getMessage());"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,156,"assertEquals(""Following Result"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,157,"assertEquals(""Following Result"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,158,"assertEquals(""Following Result"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,159,"assertEquals(""Following Result"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,160,"assertEquals(""Following Result"", mock.oneArg(true));"
True,test/org/easymock/tests/UsageOverloadedMethodTest.java,test/org/easymock/tests/UsageOverloadedMethodTest.java,162,controller.verify();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,9,import java.util.Iterator;
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,11,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,12,import org.easymock.internal.Range;
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,13,import org.junit.Before;
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,14,import org.junit.Test;
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,16,public class UsageRangeTest {
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,18,private Iterator mock;
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,20,private MockControl<Iterator> control;
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,22,@Before
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,23,public void setup() {
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,24,control = MockControl.createStrictControl(Iterator.class);
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,25,mock = control.getMock();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,28,@Test
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,29,public void zeroOrMoreNoCalls() {
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,30,mock.hasNext();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,31,"control.setReturnValue(false, MockControl.ZERO_OR_MORE);"
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,32,control.replay();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,33,control.verify();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,36,@Test
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,37,public void zeroOrMoreOneCall() {
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,38,mock.hasNext();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,39,"control.setReturnValue(false, MockControl.ZERO_OR_MORE);"
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,40,control.replay();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,41,assertFalse(mock.hasNext());
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,42,control.verify();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,45,@Test
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,46,public void zeroOrMoreThreeCalls() {
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,47,mock.hasNext();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,48,"control.setReturnValue(false, MockControl.ZERO_OR_MORE);"
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,49,control.replay();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,50,assertFalse(mock.hasNext());
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,51,assertFalse(mock.hasNext());
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,52,assertFalse(mock.hasNext());
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,53,control.verify();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,56,@Test
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,57,public void combination() {
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,58,mock.hasNext();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,59,"control.setReturnValue(true, MockControl.ONE_OR_MORE);"
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,60,mock.next();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,61,"control.setReturnValue(""1"");"
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,63,mock.hasNext();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,64,"control.setReturnValue(true, MockControl.ONE_OR_MORE);"
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,65,mock.next();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,66,"control.setReturnValue(""2"");"
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,68,mock.hasNext();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,69,"control.setReturnValue(false, MockControl.ONE_OR_MORE);"
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,71,control.replay();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,73,assertTrue(mock.hasNext());
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,74,assertTrue(mock.hasNext());
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,75,assertTrue(mock.hasNext());
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,77,"assertEquals(""1"", mock.next());"
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,79,try {
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,80,mock.next();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,81,fail();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,82,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,85,assertTrue(mock.hasNext());
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,87,"assertEquals(""2"", mock.next());"
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,89,assertFalse(mock.hasNext());
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,91,control.verify();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,95,@Test
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,96,public void withIllegalOwnRange() {
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,97,mock.hasNext();
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,98,try {
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,99,"control.setReturnValue(true, new Range(2, 7));"
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,100,} catch (IllegalArgumentException e) {
True,test/org/easymock/tests/UsageRangeTest.java,test/org/easymock/tests/UsageRangeTest.java,101,"assertEquals(""Unexpected Range"", e.getMessage());"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,10,import org.easymock.internal.ReplayState;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,11,import org.junit.Before;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,12,import org.junit.Test;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,14,public class UsageStrictMockTest {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,15,private MockControl<IMethods> control;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,17,private IMethods mock;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,19,@Before
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,20,public void setup() {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,21,control = MockControl.createStrictControl(IMethods.class);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,22,mock = control.getMock();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,24,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,25,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,27,control.replay();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,30,@Test
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,31,public void verify() {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,32,control.reset();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,33,control.replay();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,34,control.verify();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,37,@Test
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,38,public void orderedCallsSucces() {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,39,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,40,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,42,control.verify();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,45,@Test
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,46,public void unorderedCallsFailure() {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,47,boolean failed = false;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,48,try {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,49,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,50,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,51,failed = true;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,53,if (!failed) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,54,"fail(""unordered calls accepted"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,58,@Test
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,59,public void tooManyCallsFailure() {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,60,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,61,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,63,boolean failed = false;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,64,try {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,65,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,66,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,67,failed = true;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,69,if (!failed) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,70,"fail(""too many calls accepted"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,74,@Test
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,75,public void tooFewCallsFailure() {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,76,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,77,boolean failed = false;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,78,try {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,79,control.verify();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,80,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,81,failed = true;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,82,"assertTrue(""stack trace must be filled in"", Util.getStackTrace("
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,83,expected).indexOf(ReplayState.class.getName()) == -1);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,85,if (!failed) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,86,"fail(""too few calls accepted"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,90,@Test
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,91,public void differentMethods() {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,93,control.reset();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,95,mock.booleanReturningMethod(0);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,96,control.setReturnValue(true);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,97,mock.simpleMethod();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,98,mock.booleanReturningMethod(1);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,99,"control.setReturnValue(false, 2, 3);"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,100,mock.simpleMethod();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,101,control.setVoidCallable(MockControl.ONE_OR_MORE);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,103,control.replay();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,104,"assertEquals(true, mock.booleanReturningMethod(0));"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,105,mock.simpleMethod();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,107,boolean failed = false;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,108,try {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,109,control.verify();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,110,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,111,failed = true;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,112,assertEquals(
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,113,"""\n  Expectation failure on verify:"""
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,114,"+ ""\n    simpleMethod(): expected: 1, actual: 1"""
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,115,"+ ""\n    booleanReturningMethod(1): expected: between 2 and 3, actual: 0"""
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,116,"+ ""\n    simpleMethod(): expected: at least 1, actual: 0"","
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,117,expected.getMessage());
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,119,if (!failed) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,120,"fail(""too few calls accepted"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,123,"assertEquals(false, mock.booleanReturningMethod(1));"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,125,failed = false;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,126,try {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,127,mock.simpleMethod();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,128,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,129,failed = true;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,130,assertEquals(
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,131,"""\n  Unexpected method call simpleMethod():"""
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,132,"+ ""\n    booleanReturningMethod(1): expected: between 2 and 3, actual: 1"","
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,133,expected.getMessage());
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,135,if (!failed) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,136,"fail(""wrong call accepted"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,140,@Test
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,141,public void range() {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,143,control.reset();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,145,mock.booleanReturningMethod(0);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,146,control.setReturnValue(true);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,147,mock.simpleMethod();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,148,mock.booleanReturningMethod(1);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,149,"control.setReturnValue(false, 2, 3);"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,150,mock.simpleMethod();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,151,control.setVoidCallable(MockControl.ONE_OR_MORE);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,152,mock.booleanReturningMethod(1);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,153,control.setReturnValue(false);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,155,control.replay();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,157,mock.booleanReturningMethod(0);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,158,mock.simpleMethod();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,160,mock.booleanReturningMethod(1);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,161,mock.booleanReturningMethod(1);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,162,mock.booleanReturningMethod(1);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,164,boolean failed = false;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,166,try {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,167,mock.booleanReturningMethod(1);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,168,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,169,failed = true;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,170,assertEquals(
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,171,"""\n  Unexpected method call booleanReturningMethod(1):"""
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,172,"+ ""\n    booleanReturningMethod(1): expected: between 2 and 3, actual: 3 (+1)"""
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,173,"+ ""\n    simpleMethod(): expected: at least 1, actual: 0"","
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,174,expected.getMessage());
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,176,if (!failed) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,177,"fail(""too many calls accepted"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,181,@Test
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,182,public void defaultBehavior() {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,183,control.reset();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,185,mock.booleanReturningMethod(1);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,186,control.setReturnValue(true);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,187,control.setReturnValue(false);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,188,control.setReturnValue(true);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,189,control.setDefaultReturnValue(true);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,191,control.replay();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,193,"assertEquals(true, mock.booleanReturningMethod(2));"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,194,"assertEquals(true, mock.booleanReturningMethod(3));"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,195,"assertEquals(true, mock.booleanReturningMethod(1));"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,196,"assertEquals(false, mock.booleanReturningMethod(1));"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,197,"assertEquals(true, mock.booleanReturningMethod(3));"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,199,boolean failed = false;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,200,try {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,201,control.verify();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,202,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,203,failed = true;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,204,assertEquals(
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,205,"""\n  Expectation failure on verify:"""
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,206,"+ ""\n    booleanReturningMethod(1): expected: 3, actual: 2"","
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,207,expected.getMessage());
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,209,if (!failed) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,210,"fail(""too few calls accepted"");"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,214,@Test
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,215,public void unexpectedCallWithArray() {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,216,control.reset();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,217,control.setDefaultMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,218,"mock.arrayMethod(new String[] { ""Test"", ""Test 2"" });"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,219,control.replay();
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,220,boolean failed = false;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,221,"String[] strings = new String[] { ""Test"" };"
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,222,try {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,223,mock.arrayMethod(strings);
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,224,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,225,failed = true;
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,226,assertEquals(
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,227,"""\n  Unexpected method call arrayMethod("""
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,228,+ strings.toString()
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,230,"+ ""\n    arrayMethod([\""Test\"", \""Test 2\""]): expected: 1, actual: 0"","
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,231,expected.getMessage());
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,233,if (!failed) {
True,test/org/easymock/tests/UsageStrictMockTest.java,test/org/easymock/tests/UsageStrictMockTest.java,234,"fail(""exception expected"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,10,import org.junit.Before;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,11,import org.junit.Test;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,13,public class UsageTest {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,15,MockControl<IMethods> control;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,17,IMethods mock;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,19,@Before
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,20,public void setup() {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,21,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,22,mock = control.getMock();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,25,@Test
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,26,public void exactCallCountByLastCall() {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,27,mock.oneArg(false);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,28,"control.setReturnValue(""Test"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,29,"control.setReturnValue(""Test2"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,31,control.replay();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,33,"assertEquals(""Test"", mock.oneArg(false));"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,34,"assertEquals(""Test2"", mock.oneArg(false));"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,36,boolean failed = false;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,37,try {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,38,mock.oneArg(false);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,39,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,40,failed = true;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,42,if (!failed)
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,43,"fail(""expected AssertionError"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,46,@Test
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,47,public void openCallCountByLastCall() {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,48,mock.oneArg(false);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,49,"control.setReturnValue(""Test"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,50,"control.setReturnValue(""Test2"", MockControl.ONE_OR_MORE);"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,52,control.replay();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,54,"assertEquals(""Test"", mock.oneArg(false));"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,55,"assertEquals(""Test2"", mock.oneArg(false));"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,56,"assertEquals(""Test2"", mock.oneArg(false));"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,59,@Test
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,60,public void exactCallCountByLastThrowable() {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,61,mock.oneArg(false);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,62,"control.setReturnValue(""Test"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,63,"control.setReturnValue(""Test2"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,64,"control.setThrowable(new IndexOutOfBoundsException(), 1);"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,66,control.replay();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,68,"assertEquals(""Test"", mock.oneArg(false));"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,69,"assertEquals(""Test2"", mock.oneArg(false));"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,71,try {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,72,mock.oneArg(false);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,73,} catch (IndexOutOfBoundsException expected) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,76,boolean failed = true;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,77,try {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,78,try {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,79,mock.oneArg(false);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,80,} catch (IndexOutOfBoundsException expected) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,82,failed = false;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,83,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,85,if (!failed)
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,86,"fail(""expected AssertionError"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,89,@Test
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,90,public void openCallCountByLastThrowable() {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,91,mock.oneArg(false);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,92,"control.setReturnValue(""Test"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,93,"control.setReturnValue(""Test2"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,94,"control.setThrowable(new IndexOutOfBoundsException(),"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,95,MockControl.ONE_OR_MORE);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,97,control.replay();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,99,"assertEquals(""Test"", mock.oneArg(false));"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,100,"assertEquals(""Test2"", mock.oneArg(false));"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,102,try {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,103,mock.oneArg(false);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,104,} catch (IndexOutOfBoundsException expected) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,106,try {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,107,mock.oneArg(false);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,108,} catch (IndexOutOfBoundsException expected) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,112,@Test
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,113,public void moreThanOneArgument() {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,114,"mock.threeArgumentMethod(1, ""2"", ""3"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,115,"control.setReturnValue(""Test"", 2);"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,117,control.replay();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,119,"assertEquals(""Test"", mock.threeArgumentMethod(1, ""2"", ""3""));"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,121,boolean failed = true;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,122,try {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,123,control.verify();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,124,failed = false;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,125,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,126,assertEquals(
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,127,"""\n  Expectation failure on verify:"""
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,128,"+ ""\n    threeArgumentMethod(1, \""2\"", \""3\""): expected: 2, actual: 1"","
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,129,expected.getMessage());
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,131,if (!failed) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,132,"fail(""exception expected"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,136,@Test
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,137,public void unexpectedCallWithArray() {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,138,control.reset();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,139,control.setDefaultMatcher(MockControl.ARRAY_MATCHER);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,140,control.replay();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,141,boolean failed = false;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,142,"String[] strings = new String[] { ""Test"" };"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,143,try {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,144,mock.arrayMethod(strings);
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,145,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,146,failed = true;
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,147,"assertEquals(""\n  Unexpected method call arrayMethod("""
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,148,"+ strings.toString() + ""):"", expected.getMessage());"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,150,if (!failed) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,151,"fail(""exception expected"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,156,@Test
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,157,public void wrongArguments() {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,158,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,159,control.replay();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,161,try {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,162,"mock.simpleMethodWithArgument(""5"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,163,fail();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,164,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,165,assertEquals(
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,166,"""\n  Unexpected method call simpleMethodWithArgument(\""5\""):"""
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,167,"+ ""\n    simpleMethodWithArgument(\""3\""): expected: 1, actual: 0"","
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,168,expected.getMessage());
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,173,@Test
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,174,public void summarizeSameObjectArguments() {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,175,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,176,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,177,control.replay();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,179,try {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,180,"mock.simpleMethodWithArgument(""5"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,181,fail();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,182,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,183,assertEquals(
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,184,"""\n  Unexpected method call simpleMethodWithArgument(\""5\""):"""
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,185,"+ ""\n    simpleMethodWithArgument(\""3\""): expected: 2, actual: 0"","
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,186,expected.getMessage());
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,191,@Test
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,192,public void argumentsOrdered() {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,193,"mock.simpleMethodWithArgument(""4"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,194,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,195,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,196,"mock.simpleMethodWithArgument(""0"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,197,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,198,control.replay();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,200,try {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,201,"mock.simpleMethodWithArgument(""5"");"
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,202,fail();
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,203,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,204,assertEquals(
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,205,"""\n  Unexpected method call simpleMethodWithArgument(\""5\""):"""
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,206,"+ ""\n    simpleMethodWithArgument(\""4\""): expected: 1, actual: 0"""
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,207,"+ ""\n    simpleMethodWithArgument(\""3\""): expected: 1, actual: 0"""
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,208,"+ ""\n    simpleMethodWithArgument(\""2\""): expected: 1, actual: 0"""
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,209,"+ ""\n    simpleMethodWithArgument(\""0\""): expected: 1, actual: 0"""
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,210,"+ ""\n    simpleMethodWithArgument(\""1\""): expected: 1, actual: 0"","
True,test/org/easymock/tests/UsageTest.java,test/org/easymock/tests/UsageTest.java,211,expected.getMessage());
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,9,import java.io.IOException;
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,11,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,12,import org.junit.Before;
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,13,import org.junit.Test;
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,15,public class UsageThrowableTest {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,17,private MockControl<IMethods> control;
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,19,private IMethods mock;
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,21,@Before
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,22,public void setup() {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,23,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,24,mock = control.getMock();
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,27,@Test
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,28,public void noUpperLimit() {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,29,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,30,control.setVoidCallable(MockControl.ONE_OR_MORE);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,31,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,32,control.replay();
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,33,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,34,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,35,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,36,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,37,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,38,control.verify();
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,41,@Test
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,42,public void throwRuntimeException() {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,43,testThrowUncheckedException(new RuntimeException());
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,46,@Test
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,47,public void throwSubclassOfRuntimeException() {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,48,testThrowUncheckedException(new RuntimeException() {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,52,@Test
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,53,public void throwError() {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,54,testThrowUncheckedException(new Error());
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,57,@Test
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,58,public void throwSubclassOfError() {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,59,testThrowUncheckedException(new Error() {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,63,private void testThrowUncheckedException(Throwable throwable) {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,64,mock.throwsNothing(true);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,65,"control.setReturnValue(""true"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,66,mock.throwsNothing(false);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,67,control.setThrowable(throwable);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,69,control.replay();
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,71,try {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,72,mock.throwsNothing(false);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,73,"fail(""Trowable expected"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,74,} catch (Throwable expected) {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,75,"assertSame(throwable, expected);"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,78,"assertEquals(""true"", mock.throwsNothing(true));"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,81,@Test
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,82,public void throwCheckedException() throws IOException {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,83,testThrowCheckedException(new IOException());
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,86,@Test
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,87,public void throwSubclassOfCheckedException() throws IOException {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,88,testThrowCheckedException(new IOException() {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,92,private void testThrowCheckedException(IOException expected)
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,93,throws IOException {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,94,try {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,95,mock.throwsIOException(0);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,96,"control.setReturnValue(""Value 0"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,97,mock.throwsIOException(1);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,98,control.setThrowable(expected);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,99,mock.throwsIOException(2);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,100,"control.setReturnValue(""Value 2"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,101,} catch (IOException e) {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,102,"fail(""Unexpected Exception"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,105,control.replay();
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,107,"assertEquals(""Value 0"", mock.throwsIOException(0));"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,108,"assertEquals(""Value 2"", mock.throwsIOException(2));"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,110,try {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,111,mock.throwsIOException(1);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,112,"fail(""IOException expected"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,113,} catch (IOException expectedException) {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,114,"assertSame(expectedException, expected);"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,118,@Test
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,119,public void throwAfterReturnValue() {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,120,mock.throwsNothing(false);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,121,"control.setReturnValue("""");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,122,RuntimeException expectedException = new RuntimeException();
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,123,control.setThrowable(expectedException);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,125,control.replay();
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,127,"assertEquals("""", mock.throwsNothing(false));"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,129,try {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,130,mock.throwsNothing(false);
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,131,"fail(""RuntimeException expected"");"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,132,} catch (RuntimeException actualException) {
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,133,"assertSame(expectedException, actualException);"
True,test/org/easymock/tests/UsageThrowableTest.java,test/org/easymock/tests/UsageThrowableTest.java,136,control.verify();
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,9,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,10,import org.junit.Test;
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,12,public class UsageUnorderedTest {
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,14,public interface Interface {
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,15,void method(int number);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,18,@Test
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,19,public void message() {
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,20,MockControl<Interface> control = MockControl
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,21,.createControl(Interface.class);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,22,Interface mock = control.getMock();
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,24,mock.method(0);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,25,control.setMatcher(MockControl.ALWAYS_MATCHER);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,26,control.setVoidCallable(1);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,27,mock.method(0);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,28,control.setVoidCallable(2);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,29,mock.method(1);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,31,control.replay();
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,33,mock.method(6);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,34,mock.method(7);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,35,mock.method(1);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,36,mock.method(25);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,38,try {
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,39,mock.method(42);
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,40,fail();
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,41,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,42,"assertEquals(""\n  Unexpected method call method(42):"""
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,43,"+ ""\n    method(<any>): expected: 3, actual: 3 (+1)"""
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,44,"+ ""\n    method(<any>): expected: 1, actual: 1 (+1)"","
True,test/org/easymock/tests/UsageUnorderedTest.java,test/org/easymock/tests/UsageUnorderedTest.java,45,expected.getMessage());
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,7,import java.lang.reflect.InvocationHandler;
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,8,import java.lang.reflect.Method;
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,9,import java.lang.reflect.Proxy;
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,11,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,12,import org.junit.Before;
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,13,import org.junit.Test;
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,15,public class UsageVarargTest {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,17,MockControl<IVarArgs> control;
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,19,IVarArgs mock;
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,21,@Before
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,22,public void setup() {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,23,control = MockControl.createStrictControl(IVarArgs.class);
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,24,mock = control.getMock();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,27,@Test
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,28,public void varargObjectAccepted() {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,29,"mock.withVarargsString(1, ""1"");"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,30,"mock.withVarargsString(2, ""1"", ""2"");"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,31,"mock.withVarargsString(2, ""1"", ""2"");"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,32,"mock.withVarargsObject(3, ""1"");"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,33,"mock.withVarargsObject(4, ""1"", ""2"");"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,35,control.replay();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,36,"mock.withVarargsString(1, ""1"");"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,37,"mock.withVarargsString(2, ""1"", ""2"");"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,38,"mock.withVarargsString(2, ""1"", ""2"");"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,39,"mock.withVarargsObject(3, ""1"");"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,40,"mock.withVarargsObject(4, ""1"", ""2"");"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,41,control.verify();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,44,@Test
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,45,public void varargBooleanAccepted() {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,46,"mock.withVarargsBoolean(1, true);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,47,"mock.withVarargsBoolean(2, true, false);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,49,control.replay();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,50,"mock.withVarargsBoolean(1, true);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,51,"mock.withVarargsBoolean(2, true, false);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,52,control.verify();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,55,@Test
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,56,public void varargByteAccepted() {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,57,"mock.withVarargsByte(1, (byte) 1);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,58,"mock.withVarargsByte(2, (byte) 1, (byte) 2);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,60,control.replay();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,61,"mock.withVarargsByte(1, (byte) 1);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,62,"mock.withVarargsByte(2, (byte) 1, (byte) 2);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,63,control.verify();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,66,@Test
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,67,public void varargCharAccepted() {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,68,"mock.withVarargsChar(1, 'a');"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,69,"mock.withVarargsChar(1, 'a', 'b');"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,71,control.replay();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,72,"mock.withVarargsChar(1, 'a');"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,73,"mock.withVarargsChar(1, 'a', 'b');"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,74,control.verify();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,77,@Test
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,78,public void varargDoubleAccepted() {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,79,"mock.withVarargsDouble(1, 1.0d);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,80,"mock.withVarargsDouble(1, 1.0d, 2.0d);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,82,control.replay();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,83,"mock.withVarargsDouble(1, 1.0d);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,84,"mock.withVarargsDouble(1, 1.0d, 2.0d);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,85,control.verify();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,88,@Test
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,89,public void varargFloatAccepted() {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,90,"mock.withVarargsFloat(1, 1.0f);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,91,"mock.withVarargsFloat(1, 1.0f, 2.0f);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,93,control.replay();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,94,"mock.withVarargsFloat(1, 1.0f);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,95,"mock.withVarargsFloat(1, 1.0f, 2.0f);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,96,control.verify();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,99,@Test
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,100,public void varargIntAccepted() {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,101,"mock.withVarargsInt(1, 1);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,102,"mock.withVarargsInt(1, 1, 2);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,104,control.replay();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,105,"mock.withVarargsInt(1, 1);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,106,"mock.withVarargsInt(1, 1, 2);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,107,control.verify();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,110,@Test
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,111,public void varargLongAccepted() {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,112,"mock.withVarargsLong(1, (long) 1);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,113,"mock.withVarargsLong(1, 1, 2);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,115,control.replay();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,116,"mock.withVarargsLong(1, (long) 1);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,117,"mock.withVarargsLong(1, 1, 2);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,118,control.verify();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,121,@Test
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,122,public void varargShortAccepted() {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,123,"mock.withVarargsShort(1, (short) 1);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,124,"mock.withVarargsShort(1, (short) 1, (short) 2);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,126,control.replay();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,127,"mock.withVarargsShort(1, (short) 1);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,128,"mock.withVarargsShort(1, (short) 1, (short) 2);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,129,control.verify();
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,132,@Test
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,133,public void varargAcceptedIfArrayIsGiven() {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,134,"IVarArgs object = (IVarArgs) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[] { IVarArgs.class }, new InvocationHandler() {"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,136,"public Object invoke(Object proxy, Method method, Object[] args)"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,137,throws Throwable {
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,138,return null;
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,141,object.withVarargsObject(1);
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,142,"object.withVarargsObject(1, (Object) null);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,143,"object.withVarargsObject(1, (Object[]) null);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,144,"object.withVarargsObject(1, (Object[]) new Object[0] );"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,145,"object.withVarargsObject(1, false);"
True,test/org/easymock/tests/UsageVarargTest.java,test/org/easymock/tests/UsageVarargTest.java,146,"object.withVarargsObject(1, new boolean[] {true, false});"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,5,package org.easymock.tests;
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,9,import java.io.IOException;
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,11,import org.easymock.MockControl;
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,12,import org.easymock.internal.ReplayState;
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,13,import org.junit.Before;
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,14,import org.junit.Test;
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,16,public class UsageVerifyTest {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,17,private MockControl<IMethods> control;
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,19,private IMethods mock;
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,21,@Before
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,22,public void setup() {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,23,control = MockControl.createControl(IMethods.class);
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,24,mock = control.getMock();
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,27,@Test
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,28,public void twoReturns() {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,29,mock.throwsNothing(true);
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,30,"control.setReturnValue(""Test"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,31,"control.setReturnValue(""Test2"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,33,control.replay();
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,35,"assertEquals(""Test"", mock.throwsNothing(true));"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,37,boolean failed = true;
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,39,try {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,40,control.verify();
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,41,failed = false;
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,42,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,43,"assertEquals(""\n  Expectation failure on verify:"""
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,44,"+ ""\n    throwsNothing(true): expected: 2, actual: 1"","
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,45,expected.getMessage());
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,46,"assertTrue(""stack trace must be filled in"", Util.getStackTrace("
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,47,expected).indexOf(ReplayState.class.getName()) == -1);
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,50,if (!failed)
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,51,"fail(""AssertionError expected"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,53,"assertEquals(""Test2"", mock.throwsNothing(true));"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,55,control.verify();
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,57,try {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,58,mock.throwsNothing(true);
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,59,"fail(""AssertionError expected"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,60,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,61,"assertEquals(""\n  Unexpected method call throwsNothing(true):"""
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,62,"+ ""\n    throwsNothing(true): expected: 2, actual: 2 (+1)"","
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,63,expected.getMessage());
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,67,@Test
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,68,public void atLeastTwoReturns() {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,69,mock.throwsNothing(true);
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,70,"control.setReturnValue(""Test"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,71,"control.setReturnValue(""Test2"", MockControl.ONE_OR_MORE);"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,73,control.replay();
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,75,"assertEquals(""Test"", mock.throwsNothing(true));"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,77,try {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,78,control.verify();
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,79,"fail(""AssertionError expected"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,80,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,82,assertEquals(
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,83,"""\n  Expectation failure on verify:"""
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,84,"+ ""\n    throwsNothing(true): expected: at least 2, actual: 1"","
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,85,expected.getMessage());
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,88,"assertEquals(""Test2"", mock.throwsNothing(true));"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,89,"assertEquals(""Test2"", mock.throwsNothing(true));"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,91,control.verify();
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,94,@Test
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,95,public void twoThrows() throws IOException {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,96,mock.throwsIOException(0);
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,97,control.setThrowable(new IOException());
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,98,control.setThrowable(new IOException());
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,99,mock.throwsIOException(1);
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,100,control.setThrowable(new IOException());
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,102,control.replay();
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,104,try {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,105,mock.throwsIOException(0);
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,106,"fail(""IOException expected"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,107,} catch (IOException expected) {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,110,try {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,111,control.verify();
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,112,"fail(""AssertionError expected"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,113,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,114,"assertEquals(""\n  Expectation failure on verify:"""
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,115,"+ ""\n    throwsIOException(0): expected: 2, actual: 1"""
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,116,"+ ""\n    throwsIOException(1): expected: 1, actual: 0"","
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,117,expected.getMessage());
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,120,try {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,121,mock.throwsIOException(0);
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,122,"fail(""IOException expected"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,123,} catch (IOException expected) {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,126,try {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,127,control.verify();
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,128,"fail(""AssertionError expected"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,129,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,130,"assertEquals(""\n  Expectation failure on verify:"""
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,131,"+ ""\n    throwsIOException(1): expected: 1, actual: 0"","
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,132,expected.getMessage());
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,135,try {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,136,mock.throwsIOException(1);
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,137,"fail(""IOException expected"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,138,} catch (IOException expected) {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,141,control.verify();
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,143,try {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,144,mock.throwsIOException(0);
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,145,"fail(""AssertionError expected"");"
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,146,} catch (AssertionError expected) {
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,147,assertEquals(
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,148,"""\n  Unexpected method call throwsIOException(0):"""
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,149,"+ ""\n    throwsIOException(0): expected: 2, actual: 2 (+1)"","
True,test/org/easymock/tests/UsageVerifyTest.java,test/org/easymock/tests/UsageVerifyTest.java,150,expected.getMessage());
True,test/org/easymock/tests/Util.java,test/org/easymock/tests/Util.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests/Util.java,test/org/easymock/tests/Util.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests/Util.java,test/org/easymock/tests/Util.java,5,package org.easymock.tests;
True,test/org/easymock/tests/Util.java,test/org/easymock/tests/Util.java,7,import java.io.PrintWriter;
True,test/org/easymock/tests/Util.java,test/org/easymock/tests/Util.java,8,import java.io.StringWriter;
True,test/org/easymock/tests/Util.java,test/org/easymock/tests/Util.java,10,public class Util {
True,test/org/easymock/tests/Util.java,test/org/easymock/tests/Util.java,11,public static String getStackTrace(Throwable throwable) {
True,test/org/easymock/tests/Util.java,test/org/easymock/tests/Util.java,12,StringWriter stackTrace = new StringWriter();
True,test/org/easymock/tests/Util.java,test/org/easymock/tests/Util.java,13,throwable.printStackTrace(new PrintWriter(stackTrace));
True,test/org/easymock/tests/Util.java,test/org/easymock/tests/Util.java,14,return stackTrace.getBuffer().toString();
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,5,package org.easymock.tests2;
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,10,import org.easymock.IAnswer;
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,11,import org.easymock.tests.IMethods;
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,12,import org.junit.Before;
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,13,import org.junit.Test;
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,15,public class AnswerTest {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,17,private IMethods mock;
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,19,@Before
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,20,public void setUp() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,21,mock = createMock(IMethods.class);
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,24,"@SuppressWarnings(""unchecked"")"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,25,@Test
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,26,public void answer() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,27,IAnswer firstAnswer = new IAnswer() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,28,public Object answer() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,29,"assertEquals(new Object[] { 1, ""2"", ""3"" },"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,30,getCurrentArguments());
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,31,"return ""Call answered"";"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,35,IAnswer secondAnswer = new IAnswer() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,36,public Object answer() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,37,"assertEquals(new Object[] { 1, ""2"", ""3"" },"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,38,getCurrentArguments());
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,39,"throw new IllegalStateException(""Call answered"");"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,43,"expect(mock.threeArgumentMethod(1, ""2"", ""3"")).andAnswer(firstAnswer)"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,44,".andReturn(""Second call"").andAnswer(secondAnswer).andReturn("
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,45,"""Fourth call"");"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,47,replay(mock);
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,49,"assertEquals(""Call answered"", mock.threeArgumentMethod(1, ""2"", ""3""));"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,50,"assertEquals(""Second call"", mock.threeArgumentMethod(1, ""2"", ""3""));"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,51,try {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,52,"mock.threeArgumentMethod(1, ""2"", ""3"");"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,53,fail();
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,54,} catch (IllegalStateException expected) {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,55,"assertEquals(""Call answered"", expected.getMessage());"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,57,"assertEquals(""Fourth call"", mock.threeArgumentMethod(1, ""2"", ""3""));"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,59,verify(mock);
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,62,"@SuppressWarnings(""unchecked"")"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,63,@Test
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,64,public void stubAnswer() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,65,IAnswer firstAnswer = new IAnswer() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,66,public Object answer() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,67,"assertEquals(new Object[] { 1, ""2"", ""3"" },"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,68,getCurrentArguments());
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,69,"return ""Call answered"";"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,73,IAnswer secondAnswer = new IAnswer() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,74,public Object answer() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,75,"assertEquals(new Object[] { 1, ""2"", ""4"" },"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,76,getCurrentArguments());
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,77,"return ""Call answered"";"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,81,"expect(mock.threeArgumentMethod(1, ""2"", ""3"")).andReturn(42)"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,82,.andStubAnswer(firstAnswer);
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,83,"expect(mock.threeArgumentMethod(1, ""2"", ""4"")).andStubAnswer("
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,84,secondAnswer);
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,86,replay(mock);
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,88,"assertEquals(42, mock.threeArgumentMethod(1, ""2"", ""3""));"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,89,"assertEquals(""Call answered"", mock.threeArgumentMethod(1, ""2"", ""3""));"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,90,"assertEquals(""Call answered"", mock.threeArgumentMethod(1, ""2"", ""4""));"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,91,"assertEquals(""Call answered"", mock.threeArgumentMethod(1, ""2"", ""3""));"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,92,"assertEquals(""Call answered"", mock.threeArgumentMethod(1, ""2"", ""3""));"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,94,verify(mock);
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,97,@Test
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,98,public void nullAnswerNotAllowed() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,99,try {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,100,"expect(mock.threeArgumentMethod(1, ""2"", ""3"")).andAnswer(null);"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,101,fail();
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,102,} catch (NullPointerException expected) {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,103,"assertEquals(""answer object must not be null"", expected"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,104,.getMessage());
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,108,@Test
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,109,public void nullStubAnswerNotAllowed() {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,110,try {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,111,"expect(mock.threeArgumentMethod(1, ""2"", ""3"")).andStubAnswer(null);"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,112,fail();
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,113,} catch (NullPointerException expected) {
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,114,"assertEquals(""answer object must not be null"", expected"
True,test/org/easymock/tests2/AnswerTest.java,test/org/easymock/tests2/AnswerTest.java,115,.getMessage());
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,5,package org.easymock.tests2;
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,10,import org.easymock.IAnswer;
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,11,import org.easymock.tests.IMethods;
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,12,import org.junit.Before;
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,13,import org.junit.Test;
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,15,public class CallbackAndArgumentsTest {
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,17,private IMethods mock;
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,19,@Before
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,20,public void setUp() {
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,21,mock = createStrictMock(IMethods.class);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,24,@Test
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,25,public void callbackGetsArguments() {
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,27,final StringBuffer buffer = new StringBuffer();
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,29,mock.simpleMethodWithArgument((String) notNull());
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,30,expectLastCall().andAnswer(new IAnswer<Object>() {
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,31,public Object answer() {
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,32,buffer.append((String) getCurrentArguments()[0]);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,33,return null;
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,35,}).times(2);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,37,replay(mock);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,39,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,40,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,42,verify(mock);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,44,"assertEquals(""12"", buffer.toString());"
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,47,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,48,public void currentArgumentsFailsOutsideCallbacks() {
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,49,getCurrentArguments();
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,52,@Test
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,53,public void callbackGetsArgumentsEvenIfAMockCallsAnother() {
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,55,final StringBuffer buffer = new StringBuffer();
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,57,final IMethods mock2 = createStrictMock(IMethods.class);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,58,mock2.simpleMethod();
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,59,expectLastCall().andAnswer(new IAnswer<Object>() {
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,60,public Object answer() {
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,61,"// empty, only needed to force deletion of arguments"
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,62,return null;
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,64,}).times(2);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,66,mock.simpleMethodWithArgument((String) notNull());
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,67,expectLastCall().andAnswer(new IAnswer<Object>() {
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,68,public Object answer() {
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,69,mock2.simpleMethod();
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,70,buffer.append((String) getCurrentArguments()[0]);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,71,return null;
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,73,}).times(2);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,75,replay(mock);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,76,replay(mock2);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,78,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,79,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,81,verify(mock);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,82,verify(mock2);
True,test/org/easymock/tests2/CallbackAndArgumentsTest.java,test/org/easymock/tests2/CallbackAndArgumentsTest.java,84,"assertEquals(""12"", buffer.toString());"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,5,package org.easymock.tests2;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,10,import org.easymock.IAnswer;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,11,import org.easymock.tests.IMethods;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,12,import org.junit.Before;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,13,import org.junit.Test;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,15,public class CallbackTest {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,17,private IMethods mock;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,19,private static class Callback<T> implements IAnswer<T> {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,20,private int callCount;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,22,private T result;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,24,public Callback(T result) {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,25,this.result = result;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,28,public void run() {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,31,public int getCallCount() {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,32,return callCount;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,35,public T answer() throws Throwable {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,36,callCount++;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,37,return result;
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,41,@Before
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,42,public void setUp() {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,43,mock = createStrictMock(IMethods.class);
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,46,@Test
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,47,public void callback() {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,48,"Callback<String> c1 = new Callback<String>(""1"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,49,Callback<Object> c2 = new Callback<Object>(null);
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,50,Callback<Object> c3 = new Callback<Object>(null);
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,52,"expect(mock.oneArg(""2"")).andAnswer(c1).times(2);"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,53,"mock.simpleMethodWithArgument(""One"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,54,expectLastCall().andAnswer(c2);
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,55,"mock.simpleMethodWithArgument(""Two"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,56,expectLastCall().andAnswer(c3).times(2);
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,58,replay(mock);
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,60,"mock.oneArg(""2"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,61,"mock.oneArg(""2"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,62,try {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,63,"mock.oneArg(""2"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,64,} catch (AssertionError ignored) {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,66,try {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,67,"mock.simpleMethodWithArgument(""Two"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,68,} catch (AssertionError ignored) {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,70,"mock.simpleMethodWithArgument(""One"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,71,try {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,72,"mock.simpleMethodWithArgument(""One"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,73,} catch (AssertionError ignored) {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,75,"mock.simpleMethodWithArgument(""Two"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,76,"mock.simpleMethodWithArgument(""Two"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,77,try {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,78,"mock.simpleMethodWithArgument(""Two"");"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,79,} catch (AssertionError ignored) {
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,81,verify(mock);
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,83,"assertEquals(2, c1.getCallCount());"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,84,"assertEquals(1, c2.getCallCount());"
True,test/org/easymock/tests2/CallbackTest.java,test/org/easymock/tests2/CallbackTest.java,85,"assertEquals(2, c3.getCallCount());"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,5,package org.easymock.tests2;
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,9,import java.math.BigDecimal;
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,11,import org.easymock.internal.matchers.*;
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,12,import org.junit.Test;
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,14,public class CompareToTest {
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,16,@Test
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,17,public void testNotComparable() {
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,18,CompareTo<Long> cmpTo = new CompareTo<Long>(5L) {
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,20,@Override
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,21,protected String getName() {
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,22,return null;
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,25,@Override
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,26,protected boolean matchResult(int result) {
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,27,"fail(""Shouldn't be called since the passed argument is not Comparable"");"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,28,return true;
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,33,assertFalse(cmpTo.matches(new Object()));
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,35,@Test
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,36,public void testLessThan() {
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,37,"test(new LessThan<String>(""b""), true, false, false, ""lt"");"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,40,@Test
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,41,public void testGreateThan() {
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,42,"test(new GreaterThan<String>(""b""), false, true, false, ""gt"");"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,45,@Test
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,46,public void testLessOrEqual() {
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,47,"test(new LessOrEqual<String>(""b""), true, false, true, ""leq"");"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,50,@Test
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,51,public void testGreateOrEqual() {
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,52,"test(new GreaterOrEqual<String>(""b""), false, true, true, ""geq"");"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,55,@Test
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,56,public void testCompareEqual() {
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,57,"test(new CompareEqual<String>(""b""), false, false, true, ""cmpEq"");"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,59,// Make sure it works when equals provide a different result than
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,60,// compare
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,61,CompareEqual<BigDecimal> cmpEq = new CompareEqual<BigDecimal>(
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,62,"new BigDecimal(""5.00""));"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,63,"assertTrue(cmpEq.matches(new BigDecimal(""5"")));"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,66,"private void test(CompareTo<String> cmpTo, boolean lower, boolean higher,"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,67,"boolean equals, String name) {"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,69,"assertEquals(lower, cmpTo.matches(""a""));"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,70,"assertEquals(equals, cmpTo.matches(""b""));"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,71,"assertEquals(higher, cmpTo.matches(""c""));"
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,73,StringBuffer sb = new StringBuffer();
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,74,cmpTo.appendTo(sb);
True,test/org/easymock/tests2/CompareToTest.java,test/org/easymock/tests2/CompareToTest.java,75,"assertEquals(name + ""(b)"", sb.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,5,package org.easymock.tests2;
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,9,import java.util.ArrayList;
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,10,import java.util.List;
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,12,import org.easymock.IArgumentMatcher;
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,13,import org.easymock.internal.matchers.*;
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,14,import org.junit.Before;
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,15,import org.junit.Test;
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,17,public class ConstraintsToStringTest {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,18,private StringBuffer buffer;
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,20,@Before
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,21,public void setup() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,22,buffer = new StringBuffer();
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,25,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,26,public void sameToStringWithString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,27,"new Same(""X"").appendTo(buffer);"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,28,"assertEquals(""same(\""X\"")"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,32,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,33,public void nullToString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,34,Null.NULL.appendTo(buffer);
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,35,"assertEquals(""isNull()"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,38,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,39,public void notNullToString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,40,NotNull.NOT_NULL.appendTo(buffer);
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,41,"assertEquals(""notNull()"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,44,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,45,public void anyToString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,46,Any.ANY.appendTo(buffer);
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,47,"assertEquals(""<any>"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,50,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,51,public void sameToStringWithChar() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,52,new Same('x').appendTo(buffer);
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,53,"assertEquals(""same('x')"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,56,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,57,public void sameToStringWithObject() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,58,Object o = new Object() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,59,@Override
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,60,public String toString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,61,"return ""X"";"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,64,new Same(o).appendTo(buffer);
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,65,"assertEquals(""same(X)"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,68,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,69,public void equalsToStringWithString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,70,"new Equals(""X"").appendTo(buffer);"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,71,"assertEquals(""\""X\"""", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,75,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,76,public void equalsToStringWithChar() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,77,new Equals('x').appendTo(buffer);
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,78,"assertEquals(""'x'"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,81,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,82,public void equalsToStringWithObject() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,83,Object o = new Object() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,84,@Override
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,85,public String toString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,86,"return ""X"";"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,89,new Equals(o).appendTo(buffer);
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,90,"assertEquals(""X"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,93,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,94,public void orToString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,95,List<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>();
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,96,matchers.add(new Equals(1));
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,97,matchers.add(new Equals(2));
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,98,new Or(matchers).appendTo(buffer);
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,99,"assertEquals(""or(1, 2)"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,102,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,103,public void notToString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,104,new Not(new Equals(1)).appendTo(buffer);
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,105,"assertEquals(""not(1)"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,108,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,109,public void andToString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,110,List<IArgumentMatcher> matchers = new ArrayList<IArgumentMatcher>();
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,111,matchers.add(new Equals(1));
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,112,matchers.add(new Equals(2));
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,113,new And(matchers).appendTo(buffer);
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,114,"assertEquals(""and(1, 2)"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,117,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,118,public void startsWithToString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,119,"new StartsWith(""AB"").appendTo(buffer);"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,120,"assertEquals(""startsWith(\""AB\"")"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,123,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,124,public void endsWithToString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,125,"new EndsWith(""AB"").appendTo(buffer);"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,126,"assertEquals(""endsWith(\""AB\"")"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,129,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,130,public void containsToString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,131,"new Contains(""AB"").appendTo(buffer);"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,132,"assertEquals(""contains(\""AB\"")"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,135,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,136,public void findToString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,137,"new Find(""\\s+"").appendTo(buffer);"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,138,"assertEquals(""find(\""\\\\s+\"")"", buffer.toString());"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,141,@Test
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,142,public void matchesToString() {
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,143,"new Matches(""\\s+"").appendTo(buffer);"
True,test/org/easymock/tests2/ConstraintsToStringTest.java,test/org/easymock/tests2/ConstraintsToStringTest.java,144,"assertEquals(""matches(\""\\\\s+\"")"", buffer.toString());"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,1,package org.easymock.tests2;
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,3,import org.easymock.IMocksControl;
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,4,import org.easymock.tests.IMethods;
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,5,import org.junit.Test;
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,10,public class NameTest {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,11,@Test
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,12,public void nameForMock() {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,13,"IMethods mock = createMock(""mock"", IMethods.class);"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,14,mock.simpleMethod();
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,15,replay(mock);
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,16,try {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,17,verify(mock);
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,18,} catch (AssertionError expected) {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,19,String actualMessage = expected.getMessage();
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,20,"String expectedMessage = ""\n  Expectation failure on verify:\n    mock.simpleMethod(): expected: 1, actual: 0"";"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,21,"assertEquals(expectedMessage, actualMessage);"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,24,@Test
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,25,public void nameForStrictMock() {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,26,"IMethods mock = createStrictMock(""mock"", IMethods.class);"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,27,mock.simpleMethod();
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,28,replay(mock);
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,29,try {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,30,verify(mock);
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,31,} catch (AssertionError expected) {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,32,String actualMessage = expected.getMessage();
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,33,"String expectedMessage = ""\n  Expectation failure on verify:\n    mock.simpleMethod(): expected: 1, actual: 0"";"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,34,"assertEquals(expectedMessage, actualMessage);"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,37,@Test
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,38,public void nameForNiceMock() {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,39,"IMethods mock = createNiceMock(""mock"", IMethods.class);"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,40,mock.simpleMethod();
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,41,replay(mock);
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,42,try {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,43,verify(mock);
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,44,} catch (AssertionError expected) {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,45,String actualMessage = expected.getMessage();
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,46,"String expectedMessage = ""\n  Expectation failure on verify:\n    mock.simpleMethod(): expected: 1, actual: 0"";"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,47,"assertEquals(expectedMessage, actualMessage);"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,50,@Test
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,51,public void nameForMocksControl() {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,52,IMocksControl control = createControl();
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,53,"IMethods mock = control.createMock(""mock"", IMethods.class);"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,54,mock.simpleMethod();
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,55,replay(mock);
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,56,try {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,57,verify(mock);
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,58,} catch (AssertionError expected) {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,59,String actualMessage = expected.getMessage();
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,60,"String expectedMessage = ""\n  Expectation failure on verify:\n    mock.simpleMethod(): expected: 1, actual: 0"";"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,61,"assertEquals(expectedMessage, actualMessage);"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,65,@Test
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,66,public void shouldThrowIllegalArgumentExceptionIfNameIsNoValidJavaIdentifier() {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,67,try {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,68,"createMock(""no-valid-java-identifier"", IMethods.class);"
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,69,throw new AssertionError();
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,70,} catch (IllegalArgumentException expected) {
True,test/org/easymock/tests2/NameTest.java,test/org/easymock/tests2/NameTest.java,71,"assertEquals(""'no-valid-java-identifier' is not a valid Java identifier."", expected.getMessage());"
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,1,package org.easymock.tests2;
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,3,import java.util.LinkedList;
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,4,import java.util.List;
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,5,import java.util.Map;
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,7,import org.easymock.EasyMock;
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,8,import org.junit.Test;
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,9,import static org.junit.Assert.*;
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,11,public class NiceMockReturnsEmptyCollectionsTest {
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,13,"@SuppressWarnings(""unchecked"")"
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,14,@Test public void testBeNiceConvertsDefaultMock() {
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,15,CollectionServer mock = EasyMock.createNiceMock(CollectionServer.class);
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,17,EasyMock.replay(mock);
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,19,assertTrue(mock.list().isEmpty());
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,20,assertTrue(mock.linkedList().isEmpty());
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,21,assertTrue(mock.map().isEmpty());
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,22,assertTrue(mock.hashSet().isEmpty());
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,24,EasyMock.verify(mock);
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,27,"@SuppressWarnings(""unchecked"")"
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,28,private interface CollectionServer {
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,29,List list();
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,30,LinkedList linkedList();
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,31,Map map();
True,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,test/org/easymock/tests2/NiceMockReturnsEmptyCollectionsTest.java,32,java.util.HashSet hashSet();
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,5,package org.easymock.tests2;
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,10,import org.easymock.tests.IMethods;
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,11,import org.junit.Before;
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,12,import org.junit.Test;
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,14,public class NiceMockTest {
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,16,IMethods mock;
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,18,@Before
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,19,public void setup() {
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,20,mock = createNiceMock(IMethods.class);
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,21,replay(mock);
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,24,@Test
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,25,public void defaultReturnValueBoolean() {
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,26,"assertEquals(false, mock.booleanReturningMethod(12));"
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,27,verify(mock);
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,30,@Test
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,31,public void defaultReturnValueFloat() {
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,32,"assertEquals(0.0f, mock.floatReturningMethod(12), 0.0f);"
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,33,verify(mock);
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,36,@Test
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,37,public void defaultReturnValueDouble() {
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,38,"assertEquals(0.0d, mock.doubleReturningMethod(12), 0.0d);"
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,39,verify(mock);
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,42,@Test
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,43,public void defaultReturnValueObject() {
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,44,"assertEquals(null, mock.objectReturningMethod(12));"
True,test/org/easymock/tests2/NiceMockTest.java,test/org/easymock/tests2/NiceMockTest.java,45,verify(mock);
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,5,package org.easymock.tests2;
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,10,import org.easymock.tests.IMethods;
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,11,import org.junit.Before;
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,12,import org.junit.Test;
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,14,public class StubTest {
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,15,private IMethods mock;
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,17,@Before
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,18,public void setup() {
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,19,mock = createStrictMock(IMethods.class);
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,22,@Test
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,23,public void stub() {
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,24,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,25,expectLastCall().anyTimes();
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,26,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,27,expectLastCall().anyTimes();
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,28,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,29,expectLastCall().asStub();
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,31,replay(mock);
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,33,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,34,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,35,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,36,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,37,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,38,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,40,verify(mock);
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,44,@Test
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,45,public void stubWithReturnValue() {
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,46,"expect(mock.oneArg(""1"")).andReturn(""A"").andStubReturn(""B"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,47,"expect(mock.oneArg(""2"")).andThrow(new IllegalArgumentException())"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,48,.andStubThrow(new IllegalStateException());
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,50,replay(mock);
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,52,"assertEquals(""A"", mock.oneArg(""1""));"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,53,"assertEquals(""B"", mock.oneArg(""1""));"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,54,"assertEquals(""B"", mock.oneArg(""1""));"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,55,try {
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,56,"mock.oneArg(""2"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,57,} catch (IllegalArgumentException ignored) {
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,59,"assertEquals(""B"", mock.oneArg(""1""));"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,60,try {
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,61,"mock.oneArg(""2"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,62,} catch (IllegalStateException ignored) {
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,64,"assertEquals(""B"", mock.oneArg(""1""));"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,65,try {
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,66,"mock.oneArg(""2"");"
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,67,} catch (IllegalStateException ignored) {
True,test/org/easymock/tests2/StubTest.java,test/org/easymock/tests2/StubTest.java,69,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,5,package org.easymock.tests2;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,7,import static org.junit.Assert.*;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,8,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,10,import java.math.*;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,11,import java.util.*;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,13,import org.easymock.*;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,14,import org.easymock.internal.matchers.*;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,15,import org.easymock.tests.*;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,16,import org.junit.*;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,18,public class UsageConstraintsTest {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,19,private IMethods mock;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,21,@Before
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,22,public void setUp() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,23,mock = createMock(IMethods.class);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,26,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,27,public void equalsMissing() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,28,"mock.simpleMethodWithArgument(not(eq(""asd"")));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,29,try {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,30,"mock.simpleMethodWithArgument(not(""jkl""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,31,fail();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,32,} catch (IllegalStateException e) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,33,"assertEquals(""no matchers found."", e.getMessage());"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,35,try {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,36,"mock.simpleMethodWithArgument(or(eq(""jkl""), ""asd""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,37,fail();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,38,} catch (IllegalStateException e) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,39,"assertEquals(""2 matchers expected, 1 recorded."", e.getMessage());"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,41,try {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,42,"mock.threeArgumentMethod(1, ""asd"", eq(""asd""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,43,fail();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,44,} catch (IllegalStateException e) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,45,"assertEquals(""3 matchers expected, 1 recorded."", e.getMessage());"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,50,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,51,public void differentConstraintsOnSameCall() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,52,mock.simpleMethodWithArgument((String) isNull());
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,53,mock.simpleMethodWithArgument((String) notNull());
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,54,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,55,mock.simpleMethodWithArgument(null);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,56,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,59,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,60,public void equals() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,61,"assertEquals(new Equals(null), new Equals(null));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,62,"assertEquals(new Equals(new Integer(2)), new Equals(new Integer(2)));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,63,assertFalse(new Equals(null).equals(null));
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,64,"assertFalse(new Equals(null).equals(""Test""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,65,try {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,66,new Equals(null).hashCode();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,67,fail();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,68,} catch (UnsupportedOperationException expected) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,72,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,73,public void constraints() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,74,expect(
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,75,"mock.threeArgumentMethod(and(geq(7), leq(10)),"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,76,"isA(String.class), contains(""123""))).andReturn(""456"")"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,77,.atLeastOnce();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,78,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,79,boolean failed = false;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,80,try {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,81,"mock.threeArgumentMethod(11, """", ""01234"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,82,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,83,failed = true;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,85,if (!failed) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,86,fail();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,88,failed = false;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,89,try {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,90,"mock.threeArgumentMethod(8, new Object(), ""01234"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,91,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,92,failed = true;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,94,if (!failed) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,95,fail();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,97,failed = false;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,98,try {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,99,"mock.threeArgumentMethod(8, """", ""no match"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,100,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,101,failed = true;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,103,if (!failed) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,104,fail();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,106,"assertEquals(""456"", mock.threeArgumentMethod(8, """", ""01234""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,107,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,110,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,111,public void andOverloaded() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,112,"expect(mock.oneArg(and(eq(false), eq(false)))).andReturn(""0"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,113,"expect(mock.oneArg(and(eq((byte) 1), eq((byte) 1)))).andReturn(""1"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,114,"expect(mock.oneArg(and(eq('a'), eq('a')))).andReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,115,"expect(mock.oneArg(and(eq((double) 1), eq((double) 1)))).andReturn(""3"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,116,"expect(mock.oneArg(and(eq((float) 1), eq((float) 1)))).andReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,117,"expect(mock.oneArg(and(eq((int) 1), eq((int) 1)))).andReturn(""5"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,118,"expect(mock.oneArg(and(eq((long) 1), eq((long) 1)))).andReturn(""6"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,119,"expect(mock.oneArg(and(eq((short) 1), eq((short) 1)))).andReturn(""7"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,120,"expect(mock.oneArg(and(contains(""a""), contains(""d"")))).andReturn(""8"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,121,"expect(mock.oneArg(and(isA(Class.class), eq(Object.class)))).andReturn("
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,122,"""9"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,123,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,124,"assertEquals(""9"", mock.oneArg(Object.class));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,125,"assertEquals(""0"", mock.oneArg(false));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,126,"assertEquals(""1"", mock.oneArg((byte) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,127,"assertEquals(""2"", mock.oneArg('a'));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,128,"assertEquals(""3"", mock.oneArg((double) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,129,"assertEquals(""7"", mock.oneArg((short) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,130,"assertEquals(""8"", mock.oneArg(""abcde""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,131,"assertEquals(""4"", mock.oneArg((float) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,132,"assertEquals(""5"", mock.oneArg((int) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,133,"assertEquals(""6"", mock.oneArg((long) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,134,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,137,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,138,public void orOverloaded() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,139,"expect(mock.oneArg(or(eq(false), eq(true)))).andReturn(""0"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,140,"expect(mock.oneArg(or(eq((byte) 1), eq((byte) 2)))).andReturn(""1"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,141,"expect(mock.oneArg(or(eq((char) 1), eq((char) 2)))).andReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,142,"expect(mock.oneArg(or(eq((double) 1), eq((double) 2)))).andReturn(""3"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,143,"expect(mock.oneArg(or(eq((float) 1), eq((float) 2)))).andReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,144,"expect(mock.oneArg(or(eq((int) 1), eq((int) 2)))).andReturn(""5"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,145,"expect(mock.oneArg(or(eq((long) 1), eq((long) 2)))).andReturn(""6"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,146,"expect(mock.oneArg(or(eq((short) 1), eq((short) 2)))).andReturn(""7"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,147,"expect(mock.oneArg(or(eq(""asd""), eq(""jkl"")))).andReturn(""8"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,148,"expect(mock.oneArg(or(eq(this.getClass()), eq(Object.class))))"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,149,".andReturn(""9"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,150,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,151,"assertEquals(""9"", mock.oneArg(Object.class));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,152,"assertEquals(""0"", mock.oneArg(true));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,153,"assertEquals(""1"", mock.oneArg((byte) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,154,"assertEquals(""2"", mock.oneArg((char) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,155,"assertEquals(""3"", mock.oneArg((double) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,156,"assertEquals(""7"", mock.oneArg((short) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,157,"assertEquals(""8"", mock.oneArg(""jkl""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,158,"assertEquals(""4"", mock.oneArg((float) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,159,"assertEquals(""5"", mock.oneArg((int) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,160,"assertEquals(""6"", mock.oneArg((long) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,161,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,164,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,165,public void notOverloaded() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,166,"expect(mock.oneArg(not(eq(false)))).andReturn(""0"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,167,"expect(mock.oneArg(not(eq((byte) 1)))).andReturn(""1"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,168,"expect(mock.oneArg(not(eq('a')))).andReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,169,"expect(mock.oneArg(not(eq((double) 1)))).andReturn(""3"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,170,"expect(mock.oneArg(not(eq((float) 1)))).andReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,171,"expect(mock.oneArg(not(eq((int) 1)))).andReturn(""5"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,172,"expect(mock.oneArg(not(eq((long) 1)))).andReturn(""6"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,173,"expect(mock.oneArg(not(eq((short) 1)))).andReturn(""7"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,174,"expect(mock.oneArg(not(contains(""a"")))).andReturn(""8"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,175,"expect(mock.oneArg(not(isA(Class.class)))).andReturn(""9"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,176,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,177,"assertEquals(""9"", mock.oneArg(new Object()));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,178,"assertEquals(""0"", mock.oneArg(true));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,179,"assertEquals(""1"", mock.oneArg((byte) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,180,"assertEquals(""2"", mock.oneArg('b'));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,181,"assertEquals(""3"", mock.oneArg((double) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,182,"assertEquals(""7"", mock.oneArg((short) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,183,"assertEquals(""8"", mock.oneArg(""bcde""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,184,"assertEquals(""4"", mock.oneArg((float) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,185,"assertEquals(""5"", mock.oneArg((int) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,186,"assertEquals(""6"", mock.oneArg((long) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,187,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,190,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,191,public void lessOrEqualOverloaded() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,192,"expect(mock.oneArg(leq((byte) 1))).andReturn(""1"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,193,"expect(mock.oneArg(leq((double) 1))).andReturn(""3"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,194,"expect(mock.oneArg(leq((float) 1))).andReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,195,"expect(mock.oneArg(leq((int) 1))).andReturn(""5"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,196,"expect(mock.oneArg(leq((long) 1))).andReturn(""6"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,197,"expect(mock.oneArg(leq((short) 1))).andReturn(""7"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,198,"expect(mock.oneArg(leq(new BigDecimal(""1"")))).andReturn(""8"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,199,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,200,"assertEquals(""1"", mock.oneArg((byte) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,201,"assertEquals(""3"", mock.oneArg((double) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,202,"assertEquals(""7"", mock.oneArg((short) 0));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,203,"assertEquals(""4"", mock.oneArg((float) -5));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,204,"assertEquals(""5"", mock.oneArg((int) -2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,205,"assertEquals(""6"", mock.oneArg((long) -3));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,206,"assertEquals(""8"", mock.oneArg(new BigDecimal(""0.5"")));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,207,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,210,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,211,public void lessThanOverloaded() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,212,"expect(mock.oneArg(lt((byte) 1))).andReturn(""1"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,213,"expect(mock.oneArg(lt((double) 1))).andReturn(""3"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,214,"expect(mock.oneArg(lt((float) 1))).andReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,215,"expect(mock.oneArg(lt((int) 1))).andReturn(""5"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,216,"expect(mock.oneArg(lt((long) 1))).andReturn(""6"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,217,"expect(mock.oneArg(lt((short) 1))).andReturn(""7"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,218,"expect(mock.oneArg(lt(new BigDecimal(""1"")))).andReturn(""8"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,219,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,220,"assertEquals(""1"", mock.oneArg((byte) 0));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,221,"assertEquals(""3"", mock.oneArg((double) 0));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,222,"assertEquals(""7"", mock.oneArg((short) 0));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,223,"assertEquals(""4"", mock.oneArg((float) -4));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,224,"assertEquals(""5"", mock.oneArg((int) -34));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,225,"assertEquals(""6"", mock.oneArg((long) -6));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,226,"assertEquals(""8"", mock.oneArg(new BigDecimal(""0.5"")));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,227,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,230,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,231,public void greaterOrEqualOverloaded() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,232,"expect(mock.oneArg(geq((byte) 1))).andReturn(""1"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,233,"expect(mock.oneArg(geq((double) 1))).andReturn(""3"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,234,"expect(mock.oneArg(geq((float) 1))).andReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,235,"expect(mock.oneArg(geq((int) 1))).andReturn(""5"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,236,"expect(mock.oneArg(geq((long) 1))).andReturn(""6"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,237,"expect(mock.oneArg(geq((short) 1))).andReturn(""7"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,238,"expect(mock.oneArg(geq(new BigDecimal(""1"")))).andReturn(""8"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,239,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,240,"assertEquals(""1"", mock.oneArg((byte) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,241,"assertEquals(""3"", mock.oneArg((double) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,242,"assertEquals(""7"", mock.oneArg((short) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,243,"assertEquals(""4"", mock.oneArg((float) 3));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,244,"assertEquals(""5"", mock.oneArg((int) 4));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,245,"assertEquals(""6"", mock.oneArg((long) 5));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,246,"assertEquals(""8"", mock.oneArg(new BigDecimal(""1.5"")));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,247,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,250,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,251,public void greaterThanOverloaded() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,252,"expect(mock.oneArg(gt((byte) 1))).andReturn(""1"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,253,"expect(mock.oneArg(gt((double) 1))).andReturn(""3"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,254,"expect(mock.oneArg(gt((float) 1))).andReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,255,"expect(mock.oneArg(gt((int) 1))).andReturn(""5"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,256,"expect(mock.oneArg(gt((long) 1))).andReturn(""6"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,257,"expect(mock.oneArg(gt((short) 1))).andReturn(""7"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,258,"expect(mock.oneArg(gt(new BigDecimal(""1"")))).andReturn(""8"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,259,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,260,"assertEquals(""1"", mock.oneArg((byte) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,261,"assertEquals(""3"", mock.oneArg((double) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,262,"assertEquals(""7"", mock.oneArg((short) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,263,"assertEquals(""4"", mock.oneArg((float) 3));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,264,"assertEquals(""5"", mock.oneArg((int) 2));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,265,"assertEquals(""6"", mock.oneArg((long) 5));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,266,"assertEquals(""8"", mock.oneArg(new BigDecimal(""1.5"")));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,267,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,270,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,271,public void cmpTo() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,272,"expect(mock.oneArg(cmpEq(new BigDecimal(""1.5"")))).andReturn(""0"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,273,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,274,"assertEquals(""0"", mock.oneArg(new BigDecimal(""1.50"")));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,275,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,278,public static class A {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,279,private int value;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,281,public A(int value) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,282,this.value = value;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,285,public int getValue() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,286,return value;
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,290,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,291,public void compareWithComparator() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,292,Comparator<A> comparator = new Comparator<A>() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,293,"public int compare(A a1, A a2) {"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,294,return a1.getValue() - a2.getValue();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,298,// Check my comparator works
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,299,"assertTrue(comparator.compare(new A(1), new A(2)) < 0);"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,300,"assertTrue(comparator.compare(new A(2), new A(1)) > 0);"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,301,"assertTrue(comparator.compare(new A(1), new A(1)) == 0);"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,303,// Now test EasyMock.cmp
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,304,"checkOrder(mock, true);"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,306,"expect(mock.oneArg(cmp(new A(5), comparator,"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,307,"LogicalOperator.EQUAL))).andReturn(""0"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,309,"expect(mock.oneArg(cmp(new A(5), comparator,"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,310,"LogicalOperator.GREATER))).andReturn(""1"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,312,"expect(mock.oneArg(cmp(new A(5), comparator,"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,313,"LogicalOperator.GREATER_OR_EQUAL))).andReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,314,"expect(mock.oneArg(cmp(new A(5), comparator,"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,315,"LogicalOperator.GREATER_OR_EQUAL))).andReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,317,"expect(mock.oneArg(cmp(new A(5), comparator,"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,318,"LogicalOperator.LESS_OR_EQUAL))).andReturn(""3"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,319,"expect(mock.oneArg(cmp(new A(5), comparator,"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,320,"LogicalOperator.LESS_OR_EQUAL))).andReturn(""3"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,322,"expect(mock.oneArg(cmp(new A(5), comparator,"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,323,"LogicalOperator.LESS_THAN))).andReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,325,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,327,checkItFails(null); // null is not comparable so always return false
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,328,try {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,329,"mock.oneArg("""");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,330,fail();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,332,catch(AssertionError e) {} // different type isn't either
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,334,checkItFails(new A(4));
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,335,checkItFails(new A(6));
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,336,"assertEquals(""0"", mock.oneArg(new A(5)));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,338,checkItFails(new A(4));
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,339,checkItFails(new A(5));
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,340,"assertEquals(""1"", mock.oneArg(new A(6)));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,342,checkItFails(new A(4));
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,343,"assertEquals(""2"", mock.oneArg(new A(6)));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,344,"assertEquals(""2"", mock.oneArg(new A(5)));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,346,checkItFails(new A(6));
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,347,"assertEquals(""3"", mock.oneArg(new A(4)));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,348,"assertEquals(""3"", mock.oneArg(new A(5)));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,350,checkItFails(new A(5));
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,351,checkItFails(new A(6));
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,352,"assertEquals(""4"", mock.oneArg(new A(4)));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,354,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,357,private void checkItFails(A a) {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,358,try {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,359,mock.oneArg(a);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,360,fail();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,362,catch(AssertionError e) {}
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,365,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,366,public void any() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,367,"expect(mock.oneArg(anyBoolean())).andReturn(""0"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,368,"expect(mock.oneArg(anyByte())).andReturn(""1"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,369,"expect(mock.oneArg(anyChar())).andReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,370,"expect(mock.oneArg(anyDouble())).andReturn(""3"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,371,"expect(mock.oneArg(anyFloat())).andReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,372,"expect(mock.oneArg(anyInt())).andReturn(""5"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,373,"expect(mock.oneArg(anyLong())).andReturn(""6"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,374,"expect(mock.oneArg(anyShort())).andReturn(""7"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,375,"expect(mock.oneArg((String) anyObject())).andReturn(""8"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,376,"expect(mock.oneArg(anyObject())).andReturn(""9"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,377,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,378,"assertEquals(""9"", mock.oneArg(new Object()));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,379,"assertEquals(""0"", mock.oneArg(true));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,380,"assertEquals(""1"", mock.oneArg((byte) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,381,"assertEquals(""2"", mock.oneArg((char) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,382,"assertEquals(""3"", mock.oneArg((double) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,383,"assertEquals(""7"", mock.oneArg((short) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,384,"assertEquals(""8"", mock.oneArg(""Test""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,385,"assertEquals(""4"", mock.oneArg((float) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,386,"assertEquals(""5"", mock.oneArg((int) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,387,"assertEquals(""6"", mock.oneArg((long) 1));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,388,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,391,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,392,public void arrayEquals() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,393,"expect(mock.oneArray(aryEq(new boolean[] { true }))).andReturn(""0"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,394,"expect(mock.oneArray(aryEq(new byte[] { 1 }))).andReturn(""1"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,395,"expect(mock.oneArray(aryEq(new char[] { 1 }))).andReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,396,"expect(mock.oneArray(aryEq(new double[] { 1 }))).andReturn(""3"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,397,"expect(mock.oneArray(aryEq(new float[] { 1 }))).andReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,398,"expect(mock.oneArray(aryEq(new int[] { 1 }))).andReturn(""5"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,399,"expect(mock.oneArray(aryEq(new long[] { 1 }))).andReturn(""6"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,400,"expect(mock.oneArray(aryEq(new short[] { 1 }))).andReturn(""7"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,401,"expect(mock.oneArray(aryEq(new String[] { ""Test"" }))).andReturn(""8"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,402,"expect(mock.oneArray(aryEq(new Object[] { ""Test"" }))).andReturn(""9"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,403,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,404,"assertEquals(""9"", mock.oneArray(new Object[] { ""Test"" }));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,405,"assertEquals(""0"", mock.oneArray(new boolean[] { true }));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,406,"assertEquals(""1"", mock.oneArray(new byte[] { 1 }));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,407,"assertEquals(""2"", mock.oneArray(new char[] { 1 }));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,408,"assertEquals(""3"", mock.oneArray(new double[] { 1 }));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,409,"assertEquals(""7"", mock.oneArray(new short[] { 1 }));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,410,"assertEquals(""8"", mock.oneArray(new String[] { ""Test"" }));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,411,"assertEquals(""4"", mock.oneArray(new float[] { 1 }));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,412,"assertEquals(""5"", mock.oneArray(new int[] { 1 }));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,413,"assertEquals(""6"", mock.oneArray(new long[] { 1 }));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,414,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,417,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,418,public void greaterOrEqual() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,419,"expect(mock.oneArg(geq(7))).andReturn(""1"").times(3);"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,420,"expect(mock.oneArg(lt(7))).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,422,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,424,"assertEquals(""1"", mock.oneArg(7));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,425,"assertEquals(""2"", mock.oneArg(6));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,426,"assertEquals(""1"", mock.oneArg(8));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,427,"assertEquals(""2"", mock.oneArg(6));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,428,"assertEquals(""1"", mock.oneArg(9));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,430,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,433,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,434,public void greaterThan() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,435,"expect(mock.oneArg(gt(7))).andReturn(""1"").times(3);"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,436,"expect(mock.oneArg(leq(7))).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,438,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,440,"assertEquals(""1"", mock.oneArg(8));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,441,"assertEquals(""2"", mock.oneArg(7));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,442,"assertEquals(""1"", mock.oneArg(9));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,443,"assertEquals(""2"", mock.oneArg(6));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,444,"assertEquals(""1"", mock.oneArg(10));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,446,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,449,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,450,public void lessOrEqual() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,451,"expect(mock.oneArg(leq(7))).andReturn(""1"").times(3);"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,452,"expect(mock.oneArg(gt(7))).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,454,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,456,"assertEquals(""1"", mock.oneArg(7));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,457,"assertEquals(""2"", mock.oneArg(8));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,458,"assertEquals(""1"", mock.oneArg(6));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,459,"assertEquals(""2"", mock.oneArg(9));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,460,"assertEquals(""1"", mock.oneArg(5));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,462,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,465,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,466,public void lessThan() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,467,"expect(mock.oneArg(lt(7))).andReturn(""1"").times(3);"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,468,"expect(mock.oneArg(geq(7))).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,470,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,472,"assertEquals(""1"", mock.oneArg(5));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,473,"assertEquals(""2"", mock.oneArg(7));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,474,"assertEquals(""1"", mock.oneArg(6));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,475,"assertEquals(""2"", mock.oneArg(8));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,476,"assertEquals(""1"", mock.oneArg(4));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,478,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,481,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,482,public void testOr() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,483,"expect(mock.oneArg(or(eq(7), eq(9)))).andReturn(""1"").atLeastOnce();"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,484,"expect(mock.oneArg(anyInt())).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,486,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,488,"assertEquals(""1"", mock.oneArg(7));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,489,"assertEquals(""1"", mock.oneArg(9));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,490,"assertEquals(""2"", mock.oneArg(10));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,492,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,495,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,496,public void testNull() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,497,"expect(mock.threeArgumentMethod(eq(1), isNull(), eq("""")))"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,498,".andReturn(""1"").atLeastOnce();"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,499,"expect(mock.threeArgumentMethod(eq(1), not(isNull()), eq("""")))"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,500,".andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,502,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,504,"assertEquals(""1"", mock.threeArgumentMethod(1, null, """"));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,505,"assertEquals(""2"", mock.threeArgumentMethod(1, new Object(), """"));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,507,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,510,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,511,public void testNotNull() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,512,"expect(mock.threeArgumentMethod(eq(1), notNull(), eq(""""))).andReturn("
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,513,"""1"").atLeastOnce();"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,514,"expect(mock.threeArgumentMethod(eq(1), not(notNull()), eq("""")))"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,515,".andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,517,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,519,"assertEquals(""1"", mock.threeArgumentMethod(1, new Object(), """"));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,520,"assertEquals(""2"", mock.threeArgumentMethod(1, null, """"));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,522,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,525,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,526,public void testFind() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,527,"expect(mock.oneArg(find(""[a-z]+\\d""))).andReturn(""1"").atLeastOnce();"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,528,"expect(mock.oneArg(find(""\\d\\d""))).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,530,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,532,"assertEquals(""1"", mock.oneArg(""1ab12""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,533,"assertEquals(""2"", mock.oneArg(""312xx""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,535,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,538,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,539,public void testMatches() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,540,"expect(mock.oneArg(matches(""[a-z]+\\d\\d""))).andReturn(""1"")"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,541,.atLeastOnce();
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,542,"expect(mock.oneArg(matches(""\\d\\d\\d""))).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,544,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,546,"assertEquals(""1"", mock.oneArg(""a12""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,547,"assertEquals(""2"", mock.oneArg(""131""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,549,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,552,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,553,public void testContains() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,554,"expect(mock.oneArg(contains(""ab""))).andReturn(""1"").atLeastOnce();"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,555,"expect(mock.oneArg(contains(""bc""))).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,557,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,559,"assertEquals(""1"", mock.oneArg(""xabcx""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,560,"assertEquals(""2"", mock.oneArg(""xdbcx""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,562,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,565,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,566,public void testStartsWith() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,567,"expect(mock.oneArg(startsWith(""ab""))).andReturn(""1"").atLeastOnce();"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,568,"expect(mock.oneArg(startsWith(""bc""))).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,570,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,572,"assertEquals(""1"", mock.oneArg(""abcx""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,573,"assertEquals(""2"", mock.oneArg(""bcxe""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,575,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,578,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,579,public void testEndsWith() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,580,"expect(mock.oneArg(endsWith(""ab""))).andReturn(""1"").atLeastOnce();"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,581,"expect(mock.oneArg(endsWith(""bc""))).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,583,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,585,"assertEquals(""1"", mock.oneArg(""xab""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,586,"assertEquals(""2"", mock.oneArg(""xbc""));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,588,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,591,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,592,public void equalsWithDelta() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,593,"expect(mock.oneArg(eq(1.0D, 0.1D))).andReturn(""1"").atLeastOnce();"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,594,"expect(mock.oneArg(eq(2.0D, 0.1D))).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,595,"expect(mock.oneArg(eq(1.0F, 0.1F))).andReturn(""3"").atLeastOnce();"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,596,"expect(mock.oneArg(eq(2.0F, 0.1F))).andStubReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,597,"expect(mock.oneArg(eq(2.0F, 0.1F))).andStubReturn(""4"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,599,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,601,"assertEquals(""1"", mock.oneArg(1.0));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,602,"assertEquals(""1"", mock.oneArg(0.91));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,603,"assertEquals(""1"", mock.oneArg(1.09));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,604,"assertEquals(""2"", mock.oneArg(2.0));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,606,"assertEquals(""3"", mock.oneArg(1.0F));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,607,"assertEquals(""3"", mock.oneArg(0.91F));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,608,"assertEquals(""3"", mock.oneArg(1.09F));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,609,"assertEquals(""4"", mock.oneArg(2.0F));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,611,verify(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,614,@Test
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,615,public void testSame() {
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,616,"Object one = new String(""1243"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,617,"Object two = new String(""1243"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,619,"assertNotSame(one, two);"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,620,"assertEquals(one, two);"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,622,"expect(mock.oneArg(same(one))).andReturn(""1"").atLeastOnce();"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,623,"expect(mock.oneArg(same(two))).andStubReturn(""2"");"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,625,replay(mock);
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,627,"assertEquals(""1"", mock.oneArg(one));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,628,"assertEquals(""2"", mock.oneArg(two));"
True,test/org/easymock/tests2/UsageConstraintsTest.java,test/org/easymock/tests2/UsageConstraintsTest.java,630,verify(mock);
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,5,package org.easymock.tests2;
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,9,import org.easymock.tests.IMethods;
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,10,import org.junit.Test;
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,12,public class UsageMatchersTest {
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,13,@Test(expected = IllegalStateException.class)
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,14,public void additionalMatchersFailAtReplay() {
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,16,IMethods mock = createMock(IMethods.class);
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,17,lt(5);
True,test/org/easymock/tests2/UsageMatchersTest.java,test/org/easymock/tests2/UsageMatchersTest.java,19,replay(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,5,package org.easymock.tests2;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,10,import org.easymock.internal.ReplayState;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,11,import org.easymock.tests.IMethods;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,12,import org.easymock.tests.Util;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,13,import org.junit.Before;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,14,import org.junit.Test;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,16,public class UsageStrictMockTest {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,17,private IMethods mock;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,19,@Before
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,20,public void setup() {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,21,mock = createStrictMock(IMethods.class);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,22,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,23,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,24,replay(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,27,@Test
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,28,public void orderedCallsSucces() {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,29,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,30,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,31,verify(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,34,@Test
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,35,public void unorderedCallsFailure() {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,36,boolean failed = false;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,37,try {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,38,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,39,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,40,failed = true;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,42,if (!failed) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,43,"fail(""unordered calls accepted"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,47,@Test
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,48,public void tooManyCallsFailure() {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,49,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,50,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,52,boolean failed = false;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,53,try {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,54,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,55,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,56,failed = true;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,58,if (!failed) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,59,"fail(""too many calls accepted"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,63,@Test
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,64,public void tooFewCallsFailure() {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,65,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,66,boolean failed = false;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,67,try {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,68,verify(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,69,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,70,failed = true;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,71,"assertTrue(""stack trace must be filled in"", Util.getStackTrace("
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,72,expected).indexOf(ReplayState.class.getName()) == -1);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,74,if (!failed) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,75,"fail(""too few calls accepted"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,79,@Test
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,80,public void differentMethods() {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,82,reset(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,84,mock.booleanReturningMethod(0);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,85,expectLastCall().andReturn(true);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,86,mock.simpleMethod();
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,87,mock.booleanReturningMethod(1);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,88,"expectLastCall().andReturn(false).times(2, 3);"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,89,mock.simpleMethod();
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,90,expectLastCall().atLeastOnce();
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,92,replay(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,93,"assertEquals(true, mock.booleanReturningMethod(0));"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,94,mock.simpleMethod();
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,96,boolean failed = false;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,97,try {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,98,verify(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,99,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,100,failed = true;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,101,assertEquals(
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,102,"""\n  Expectation failure on verify:"""
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,103,"+ ""\n    simpleMethod(): expected: 1, actual: 1"""
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,104,"+ ""\n    booleanReturningMethod(1): expected: between 2 and 3, actual: 0"""
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,105,"+ ""\n    simpleMethod(): expected: at least 1, actual: 0"","
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,106,expected.getMessage());
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,108,if (!failed) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,109,"fail(""too few calls accepted"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,112,"assertEquals(false, mock.booleanReturningMethod(1));"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,114,failed = false;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,115,try {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,116,mock.simpleMethod();
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,117,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,118,failed = true;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,119,assertEquals(
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,120,"""\n  Unexpected method call simpleMethod():"""
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,121,"+ ""\n    booleanReturningMethod(1): expected: between 2 and 3, actual: 1"","
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,122,expected.getMessage());
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,124,if (!failed) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,125,"fail(""wrong call accepted"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,129,@Test
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,130,public void range() {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,132,reset(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,134,mock.booleanReturningMethod(0);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,135,expectLastCall().andReturn(true);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,136,mock.simpleMethod();
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,137,mock.booleanReturningMethod(1);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,138,"expectLastCall().andReturn(false).times(2, 3);"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,139,mock.simpleMethod();
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,140,expectLastCall().atLeastOnce();
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,141,expect(mock.booleanReturningMethod(1)).andReturn(false);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,143,replay(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,145,mock.booleanReturningMethod(0);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,146,mock.simpleMethod();
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,148,mock.booleanReturningMethod(1);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,149,mock.booleanReturningMethod(1);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,150,mock.booleanReturningMethod(1);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,152,boolean failed = false;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,154,try {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,155,mock.booleanReturningMethod(1);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,156,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,157,failed = true;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,158,assertEquals(
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,159,"""\n  Unexpected method call booleanReturningMethod(1):"""
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,160,"+ ""\n    booleanReturningMethod(1): expected: between 2 and 3, actual: 3 (+1)"""
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,161,"+ ""\n    simpleMethod(): expected: at least 1, actual: 0"","
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,162,expected.getMessage());
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,164,if (!failed) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,165,"fail(""too many calls accepted"");"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,169,@Test
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,170,public void stubBehavior() {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,171,reset(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,173,mock.booleanReturningMethod(1);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,174,expectLastCall().andReturn(true).andReturn(false).andReturn(true);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,175,mock.booleanReturningMethod(anyInt());
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,176,expectLastCall().andStubReturn(true);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,178,replay(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,180,"assertEquals(true, mock.booleanReturningMethod(2));"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,181,"assertEquals(true, mock.booleanReturningMethod(3));"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,182,"assertEquals(true, mock.booleanReturningMethod(1));"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,183,"assertEquals(false, mock.booleanReturningMethod(1));"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,184,"assertEquals(true, mock.booleanReturningMethod(3));"
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,186,boolean failed = false;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,187,try {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,188,verify(mock);
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,189,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,190,failed = true;
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,191,assertEquals(
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,192,"""\n  Expectation failure on verify:"""
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,193,"+ ""\n    booleanReturningMethod(1): expected: 3, actual: 2"","
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,194,expected.getMessage());
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,196,if (!failed) {
True,test/org/easymock/tests2/UsageStrictMockTest.java,test/org/easymock/tests2/UsageStrictMockTest.java,197,"fail(""too few calls accepted"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,2,"* Copyright (c) 2001-2007 OFFIS, Tammo Freese."
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,5,package org.easymock.tests2;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,7,import static org.easymock.EasyMock.*;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,8,import static org.junit.Assert.*;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,10,import org.easymock.tests.IMethods;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,11,import org.junit.Before;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,12,import org.junit.Test;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,14,public class UsageTest {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,16,IMethods mock;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,18,@Before
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,19,public void setup() {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,20,mock = createMock(IMethods.class);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,23,@Test
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,24,public void exactCallCountByLastCall() {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,25,"expect(mock.oneArg(false)).andReturn(""Test"").andReturn(""Test2"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,26,replay(mock);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,28,"assertEquals(""Test"", mock.oneArg(false));"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,29,"assertEquals(""Test2"", mock.oneArg(false));"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,31,boolean failed = false;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,32,try {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,33,mock.oneArg(false);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,34,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,35,failed = true;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,37,if (!failed)
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,38,"fail(""expected AssertionError"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,41,@Test
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,42,public void openCallCountByLastCall() {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,43,"expect(mock.oneArg(false)).andReturn(""Test"").andReturn(""Test2"")"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,44,.atLeastOnce();
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,46,replay(mock);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,48,"assertEquals(""Test"", mock.oneArg(false));"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,49,"assertEquals(""Test2"", mock.oneArg(false));"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,50,"assertEquals(""Test2"", mock.oneArg(false));"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,53,@Test
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,54,public void exactCallCountByLastThrowable() {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,55,"expect(mock.oneArg(false)).andReturn(""Test"").andReturn(""Test2"")"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,56,.andThrow(new IndexOutOfBoundsException());
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,58,replay(mock);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,60,"assertEquals(""Test"", mock.oneArg(false));"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,61,"assertEquals(""Test2"", mock.oneArg(false));"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,63,try {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,64,mock.oneArg(false);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,65,fail();
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,66,} catch (IndexOutOfBoundsException expected) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,69,boolean failed = true;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,70,try {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,71,mock.oneArg(false);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,72,failed = false;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,73,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,75,if (!failed)
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,76,"fail(""expected AssertionError"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,79,@Test
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,80,public void openCallCountByLastThrowable() {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,81,"expect(mock.oneArg(false)).andReturn(""Test"").andReturn(""Test2"")"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,82,.andThrow(new IndexOutOfBoundsException()).atLeastOnce();
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,84,replay(mock);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,86,"assertEquals(""Test"", mock.oneArg(false));"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,87,"assertEquals(""Test2"", mock.oneArg(false));"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,89,try {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,90,mock.oneArg(false);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,91,} catch (IndexOutOfBoundsException expected) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,93,try {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,94,mock.oneArg(false);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,95,} catch (IndexOutOfBoundsException expected) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,99,@Test
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,100,public void moreThanOneArgument() {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,101,"expect(mock.threeArgumentMethod(1, ""2"", ""3"")).andReturn(""Test"")"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,102,.times(2);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,104,replay(mock);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,106,"assertEquals(""Test"", mock.threeArgumentMethod(1, ""2"", ""3""));"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,108,boolean failed = true;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,109,try {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,110,verify(mock);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,111,failed = false;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,112,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,113,assertEquals(
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,114,"""\n  Expectation failure on verify:"""
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,115,"+ ""\n    threeArgumentMethod(1, \""2\"", \""3\""): expected: 2, actual: 1"","
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,116,expected.getMessage());
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,118,if (!failed) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,119,"fail(""exception expected"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,123,@Test
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,124,public void wrongArguments() {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,125,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,126,replay(mock);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,128,try {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,129,"mock.simpleMethodWithArgument(""5"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,130,fail();
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,131,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,132,assertEquals(
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,133,"""\n  Unexpected method call simpleMethodWithArgument(\""5\""):"""
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,134,"+ ""\n    simpleMethodWithArgument(\""3\""): expected: 1, actual: 0"","
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,135,expected.getMessage());
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,140,@Test
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,141,public void summarizeSameObjectArguments() {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,142,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,143,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,144,replay(mock);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,146,try {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,147,"mock.simpleMethodWithArgument(""5"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,148,fail();
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,149,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,150,assertEquals(
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,151,"""\n  Unexpected method call simpleMethodWithArgument(\""5\""):"""
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,152,"+ ""\n    simpleMethodWithArgument(\""3\""): expected: 2, actual: 0"","
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,153,expected.getMessage());
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,158,@Test
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,159,public void argumentsOrdered() {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,160,"mock.simpleMethodWithArgument(""4"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,161,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,162,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,163,"mock.simpleMethodWithArgument(""0"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,164,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,165,replay(mock);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,167,try {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,168,"mock.simpleMethodWithArgument(""5"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,169,"fail(""exception expected"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,170,} catch (AssertionError expected) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,171,assertEquals(
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,172,"""\n  Unexpected method call simpleMethodWithArgument(\""5\""):"""
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,173,"+ ""\n    simpleMethodWithArgument(\""4\""): expected: 1, actual: 0"""
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,174,"+ ""\n    simpleMethodWithArgument(\""3\""): expected: 1, actual: 0"""
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,175,"+ ""\n    simpleMethodWithArgument(\""2\""): expected: 1, actual: 0"""
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,176,"+ ""\n    simpleMethodWithArgument(\""0\""): expected: 1, actual: 0"""
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,177,"+ ""\n    simpleMethodWithArgument(\""1\""): expected: 1, actual: 0"","
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,178,expected.getMessage());
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,183,@Test
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,184,public void mixingOrderedAndUnordered() {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,185,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,186,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,187,"checkOrder(mock, true);"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,188,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,189,"mock.simpleMethodWithArgument(""4"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,190,"checkOrder(mock, false);"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,191,"mock.simpleMethodWithArgument(""6"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,192,"mock.simpleMethodWithArgument(""7"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,193,"mock.simpleMethodWithArgument(""5"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,195,replay(mock);
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,197,"mock.simpleMethodWithArgument(""1"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,198,"mock.simpleMethodWithArgument(""2"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,200,boolean failed = false;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,201,try {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,202,"mock.simpleMethodWithArgument(""4"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,203,} catch (AssertionError e) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,204,failed = true;
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,206,if (!failed) {
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,207,fail();
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,210,"mock.simpleMethodWithArgument(""3"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,211,"mock.simpleMethodWithArgument(""4"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,212,"mock.simpleMethodWithArgument(""5"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,213,"mock.simpleMethodWithArgument(""6"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,214,"mock.simpleMethodWithArgument(""7"");"
True,test/org/easymock/tests2/UsageTest.java,test/org/easymock/tests2/UsageTest.java,216,verify(mock);
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,2,* Copyright (c) 2007 Szczepan Faber
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,5,package org.mockito;
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,7,import static org.junit.Assert.*;
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,8,import static org.mockito.MockUtil.*;
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,10,import java.util.*;
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,12,import net.sf.cglib.proxy.*;
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,14,import org.junit.Test;
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,15,import org.mockito.exceptions.NotAMockException;
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,17,public class MockUtilTest {
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,19,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,20,@Test
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,21,public void shouldGetControl() {
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,22,List mock = Mockito.mock(List.class);
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,23,assertNotNull(getControl(mock));
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,26,@Test
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,27,public void shouldScreamWhenEnhancedButNotAMockPassed() {
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,28,"Object o = Enhancer.create(ArrayList.class, NoOp.INSTANCE);"
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,29,try {
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,30,getControl(o);
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,31,fail();
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,32,} catch (NotAMockException e) {}
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,35,@Test (expected=NotAMockException.class)
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,36,public void shouldScreamWhenNotAMockPassed() {
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,37,"getControl("""");"
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,40,@Test (expected=NotAMockException.class)
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,41,public void shouldValidateMock() {
True,test/org/mockito/MockUtilTest.java,test/org/mockito/MockUtilTest.java,42,"validateMock("""");"
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,1,package org.mockito;
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,3,import org.junit.Test;
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,4,import org.mockito.*;
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,6,import static org.junit.Assert.*;
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,8,public class MockitoOperationsTest {
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,10,@Test
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,11,public void shouldSwitchVerifyingMode() throws Exception {
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,12,MockitoOperations.reportVerifyingMode(VerifyingMode.anyTimes());
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,14,assertTrue(MockitoOperations.mockVerificationScenario());
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,16,MockitoOperations.reportVerifyingMode(null);
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,18,assertFalse(MockitoOperations.mockVerificationScenario());
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,20,MockitoOperations.reportVerifyingMode(VerifyingMode.times(100));
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,22,assertTrue(MockitoOperations.mockVerificationScenario());
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,24,"assertEquals(100, MockitoOperations.removeVerifyingMode().getExactNumberOfInvocations());"
True,test/org/mockito/MockitoOperationsTest.java,test/org/mockito/MockitoOperationsTest.java,26,assertFalse(MockitoOperations.mockVerificationScenario());
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,2,"* Copyright (c) 2003-2006 OFFIS, Henri Tremblay."
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,5,package org.mockito;
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,7,import static org.hamcrest.CoreMatchers.*;
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,8,import static org.junit.Assert.assertThat;
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,10,import org.junit.Test;
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,11,import org.mockito.Mockito;
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,13,public class MockitoProvidesObjectMethodsTest {
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,16,* Class overwrites object methods but implementation from Mockito will be called anyway.
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,18,public static class ClassToMockWithOverride {
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,20,public boolean equals(Object o) {
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,21,return false;
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,24,public int hashCode() {
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,25,return -1;
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,28,public String toString() {
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,29,"return ""super"";"
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,33,public static class ClassWithAnotherOverride extends ClassToMockWithOverride {
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,35,public String toString() {
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,36,"return ""super.super"";"
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,40,@Test
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,41,public void testShouldReplaceObjectMethods() {
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,42,Object mock = Mockito.mock(ClassToMockWithOverride.class);
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,43,"assertThat(mock, equalTo(mock));"
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,44,"assertThat(mock.hashCode(), not(equalTo(-1)));"
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,45,"assertThat(mock.toString(), not(equalTo(""super"")));"
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,48,@Test
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,49,public void testShouldReplaceObjectMethodsWhenOverridden() {
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,50,Object mock = Mockito.mock(ClassToMockWithOverride.class);
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,51,"assertThat(mock, equalTo(mock));"
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,52,"assertThat(mock.hashCode(), not(equalTo(-1)));"
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,53,"assertThat(mock.toString(), not(equalTo(""super"")));"
True,test/org/mockito/MockitoProvidesObjectMethodsTest.java,test/org/mockito/MockitoProvidesObjectMethodsTest.java,54,"assertThat(mock.toString(), not(equalTo(""super.super"")));"
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,1,package org.mockito;
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,3,import org.junit.Test;
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,4,import org.mockito.VerifyingMode;
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,6,import static org.junit.Assert.*;
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,9,public class VerifyingModeTest {
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,11,@Test
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,12,public void shouldKnowIfNumberOfInvocationsMatters() throws Exception {
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,13,VerifyingMode mode = VerifyingMode.anyTimes();
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,14,assertFalse(mode.numberOfInvocationsMatters());
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,16,mode = VerifyingMode.times(50);
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,17,assertTrue(mode.numberOfInvocationsMatters());
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,20,@Test
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,21,public void shouldNotAllowCreatingModeWithNegativeNumberOfInvocations() throws Exception {
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,22,try {
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,23,VerifyingMode.times(-50);
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,24,fail();
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,25,} catch (IllegalArgumentException e) {
True,test/org/mockito/VerifyingModeTest.java,test/org/mockito/VerifyingModeTest.java,26,"assertEquals(""Negative value is not allowed here"", e.getMessage());"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,1,package org.mockito.usage;
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,3,import static org.hamcrest.CoreMatchers.equalTo;
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,4,import static org.junit.Assert.*;
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,5,import static org.mockito.util.Matchers.contains;
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,7,import java.util.*;
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,9,import org.junit.Test;
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,10,import org.mockito.Mockito;
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,12,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,13,public class BasicStubbingTest {
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,15,private interface DummyInterface {
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,16,int getInt(String value);
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,17,"String getString(int argumentOne, String argumentTwo);"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,18,List<String> getList();
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,21,@Test
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,22,public void shouldStubAllMethodsByDefault() throws Exception {
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,23,DummyInterface mock = Mockito.mock(DummyInterface.class);
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,25,"assertEquals(0, mock.getInt(""test""));"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,26,"assertEquals(0, mock.getInt(""testTwo""));"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,28,"assertNull(mock.getString(0, null));"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,29,"assertNull(mock.getString(100, null));"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,31,"assertEquals(0, mock.getList().size());"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,32,"assertEquals(0, mock.getList().size());"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,35,@Test
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,36,public void shouldStubAndLetBeCalledAnyTimes() throws Exception {
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,37,DummyInterface mock = Mockito.mock(DummyInterface.class);
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,39,"Mockito.stub(mock.getInt(""14"")).andReturn(14);"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,41,"assertThat(mock.getInt(""14""), equalTo(14));"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,42,"assertThat(mock.getInt(""14""), equalTo(14));"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,44,"Mockito.stub(mock.getList()).andReturn(Arrays.asList(""elementOne"", ""elementTwo""));"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,46,"assertThat(mock.getList(), contains(""elementOne"", ""elementTwo""));"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,47,"assertThat(mock.getList(), contains(""elementOne"", ""elementTwo""));"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,49,"Mockito.stub(mock.getString(10, ""test"")).andReturn(""test"");"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,51,"assertThat(mock.getString(10, ""test""), equalTo(""test""));"
True,test/org/mockito/usage/BasicStubbingTest.java,test/org/mockito/usage/BasicStubbingTest.java,52,"assertThat(mock.getString(10, ""test""), equalTo(""test""));"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,1,package org.mockito.usage;
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,3,import static org.hamcrest.CoreMatchers.equalTo;
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,4,import static org.junit.Assert.*;
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,6,import java.util.*;
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,8,import org.easymock.EasyMock;
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,9,import org.junit.Test;
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,10,import org.mockito.Mockito;
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,12,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,13,public class BasicVerificationTest {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,15,@Test
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,16,public void shouldVerify() throws Exception {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,17,List mock = Mockito.mock(List.class);
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,19,mock.clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,20,Mockito.verify(mock).clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,22,"mock.add(""test"");"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,23,"Mockito.verify(mock).add(""test"");"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,25,Mockito.verifyNoMoreInteractions(mock);
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,28,@Test
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,29,public void shouldFailVerification() throws Exception {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,30,List mock = Mockito.mock(List.class);
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,32,try {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,33,Mockito.verify(mock).clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,34,fail();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,35,} catch (AssertionError error) {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,36,"assertThat(error.getMessage(), equalTo(""Mock verification failed""));"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,40,@Test
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,41,public void shouldFailVerificationOnMethodArgument() throws Exception {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,42,List mock = Mockito.mock(List.class);
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,43,mock.clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,44,"mock.add(""foo"");"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,46,Mockito.verify(mock).clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,47,try {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,48,"Mockito.verify(mock).add(""bar"");"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,49,fail();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,50,} catch (AssertionError error) {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,51,"assertThat(error.getMessage(), equalTo(""Mock verification failed""));"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,55,@Test
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,56,public void shouldLetYouVerifyTheSameMethodAnyTimes() throws Exception {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,57,List mock = Mockito.mock(List.class);
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,58,mock.clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,60,Mockito.verify(mock).clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,61,Mockito.verify(mock).clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,62,Mockito.verify(mock).clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,65,@Test
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,66,public void shouldDetectRedundantInvocation() throws Exception {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,67,List mock = Mockito.mock(List.class);
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,68,mock.clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,69,"mock.add(""foo"");"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,70,"mock.add(""bar"");"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,72,Mockito.verify(mock).clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,73,"Mockito.verify(mock).add(""foo"");"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,75,try {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,76,Mockito.verifyNoMoreInteractions(mock);
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,77,fail();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,78,} catch (AssertionError error) {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,79,"assertThat(error.getMessage(), equalTo(""Mock verification failed""));"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,83,@Test
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,84,public void shouldVerifyStubbedMethods() throws Exception {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,85,LinkedList mock = Mockito.mock(LinkedList.class);
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,87,"Mockito.stub(mock.add(""test"")).andReturn(Boolean.FALSE);"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,89,"mock.add(""test"");"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,91,"Mockito.verify(mock).add(""test"");"
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,94,@Test
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,95,public void easyMockNotVerify() throws Exception {
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,96,List mock = EasyMock.createMock(List.class);
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,97,//        mock.clear();
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,98,EasyMock.replay(mock);
True,test/org/mockito/usage/BasicVerificationTest.java,test/org/mockito/usage/BasicVerificationTest.java,100,EasyMock.verify(mock);
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,1,package org.mockito.usage;
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,3,import static org.hamcrest.CoreMatchers.equalTo;
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,4,import static org.junit.Assert.*;
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,6,import java.util.LinkedList;
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,8,import org.junit.Test;
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,9,import org.mockito.Mockito;
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,11,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,12,public class ExactNumberOfTimesVerificationTest {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,14,@Test
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,15,public void shouldVerifyActualNumberOfInvocationsSmallerThanExpected() throws Exception {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,16,LinkedList mock = Mockito.mock(LinkedList.class);
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,17,mock.clear();
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,18,mock.clear();
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,19,mock.clear();
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,21,"Mockito.verify(mock, 3).clear();"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,22,try {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,23,"Mockito.verify(mock, 100).clear();"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,24,fail();
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,25,} catch (AssertionError error) {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,26,"assertThat(error.getMessage(), equalTo(""Expected to be invoked 100 times but was 3""));"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,30,@Test
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,31,public void shouldVerifyActualNumberOfInvocationsLargerThanExpected() throws Exception {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,32,LinkedList mock = Mockito.mock(LinkedList.class);
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,33,mock.clear();
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,34,mock.clear();
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,35,mock.clear();
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,37,"Mockito.verify(mock, 3).clear();"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,38,try {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,39,"Mockito.verify(mock, 1).clear();"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,40,fail();
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,41,} catch (AssertionError error) {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,42,"assertThat(error.getMessage(), equalTo(""Expected to be invoked 1 times but was 3""));"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,46,@Test
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,47,public void shouldVerifyProperlyIfMethodWasNotInvoked() throws Exception {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,48,LinkedList mock = Mockito.mock(LinkedList.class);
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,50,"Mockito.verify(mock, 0).clear();"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,51,try {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,52,"Mockito.verify(mock, 15).clear();"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,53,fail();
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,54,} catch (AssertionError error) {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,55,"assertThat(error.getMessage(), equalTo(""Expected to be invoked 15 times but was 0""));"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,59,@Test
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,60,public void shouldVerifyProperlyIfMethodWasInvokedOnce() throws Exception {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,61,LinkedList mock = Mockito.mock(LinkedList.class);
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,63,mock.clear();
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,65,"Mockito.verify(mock, 1).clear();"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,66,try {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,67,"Mockito.verify(mock, 15).clear();"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,68,fail();
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,69,} catch (AssertionError error) {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,70,"assertThat(error.getMessage(), equalTo(""Expected to be invoked 15 times but was 1""));"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,74,@Test
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,75,public void shouldNotCountInStubbedInvocations() throws Exception {
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,76,LinkedList mock = Mockito.mock(LinkedList.class);
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,78,"Mockito.stub(mock.add(""test"")).andReturn(false);"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,79,"Mockito.stub(mock.add(""test"")).andReturn(true);"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,81,"mock.add(""test"");"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,82,"mock.add(""test"");"
True,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,test/org/mockito/usage/ExactNumberOfTimesVerificationTest.java,84,"Mockito.verify(mock, 2).add(""test"");"
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,1,package org.mockito.usage;
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,3,import static org.junit.Assert.assertTrue;
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,5,import java.util.*;
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,7,import org.junit.Test;
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,8,import org.mockito.Mockito;
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,10,public class MockReturnsEmptyCollectionsTest {
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,12,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,13,@Test
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,14,public void shouldReturnEmptyCollections() {
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,15,CollectionsServer mock = Mockito.mock(CollectionsServer.class);
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,17,assertTrue(mock.list().isEmpty());
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,18,assertTrue(mock.linkedList().isEmpty());
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,19,assertTrue(mock.map().isEmpty());
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,20,assertTrue(mock.hashSet().isEmpty());
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,23,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,24,private class CollectionsServer {
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,25,List list() {
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,26,return null;
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,29,LinkedList linkedList() {
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,30,return null;
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,33,Map map() {
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,34,return null;
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,37,java.util.HashSet hashSet() {
True,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,test/org/mockito/usage/MockReturnsEmptyCollectionsTest.java,38,return null;
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,1,package org.mockito.usage;
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,3,import static org.junit.Assert.*;
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,4,import static org.mockito.Mockito.*;
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,5,import static org.hamcrest.CoreMatchers.*;
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,7,import java.util.List;
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,9,import org.junit.*;
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,10,import org.mockito.*;
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,11,import org.mockito.exceptions.*;
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,14,* TODO find out what is important to protect ourselves and what's just too defensive
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,16,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,17,public class MockitoExploitsTest {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,19,@Test
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,20,public void rubbishPassedToStubMethod1() {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,21,MockitoOperations.reportControlForStubbing(null);
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,22,try {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,23,"stub(""blah"".contains(""blah"")).andReturn(Boolean.TRUE);"
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,24,fail();
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,25,} catch (NotAMockMethodException e) {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,26,//cool
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,30,@Ignore
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,31,@Test
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,32,public void unfinishedStubbingDetectedOnVerify() {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,33,List mock = mock(List.class);
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,35,"stub(mock.add(""test""));"
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,37,try {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,38,verifyZeroInteractions(mock);
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,39,fail();
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,40,} catch (UnfinishedStubbingException e) {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,41,//cool
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,45,@Ignore
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,46,@Test
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,47,public void unfinishedStubbingDetectedWhenAnotherStubbingIsStarted() {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,48,List mock = mock(List.class);
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,50,"stub(mock.add(""test""));"
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,52,try {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,53,"stub(mock.add(""test"")).andThrows(new Exception(""ssdf""));"
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,54,fail();
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,55,} catch (UnfinishedStubbingException e) {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,56,//cool
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,60,@Ignore
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,61,@Test
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,62,public void rubbishPassedToStubMethodButThereIsAlreadyMethodCalledOnTheMock() {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,63,List mock = mock(List.class);
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,65,"mock.add(""test"");"
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,67,"stub(""blah"".contains(""blah"")).andReturn(Boolean.TRUE);"
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,69,"assertFalse(mock.add(""test""));"
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,72,@Ignore
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,73,@Test
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,74,public void rubbishPassedToStubMethodAndThrowableSet() {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,75,List mock = mock(List.class);
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,76,try {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,77,"stub(""asdf"".charAt(1)).andThrows(new RuntimeException());"
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,78,fail();
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,79,} catch (Exception e) {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,80,//cool
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,84,@Test
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,85,public void shouldLetVerifyOnlyMocks() throws Exception {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,86,try {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,87,"Mockito.verify(""not a mock"");"
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,88,fail();
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,89,} catch (NotAMockException e) {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,90,//cool
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,94,@Test
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,95,public void shouldMockString() throws Exception {
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,96,String s = Mockito.mock(String.class);
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,97,"stub(s.concat(""world"")).andReturn(""hello world"");"
True,test/org/mockito/usage/MockitoExploitsTest.java,test/org/mockito/usage/MockitoExploitsTest.java,99,"assertThat(s.concat(""world""), equalTo(""hello world""));"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,1,package org.mockito.usage;
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,3,import static org.mockito.Mockito.*;
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,5,import java.util.List;
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,7,import org.mockito.Mockito;
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,9,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,10,public class MockitoSyntaxExperiments {
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,12,public void goodOldEasyMockVerifySyntax() {
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,13,List mock = mock(List.class);
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,15,//stub it
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,16,"stub(mock.add(""test"")).andReturn(true);"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,18,//use it
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,19,"mock.add(2, ""test2"");"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,21,"Mockito.verify(mock).add(2, ""test2"");"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,22,"Mockito.verify(mock, 5).add(2, ""test2"");"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,23,//or
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,24,"//            Mockito.verify(mock).times(5).add(2, ""test2"");"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,25,Mockito.verifyNoMoreInteractions(mock);
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,26,Mockito.verifyZeroInteractions(mock);
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,29,public void oldSchoolAssertSyntax() {
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,30,List mock = mock(List.class);
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,32,//stub it
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,33,"stub(mock.add(""test"")).andReturn(true);"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,35,//use it
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,36,"mock.add(2, ""test2"");"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,38,//Second for old style assertions
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,39,"Mockito.assertInvoked(mock).add(2, ""test2"");"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,40,"Mockito.assertInvoked(mock, 5).add(2, ""test2"");"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,41,//or
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,42,"//            Mockito.assertInvoked(mock).times(5).add(2, ""test2"");"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,43,Mockito.assertNoMoreInteractions(mock);
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,44,Mockito.assertZeroInteractions(mock);
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,47,public void shinyNewAssertThatSyntax() {
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,48,List mock = mock(List.class);
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,50,//stub it
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,51,"stub(mock.add(""test"")).andReturn(true);"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,53,//use it
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,54,"mock.add(2, ""test2"");"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,56,"Mockito.assertThat(wasInvoked(mock)).add(2, ""test2"");"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,57,"Mockito.assertThat(wasInvoked(mock, 5)).add(2, ""test2"");"
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,58,Mockito.assertThat(noMoreInteractions(mock));
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,59,Mockito.assertThat(zeroInteractions(mock));
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,62,public void verifiesMocksInOrder() {
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,63,//        Mockito.verifyInOrder(new Ordering() { void sequence() {
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,64,//            Mockito.verify(mock).clear();
True,test/org/mockito/usage/MockitoSyntaxExperiments.java,test/org/mockito/usage/MockitoSyntaxExperiments.java,65,//            Mockito.verify(mock2).clear();
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,1,package org.mockito.usage;
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,3,import static org.junit.Assert.fail;
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,4,import static org.mockito.Mockito.*;
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,6,import java.util.*;
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,8,import org.junit.Test;
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,9,import org.mockito.exceptions.MockVerificationAssertionError;
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,11,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,12,public class NoMoreInteractionsVerificationTest {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,14,@Test
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,15,public void shouldStubbingNotRegisterRedundantInteractions() throws Exception {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,16,List mock = mock(List.class);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,17,"stub(mock.add(""one"")).andReturn(true);"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,18,"stub(mock.add(""two"")).andReturn(true);"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,20,"mock.add(""one"");"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,22,"verify(mock).add(""one"");"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,23,verifyNoMoreInteractions(mock);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,26,@Test
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,27,public void shouldVerifyWhenExactNumberOfInvocationsUsed() throws Exception {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,28,List mock = mock(List.class);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,30,"mock.add(""one"");"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,31,"mock.add(""one"");"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,32,"mock.add(""one"");"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,34,"verify(mock, 3).add(""one"");"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,36,verifyNoMoreInteractions(mock);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,39,@Test
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,40,public void shouldVerifyNoInteractions() throws Exception {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,41,List mock = mock(List.class);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,43,verifyNoMoreInteractions(mock);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,44,verifyZeroInteractions(mock);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,47,@Test
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,48,public void shouldFailNoInteractionsVerification() throws Exception {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,49,List mock = mock(List.class);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,51,mock.clear();
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,53,try {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,54,verifyZeroInteractions(mock);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,55,fail();
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,56,} catch (MockVerificationAssertionError e) {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,57,//cool
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,61,@Test
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,62,public void shouldFailNoMoreInteractionsVerification() throws Exception {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,63,List mock = mock(List.class);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,65,mock.clear();
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,67,try {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,68,verifyNoMoreInteractions(mock);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,69,fail();
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,70,} catch (MockVerificationAssertionError e) {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,71,//cool
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,75,@Test
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,76,public void shouldVerifyOneMockButFailOnOther() throws Exception {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,77,List list = mock(List.class);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,78,Map map = mock(Map.class);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,80,"list.add(""one"");"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,81,"list.add(""one"");"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,83,"map.put(""one"", 1);"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,85,"verify(list, 2).add(""one"");"
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,87,verifyNoMoreInteractions(list);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,88,try {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,89,verifyZeroInteractions(map);
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,90,fail();
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,91,} catch (MockVerificationAssertionError e) {
True,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,test/org/mockito/usage/NoMoreInteractionsVerificationTest.java,92,//cool
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,1,package org.mockito.usage;
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,3,import static org.junit.Assert.*;
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,4,import static org.mockito.Mockito.*;
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,6,import java.io.*;
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,7,import java.util.LinkedList;
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,9,import org.junit.Test;
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,11,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,12,public class StubbingWithThrowablesTest {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,14,@Test
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,15,public void shouldStubWithThrowable() throws Exception {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,16,LinkedList mock = mock(LinkedList.class);
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,18,"IllegalArgumentException expected = new IllegalArgumentException(""thrown by mock"");"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,19,"stub(mock.add(""throw"")).andThrows(expected);"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,21,try {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,22,"mock.add(""throw"");"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,23,fail();
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,24,} catch (IllegalArgumentException e) {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,25,"assertEquals(expected, e);"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,29,@Test
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,30,public void shouldSetThrowableToVoidMethod() throws Exception {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,31,LinkedList mock = mock(LinkedList.class);
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,33,"IllegalArgumentException expected = new IllegalArgumentException(""thrown by mock"");"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,35,stubVoid(mock).toThrow(expected).on().clear();
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,37,try {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,38,mock.clear();
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,39,fail();
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,40,} catch (Exception e) {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,41,"assertEquals(expected, e);"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,45,@Test
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,46,public void shouldAllowSettingCheckedException() throws Exception {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,47,Reader reader = mock(Reader.class);
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,48,IOException ioException = new IOException();
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,50,stub(reader.read()).andThrows(ioException);
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,52,try {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,53,reader.read();
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,54,} catch (Exception e) {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,55,"assertEquals(ioException, e);"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,59,@Test
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,60,public void shouldAllowSettingError() throws Exception {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,61,LinkedList mock = mock(LinkedList.class);
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,62,Error error = new Error();
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,64,"stub(mock.add(""quake"")).andThrows(error);"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,66,try {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,67,"mock.add(""quake"");"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,68,} catch (Error e) {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,69,"assertEquals(error, e);"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,73,@Test
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,74,public void shouldNotAllowSettingCheckedException() throws Exception {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,75,LinkedList list = mock(LinkedList.class);
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,76,Exception checkedException = new Exception();
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,78,try {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,79,"stub(list.add(""monkey island"")).andThrows(checkedException);"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,80,fail();
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,81,} catch (IllegalArgumentException e) {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,82,"assertEquals(""Given checked exception is invalid for this method"", e.getMessage());"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,86,@Test
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,87,public void shouldNotAllowSettingNullThrowable() throws Exception {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,88,LinkedList list = mock(LinkedList.class);
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,90,try {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,91,"stub(list.add(""monkey island"")).andThrows(null);"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,92,fail();
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,93,} catch (IllegalArgumentException e) {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,94,"assertEquals(""Cannot set null throwable"", e.getMessage());"
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,98,@Test
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,99,public void shouldMixThrowablesAndReturnValuesOnDifferentMocks() throws Exception {
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,103,@Test
True,test/org/mockito/usage/StubbingWithThrowablesTest.java,test/org/mockito/usage/StubbingWithThrowablesTest.java,104,public void shouldVerifyWhenStubbedWithThrowable() throws Exception {
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,1,package org.mockito.usage;
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,3,import static org.mockito.Mockito.*;
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,5,import java.util.*;
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,7,import org.easymock.EasyMock;
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,8,import org.junit.Test;
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,9,import org.mockito.Mockito;
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,11,"@SuppressWarnings(""unchecked"")"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,12,public class VerificationOnMultipleMocksUsingMatchersTest {
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,14,@Test
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,15,public void shouldVerifyUsingMatchers() throws Exception {
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,16,List list = Mockito.mock(List.class);
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,17,HashMap map = Mockito.mock(HashMap.class);
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,19,"list.add(""test"");"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,20,"list.add(1, ""test two"");"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,22,"map.put(""test"", 100);"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,23,"map.put(""test two"", 200);"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,25,verify(list).add(EasyMock.anyObject());
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,26,"verify(list).add(EasyMock.anyInt(), EasyMock.eq(""test two""));"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,28,"verify(map).put(EasyMock.anyObject(), EasyMock.anyObject());"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,29,"verify(map).put(EasyMock.eq(""test two""), EasyMock.eq(200));"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,31,"verifyNoMoreInteractions(list, map);"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,34,@Test
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,35,public void shouldVerifyMultipleMocks() throws Exception {
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,36,List list = mock(List.class);
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,37,Map map = mock(Map.class);
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,38,Set set = mock(Set.class);
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,40,"list.add(""one"");"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,41,"list.add(""one"");"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,42,"list.add(""two"");"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,44,"map.put(""one"", 1);"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,45,"map.put(""one"", 1);"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,47,"verify(list, 2).add(""one"");"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,48,"verify(list, 1).add(""two"");"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,49,"verify(list, 0).add(""three"");"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,51,"verify(map, 2).put(EasyMock.anyObject(), EasyMock.anyInt());"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,53,"verifyNoMoreInteractions(list, map);"
True,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,test/org/mockito/usage/VerificationOnMultipleMocksUsingMatchersTest.java,54,verifyZeroInteractions(set);
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,1,package org.mockito.util;
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,3,import java.util.Arrays;
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,4,import java.util.Collection;
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,6,import org.hamcrest.BaseMatcher;
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,7,import org.hamcrest.Description;
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,8,import org.hamcrest.Matcher;
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,10,public class Matchers {
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,12,public static <T> Matcher<Collection<T>> contains(final T ... elements) {
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,13,return new BaseMatcher<Collection<T>>() {
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,15,public boolean matches(Object collection) {
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,16,for (T element : elements) {
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,17,if (((Collection)collection).contains(element) == false) {
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,18,return false;
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,21,return true;
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,24,public void describeTo(Description desc) {
True,test/org/mockito/util/Matchers.java,test/org/mockito/util/Matchers.java,25,"desc.appendText(""collection doesn't containg one of: "" + Arrays.toString(elements));"
True,test/org/mockito/vs/easymock/ArticleCalculator.java,test/org/mockito/vs/easymock/ArticleCalculator.java,1,package org.mockito.vs.easymock;
True,test/org/mockito/vs/easymock/ArticleCalculator.java,test/org/mockito/vs/easymock/ArticleCalculator.java,3,public interface ArticleCalculator {
True,test/org/mockito/vs/easymock/ArticleCalculator.java,test/org/mockito/vs/easymock/ArticleCalculator.java,4,int countArticles(String newspaper);
True,test/org/mockito/vs/easymock/ArticleCalculator.java,test/org/mockito/vs/easymock/ArticleCalculator.java,5,int countArticlesInPolish(String newspaper);
True,test/org/mockito/vs/easymock/ArticleDatabase.java,test/org/mockito/vs/easymock/ArticleDatabase.java,1,package org.mockito.vs.easymock;
True,test/org/mockito/vs/easymock/ArticleDatabase.java,test/org/mockito/vs/easymock/ArticleDatabase.java,3,public class ArticleDatabase {
True,test/org/mockito/vs/easymock/ArticleDatabase.java,test/org/mockito/vs/easymock/ArticleDatabase.java,5,"public void updateNumberOfArticles(String newspaper, int articles) {"
True,test/org/mockito/vs/easymock/ArticleDatabase.java,test/org/mockito/vs/easymock/ArticleDatabase.java,8,"public void updateNumberOfPolishArticles(String newspaper, int polishArticles) {"
True,test/org/mockito/vs/easymock/ArticleDatabase.java,test/org/mockito/vs/easymock/ArticleDatabase.java,11,"public void updateNumberOfEnglishArticles(String newspaper, int i) {"
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,1,package org.mockito.vs.easymock;
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,3,public class ArticleManager {
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,5,private final ArticleCalculator calculator;
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,6,private final ArticleDatabase database;
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,8,"public ArticleManager(ArticleCalculator calculator, ArticleDatabase database) {"
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,9,this.calculator = calculator;
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,10,this.database = database;
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,13,public void updateArticleCounters(String newspaper) {
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,14,int articles = calculator.countArticles(newspaper);
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,15,int polishArticles = calculator.countArticlesInPolish(newspaper);
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,17,"database.updateNumberOfArticles(newspaper, articles);"
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,18,"database.updateNumberOfPolishArticles(newspaper, polishArticles);"
True,test/org/mockito/vs/easymock/ArticleManager.java,test/org/mockito/vs/easymock/ArticleManager.java,19,"database.updateNumberOfEnglishArticles(newspaper, articles - polishArticles);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,1,package org.mockito.vs.easymock;
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,2,import org.easymock.EasyMock;
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,3,import org.junit.Test;
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,4,import org.mockito.Mockito;
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,6,public class MockitoVsEasyMockTest {
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,8,@Test
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,9,public void easyMockRocks() {
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,10,ArticleCalculator mockCalculator = EasyMock.createMock(ArticleCalculator.class);
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,11,ArticleDatabase mockDatabase = EasyMock.createMock(ArticleDatabase.class);
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,13,"ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,15,"EasyMock.expect(mockCalculator.countArticles(""Guardian"")).andReturn(12);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,16,"EasyMock.expect(mockCalculator.countArticlesInPolish(""Guardian"")).andReturn(5);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,18,"mockDatabase.updateNumberOfArticles(""Guardian"", 12);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,19,"mockDatabase.updateNumberOfPolishArticles(""Guardian"", 5);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,20,"mockDatabase.updateNumberOfEnglishArticles(""Guardian"", 7);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,22,"EasyMock.replay(mockCalculator, mockDatabase);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,24,"articleManager.updateArticleCounters(""Guardian"");"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,26,"EasyMock.verify(mockCalculator, mockDatabase);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,29,@Test
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,30,public void managerCountsArticlesAndSavesThemInTheDatabase() {
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,31,ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,32,ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,34,"ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,36,"Mockito.stub(mockCalculator.countArticles(""Guardian"")).andReturn(12);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,37,"Mockito.stub(mockCalculator.countArticlesInPolish(""Guardian"")).andReturn(5);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,39,"articleManager.updateArticleCounters(""Guardian"");"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,41,"Mockito.verify(mockDatabase).updateNumberOfArticles(""Guardian"", 12);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,42,"Mockito.verify(mockDatabase).updateNumberOfPolishArticles(""Guardian"", 5);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,43,"Mockito.verify(mockDatabase).updateNumberOfEnglishArticles(""Guardian"", 7);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,46,@Test
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,47,public void managerCountsArticlesUsingCalculator() {
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,48,ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,49,ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,51,"ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,53,"articleManager.updateArticleCounters(""Guardian"");"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,55,"Mockito.verify(mockCalculator).countArticles(""Guardian"");"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,56,"Mockito.verify(mockCalculator).countArticlesInPolish(""Guardian"");"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,58,Mockito.verifyNoMoreInteractions(mockCalculator);
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,61,@Test
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,62,public void managerSavesArticlesInTheDatabase() {
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,63,ArticleCalculator mockCalculator = Mockito.mock(ArticleCalculator.class);
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,64,ArticleDatabase mockDatabase = Mockito.mock(ArticleDatabase.class);
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,66,"ArticleManager articleManager = new ArticleManager(mockCalculator, mockDatabase);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,68,"articleManager.updateArticleCounters(""Guardian"");"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,70,"Mockito.verify(mockDatabase).updateNumberOfArticles(""Guardian"", 0);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,71,"Mockito.verify(mockDatabase).updateNumberOfPolishArticles(""Guardian"", 0);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,72,"Mockito.verify(mockDatabase).updateNumberOfEnglishArticles(""Guardian"", 0);"
True,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,test/org/mockito/vs/easymock/MockitoVsEasyMockTest.java,74,Mockito.verifyNoMoreInteractions(mockDatabase);

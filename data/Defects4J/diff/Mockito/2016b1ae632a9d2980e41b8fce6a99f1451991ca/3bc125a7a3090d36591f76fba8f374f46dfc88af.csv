is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,72,* See original {@link NewOngoingStubbing#thenCallRealMethod()}
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,74,BDDMyOngoingStubbing<T> willCallRealMethod();
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,113,public BDDMyOngoingStubbing<T> willCallRealMethod() {
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,114,return new BDDOngoingStubbingImpl<T>(mockitoOngoingStubbing.thenCallRealMethod());
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,228,* see original {@link Mockito#doCallRealMethod()}
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,230,public static BDDStubber willCallRealMethod() {
True,src/org/mockito/BDDMockito.java,src/org/mockito/BDDMockito.java,231,return new BDDStubberImpl(Mockito.doCallRealMethod());
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,82, Object oriented programming is more less tackling complexity by dividing the complexity and moving it to specific objects.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,82,"* Object oriented programming is more less tackling complexity by dividing the complexity and placing it in separate, specific objects."
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1063, TODO: mention partial mocks warning
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1063,*      * As usual you are going to read the partial mock warning:
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1064,"* Object oriented programming is more less tackling complexity by dividing the complexity and placing it in separate, specific objects."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1065,* Partial mock is a sign that the code is not well designed.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1066,* It usually means that the complexity has been moved to a different method on the same object.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1067,"* Partial mocks are useful when dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1068,* I wouldn't use them for new code.
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,100,class Dog {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,101,public String bark() {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,102,"return ""woof"";"
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,106,@Test
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,107,"@SuppressWarnings(""unchecked"")"
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,108,public void shouldStubByDelegatingToRealMethod() throws Exception {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,109,//given
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,110,Dog dog = mock(Dog.class);
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,111,//when
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,112,willCallRealMethod().given(dog).bark();
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,113,//then
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,114,"assertEquals(""woof"", dog.bark());"
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,117,@Test
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,118,"@SuppressWarnings(""unchecked"")"
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,119,public void shouldStubByDelegatingToRealMethodUsingTypicalStubbingSyntax() throws Exception {
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,120,//given
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,121,Dog dog = mock(Dog.class);
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,122,//when
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,123,given(dog.bark()).willCallRealMethod();
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,124,//then
True,test/org/mockitousage/customization/BDDMockitoTest.java,test/org/mockitousage/customization/BDDMockitoTest.java,125,"assertEquals(""woof"", dog.bark());"

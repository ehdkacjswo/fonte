is_addition,old_file_path,new_file_path,line_num,content
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,4,import org.json.simple.JSONObject;
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,5,import org.json.simple.JSONValue;
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,6,import org.mockito.release.notes.util.IOUtil;
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,10,import java.io.IOException;
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,11,import java.io.InputStream;
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,12,import java.net.URL;
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,15,import java.util.List;
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,26,"LOG.info(""Querying GitHub API for {} tickets"", ticketIds.size());"
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,27,"String url = ""https://api.github.com/repos/mockito/mockito/issues?access_token="" + gitHubAuthToken;"
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,28,"url += ""&state=closed"";"
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,30,Set<Long> tickets = new HashSet<Long>();
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,31,for (String id : ticketIds) {
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,32,tickets.add(Long.parseLong(id));
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,20,/TODO if possible we should query for all tickets via one REST call and perhaps stop using jcapi
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,21,"OG.info(""Querying GitHub API for {} tickets"", ticketIds.size());"
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,22,tGithub github = new RtGithub(gitHubAuthToken);
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,23,"epo repo = github.repos().get(new Coordinates.Simple(""mockito/mockito""));"
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,24,ssues issues = repo.issues();
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,25,or (String ticketId : ticketIds) {
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,26,"OG.info("" #{}"", ticketId);"
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,27,/TODO make ticked id an int
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,28,ssue i = issues.get(Integer.parseInt(ticketId));
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,29,ssue.Smart issue = new Issue.Smart(i);
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,30,f (issue.exists() && !issue.isOpen()) {
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,31,"mprovements.add(new Improvement(issue.number(), issue.title(), issue.htmlUrl().toString(),"
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,32,abels(issue.labels())));
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,36,"fetch(tickets, improvements, url);"
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,40,rivate static Set<String> labels(IssueLabels labels) {
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,41,et<String> out = new HashSet<String>();
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,42,or (Label label : labels.iterate()) {
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,43,ut.add(label.name());
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,42,"private void fetch(Set<Long> tickets, DefaultImprovements improvements, String url) throws IOException {"
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,43,InputStream response = new URL(url).openStream();
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,44,String content = IOUtil.readStream(response);
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,45,List<JSONObject> issues = (List) JSONValue.parse(content);
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,47,for (JSONObject issue : issues) {
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,48,"long id = (Long) issue.get(""number"");"
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,49,if (tickets.remove(id)) {
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,50,"String issueUrl = (String) issue.get(""html_url"");"
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,51,"String title = (String) issue.get(""title"");"
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,52,"improvements.add(new Improvement(id, title, issueUrl, new HashSet()));"
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,54,if (tickets.isEmpty()) {
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,55,return;
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java,45,eturn out;
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java,9,rivate final int id;
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java,9,private final long id;
False,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java,14,"ublic Improvement(int id, String title, String url, Collection<String> labels) {"
True,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java,buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java,14,"public Improvement(long id, String title, String url, Collection<String> labels) {"
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,1,package org.mockito.release.notes.util;
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,3,import java.io.*;
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,5,//TODO SF document and cover
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,6,public class IOUtil {
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,8,public static String readStream(InputStream is) {
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,9,BufferedReader r = null;
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,10,try {
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,11,r = new BufferedReader(new InputStreamReader(is));
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,12,return readNow(is);
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,13,} catch (Exception e) {
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,14,"throw new RuntimeException(""Problems reading stream"", e);"
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,15,} finally {
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,16,close(r);
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,20,public static void close(Closeable closeable) {
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,21,if (closeable != null) {
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,22,try {
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,23,closeable.close();
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,24,} catch (IOException e) {
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,25,"throw new RuntimeException(""Problems closing stream"", e);"
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,30,private static String readNow(InputStream is) throws IOException {
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,31,BufferedReader r = new BufferedReader(new InputStreamReader(is));
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,32,StringBuilder sb = new StringBuilder();
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,34,String line;
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,35,while(null != (line = r.readLine())) {
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,36,"sb.append(line).append(""\n"");"
True,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java,39,return sb.toString();

is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,23,mport java.util.WeakHashMap;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,23,import java.util.concurrent.atomic.AtomicInteger;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,24,import java.util.concurrent.locks.Lock;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,25,import java.util.concurrent.locks.ReentrantLock;
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,26, XXX not thread-safe prototype !!!!
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,28,"* This is responsible for serializing a mock, it is enabled if the mock is implementing"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,29,* {@link Serializable}.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,31,* <p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,32,"*     The way it works is to enable serialization via the {@link #enableSerializationAcrossJVM(MockCreationSettings)},"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,33,*     if the mock settings is set to be serializable it will add the {@link AcrossJVMMockitoMockSerilizable} interface.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,34,*     This interface defines a the {@link AcrossJVMSerializationFeature.AcrossJVMMockitoMockSerilizable#writeReplace()}
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,35,*     whose signature match the one that is looked by the standard Java serialization.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,36,* </p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,38,* <p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,39,"*     Then in the {@link MethodInterceptorFilter} of mockito, if the <code>writeReplace</code> method is called,"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,40,*     it will use the custom implementation of this class {@link #writeReplace(Object)}. This method has a specific
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,41,*     knowledge on how to serialize a mockito mock that is based on CGLIB.
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,42,* </p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,44,* <p><strong>Only one instance per mock.</strong></p>
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,46,* not thread-safe prototype !!!!
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,32,"rivate static WeakHashMap<Object, Boolean> currentlySerializing = new WeakHashMap();"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,52,private boolean currentlySerializing = false;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,53,volatile AtomicInteger returningProxyCounter = new AtomicInteger(0);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,54,volatile AtomicInteger returningWrapperCounter = new AtomicInteger(0);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,55,private Lock mutex = new ReentrantLock();
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,42,"/ mark started flag // per thread, not per instance"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,43,/ temporary loosy hack to avoid stackoverflow
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,44,f(Boolean.TRUE.equals(currentlySerializing.get(proxy))) {
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,45,eturn proxy;
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,47,"urrentlySerializing.put(proxy, true);"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,66,mutex.lock();
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,67,"// mark started flag // per thread, not per instance"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,68,// temporary loosy hack to avoid stackoverflow
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,69,if(isCurrentlySerializing()) {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,70,"System.out.println(""["" + returningProxyCounter.getAndIncrement() + ""] retuning proxy"");"
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,71,return proxy;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,73,markMockAsSerializing();
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,75,"System.out.println(""["" + returningWrapperCounter.getAndIncrement() + ""] returning wrapper"");"
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,55,urrentlySerializing.remove(proxy);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,82,unmarkMockAsSerializing();
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,83,mutex.unlock();
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,87,private void unmarkMockAsSerializing() {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,88,currentlySerializing = false;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,91,private void markMockAsSerializing() {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,92,currentlySerializing = true;
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,95,private boolean isCurrentlySerializing() {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,96,return currentlySerializing;
False,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,64,ettings.getExtraInterfaces().add(AcrossJVMMockitoMockSerilizable.class);
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,102,if (settings.isSerializable()) {
True,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java,103,settings.getExtraInterfaces().add(AcrossJVMMockitoMockSerilizable.class);
True,src/org/mockito/internal/creation/MethodInterceptorFilter.java,src/org/mockito/internal/creation/MethodInterceptorFilter.java,26,"* Should be one instance per mock instance, see CglibMockMaker."
True,src/org/mockito/internal/creation/MethodInterceptorFilter.java,src/org/mockito/internal/creation/MethodInterceptorFilter.java,37,private AcrossJVMSerializationFeature acrossJVMSerializationFeature = new AcrossJVMSerializationFeature();
False,src/org/mockito/internal/creation/MethodInterceptorFilter.java,src/org/mockito/internal/creation/MethodInterceptorFilter.java,44, else if (new AcrossJVMSerializationFeature().isWriteReplace(method)) {
False,src/org/mockito/internal/creation/MethodInterceptorFilter.java,src/org/mockito/internal/creation/MethodInterceptorFilter.java,45,eturn new AcrossJVMSerializationFeature().writeReplace(proxy);
True,src/org/mockito/internal/creation/MethodInterceptorFilter.java,src/org/mockito/internal/creation/MethodInterceptorFilter.java,50,} else if (acrossJVMSerializationFeature.isWriteReplace(method)) {
True,src/org/mockito/internal/creation/MethodInterceptorFilter.java,src/org/mockito/internal/creation/MethodInterceptorFilter.java,51,return acrossJVMSerializationFeature.writeReplace(proxy);
False,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,61,ew Reporter().serializableWontWorkForObjectsThatDontImplementSerializable(classToMock);
True,src/org/mockito/internal/util/MockCreationValidator.java,src/org/mockito/internal/util/MockCreationValidator.java,61,//            new Reporter().serializableWontWorkForObjectsThatDontImplementSerializable(classToMock);
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,1,ackage org.mockitousage.basicapi;
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,3,mport org.junit.Test;
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,4,mport org.mockito.Mockito;
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,5,mport org.mockitousage.IMethods;
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,6,mport org.mockitoutil.SimplePerRealmReloadingClassLoader;
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,7,mport org.mockitoutil.SimpleSerializationUtil;
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,9,mport java.io.ByteArrayInputStream;
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,10,mport java.io.FileOutputStream;
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,11,mport java.util.concurrent.Callable;
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,15," Doesn't work, for now. maybe with more hacky way to tamper the outputstream, still..."
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,17," While investigating, I discovered that <code>ObjectOutputStream</code> will write the real class in the stream"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,18," through <code>writeClass</code> before the <code>writeReplace</code> (see <code>writeObject0</code>), that means"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,19," that the CGLIB proxy class is written in the stream anyway, unless you don't use an ObjectOutputStream directly."
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,21, So when one use the standard <code>ObjectInputStream</code> it will read the bytestream and use the written class
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,22," info to lookup for it in the classloader, unfortunately this class matches the class in another classloader and"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,23, isn't available anyway at deserialization time. Overriding <code>resolveClass</code> in a subclass of
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,24, <code>ObjectInoutStream</code> might help though to overcome this shortcomming.
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,27," Yet JDK proxies are serializable, how are they doing it !? Well <code>ObjectOutputStream</code> have specific"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,28, treatment for JDK proxy especially there <code>writeClassDesc</code> which uses an <code>ObjectStreamClass</code>
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,29, that is initialized in his constructor with <code>Proxy.isProxy</code>
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,31," Note for the hacker, the class descriptor of a JDK Proxy is written with the following byte"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,32, <code>ObjectStreamConstants.TC_PROXYCLASSDESC</code> this byte in the stream will trigger the specific overridable
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,33," <code>resolveProxyClass</code> (see <code>readClassDesc</code>), though yet again it means the method has to be"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,34, overrided in the input stream.
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,36," TODO for the hacker, not for real... See if it is possible to tamper the BlockDataOutputStream and then simulate a writeReplace"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,37, ... well probably don't worth it
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,40,ublic class AcrossClassLoaderSerializationTest {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,42,Test
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,43,ublic void name() throws Exception {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,44,yte[] bytes = create_mock_and_Serialize_it();
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,46,ystem.out.println(new String(bytes));
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,48,"ileOutputStream outputStream = new FileOutputStream(""acrossJVM"", false);"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,49,utputStream.write(bytes);
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,50,utputStream.close();
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,52,bject the_deserialized_mock = read_stream_and_deserialize_it(bytes);
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,54,ystem.out.println(the_deserialized_mock);
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,57,rivate Object read_stream_and_deserialize_it(byte[] bytes) throws Exception {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,58,"eturn new SimplePerRealmReloadingClassLoader(this.getClass().getClassLoader(), reload_all())"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,59,doInRealm(
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,60,"org.mockitousage.basicapi.AcrossClassLoaderSerializationTest$ReadStreanAndDeserializeIt"","
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,61,"ew Class[]{ byte[].class },"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,62,ew Object[]{ bytes }
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,66,rivate byte[] create_mock_and_Serialize_it() throws Exception {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,67,"eturn (byte[]) new SimplePerRealmReloadingClassLoader(this.getClass().getClassLoader(), reload_all())"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,68,"doInRealm(""org.mockitousage.basicapi.AcrossClassLoaderSerializationTest$CreateMockAndSerializeIt"");"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,71,rivate SimplePerRealmReloadingClassLoader.ReloadClassPredicate reload_all() {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,72,eturn new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,73,ublic boolean acceptReloadOf(String qualifiedName) {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,74,"eturn qualifiedName.contains(""org.mockitousage"")"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,75,"/                        || qualifiedName.contains(""org.mockito"")"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,76,"/                        || qualifiedName.contains(""org.mockito.cglib"")"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,77,"| qualifiedName.contains(""org.mockitoutil"");"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,83,ublic static class CreateMockAndSerializeIt implements Callable<byte[]> {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,84,ublic byte[] call() throws Exception {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,85,"Methods mock = Mockito.mock(IMethods.class, Mockito.withSettings().serializable());"
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,86,/ use MethodProxy before
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,87,/            mock.linkedListReturningMethod();
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,89,eturn SimpleSerializationUtil.serializeMock(mock).toByteArray();
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,94,ublic static class ReadStreanAndDeserializeIt implements Callable<Object> {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,95,rivate byte[] bytes;
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,97,ublic ReadStreanAndDeserializeIt(byte[] bytes) {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,98,his.bytes = bytes;
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,101,ublic Object call() throws Exception {
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,102,yteArrayInputStream unserialize = new ByteArrayInputStream(bytes);
False,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/basicapi/AcrossClassLoaderSerializationTest.java,103,"eturn SimpleSerializationUtil.deserializeMock(unserialize, IMethods.class);"
True,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,9,import org.junit.Ignore;
False,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,255,lass CustomAnswersMustImplementSerializableForSerializationToWork
True,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,256,static class CustomAnswersMustImplementSerializableForSerializationToWork
True,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,328,static class NotSerializableParent {
True,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,329,NotSerializableParent(Observable o) { this.o = o; }
True,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,330,private final Observable o;
True,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,332,static class NotSerializableToBeMocked extends NotSerializableParent {
True,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,333,NotSerializableToBeMocked(Observable o) { super(o); }
False,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,328,Mock(serializable=true) Observable observable;
True,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,337,@Mock(serializable=true) NotSerializableToBeMocked notSerializableToBeMocked;
True,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,341,"@Ignore(""to be replaced by some MockitoException in AcrossJVMSerializationFeature"")"
False,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,334,ockitoAnnotations.initMocks(new FailTestClass());
False,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,335,ail();
True,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,344,MockitoAnnotations.initMocks(new FailTestClass());
True,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java,345,"fail(""should have thrown an exception to say the object is not serializable"");"
True,test/org/mockitousage/basicapi/MocksSerializationTest.java,test/org/mockitousage/basicapi/MocksSerializationTest.java,9,import org.junit.Ignore;
True,test/org/mockitousage/basicapi/MocksSerializationTest.java,test/org/mockitousage/basicapi/MocksSerializationTest.java,359,"@Ignore(""to be replaced by some MockitoException in AcrossJVMSerializationFeature"")"
True,test/org/mockitousage/basicapi/MocksSerializationTest.java,test/org/mockitousage/basicapi/MocksSerializationTest.java,373,"@Ignore(""Bug to fix !!! see issue 399"")"
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,1,package org.mockitousage.serialization;
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,3,import org.junit.Test;
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,4,import org.mockito.Mockito;
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,5,import org.mockitousage.IMethods;
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,6,import org.mockitoutil.SimplePerRealmReloadingClassLoader;
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,7,import org.mockitoutil.SimpleSerializationUtil;
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,9,import java.io.ByteArrayInputStream;
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,10,import java.util.concurrent.Callable;
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,13,public class AcrossClassLoaderSerializationTest {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,15,@Test
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,16,public void check_that_mock_can_be_serialized_in_a_classloader_and_deserialized_in_another() throws Exception {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,17,byte[] bytes = create_mock_and_serialize_it_in_class_loader_A();
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,19,Object the_deserialized_mock = read_stream_and_deserialize_it_in_class_loader_B(bytes);
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,22,private Object read_stream_and_deserialize_it_in_class_loader_B(byte[] bytes) throws Exception {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,23,"return new SimplePerRealmReloadingClassLoader(this.getClass().getClassLoader(), isolating_test_classes())"
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,24,.doInRealm(
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,25,"""org.mockitousage.serialization.AcrossClassLoaderSerializationTest$ReadStreamAndDeserializeIt"","
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,26,"new Class[]{ byte[].class },"
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,27,new Object[]{ bytes }
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,31,private byte[] create_mock_and_serialize_it_in_class_loader_A() throws Exception {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,32,"return (byte[]) new SimplePerRealmReloadingClassLoader(this.getClass().getClassLoader(), isolating_test_classes())"
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,33,".doInRealm(""org.mockitousage.serialization.AcrossClassLoaderSerializationTest$CreateMockAndSerializeIt"");"
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,37,private SimplePerRealmReloadingClassLoader.ReloadClassPredicate isolating_test_classes() {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,38,return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,39,public boolean acceptReloadOf(String qualifiedName) {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,40,"return qualifiedName.contains(""org.mockitousage"")"
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,41,"|| qualifiedName.contains(""org.mockitoutil"");"
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,47,// see create_mock_and_serialize_it_in_class_loader_A
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,48,public static class CreateMockAndSerializeIt implements Callable<byte[]> {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,49,public byte[] call() throws Exception {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,50,"IMethods mock = Mockito.mock(IMethods.class, Mockito.withSettings().serializable());"
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,51,// use MethodProxy before
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,52,mock.linkedListReturningMethod();
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,54,return SimpleSerializationUtil.serializeMock(mock).toByteArray();
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,58,// see read_stream_and_deserialize_it_in_class_loader_B
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,59,public static class ReadStreamAndDeserializeIt implements Callable<Object> {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,60,private byte[] bytes;
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,62,public ReadStreamAndDeserializeIt(byte[] bytes) {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,63,this.bytes = bytes;
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,66,public Object call() throws Exception {
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,67,ByteArrayInputStream unserialize = new ByteArrayInputStream(bytes);
True,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,test/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java,68,"return SimpleSerializationUtil.deserializeMock(unserialize, IMethods.class);"
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,1,package org.mockitousage.serialization;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,3,import org.junit.Test;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,4,import org.mockitousage.IMethods;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,5,import org.mockitoutil.SimplePerRealmReloadingClassLoader;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,6,import org.mockitoutil.SimpleSerializationUtil;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,8,import java.io.ByteArrayInputStream;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,9,import java.util.ArrayList;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,10,import java.util.List;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,11,import java.util.concurrent.Callable;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,12,import java.util.concurrent.CyclicBarrier;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,13,import java.util.concurrent.ExecutionException;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,14,import java.util.concurrent.ExecutorService;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,15,import java.util.concurrent.Executors;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,16,import java.util.concurrent.Future;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,18,import static org.mockito.Mockito.mock;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,19,import static org.mockito.Mockito.withSettings;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,21,public class ParallelSerializationTest {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,23,ExecutorService executorService = Executors.newFixedThreadPool(200);
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,26,@Test
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,27,"public void single_mock_being_serialized_and_deserialized_in_different_classloaders_by_multiple_threads() throws ExecutionException, InterruptedException {"
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,28,"final IMethods iMethods = mock(IMethods.class, withSettings().serializable());"
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,30,int iterations = 1;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,31,int threadingFactor = 100;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,33,for (int i = 0; i <= iterations; i++) {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,34,List<Future> futures = new ArrayList<Future>(threadingFactor);
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,35,final CyclicBarrier barrier = new CyclicBarrier(threadingFactor);
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,37,for (int j = 0; j < threadingFactor; j++) {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,38,final int finalJ = j;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,39,futures.add(executorService.submit(new Callable<Object>() {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,40,public Object call() throws Exception {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,41,"System.out.println(""["" + finalJ + ""] waiting here"");"
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,42,barrier.await();
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,43,"System.out.println(""["" + finalJ + ""] serializing now"");"
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,44,iMethods.arrayReturningMethod();
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,45,return read_stream_and_deserialize_it_in_class_loader_B(SimpleSerializationUtil.serializeMock(iMethods).toByteArray());
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,48,executorService.submit(new Callable<Object>() {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,49,public Object call() throws Exception {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,50,barrier.await();
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,51,return iMethods.longObjectReturningMethod();
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,55,for (Future future : futures) {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,56,future.get();
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,63,private Object read_stream_and_deserialize_it_in_class_loader_B(byte[] bytes) throws Exception {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,64,"return new SimplePerRealmReloadingClassLoader(this.getClass().getClassLoader(), isolating_test_classes())"
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,65,.doInRealm(
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,66,"""org.mockitousage.serialization.AcrossClassLoaderSerializationTest$ReadStreamAndDeserializeIt"","
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,67,"new Class[]{ byte[].class },"
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,68,new Object[]{ bytes }
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,73,private SimplePerRealmReloadingClassLoader.ReloadClassPredicate isolating_test_classes() {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,74,return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,75,public boolean acceptReloadOf(String qualifiedName) {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,76,"return qualifiedName.contains(""org.mockitousage"")"
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,77,"|| qualifiedName.contains(""org.mockitoutil"");"
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,83,// see read_stream_and_deserialize_it_in_class_loader_B
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,84,public static class ReadStreamAndDeserializeIt implements Callable<Object> {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,85,private byte[] bytes;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,87,public ReadStreamAndDeserializeIt(byte[] bytes) {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,88,this.bytes = bytes;
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,91,public Object call() throws Exception {
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,92,ByteArrayInputStream unserialize = new ByteArrayInputStream(bytes);
True,test/org/mockitousage/serialization/ParallelSerializationTest.java,test/org/mockitousage/serialization/ParallelSerializationTest.java,93,"return SimpleSerializationUtil.deserializeMock(unserialize, IMethods.class);"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,25,import java.util.Map;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,199,/** is this entry a GNU sparse entry using one of the PAX formats? */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,200,private boolean paxGNUSparse;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,731, Indicates in case of a sparse file if an extension sparse header
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,732, follows.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,735,* Indicates in case of an oldgnu sparse file if an extension
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,736,* sparse header follows.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,734, @return true if an extension sparse header follows.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,738,* @return true if an extension oldgnu sparse header follows.
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,750, Indicate if this entry is a GNU sparse block
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,754,* Indicate if this entry is a GNU sparse block.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,759,return isOldGNUSparse() || isPaxGNUSparse();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,763,* Indicate if this entry is a GNU sparse block using the oldgnu format.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,765,* @return true if this is a sparse extension provided by GNU tar
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,766,* @since 1.11
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,768,public boolean isOldGNUSparse() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,773,* Indicate if this entry is a GNU sparse block using one of the
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,774,* PAX formats.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,776,* @return true if this is a sparse extension provided by GNU tar
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,777,* @since 1.11
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,779,public boolean isPaxGNUSparse() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,780,return paxGNUSparse;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,913,* Check whether this is a sparse entry.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,915,* @since 1.11
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,917,public boolean isSparse() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,918,return isGNUSparse();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1207,"void fillGNUSparse0xData(Map<String, String> headers) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1208,paxGNUSparse = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1209,"realSize = Integer.parseInt(headers.get(""GNU.sparse.size""));"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1210,"if (headers.containsKey(""GNU.sparse.name"")) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1211,// version 0.1
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1212,"name = headers.get(""GNU.sparse.name"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1216,"void fillGNUSparse1xData(Map<String, String> headers) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1217,paxGNUSparse = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1218,"realSize = Integer.parseInt(headers.get(""GNU.sparse.realsize""));"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1219,"name = headers.get(""GNU.sparse.name"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,317,f (currEntry.isGNUSparse()){ // Process sparse files
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,318,eadGNUSparse();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,317,if (currEntry.isOldGNUSparse()){ // Process sparse files
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,318,readOldGNUSparse();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,437,"// NOTE, using a Map here makes it impossible to ever support GNU"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,438,"// sparse files using the PAX Format 0.0, see"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,439,// https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,499,"* GNU sparse files use additional members, we use"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,500,* GNU.sparse.size to detect the 0.0 and 0.1 versions and
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,501,* GNU.sparse.realsize for 1.0.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,526,"} else if (""GNU.sparse.size"".equals(key)) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,527,currEntry.fillGNUSparse0xData(headers);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,528,"} else if (""GNU.sparse.realsize"".equals(key)) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,529,currEntry.fillGNUSparse1xData(headers);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,531,rivate void readGNUSparse() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,542,private void readOldGNUSparse() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,645,eturn !te.isGNUSparse();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,656,return !te.isSparse();
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,39,assertTrue(ae.isOldGNUSparse());
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,41,assertFalse(ae.isPaxGNUSparse());
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,50,@Test
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,51,public void testPaxGNU() throws Throwable {
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,52,"File file = getFile(""pax_gnu_sparse.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,53,TarArchiveInputStream tin = null;
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,54,try {
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,55,tin = new TarArchiveInputStream(new FileInputStream(file));
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,56,"assertPaxGNUEntry(tin, ""0.0"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,57,"assertPaxGNUEntry(tin, ""0.1"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,58,"assertPaxGNUEntry(tin, ""1.0"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,59,} finally {
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,60,if (tin != null) {
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,61,tin.close();
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,66,"private void assertPaxGNUEntry(TarArchiveInputStream tin, String suffix) throws Throwable {"
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,67,TarArchiveEntry ae = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,68,"assertEquals(""sparsefile-"" + suffix, ae.getName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,69,assertTrue(ae.isGNUSparse());
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,70,assertTrue(ae.isPaxGNUSparse());
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,71,assertFalse(ae.isOldGNUSparse());
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,72,assertFalse(tin.canReadEntryData(ae));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,76,if (ae.isSparse()) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,77,"System.out.print("" (sparse)"");"

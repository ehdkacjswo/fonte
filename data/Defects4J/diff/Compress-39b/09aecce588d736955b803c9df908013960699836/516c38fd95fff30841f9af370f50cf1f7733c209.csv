is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/dump/Dirent.java,src/main/java/org/apache/commons/compress/archivers/dump/Dirent.java,82,"eturn String.format(""[%d]: %s"", Integer.valueOf(ino), name);"
True,src/main/java/org/apache/commons/compress/archivers/dump/Dirent.java,src/main/java/org/apache/commons/compress/archivers/dump/Dirent.java,82,"return String.format(""[%d]: %s"", ino, name);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,130,"ames.put(Integer.valueOf(2), root);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,130,"names.put(2, root);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,309,ntry.setSimpleName(names.get(Integer.valueOf(entry.getIno())).getName());
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,309,entry.setSimpleName(names.get(entry.getIno()).getName());
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,330,f (!names.containsKey(Integer.valueOf(entry.getIno())) &&
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,330,if (!names.containsKey(entry.getIno()) &&
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,332,"ending.put(Integer.valueOf(entry.getIno()), entry);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,332,"pending.put(entry.getIno(), entry);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,370,"ames.put(Integer.valueOf(ino), d);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,370,"names.put(ino, d);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,387,ending.remove(Integer.valueOf(e.getIno()));
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,387,pending.remove(e.getIno());
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,416,f (!names.containsKey(Integer.valueOf(i))) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,416,if (!names.containsKey(i)) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,421,irent = names.get(Integer.valueOf(i));
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,421,dirent = names.get(i);
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,431,"ending.put(Integer.valueOf(entry.getIno()), entry);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,431,"pending.put(entry.getIno(), entry);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,61,"b.append(""("" + m.getOptions() + "")"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,61,"sb.append(""("").append(m.getOptions()).append("")"");"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,57,eturn Integer.valueOf(getOptionsFromCoder(coder));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,57,return getOptionsFromCoder(coder);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,65,eturn Integer.valueOf(getDictionarySize(coder));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,65,return getDictionarySize(coder);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,166,"yte.valueOf(archiveVersionMajor), Byte.valueOf(archiveVersionMinor)));"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,166,"archiveVersionMajor, archiveVersionMinor));"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,493,or (int i = 0; i < files.size(); i++) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,494,f (!files.get(i).hasStream()) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,495,oolean isDir = files.get(i).isDirectory();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,493,for (SevenZArchiveEntry file1 : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,494,if (!file1.hasStream()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,495,boolean isDir = file1.isDirectory();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,516,or (int i = 0; i < files.size(); i++) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,517,f (!files.get(i).hasStream()) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,518,oolean isAnti = files.get(i).isAntiItem();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,516,for (SevenZArchiveEntry file1 : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,517,if (!file1.hasStream()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,518,boolean isAnti = file1.isAntiItem();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,381,eturn name.toString();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,381,return name;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,408,eturn linkName.toString();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,408,return linkName;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,464,eturn userName.toString();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,464,return userName;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,482,eturn groupName.toString();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,482,return groupName;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1038," else if (osname.indexOf(""netware"") > -1) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1038,"} else if (osname.contains(""netware"")) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,65,or (int i = 0; i < length; ++i) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,66,yte b = buffer[i];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,65,for (byte b : buffer) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,43,rivate List<ScatterZipOutputStream> streams = synchronizedList(new ArrayList<ScatterZipOutputStream>());
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,43,private final List<ScatterZipOutputStream> streams = synchronizedList(new ArrayList<ScatterZipOutputStream>());
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,52,tomicInteger storeNum = new AtomicInteger(0);
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,52,final AtomicInteger storeNum = new AtomicInteger(0);
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,67,rivate ThreadLocal<ScatterZipOutputStream> tlScatterStreams = new ThreadLocal<ScatterZipOutputStream>() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,67,private final ThreadLocal<ScatterZipOutputStream> tlScatterStreams = new ThreadLocal<ScatterZipOutputStream>() {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1145,inal long lfhOffset = offsets.get(ze).longValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1145,final long lfhOffset = offsets.get(ze);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,178,"te.put(Integer.valueOf(method.getCode()), method);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,178,"cte.put(method.getCode(), method);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,211,eturn codeToEnum.get(Integer.valueOf(code));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,211,return codeToEnum.get(code);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,147,"hrow new IOException(String.format(""Invalid %d bit code 0x%x"", Integer.valueOf(codeSize), Integer.valueOf(code)));"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,147,"throw new IOException(String.format(""Invalid %d bit code 0x%x"", codeSize, code));"
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,124,"ystem.getProperty(""os.name"").toLowerCase(Locale.ENGLISH)"
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,125,"indexOf(""windows"") > -1;"
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,124,"System.getProperty(""os.name"").toLowerCase(Locale.ENGLISH).contains(""windows"");"
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,143,or(int i=0; i < fileList.size(); i++){
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,144,tring ent = fileList.get(i);
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,145,"f (!ent.endsWith(""/"")){// not a directory"
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,143,for (String ent : fileList) {
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,144,"if (!ent.endsWith(""/"")) {// not a directory"
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,148,"xpected.add(ent.substring(lastSlash+1, ent.length()));"
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,147,"expected.add(ent.substring(lastSlash + 1, ent.length()));"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,369,"ile file1 = super.getFile(""utf8-7zip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,370,"ile file2 = super.getFile(""utf8-winzip-test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,369,"File file1 = getFile(""utf8-7zip-test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,370,"File file2 = getFile(""utf8-winzip-test.zip"");"
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,157,"ssertTrue(ex.getMessage().indexOf(""unskippable chunk"") > -1);"
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,157,"assertTrue(ex.getMessage().contains(""unskippable chunk""));"

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,23,import java.nio.ByteOrder;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,24,mport org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,25,import org.apache.commons.compress.compressors.lzw.LZWInputStream;
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,31,lass UnshrinkingInputStream extends InternalLZWInputStream {
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,32,class UnshrinkingInputStream extends LZWInputStream {
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,37,uper(inputStream);
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,38,"super(inputStream, ByteOrder.LITTLE_ENDIAN);"
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,19,ackage org.apache.commons.compress.compressors.z._internal_;
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,19,package org.apache.commons.compress.compressors.lzw;
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,23,import java.nio.ByteOrder;
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,26,import org.apache.commons.compress.utils.BitInputStream;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,27, <strong>This class is only public for technical reasons and is not
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,28, part of Commons Compress' published API - it may change or
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,29, disappear without warning.</strong>
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,31," <p>Base-class for traditional Unix "".Z"" compression and the"
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,32, Unshrinking method of ZIP archive.</p>
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,29,* <p>Generic LZW implementation. It is used internally for
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,30,"* the Z decompressor and the Unshrinking Zip file compression method,"
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,31,* but may be useful for third-party projects in implementing their own LZW variations.</p>
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,35, @since 1.7
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,34,* @since 1.10
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,37,ublic abstract class InternalLZWInputStream extends CompressorInputStream {
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,36,public abstract class LZWInputStream extends CompressorInputStream {
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,40,rotected final InputStream in;
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,39,protected final BitInputStream in;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,43,rotected int bitsCached = 0;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,44,rotected int bitsCachedSize = 0;
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,42,protected byte previousCodeFirstChar;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,52,rotected InternalLZWInputStream(InputStream inputStream) {
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,53,his.in = inputStream;
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,50,"protected LZWInputStream(final InputStream inputStream, final ByteOrder byteOrder) {"
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,51,"this.in = new BitInputStream(inputStream, byteOrder);"
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,126,hile (bitsCachedSize < codeSize) {
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,127,inal int nextByte = in.read();
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,128,f (nextByte < 0) {
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,129,eturn nextByte;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,131,itsCached |= (nextByte << bitsCachedSize);
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,132,itsCachedSize += 8;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,134,inal int mask = (1 << codeSize) - 1;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,135,inal int code = (bitsCached & mask);
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,136,itsCached >>>= codeSize;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,137,itsCachedSize -= codeSize;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,138,eturn code;
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,124,return in.readBits(codeSize);
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,147,inal int index = tableSize;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,150,ableSize++;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,151,eturn index;
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,135,return tableSize++;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,164,yte firstCharacter = 0;
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,165,or (int last = previousCode; last >= 0; last = prefixes[last]) {
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,166,irstCharacter = characters[last];
False,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,168,"eturn addEntry(previousCode, firstCharacter);"
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,148,"return addEntry(previousCode, previousCodeFirstChar);"
True,src/main/java/org/apache/commons/compress/compressors/z/_internal_/InternalLZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,164,previousCodeFirstChar = outputStack[outputStackLocation];
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,23,mport org.apache.commons.compress.compressors.z._internal_.InternalLZWInputStream;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,23,import java.nio.ByteOrder;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,25,import org.apache.commons.compress.compressors.lzw.LZWInputStream;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,30,ublic class ZCompressorInputStream extends InternalLZWInputStream {
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,32,public class ZCompressorInputStream extends LZWInputStream {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,40,uper(inputStream);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,41,nt firstByte = in.read();
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,42,nt secondByte = in.read();
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,43,nt thirdByte = in.read();
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,42,"super(inputStream, ByteOrder.LITTLE_ENDIAN);"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,43,int firstByte = in.readBits(8);
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,44,int secondByte = in.readBits(8);
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,45,int thirdByte = in.readBits(8);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,90,itsCached = 0;
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,91,itsCachedSize = 0;
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,92,in.clearBitCache();
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,19,package org.apache.commons.compress.utils;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,21,import java.io.Closeable;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,22,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,23,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,24,import java.nio.ByteOrder;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,27,* Reads bits from an InputStream.
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,28,* @since 1.10
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,29,* @NotThreadSafe
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,31,public class BitInputStream implements Closeable {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,32,private final InputStream in;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,33,private final ByteOrder byteOrder;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,34,private int bitsCached = 0;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,35,private int bitsCachedSize = 0;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,38,* Constructor taking an InputStream and its bit arrangement.
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,39,* @param in the InputStream
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,40,"* @param byteOrder the bit arrangement across byte boundaries,"
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,41,*      either BIG_ENDIAN (aaaaabbb bb000000) or LITTLE_ENDIAN (bbbaaaaa 000000bb)
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,43,"public BitInputStream(final InputStream in, final ByteOrder byteOrder) {"
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,44,this.in = in;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,45,this.byteOrder = byteOrder;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,48,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,49,in.close();
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,52,public void clearBitCache() {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,53,bitsCached = 0;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,54,bitsCachedSize = 0;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,57,public int readBits(final int count) throws IOException {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,58,while (bitsCachedSize < count) {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,59,final int nextByte = in.read();
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,60,if (nextByte < 0) {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,61,return nextByte;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,63,if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,64,bitsCached |= (nextByte << bitsCachedSize);
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,65,} else {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,66,bitsCached <<= 8;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,67,bitsCached |= nextByte;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,69,bitsCachedSize += 8;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,72,final int mask = (1 << count) - 1;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,73,final int bitsOut;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,74,if (byteOrder == ByteOrder.LITTLE_ENDIAN) {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,75,bitsOut = (bitsCached & mask);
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,76,bitsCached >>>= count;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,77,} else {
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,78,bitsOut = (bitsCached >> (bitsCachedSize - count)) & mask;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,80,bitsCachedSize -= count;
True,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,src/main/java/org/apache/commons/compress/utils/BitInputStream.java,81,return bitsOut;

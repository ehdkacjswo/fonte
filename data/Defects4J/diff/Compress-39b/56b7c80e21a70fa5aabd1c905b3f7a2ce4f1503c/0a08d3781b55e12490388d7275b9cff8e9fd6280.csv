is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,35,import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,36,import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,37,import org.apache.commons.compress.compressors.z.ZCompressorInputStream;
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,98,"* Constant used to identify the ""framed"" Snappy compression method."
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,99,* @since 1.7
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,101,"public static final String SNAPPY_FRAMED = ""snappy-framed"";"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,104,"* Constant used to identify the ""raw"" Snappy compression method."
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,105,* @since 1.7
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,107,"public static final String SNAPPY_RAW = ""snappy-raw"";"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,110,* Constant used to identify the traditional Unix compress method.
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,111,* @since 1.7
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,113,"public static final String Z = ""z"";"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,178,"if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) {"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,179,return new FramedSnappyCompressorInputStream(in);
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,167," @param name of the compressor, i.e. ""gz"", ""bzip2"", ""xz"", ""lzma"", or ""pack200"""
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,192,"* @param name of the compressor, i.e. ""gz"", ""bzip2"", ""xz"","
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,193,"*        ""lzma"", ""snappy-raw"", ""snappy-framed"", ""pack200"", ""z"""
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,228,if (SNAPPY_RAW.equalsIgnoreCase(name)) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,229,return new SnappyCompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,232,if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,233,return new FramedSnappyCompressorInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,236,if (Z.equalsIgnoreCase(name)) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,237,return new ZCompressorInputStream(in);
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,418,protected static interface StreamWrapper<I extends InputStream> {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,419,I wrap(InputStream in) throws Exception;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,21,import java.io.BufferedInputStream;
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,26,import java.io.InputStream;
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,49,ublic void testDefaultExtraction() throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,51,public void testDefaultExtraction() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,52,testUnarchive(new StreamWrapper<CompressorInputStream>() {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,53,public CompressorInputStream wrap(InputStream is) throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,54,return new FramedSnappyCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,59,public void testDefaultExtractionViaFactory() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,60,testUnarchive(new StreamWrapper<CompressorInputStream>() {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,61,public CompressorInputStream wrap(InputStream is) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,62,return new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,63,".createCompressorInputStream(CompressorStreamFactory.SNAPPY_FRAMED,"
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,64,is);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,69,public void testDefaultExtractionViaFactoryAutodetection() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,70,testUnarchive(new StreamWrapper<CompressorInputStream>() {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,71,public CompressorInputStream wrap(InputStream is) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,72,return new CompressorStreamFactory().createCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,77,private void testUnarchive(StreamWrapper<CompressorInputStream> wrapper) throws Exception {
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,54,inal CompressorInputStream in =
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,55,ew FramedSnappyCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,82,// the intermediate BufferedInputStream is there for mark
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,83,// support in the autodetection test
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,84,final CompressorInputStream in = wrapper.wrap(new BufferedInputStream(is));
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,24,import java.io.IOException;
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,34,testUnarchive(new StreamWrapper<CompressorInputStream>() {
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,35,public CompressorInputStream wrap(InputStream is) throws IOException {
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,36,return new ZCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,41,public void testZUnarchiveViaFactory() throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,42,testUnarchive(new StreamWrapper<CompressorInputStream>() {
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,43,public CompressorInputStream wrap(InputStream is) throws Exception {
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,44,return new CompressorStreamFactory()
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,45,".createCompressorInputStream(CompressorStreamFactory.Z, is);"
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,50,private void testUnarchive(StreamWrapper wrapper) throws Exception {
False,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,37,inal CompressorInputStream in = new ZCompressorInputStream(is);
True,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,src/test/java/org/apache/commons/compress/compressors/ZTestCase.java,55,final InputStream in = wrapper.wrap(is);

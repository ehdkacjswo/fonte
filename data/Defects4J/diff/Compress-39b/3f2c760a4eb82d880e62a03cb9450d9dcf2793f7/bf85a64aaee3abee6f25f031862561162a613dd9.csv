is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,81,"nt num = read(SINGLE, 0, 1);"
True,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java,81,"final int num = read(SINGLE, 0, 1);"
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,278,ipArchiveOutputStream zip = new ZipArchiveOutputStream(out);
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,278,final ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out);
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,375, catch (Exception e) { // NOPMD
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,375,} catch (final Exception e) { // NOPMD
False,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,384, catch (IOException e) {
True,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java,384,} catch (final IOException e) {
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,43,ile f = new File(args[0]);
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,43,final File f = new File(args[0]);
False,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,47,nputStream fis = new BufferedInputStream(new FileInputStream(f));
True,src/main/java/org/apache/commons/compress/archivers/Lister.java,src/main/java/org/apache/commons/compress/archivers/Lister.java,47,final InputStream fis = new BufferedInputStream(new FileInputStream(f));
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,180,rArchiveEntry other = (ArArchiveEntry) obj;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,180,final ArArchiveEntry other = (ArArchiveEntry) obj;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,115,"nt userId = asInt(ID_BUF, true);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,115,"final int userId = asInt(ID_BUF, true);"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,149,nt off = Integer.parseInt(temp.substring(1));// get the offset
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,149,final int off = Integer.parseInt(temp.substring(1));// get the offset
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,156,nt nameLen = temp.length();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,156,final int nameLen = temp.length();
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,206,tring string = ArchiveUtils.toAsciiString(input).trim();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,206,final String string = ArchiveUtils.toAsciiString(input).trim();
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,345,nt nameLen =
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,345,final int nameLen =
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,347,yte[] name = new byte[nameLen];
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,348,"nt read = IOUtils.readFully(this, name);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,347,final byte[] name = new byte[nameLen];
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,348,"final int read = IOUtils.readFully(this, name);"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,384,nt bufflen = asInt(length); // Assume length will fit in an int
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,384,final int bufflen = asInt(length); // Assume length will fit in an int
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,386,"nt read = IOUtils.readFully(this, namebuffer, 0, bufflen);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,386,"final int read = IOUtils.readFully(this, namebuffer, 0, bufflen);"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,67,yte [] header = ArchiveUtils.toAsciiBytes(ArArchiveEntry.HEADER);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,67,final byte [] header = ArchiveUtils.toAsciiBytes(ArArchiveEntry.HEADER);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,92,rArchiveEntry pArEntry = (ArArchiveEntry)pEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,92,final ArArchiveEntry pArEntry = (ArArchiveEntry)pEntry;
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,94,ong ts = isHostOsUnix() ? localFileHeader.dateTimeModified * 1000l
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java,94,final long ts = isHostOsUnix() ? localFileHeader.dateTimeModified * 1000l
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,70, catch (IOException ioException) {
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,70,} catch (final IOException ioException) {
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,92,nt value = dataIn.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,92,final int value = dataIn.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,251,rrayList<byte[]> extendedHeaders = new ArrayList<byte[]>();
True,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java,251,final ArrayList<byte[]> extendedHeaders = new ArrayList<byte[]>();
False,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,75,tringBuilder builder = new StringBuilder();
True,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,src/main/java/org/apache/commons/compress/archivers/arj/LocalFileHeader.java,75,final StringBuilder builder = new StringBuilder();
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,477,nt remain = size % this.alignmentBoundary;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,477,final int remain = size % this.alignmentBoundary;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,491,ong size = this.filesize;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,492,nt remain = (int) (size % this.alignmentBoundary);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,491,final long size = this.filesize;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,492,final int remain = (int) (size % this.alignmentBoundary);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,887,pioArchiveEntry other = (CpioArchiveEntry) obj;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java,887,final CpioArchiveEntry other = (CpioArchiveEntry) obj;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,248,tring magicString = ArchiveUtils.toAsciiString(SIX_BYTES_BUF);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,248,final String magicString = ArchiveUtils.toAsciiString(SIX_BYTES_BUF);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,318,"nt tmplength = (int) Math.min(len, this.entry.getSize()"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,318,"final int tmplength = (int) Math.min(len, this.entry.getSize()"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,324,"nt tmpread = readFully(b, off, tmplength);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,324,"final int tmpread = readFully(b, off, tmplength);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,337,"nt count = IOUtils.readFully(in, b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,337,"final int count = IOUtils.readFully(in, b, off, len);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,347,yte tmp[] = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,347,final byte tmp[] = new byte[length];
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,354,yte tmpBuffer[] = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,354,final byte tmpBuffer[] = new byte[length];
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,369,"ong mode = readAsciiLong(8, 16);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,369,"final long mode = readAsciiLong(8, 16);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,382,"ong namesize = readAsciiLong(8, 16);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,382,"final long namesize = readAsciiLong(8, 16);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,384,tring name = readCString((int) namesize);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,384,final String name = readCString((int) namesize);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,395,pioArchiveEntry ret = new CpioArchiveEntry(FORMAT_OLD_ASCII);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,395,final CpioArchiveEntry ret = new CpioArchiveEntry(FORMAT_OLD_ASCII);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,408,"ong namesize = readAsciiLong(6, 8);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,408,"final long namesize = readAsciiLong(6, 8);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,421,pioArchiveEntry ret = new CpioArchiveEntry(FORMAT_OLD_BINARY);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,421,final CpioArchiveEntry ret = new CpioArchiveEntry(FORMAT_OLD_BINARY);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,434,"ong namesize = readBinaryLong(2, swapHalfWord);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,434,"final long namesize = readBinaryLong(2, swapHalfWord);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,448,yte tmpBuffer[] = new byte[length - 1];
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,448,final byte tmpBuffer[] = new byte[length - 1];
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,471,"nt max = (int) Math.min(n, Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,471,"final int max = (int) Math.min(n, Integer.MAX_VALUE);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,498,ong readFromLastBlock = getBytesRead() % blockSize;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,498,final long readFromLastBlock = getBytesRead() % blockSize;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,502,ong skipped = skip(blockSize - readFromLastBlock);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java,502,final long skipped = skip(blockSize - readFromLastBlock);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,225,pioArchiveEntry e = (CpioArchiveEntry) entry;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,225,final CpioArchiveEntry e = (CpioArchiveEntry) entry;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,266,oolean swapHalfWord = true;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,266,final boolean swapHalfWord = true;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,467,nt lengthOfLastBlock = (int) (getBytesWritten() % blockSize);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,467,final int lengthOfLastBlock = (int) (getBytesWritten() % blockSize);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,496,yte buff[] = new byte[count];
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,496,final byte buff[] = new byte[count];
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,504,"yte tmp[] = CpioUtil.long2byteArray(number, length, swapHalfWord);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,504,"final byte tmp[] = CpioUtil.long2byteArray(number, length, swapHalfWord);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,511,tringBuilder tmp = new StringBuilder();
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,511,final StringBuilder tmp = new StringBuilder();
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,522,ong insertLength = length - tmp.length();
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,522,final long insertLength = length - tmp.length();
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,530,yte[] b = ArchiveUtils.toAsciiBytes(tmpStr);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,530,final byte[] b = ArchiveUtils.toAsciiBytes(tmpStr);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,541,yteBuffer buf = zipEncoding.encode(str);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,541,final ByteBuffer buf = zipEncoding.encode(str);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,53,yte tmp_number[] = new byte[number.length];
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,53,final byte tmp_number[] = new byte[number.length];
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,89,yte[] ret = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java,89,final byte[] ret = new byte[length];
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java,57,or (SEGMENT_TYPE t : values()) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java,57,for (final SEGMENT_TYPE t : values()) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java,82,or (COMPRESSION_TYPE t : values()) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveConstants.java,82,for (final COMPRESSION_TYPE t : values()) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,410,umpArchiveEntry rhs = (DumpArchiveEntry) o;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,410,final DumpArchiveEntry rhs = (DumpArchiveEntry) o;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,440,umpArchiveEntry entry = new DumpArchiveEntry();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,441,apeSegmentHeader header = entry.header;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,440,final DumpArchiveEntry entry = new DumpArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,441,final TapeSegmentHeader header = entry.header;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,455,"nt m = DumpArchiveUtil.convert16(buffer, 32);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,455,"final int m = DumpArchiveUtil.convert16(buffer, 32);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,795,or (TYPE t : TYPE.values()) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,795,for (final TYPE t : TYPE.values()) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,826,et<PERMISSION> set = new HashSet<PERMISSION>();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,826,final Set<PERMISSION> set = new HashSet<PERMISSION>();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,828,or (PERMISSION p : PERMISSION.values()) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java,828,for (final PERMISSION p : PERMISSION.values()) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,111,yte[] headerBytes = raw.readRecord();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,111,final byte[] headerBytes = raw.readRecord();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,129, catch (IOException ex) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,129,} catch (final IOException ex) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,134,"irent root = new Dirent(2, 2, 4, ""."");"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,134,"final Dirent root = new Dirent(2, 2, 4, ""."");"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,175,yte[] buffer = raw.readRecord();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,175,final byte[] buffer = raw.readRecord();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,199,yte[] buffer = raw.readRecord();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,199,final byte[] buffer = raw.readRecord();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,341,nt datalen = DumpArchiveConstants.TP_SIZE * entry.getHeaderCount();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,341,final int datalen = DumpArchiveConstants.TP_SIZE * entry.getHeaderCount();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,355,"nt ino = DumpArchiveUtil.convert32(blockBuffer, i);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,355,"final int ino = DumpArchiveUtil.convert32(blockBuffer, i);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,358,yte type = blockBuffer[i + 6];
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,358,final byte type = blockBuffer[i + 6];
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,360,"tring name = DumpArchiveUtil.decode(zipEncoding, blockBuffer, i + 8, blockBuffer[i + 7]);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,360,"final String name = DumpArchiveUtil.decode(zipEncoding, blockBuffer, i + 8, blockBuffer[i + 7]);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,367,"irent d = new Dirent(ino, entry.getIno(), type, name);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,367,"final Dirent d = new Dirent(ino, entry.getIno(), type, name);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,379,"or (Map.Entry<Integer, DumpArchiveEntry> e : pending.entrySet()) {"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,380,tring path = getPath(e.getValue());
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,379,"for (final Map.Entry<Integer, DumpArchiveEntry> e : pending.entrySet()) {"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,380,final String path = getPath(e.getValue());
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,392,or (DumpArchiveEntry e : queue) {
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,392,for (final DumpArchiveEntry e : queue) {
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,397,yte[] peekBytes = raw.peek();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,397,final byte[] peekBytes = raw.peek();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,418,tack<String> elements = new Stack<String>();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,418,final Stack<String> elements = new Stack<String>();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,443,tringBuilder sb = new StringBuilder(elements.pop());
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,443,final StringBuilder sb = new StringBuilder(elements.pop());
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,483,nt sz = len > readBuf.length - recordOffset
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,483,final int sz = len > readBuf.length - recordOffset
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,498,yte[] headerBytes = raw.readRecord();
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,498,final byte[] headerBytes = raw.readRecord();
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,509,"nt r = raw.read(readBuf, 0, readBuf.length);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java,509,"final int r = raw.read(readBuf, 0, readBuf.length);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,319,umpArchiveSummary rhs = (DumpArchiveSummary) o;
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java,319,final DumpArchiveSummary rhs = (DumpArchiveSummary) o;
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,58,"nt magic = convert32(buffer, 24);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,58,"final int magic = convert32(buffer, 24);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,65,"nt checksum = convert32(buffer, 28);"
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,65,"final int checksum = convert32(buffer, 28);"
False,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,141,yte[] copy = new byte[len];
True,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java,141,final byte[] copy = new byte[len];
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,74,yte[] oldBuffer = blockBuffer;
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,74,final byte[] oldBuffer = blockBuffer;
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,226,yte[] b = new byte[recordSize];
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,226,final byte[] b = new byte[recordSize];
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,239,yte[] result = new byte[recordSize];
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,239,final byte[] result = new byte[recordSize];
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,274,"nt h = DumpArchiveUtil.convert32(blockBuffer, 0);"
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,275,oolean compressed = (h & 0x01) == 0x01;
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,274,"final int h = DumpArchiveUtil.convert32(blockBuffer, 0);"
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,275,final boolean compressed = (h & 0x01) == 0x01;
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,283,nt flags = (h >> 1) & 0x07;
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,283,final int flags = (h >> 1) & 0x07;
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,285,yte[] compBuffer = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,285,final byte[] compBuffer = new byte[length];
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,297,nflater inflator = new Inflater();
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,297,final Inflater inflator = new Inflater();
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,305, catch (DataFormatException e) {
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,305,} catch (final DataFormatException e) {
False,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,339,"nt count = IOUtils.readFully(in, b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java,339,"final int count = IOUtils.readFully(in, b, off, len);"
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,78,ertificate[] certs = new Certificate[certificates.length];
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java,78,final Certificate[] certs = new Certificate[certificates.length];
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,56,ipArchiveEntry entry = getNextZipEntry();
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java,56,final ZipArchiveEntry entry = getNextZipEntry();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,70, catch (NoSuchAlgorithmException noSuchAlgorithmException) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,70,} catch (final NoSuchAlgorithmException noSuchAlgorithmException) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,96, catch (GeneralSecurityException generalSecurityException) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,96,} catch (final GeneralSecurityException generalSecurityException) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,52,tringBuilder sb = new StringBuilder();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,52,final StringBuilder sb = new StringBuilder();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,54,or (SevenZMethodConfiguration m : entry.getContentMethods()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,54,for (final SevenZMethodConfiguration m : entry.getContentMethods()) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,71,ile outFile = new File(entry.getName());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,71,final File outFile = new File(entry.getName());
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,81,ile parent = outFile.getParentFile();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,81,final File parent = outFile.getParentFile();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,85,ileOutputStream fos = new FileOutputStream(outFile);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,85,final FileOutputStream fos = new FileOutputStream(outFile);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,90,"nt toRead = (int) Math.min(total - off, BUF.length);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,91,"nt bytesRead = archive.read(BUF, 0, toRead);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,90,"final int toRead = (int) Math.min(total - off, BUF.length);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,91,"final int bytesRead = archive.read(BUF, 0, toRead);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,124,ode mode = grabMode(args);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,124,final Mode mode = grabMode(args);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,126,ile f = new File(args[0]);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,126,final File f = new File(args[0]);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,130,evenZFile archive = new SevenZFile(f);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java,130,final SevenZFile archive = new SevenZFile(f);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,42,or (Class<?> c : acceptableOptions) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,42,for (final Class<?> c : acceptableOptions) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,72,oderBase cb = findByMethod(SevenZMethod.byId(coder.decompressionMethodId));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,72,final CoderBase cb = findByMethod(SevenZMethod.byId(coder.decompressionMethodId));
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,83,oderBase cb = findByMethod(method);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,83,final CoderBase cb = findByMethod(method);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,106,yte propsByte = coder.properties[0];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,106,final byte propsByte = coder.properties[0];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,129, catch (AssertionError e) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,129,} catch (final AssertionError e) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,187,"nt level = numberOptionOrDefault(options, 9);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,187,"final int level = numberOptionOrDefault(options, 9);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,232,"nt blockSize = numberOptionOrDefault(options, BZip2CompressorOutputStream.MAX_BLOCKSIZE);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,232,"final int blockSize = numberOptionOrDefault(options, BZip2CompressorOutputStream.MAX_BLOCKSIZE);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,262,"nt result = super.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,262,"final int result = super.read(b, off, len);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,40,"nt distance = numberOptionOrDefault(options, 1);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,40,"final int distance = numberOptionOrDefault(options, 1);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,43, catch (UnsupportedOptionsException ex) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,43,} catch (final UnsupportedOptionsException ex) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,55,inkedList<Coder> l = new LinkedList<Coder>();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,55,final LinkedList<Coder> l = new LinkedList<Coder>();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,59,nt pair = findBindPairForOutStream(current);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java,59,final int pair = findBindPairForOutStream(current);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,38,nt dictionarySize = getDictionarySize(coder);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,38,final int dictionarySize = getDictionarySize(coder);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,40, catch (IllegalArgumentException ex) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,40,} catch (final IllegalArgumentException ex) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,48,ZMA2Options options = getOptions(opts);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,49,inishableOutputStream wrapped = new FinishableWrapperOutputStream(out);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,48,final LZMA2Options options = getOptions(opts);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,49,final FinishableOutputStream wrapped = new FinishableWrapperOutputStream(out);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,55,nt dictSize = getDictSize(opts);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,56,nt lead = Integer.numberOfLeadingZeros(dictSize);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,57,nt secondBit = (dictSize >>> (30 - lead)) - 2;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,55,final int dictSize = getDictSize(opts);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,56,final int lead = Integer.numberOfLeadingZeros(dictSize);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,57,final int secondBit = (dictSize >>> (30 - lead)) - 2;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,93,ZMA2Options options = new LZMA2Options();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,93,final LZMA2Options options = new LZMA2Options();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,458,inkedList<SevenZMethodConfiguration> l = new LinkedList<SevenZMethodConfiguration>();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,459,or (SevenZMethodConfiguration m : methods) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,458,final LinkedList<SevenZMethodConfiguration> l = new LinkedList<SevenZMethodConfiguration>();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java,459,for (final SevenZMethodConfiguration m : methods) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,513,nt bits = header.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,513,final int bits = header.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,626,ong size = readUint64(header);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,626,final long size = readUint64(header);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,871,inkedList<SevenZMethodConfiguration> methods = new LinkedList<SevenZMethodConfiguration>();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,871,final LinkedList<SevenZMethodConfiguration> methods = new LinkedList<SevenZMethodConfiguration>();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,876,evenZMethod method = SevenZMethod.byId(coder.decompressionMethodId);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,876,final SevenZMethod method = SevenZMethod.byId(coder.decompressionMethodId);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,910,nputStream stream = deferredBlockStreams.remove(0);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,910,final InputStream stream = deferredBlockStreams.remove(0);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,946,ong firstByte = in.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,946,final long firstByte = in.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,953,ong nextByte = in.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,953,final long nextByte = in.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,989,"ong skippedNow = skipBytesFully(input, Integer.MAX_VALUE);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,989,"final long skippedNow = skipBytesFully(input, Integer.MAX_VALUE);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,997,nt skippedNow = input.skipBytes((int) bytesToSkip);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,997,final int skippedNow = input.skipBytes((int) bytesToSkip);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,95,yte[] copy = new byte[id.length];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,95,final byte[] copy = new byte[id.length];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,101,or (SevenZMethod m : SevenZMethod.class.getEnumConstants()) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,101,for (final SevenZMethod m : SevenZMethod.class.getEnumConstants()) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,169,ong[] sizes = new long[additionalCountingStreams.length];
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,169,final long[] sizes = new long[additionalCountingStreams.length];
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,283,rrayList<CountingOutputStream> moreStreams = new ArrayList<CountingOutputStream>();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,283,final ArrayList<CountingOutputStream> moreStreams = new ArrayList<CountingOutputStream>();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,285,or (SevenZMethodConfiguration m : getContentMethods(files.get(files.size() - 1))) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,285,for (final SevenZMethodConfiguration m : getContentMethods(files.get(files.size() - 1))) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,287,ountingOutputStream cos = new CountingOutputStream(out);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,287,final CountingOutputStream cos = new CountingOutputStream(out);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,320,terable<? extends SevenZMethodConfiguration> ms = entry.getContentMethods();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,320,final Iterable<? extends SevenZMethodConfiguration> ms = entry.getContentMethods();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,374,or (SevenZArchiveEntry entry : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,374,for (final SevenZArchiveEntry entry : files) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,383,ong[] moreSizes = additionalSizes.get(entry);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,383,final long[] moreSizes = additionalSizes.get(entry);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,385,or (long s : moreSizes) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,385,for (final long s : moreSizes) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,405,yteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,405,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,407,or (SevenZMethodConfiguration m : getContentMethods(entry)) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,407,for (final SevenZMethodConfiguration m : getContentMethods(entry)) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,421,yte[] id = m.getMethod().getId();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,422,yte[] properties = Coders.findByMethod(m.getMethod())
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,421,final byte[] id = m.getMethod().getId();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,422,final byte[] properties = Coders.findByMethod(m.getMethod())
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,496,or (SevenZArchiveEntry file1 : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,496,for (final SevenZArchiveEntry file1 : files) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,498,oolean isDir = file1.isDirectory();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,498,final boolean isDir = file1.isDirectory();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,519,or (SevenZArchiveEntry file1 : files) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,519,for (final SevenZArchiveEntry file1 : files) {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,521,oolean isAnti = file1.isAntiItem();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,521,final boolean isAnti = file1.isAntiItem();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,733,inkedList<T> l = new LinkedList<T>();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,734,or (T t : i) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,733,final LinkedList<T> l = new LinkedList<T>();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java,734,for (final T t : i) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,262,"oolean isDir = name.endsWith(""/"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,262,"final boolean isDir = name.endsWith(""/"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,319,"tring normalizedName = normalizeFileName(fileName, false);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,319,"final String normalizedName = normalizeFileName(fileName, false);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,326,nt nameLength = normalizedName.length();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,326,final int nameLength = normalizedName.length();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,953,tring[] list = file.list();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,953,final String[] list = file.list();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,957,arArchiveEntry[] result = new TarArchiveEntry[list.length];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,957,final TarArchiveEntry[] result = new TarArchiveEntry[list.length];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,976, catch (IOException ex) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,976,} catch (final IOException ex) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,979, catch (IOException ex2) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,979,} catch (final IOException ex2) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1012,nt csOffset = offset;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1012,final int csOffset = offset;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1036,ong chk = TarUtils.computeCheckSum(outbuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1036,final long chk = TarUtils.computeCheckSum(outbuf);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1063, catch (IOException ex) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1063,} catch (final IOException ex) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1066, catch (IOException ex2) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1066,} catch (final IOException ex2) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1127,nt type = evaluateType(header);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1127,final int type = evaluateType(header);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1143,tring xstarPrefix = oldStyle
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1143,final String xstarPrefix = oldStyle
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1153,tring prefix = oldStyle
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1153,final String prefix = oldStyle
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1174,"tring osname = System.getProperty(""os.name"").toLowerCase(Locale.ENGLISH);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1174,"final String osname = System.getProperty(""os.name"").toLowerCase(Locale.ENGLISH);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1183,har ch1 = fileName.charAt(0);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1184,har ch2 = fileName.charAt(1);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1183,final char ch1 = fileName.charAt(0);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1184,final char ch2 = fileName.charAt(1);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1193,nt colon = fileName.indexOf(':');
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,1193,final int colon = fileName.indexOf(':');
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,275,yte[] headerBuf = getRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,275,final byte[] headerBuf = getRecord();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,285, catch (IllegalArgumentException e) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,285,} catch (final IllegalArgumentException e) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,293,yte[] longLinkData = getLongNameData();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,293,final byte[] longLinkData = getLongNameData();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,304,yte[] longNameData = getLongNameData();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,304,final byte[] longNameData = getLongNameData();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,343,ong numRecords = (this.entrySize / this.recordSize) + 1;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,344,ong padding = (numRecords * this.recordSize) - this.entrySize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,345,"ong skipped = IOUtils.skip(is, padding);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,343,final long numRecords = (this.entrySize / this.recordSize) + 1;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,344,final long padding = (numRecords * this.recordSize) - this.entrySize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,345,"final long skipped = IOUtils.skip(is, padding);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,358,yteArrayOutputStream longName = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,358,final ByteArrayOutputStream longName = new ByteArrayOutputStream();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,376,yte[] l = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,376,final byte[] l = new byte[length];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,427,yte[] record = new byte[recordSize];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,427,final byte[] record = new byte[recordSize];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,429,"nt readNow = IOUtils.readFully(is, record);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,429,"final int readNow = IOUtils.readFully(is, record);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,444,"ap<String, String> headers = parsePaxHeaders(this);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,444,"final Map<String, String> headers = parsePaxHeaders(this);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,454,"ap<String, String> headers = new HashMap<String, String>(globalPaxHeaders);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,454,"final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,464,yteArrayOutputStream coll = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,464,final ByteArrayOutputStream coll = new ByteArrayOutputStream();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,468,tring keyword = coll.toString(CharsetNames.UTF_8);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,468,final String keyword = coll.toString(CharsetNames.UTF_8);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,474,yte[] rest = new byte[restLen];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,475,"nt got = IOUtils.readFully(i, rest);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,474,final byte[] rest = new byte[restLen];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,475,"final int got = IOUtils.readFully(i, rest);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,484,"tring value = new String(rest, 0,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,484,"final String value = new String(rest, 0,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,523,"or (Entry<String, String> ent : headers.entrySet()){"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,524,tring key = ent.getKey();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,525,tring val = ent.getValue();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,523,"for (final Entry<String, String> ent : headers.entrySet()){"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,524,final String key = ent.getKey();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,525,final String val = ent.getValue();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,572,yte[] headerBuf = getRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,572,final byte[] headerBuf = getRecord();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,613,oolean marked = is.markSupported();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,613,final boolean marked = is.markSupported();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,677,arArchiveEntry te = (TarArchiveEntry) ae;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,677,final TarArchiveEntry te = (TarArchiveEntry) ae;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,710,ong bytesReadOfLastBlock = getBytesRead() % blockSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,710,final long bytesReadOfLastBlock = getBytesRead() % blockSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,712,"ong skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,712,"final long skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,277,arArchiveEntry entry = (TarArchiveEntry) archiveEntry;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,278,"ap<String, String> paxHeaders = new HashMap<String, String>();"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,277,final TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,278,"final Map<String, String> paxHeaders = new HashMap<String, String>();"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,280,"oolean paxHeaderContainsPath = handleLongName(entry, entryName, paxHeaders, ""path"","
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,280,"final boolean paxHeaderContainsPath = handleLongName(entry, entryName, paxHeaders, ""path"","
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,284,oolean paxHeaderContainsLinkPath = linkName != null && linkName.length() > 0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,284,final boolean paxHeaderContainsLinkPath = linkName != null && linkName.length() > 0
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,398,nt aLen = recordBuf.length - assemLen;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,398,final int aLen = recordBuf.length - assemLen;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,437,nt num = recordBuf.length;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,437,final int num = recordBuf.length;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,456,"arArchiveEntry pex = new TarArchiveEntry(name,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,456,"final TarArchiveEntry pex = new TarArchiveEntry(name,"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,460,tringWriter w = new StringWriter();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,461,"or (Map.Entry<String, String> h : headers.entrySet()) {"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,462,tring key = h.getKey();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,463,tring value = h.getValue();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,460,final StringWriter w = new StringWriter();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,461,"for (final Map.Entry<String, String> h : headers.entrySet()) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,462,final String key = h.getKey();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,463,final String value = h.getValue();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,481,yte[] data = w.toString().getBytes(CharsetNames.UTF_8);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,481,final byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,490,tringBuilder result = new StringBuilder(length);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,490,final StringBuilder result = new StringBuilder(length);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,492,har stripped = (char) (name.charAt(i) & 0x7F);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,492,final char stripped = (char) (name.charAt(i) & 0x7F);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,576,nt start = recordsWritten % recordsPerBlock;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,576,final int start = recordsWritten % recordsPerBlock;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,678,"arArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, linkType);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,678,"final TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, linkType);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,697,ong fromModTimeSeconds = fromModTime.getTime() / 1000;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java,697,final long fromModTimeSeconds = fromModTime.getTime() / 1000;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,54,yte[] buf = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,54,final byte[] buf = new byte[length];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,66,tringBuilder result = new StringBuilder(length);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,66,final StringBuilder result = new StringBuilder(length);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,68,or (byte b : buffer) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,68,for (final byte b : buffer) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,205,yte[] remainder = new byte[length - 1];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,205,final byte[] remainder = new byte[length - 1];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,265, catch (IOException ex) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,265,} catch (final IOException ex) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,268, catch (IOException ex2) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,268,} catch (final IOException ex2) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,300,yte[] b = new byte[len];
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,300,final byte[] b = new byte[len];
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,325, catch (IOException ex) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,325,} catch (final IOException ex) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,329, catch (IOException ex2) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,329,} catch (final IOException ex2) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,449,nt idx=length-1; // For space
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,449,final int idx=length-1; // For space
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,519,igInteger val = BigInteger.valueOf(value);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,519,final BigInteger val = BigInteger.valueOf(value);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,564,or (byte element : buf) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,564,for (final byte element : buf) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,597,"ong storedSum = parseOctal(header, CHKSUM_OFFSET, CHKSUMLEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,597,"final long storedSum = parseOctal(header, CHKSUM_OFFSET, CHKSUMLEN);"
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,52,RC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,52,final CRC32 crc32 = new CRC32();
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,58, catch (UnsupportedEncodingException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,58,} catch (final UnsupportedEncodingException e) {
False,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,169,nt version = buffer[offset];
True,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java,169,final int version = buffer[offset];
False,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,130,yte[] data = new byte[getLocalFileDataLength().getValue() - WORD];
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,130,final byte[] data = new byte[getLocalFileDataLength().getValue() - WORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,133,yte[] linkArray = getLinkedFile().getBytes(); // Uses default charset - see class Javadoc
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,133,final byte[] linkArray = getLinkedFile().getBytes(); // Uses default charset - see class Javadoc
False,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,148,ong checksum = crc.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,148,final long checksum = crc.getValue();
False,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,150,yte[] result = new byte[data.length + WORD];
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,150,final byte[] result = new byte[data.length + WORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,270,"ong givenChecksum = ZipLong.getValue(data, offset);"
False,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,271,yte[] tmp = new byte[length - WORD];
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,270,"final long givenChecksum = ZipLong.getValue(data, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,271,final byte[] tmp = new byte[length - WORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,275,ong realChecksum = crc.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,275,final long realChecksum = crc.getValue();
False,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,283,"nt newMode = ZipShort.getValue(tmp, 0);"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,283,"final int newMode = ZipShort.getValue(tmp, 0);"
False,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,285,"yte[] linkArray = new byte[(int) ZipLong.getValue(tmp, 2)];"
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,285,"final byte[] linkArray = new byte[(int) ZipLong.getValue(tmp, 2)];"
False,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,329,siExtraField cloned = (AsiExtraField) super.clone();
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,329,final AsiExtraField cloned = (AsiExtraField) super.clone();
False,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,332, catch (CloneNotSupportedException cnfe) {
True,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,332,} catch (final CloneNotSupportedException cnfe) {
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,73,nt nextChild = 2 * node + 1 + (path & 1);
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,73,final int nextChild = 2 * node + 1 + (path & 1);
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,88,nt bit = stream.nextBit();
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,88,final int bit = stream.nextBit();
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,93,nt childIndex = 2 * currentIndex + 1 + bit;
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,94,nt value = tree[childIndex];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,93,final int childIndex = 2 * currentIndex + 1 + bit;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,94,final int value = tree[childIndex];
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,112,nt size = in.read() + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,112,final int size = in.read() + 1;
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,117,yte[] encodedTree = new byte[size];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,117,final byte[] encodedTree = new byte[size];
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,123,nt[] originalBitLengths = new int[totalNumberOfValues];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,123,final int[] originalBitLengths = new int[totalNumberOfValues];
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,125,or (byte b : encodedTree) {
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,125,for (final byte b : encodedTree) {
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,127,nt numberOfValues = ((b & 0xF0) >> 4) + 1;
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,128,nt bitLength = (b & 0x0F) + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,127,final int numberOfValues = ((b & 0xF0) >> 4) + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,128,final int bitLength = (b & 0x0F) + 1;
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,138,nt[] permutation = new int[originalBitLengths.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,138,final int[] permutation = new int[originalBitLengths.length];
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,144,nt[] sortedBitLengths = new int[originalBitLengths.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,144,final int[] sortedBitLengths = new int[originalBitLengths.length];
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,166,nt[] codes = new int[totalNumberOfValues];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,166,final int[] codes = new int[totalNumberOfValues];
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,178,inaryTree tree = new BinaryTree(maxLength);
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,178,final BinaryTree tree = new BinaryTree(maxLength);
False,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,181,nt bitLength = originalBitLengths[k];
True,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,src/main/java/org/apache/commons/compress/archivers/zip/BinaryTree.java,181,final int bitLength = originalBitLengths[k];
False,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,67,nt value = buffer[readIndex];
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,67,final int value = buffer[readIndex];
False,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,81,nt pos1 = writeIndex - distance;
False,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,82,nt pos2 = pos1 + length;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,81,final int pos1 = writeIndex - distance;
True,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,src/main/java/org/apache/commons/compress/archivers/zip/CircularBuffer.java,82,final int pos2 = pos1 + length;
False,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,120,nt bit = bits.nextBit();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,120,final int bit = bits.nextBit();
False,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,139,nt distanceLowSize = dictionarySize == 4096 ? 6 : 7;
False,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,140,nt distanceLow = (int) bits.nextBits(distanceLowSize);
False,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,141,nt distanceHigh = distanceTree.read(bits);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,139,final int distanceLowSize = dictionarySize == 4096 ? 6 : 7;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,140,final int distanceLow = (int) bits.nextBits(distanceLowSize);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,141,final int distanceHigh = distanceTree.read(bits);
False,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,146,nt distance = distanceHigh << distanceLowSize | distanceLow;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ExplodingInputStream.java,146,final int distance = distanceHigh << distanceLowSize | distanceLow;
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,66,ipExtraField ze = (ZipExtraField) c.newInstance();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,66,final ZipExtraField ze = (ZipExtraField) c.newInstance();
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,68, catch (ClassCastException cc) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,68,} catch (final ClassCastException cc) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,70, catch (InstantiationException ie) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,70,} catch (final InstantiationException ie) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,72, catch (IllegalAccessException ie) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,72,} catch (final IllegalAccessException ie) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,87,lass<?> c = implementations.get(headerId);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,87,final Class<?> c = implementations.get(headerId);
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,91,nrecognizedExtraField u = new UnrecognizedExtraField();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,91,final UnrecognizedExtraField u = new UnrecognizedExtraField();
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,138,ist<ZipExtraField> v = new ArrayList<ZipExtraField>();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,138,final List<ZipExtraField> v = new ArrayList<ZipExtraField>();
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,142,"ipShort headerId = new ZipShort(data, start);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,143,"nt length = new ZipShort(data, start + 2).getValue();"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,142,"final ZipShort headerId = new ZipShort(data, start);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,143,"final int length = new ZipShort(data, start + 2).getValue();"
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,154,nparseableExtraFieldData field =
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,154,final UnparseableExtraFieldData field =
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,176,ipExtraField ze = createExtraField(headerId);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,176,final ZipExtraField ze = createExtraField(headerId);
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,184, catch (InstantiationException ie) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,184,} catch (final InstantiationException ie) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,186, catch (IllegalAccessException iae) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,186,} catch (final IllegalAccessException iae) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,192,ipExtraField[] result = new ZipExtraField[v.size()];
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,192,final ZipExtraField[] result = new ZipExtraField[v.size()];
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,204,nt regularExtraFieldCount =
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,204,final int regularExtraFieldCount =
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,208,or (ZipExtraField element : data) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,208,for (final ZipExtraField element : data) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,212,yte[] result = new byte[sum];
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,212,final byte[] result = new byte[sum];
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,220,yte[] local = data[i].getLocalFileDataData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,220,final byte[] local = data[i].getLocalFileDataData();
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,227,yte[] local = data[data.length - 1].getLocalFileDataData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,227,final byte[] local = data[data.length - 1].getLocalFileDataData();
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,243,nt regularExtraFieldCount =
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,243,final int regularExtraFieldCount =
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,247,or (ZipExtraField element : data) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,247,for (final ZipExtraField element : data) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,250,yte[] result = new byte[sum];
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,250,final byte[] result = new byte[sum];
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,258,yte[] local = data[i].getCentralDirectoryData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,258,final byte[] local = data[i].getCentralDirectoryData();
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,265,yte[] local = data[data.length - 1].getCentralDirectoryData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,265,final byte[] local = data[data.length - 1].getCentralDirectoryData();
False,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,172,yte[] result = new byte[2];
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,172,final byte[] result = new byte[2];
False,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,206,eneralPurposeBit b = new GeneralPurposeBit();
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,206,final GeneralPurposeBit b = new GeneralPurposeBit();
False,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,229,eneralPurposeBit g = (GeneralPurposeBit) o;
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,229,final GeneralPurposeBit g = (GeneralPurposeBit) o;
False,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,240, catch (CloneNotSupportedException ex) {
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,240,} catch (final CloneNotSupportedException ex) {
False,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,60,harsetEncoder enc = this.charset.newEncoder();
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,60,final CharsetEncoder enc = this.charset.newEncoder();
False,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,73,harsetEncoder enc = this.charset.newEncoder();
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,73,final CharsetEncoder enc = this.charset.newEncoder();
False,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,78,harBuffer cb = CharBuffer.wrap(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,78,final CharBuffer cb = CharBuffer.wrap(name);
False,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,83,"oderResult res = enc.encode(cb, out,true);"
True,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java,83,"final CoderResult res = enc.encode(cb, out,true);"
False,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,173,yte[] tmp = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,173,final byte[] tmp = new byte[length];
False,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,189,yte[] tmp = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,189,final byte[] tmp = new byte[length];
False,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,219,"ap<Integer, EncryptionAlgorithm> cte = new HashMap<Integer, EncryptionAlgorithm>();"
False,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,220,or (EncryptionAlgorithm method : values()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,219,"final Map<Integer, EncryptionAlgorithm> cte = new HashMap<Integer, EncryptionAlgorithm>();"
True,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,220,for (final EncryptionAlgorithm method : values()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,274,"ap<Integer, HashAlgorithm> cte = new HashMap<Integer, HashAlgorithm>();"
False,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,275,or (HashAlgorithm method : values()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,274,"final Map<Integer, HashAlgorithm> cte = new HashMap<Integer, HashAlgorithm>();"
True,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java,275,for (final HashAlgorithm method : values()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,69,"ile tempFile = File.createTempFile(""parallelscatter"", ""n"" + storeNum.incrementAndGet());"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,69,"final File tempFile = File.createTempFile(""parallelscatter"", ""n"" + storeNum.incrementAndGet());"
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,76,catterGatherBackingStore bs = scatterGatherBackingStoreSupplier.get();
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,77,"treamCompressor sc = StreamCompressor.create(Deflater.DEFAULT_COMPRESSION, bs);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,76,final ScatterGatherBackingStore bs = scatterGatherBackingStoreSupplier.get();
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,77,"final StreamCompressor sc = StreamCompressor.create(Deflater.DEFAULT_COMPRESSION, bs);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,85,catterZipOutputStream scatterStream = createDeferred(backingStoreSupplier);
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,85,final ScatterZipOutputStream scatterStream = createDeferred(backingStoreSupplier);
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,88, catch (IOException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,88,} catch (final IOException e) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,200,or (Future<?> future : futures) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,200,for (final Future<?> future : futures) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,210,or (ScatterZipOutputStream scatterStream : streams) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java,210,for (final ScatterZipOutputStream scatterStream : streams) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,73,ipArchiveEntry entry = zipArchiveEntryRequest.getZipArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,73,final ZipArchiveEntry entry = zipArchiveEntryRequest.getZipArchiveEntry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,113,nputStream data = backingStore.getInputStream();
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,114,or (CompressedEntry compressedEntry : items) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,113,final InputStream data = backingStore.getInputStream();
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,114,for (final CompressedEntry compressedEntry : items) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,152,catterGatherBackingStore bs = new FileBasedScatterGatherBackingStore(file);
False,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,153,"treamCompressor sc = StreamCompressor.create(compressionLevel, bs);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,152,final ScatterGatherBackingStore bs = new FileBasedScatterGatherBackingStore(file);
True,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java,153,"final StreamCompressor sc = StreamCompressor.create(compressionLevel, bs);"
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,76,imple8BitChar other = (Simple8BitChar) o;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,76,final Simple8BitChar other = (Simple8BitChar) o;
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,107,ist<Simple8BitChar> temp =
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,107,final List<Simple8BitChar> temp =
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,112,or (char highChar : this.highChars) {
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,112,for (final char highChar : this.highChars) {
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,146,imple8BitChar r = this.encodeHighChar(c);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,146,final Simple8BitChar r = this.encodeHighChar(c);
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,166,imple8BitChar r = this.encodeHighChar(c);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,166,final Simple8BitChar r = this.encodeHighChar(c);
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,188,nt i = i0 + (i1 - i0) / 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,188,final int i = i0 + (i1 - i0) / 2;
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,190,imple8BitChar m = this.reverseMapping.get(i);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,190,final Simple8BitChar m = this.reverseMapping.get(i);
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,207,imple8BitChar r = this.reverseMapping.get(i0);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,207,final Simple8BitChar r = this.reverseMapping.get(i0);
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,225,har c = name.charAt(i);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,225,final char c = name.charAt(i);
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,246,har c = name.charAt(i);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,246,final char c = name.charAt(i);
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,269,har [] ret = new char[data.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,269,final char [] ret = new char[data.length];
False,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,188,ong current = writtenToOutputStreamForLastEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,188,final long current = writtenToOutputStreamForLastEntry;
False,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,248,"nt len = def.deflate(outputBuffer, 0, outputBuffer.length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java,248,"final int len = def.deflate(outputBuffer, 0, outputBuffer.length);"
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,133,yte[] tmp = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,133,final byte[] tmp = new byte[length];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,147,yte[] tmp = new byte[length];
True,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,147,final byte[] tmp = new byte[length];
False,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,55,"nt idx = addEntry(previousCode, character, MAX_TABLE_SIZE);"
True,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java,55,"final int idx = addEntry(previousCode, character, MAX_TABLE_SIZE);"
False,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,122,yte[] data = new byte[getLocalFileDataLength().getValue()];
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,122,final byte[] data = new byte[getLocalFileDataLength().getValue()];
False,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,165,"ipShort tag = new ZipShort(data, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,165,"final ZipShort tag = new ZipShort(data, offset);"
False,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,171,"ipShort size = new ZipShort(data, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,171,"final ZipShort size = new ZipShort(data, offset);"
False,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,315,tringBuilder buf = new StringBuilder();
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,315,final StringBuilder buf = new StringBuilder();
False,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,326,000A_NTFS xf = (X000A_NTFS) o;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,326,final X000A_NTFS xf = (X000A_NTFS) o;
False,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,364,"ipShort tagValueLength = new ZipShort(data, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,364,"final ZipShort tagValueLength = new ZipShort(data, offset);"
False,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,390,ong l = (z.getLongValue() + EPOCH_OFFSET) / 10000l;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,390,final long l = (z.getLongValue() + EPOCH_OFFSET) / 10000l;
False,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,331,"nt ivSize = ZipShort.getValue(data, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,331,"final int ivSize = ZipShort.getValue(data, offset);"
False,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,340,"nt erdSize = ZipShort.getValue(data, offset + ivSize + 14);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,340,"final int erdSize = ZipShort.getValue(data, offset + ivSize + 14);"
False,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,347,"nt vSize = ZipShort.getValue(data, offset + ivSize + 20 + erdSize);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,347,"final int vSize = ZipShort.getValue(data, offset + ivSize + 20 + erdSize);"
False,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,355,"nt resize = ZipShort.getValue(data, offset + ivSize + 24 + erdSize);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,355,"final int resize = ZipShort.getValue(data, offset + ivSize + 24 + erdSize);"
False,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,361,"nt vSize = ZipShort.getValue(data, offset + ivSize + 26 + erdSize + resize);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java,361,"final int vSize = ZipShort.getValue(data, offset + ivSize + 26 + erdSize + resize);"
False,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,174,yte[] data = new byte[getLocalFileDataLength().getValue()];
True,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,174,final byte[] data = new byte[getLocalFileDataLength().getValue()];
False,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,203,yte[] centralData = new byte[getCentralDirectoryLength().getValue()];
False,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,204,yte[] localData = getLocalFileDataData();
True,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,203,final byte[] centralData = new byte[getCentralDirectoryLength().getValue()];
True,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,204,final byte[] localData = getLocalFileDataData();
False,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,538,tringBuilder buf = new StringBuilder();
True,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,538,final StringBuilder buf = new StringBuilder();
False,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,542,ate m = getModifyJavaTime();
True,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,542,final Date m = getModifyJavaTime();
False,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,546,ate a = getAccessJavaTime();
True,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,546,final Date a = getAccessJavaTime();
False,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,550,ate c = getCreateJavaTime();
True,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,550,final Date c = getCreateJavaTime();
False,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,564,5455_ExtendedTimestamp xf = (X5455_ExtendedTimestamp) o;
True,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java,564,final X5455_ExtendedTimestamp xf = (X5455_ExtendedTimestamp) o;
False,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,135,nt uidSize = trimLeadingZeroesForceMinLength(uid.toByteArray()).length;
False,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,136,nt gidSize = trimLeadingZeroesForceMinLength(gid.toByteArray()).length;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,135,final int uidSize = trimLeadingZeroesForceMinLength(uid.toByteArray()).length;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,136,final int gidSize = trimLeadingZeroesForceMinLength(gid.toByteArray()).length;
False,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,175,yte[] data = new byte[3 + uidBytes.length + gidBytes.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,175,final byte[] data = new byte[3 + uidBytes.length + gidBytes.length];
False,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,216,nt uidSize = signedByteToUnsignedInt(data[offset++]);
False,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,217,yte[] uidBytes = new byte[uidSize];
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,216,final int uidSize = signedByteToUnsignedInt(data[offset++]);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,217,final byte[] uidBytes = new byte[uidSize];
False,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,222,nt gidSize = signedByteToUnsignedInt(data[offset++]);
False,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,223,yte[] gidBytes = new byte[gidSize];
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,222,final int gidSize = signedByteToUnsignedInt(data[offset++]);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,223,final byte[] gidBytes = new byte[gidSize];
False,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,268,7875_NewUnix xf = (X7875_NewUnix) o;
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,268,final X7875_NewUnix xf = (X7875_NewUnix) o;
False,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,301,or (byte b : array) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,301,for (final byte b : array) {
False,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,348,"yte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)];"
False,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,349,nt startPos = trimmedArray.length - (array.length - pos);
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,348,"final byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)];"
True,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java,349,final int startPos = trimmedArray.length - (array.length - pos);
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,130,yte[] data = new byte[2 * DWORD];
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,130,final byte[] data = new byte[2 * DWORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,139,yte[] data = new byte[getCentralDirectoryLength().getValue()];
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,139,final byte[] data = new byte[getCentralDirectoryLength().getValue()];
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,230,nt expectedLength = (hasUncompressedSize ? DWORD : 0)
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,230,final int expectedLength = (hasUncompressedSize ? DWORD : 0)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,118,yte[] extra = entry.getExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,118,final byte[] extra = entry.getExtra();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,146,eneralPurposeBit other = entry.getGeneralPurposeBit();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,146,final GeneralPurposeBit other = entry.getGeneralPurposeBit();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,184,ipArchiveEntry e = (ZipArchiveEntry) super.clone();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,184,final ZipArchiveEntry e = (ZipArchiveEntry) super.clone();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,324,ist<ZipExtraField> newFields = new ArrayList<ZipExtraField>();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,325,or (ZipExtraField field : fields) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,324,final List<ZipExtraField> newFields = new ArrayList<ZipExtraField>();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,325,for (final ZipExtraField field : fields) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,393,ipExtraField[] cpy = new ZipExtraField[length];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,393,final ZipExtraField[] cpy = new ZipExtraField[length];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,452,ipExtraField[] copy = extraFields;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,453,nt newLen = extraFields != null ? extraFields.length + 1: 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,452,final ZipExtraField[] copy = extraFields;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,453,final int newLen = extraFields != null ? extraFields.length + 1: 1;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,472,ist<ZipExtraField> newResult = new ArrayList<ZipExtraField>();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,473,or (ZipExtraField extraField : extraFields) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,472,final List<ZipExtraField> newResult = new ArrayList<ZipExtraField>();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,473,for (final ZipExtraField extraField : extraFields) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,506,or (ZipExtraField extraField : extraFields) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,506,for (final ZipExtraField extraField : extraFields) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,537,ipExtraField[] local =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,537,final ZipExtraField[] local =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,541, catch (ZipException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,541,} catch (final ZipException e) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,564,ipExtraField[] central =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,564,final ZipExtraField[] central =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,568, catch (ZipException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,568,} catch (final ZipException e) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,578,yte[] extra = getExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,578,final byte[] extra = getExtra();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,674,yte[] b = new byte[rawName.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,674,final byte[] b = new byte[rawName.length];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,726,or (ZipExtraField element : f) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,726,for (final ZipExtraField element : f) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,737,yte[] b = element.getLocalFileDataData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,737,final byte[] b = element.getLocalFileDataData();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,740,yte[] b = element.getCentralDirectoryData();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,740,final byte[] b = element.getCentralDirectoryData();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,773,ipArchiveEntry other = (ZipArchiveEntry) obj;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,774,tring myName = getName();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,775,tring otherName = other.getName();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,773,final ZipArchiveEntry other = (ZipArchiveEntry) obj;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,774,final String myName = getName();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,775,final String otherName = other.getName();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,238, catch (EOFException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,238,} catch (final EOFException e) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,242,ipLong sig = new ZipLong(LFH_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,242,final ZipLong sig = new ZipLong(LFH_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,254,"nt versionMadeBy = ZipShort.getValue(LFH_BUF, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,254,"final int versionMadeBy = ZipShort.getValue(LFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,269,"ong time = ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,269,"final long time = ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,287,"nt fileNameLen = ZipShort.getValue(LFH_BUF, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,287,"final int fileNameLen = ZipShort.getValue(LFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,291,"nt extraLen = ZipShort.getValue(LFH_BUF, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,291,"final int extraLen = ZipShort.getValue(LFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,294,yte[] fileName = new byte[fileNameLen];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,294,final byte[] fileName = new byte[fileNameLen];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,298,yte[] extraData = new byte[extraLen];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,298,final byte[] extraData = new byte[extraLen];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,332,ipLong sig = new ZipLong(lfh);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,332,final ZipLong sig = new ZipLong(lfh);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,340,yte[] missedLfhBytes = new byte[4];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,340,final byte[] missedLfhBytes = new byte[4];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,353,ip64ExtendedInformationExtraField z64 =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,353,final Zip64ExtendedInformationExtraField z64 =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,384,ipArchiveEntry ze = (ZipArchiveEntry) ae;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,384,final ZipArchiveEntry ze = (ZipArchiveEntry) ae;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,446,ong csize = current.entry.getSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,446,final long csize = current.entry.getSize();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,453,nt l = in.read(buf.array());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,453,final int l = in.read(buf.array());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,477,"nt read = readFromInflater(buffer, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,477,"final int read = readFromInflater(buffer, offset, length);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,500,nt l = fill();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,500,final int l = fill();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,511, catch (DataFormatException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,511,} catch (final DataFormatException e) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,550,ong rem = value - skipped;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,551,"nt x = read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,550,final long rem = value - skipped;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,551,"final int x = read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,624,ong inB = current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,624,final long inB = current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,629,nt diff = (int) (current.bytesReadFromStream - inB);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,629,final int diff = (int) (current.bytesReadFromStream - inB);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,654,"ong n = in.read(buf.array(), 0, (int) Math.min(buf.capacity(), remaining));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,654,"final long n = in.read(buf.array(), 0, (int) Math.min(buf.capacity(), remaining));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,692,nt length = in.read(buf.array());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,692,final int length = in.read(buf.array());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,702,"nt count = IOUtils.readFully(in, b);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,702,"final int count = IOUtils.readFully(in, b);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,731,"ipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,731,"final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,774,yteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,774,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,779,nt ddLen = current.usesZip64 ? WORD + 2 * DWORD : 3 * WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,779,final int ddLen = current.usesZip64 ? WORD + 2 * DWORD : 3 * WORD;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,782,"nt r = in.read(buf.array(), off, ZipArchiveOutputStream.BUFFER_SIZE - off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,782,"final int r = in.read(buf.array(), off, ZipArchiveOutputStream.BUFFER_SIZE - off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,800,yte[] b = bos.toByteArray();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,800,final byte[] b = bos.toByteArray();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,955,ong rem = value - skipped;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,956,"nt x = in.read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,955,final long rem = value - skipped;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,956,"final int x = in.read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,975,nt b = in.read();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,975,final int b = in.read();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,288, catch (IOException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,288,} catch (final IOException e) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,454,nt NUM_PER_WRITE = 1000;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,455,yteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(70 * NUM_PER_WRITE);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,454,final int NUM_PER_WRITE = 1000;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,455,final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(70 * NUM_PER_WRITE);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,457,or (ZipArchiveEntry ze : entries) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,457,for (final ZipArchiveEntry ze : entries) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,481,ong bytesWritten = streamCompressor.getTotalBytesWritten() - entry.dataStart;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,482,ong realCrc = streamCompressor.getCrc32();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,481,final long bytesWritten = streamCompressor.getTotalBytesWritten() - entry.dataStart;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,482,final long realCrc = streamCompressor.getCrc32();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,503,ip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,504,oolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,503,final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,504,final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,546,ipArchiveEntry ae = new ZipArchiveEntry(entry);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,546,final ZipArchiveEntry ae = new ZipArchiveEntry(entry);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,553,oolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,553,final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,643,ong save = raf.getFilePointer();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,643,final long save = raf.getFilePointer();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,656,yteBuffer name = getName(entry.entry);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,657,nt nameLen = name.limit() - name.position();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,656,final ByteBuffer name = getName(entry.entry);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,657,final int nameLen = name.limit() - name.position();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,731,ip64ExtendedInformationExtraField z64 = getZip64Extra(entry.entry);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,731,final Zip64ExtendedInformationExtraField z64 = getZip64Extra(entry.entry);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,870,ipArchiveEntry zae = (ZipArchiveEntry) ae;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,870,final ZipArchiveEntry zae = (ZipArchiveEntry) ae;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,891,"ong writtenThisTime = streamCompressor.write(b, offset, length, entry.entry.getMethod());"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,891,"final long writtenThisTime = streamCompressor.write(b, offset, length, entry.entry.getMethod());"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,994,oolean encodable = zipEncoding.canEncode(ze.getName());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,995,yteBuffer name = getName(ze);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,994,final boolean encodable = zipEncoding.canEncode(ze.getName());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,995,final ByteBuffer name = getName(ze);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1002,ong localHeaderStart = streamCompressor.getTotalBytesWritten();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1002,final long localHeaderStart = streamCompressor.getTotalBytesWritten();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1012,yte[] extra = ze.getLocalFileDataExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1012,final byte[] extra = ze.getLocalFileDataExtra();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1014,nt len= LFH_FILENAME_OFFSET + nameLen + extra.length;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1015,yte[] buf = new byte[len];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1014,final int len= LFH_FILENAME_OFFSET + nameLen + extra.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1015,final byte[] buf = new byte[len];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1028,"eneralPurposeBit generalPurposeBit = getGeneralPurposeBits(zipMethod, !encodable && fallbackToUTF8);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1028,"final GeneralPurposeBit generalPurposeBit = getGeneralPurposeBits(zipMethod, !encodable && fallbackToUTF8);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1094,tring comm = ze.getComment();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1094,final String comm = ze.getComment();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1097,oolean commentEncodable = zipEncoding.canEncode(comm);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1097,final boolean commentEncodable = zipEncoding.canEncode(comm);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1101,yteBuffer commentB = getEntryEncoding(ze).encode(comm);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1101,final ByteBuffer commentB = getEntryEncoding(ze).encode(comm);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1141,yte[] centralFileHeader = createCentralFileHeader(ze);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1141,final byte[] centralFileHeader = createCentralFileHeader(ze);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1177,yte[] extra = ze.getCentralDirectoryExtra();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1177,final byte[] extra = ze.getCentralDirectoryExtra();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1185,yteBuffer commentB = getEntryEncoding(ze).encode(comm);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1185,final ByteBuffer commentB = getEntryEncoding(ze).encode(comm);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1188,nt len= CFH_FILENAME_OFFSET + nameLen + extra.length + commentLen;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1189,yte[] buf = new byte[len];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1188,final int len= CFH_FILENAME_OFFSET + nameLen + extra.length + commentLen;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1189,final byte[] buf = new byte[len];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1250,nt extraStart = CFH_FILENAME_OFFSET + nameLen;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1250,final int extraStart = CFH_FILENAME_OFFSET + nameLen;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1253,nt commentStart = extraStart + extra.length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1253,final int commentStart = extraStart + extra.length;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1267,ip64ExtendedInformationExtraField z64 = getZip64Extra(ze);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1267,final Zip64ExtendedInformationExtraField z64 = getZip64Extra(ze);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1300,nt numberOfEntries = entries.size();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1300,final int numberOfEntries = entries.size();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1311,"yte[] num = ZipShort.getBytes(Math.min(numberOfEntries,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1311,"final byte[] num = ZipShort.getBytes(Math.min(numberOfEntries,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1321,yteBuffer data = this.zipEncoding.encode(comment);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1322,nt dataLen = data.limit() - data.position();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1321,final ByteBuffer data = this.zipEncoding.encode(comment);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1322,final int dataLen = data.limit() - data.position();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1349,ong offset = streamCompressor.getTotalBytesWritten();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1349,final long offset = streamCompressor.getTotalBytesWritten();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1374,yte[] num = ZipEightByteInteger.getBytes(entries.size());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1374,final byte[] num = ZipEightByteInteger.getBytes(entries.size());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1419,eneralPurposeBit b = new GeneralPurposeBit();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1419,final GeneralPurposeBit b = new GeneralPurposeBit();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1525,oolean encodable = zipEncoding.canEncode(ze.getName());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,1525,final boolean encodable = zipEncoding.canEncode(ze.getName());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,142,yte[] result = new byte[8];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,143,ong val = value.longValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,142,final byte[] result = new byte[8];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,143,final long val = value.longValue();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,185,igInteger val = BigInteger.valueOf(value);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,185,final BigInteger val = BigInteger.valueOf(value);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,71,"ap<String, SimpleEncodingHolder> se ="
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,71,"final Map<String, SimpleEncodingHolder> se ="
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,74,har[] cp437_high_chars =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,74,final char[] cp437_high_chars =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,98,impleEncodingHolder cp437 = new SimpleEncodingHolder(cp437_high_chars);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,98,final SimpleEncodingHolder cp437 = new SimpleEncodingHolder(cp437_high_chars);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,106,har[] cp850_high_chars =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,106,final char[] cp850_high_chars =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,130,impleEncodingHolder cp850 = new SimpleEncodingHolder(cp850_high_chars);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,130,final SimpleEncodingHolder cp850 = new SimpleEncodingHolder(cp850_high_chars);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,156,nt c2 = b.capacity() * 2;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,157,yteBuffer on = ByteBuffer.allocate(c2 < newCapacity ? newCapacity : c2);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,156,final int c2 = b.capacity() * 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,157,final ByteBuffer on = ByteBuffer.allocate(c2 < newCapacity ? newCapacity : c2);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,221,impleEncodingHolder h = simpleEncodings.get(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,221,final SimpleEncodingHolder h = simpleEncodings.get(name);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,229,harset cs = Charset.forName(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,229,final Charset cs = Charset.forName(name);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,232, catch (UnsupportedCharsetException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,232,} catch (final UnsupportedCharsetException e) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,251,or (String alias : Charsets.UTF_8.aliases()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,251,for (final String alias : Charsets.UTF_8.aliases()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,217,"ap<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag ="
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,217,"final Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag ="
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,284,ipArchiveEntry[] allEntries = entries.toArray(new ZipArchiveEntry[entries.size()]);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,284,final ZipArchiveEntry[] allEntries = entries.toArray(new ZipArchiveEntry[entries.size()]);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,302,inkedList<ZipArchiveEntry> entriesOfThatName = nameMap.get(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,302,final LinkedList<ZipArchiveEntry> entriesOfThatName = nameMap.get(name);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,316,ist<ZipArchiveEntry> entriesOfThatName = nameMap.get(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,316,final List<ZipArchiveEntry> entriesOfThatName = nameMap.get(name);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,366,ffsetEntry offsetEntry = ((Entry) ze).getOffsetEntry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,367,ong start = offsetEntry.dataOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,366,final OffsetEntry offsetEntry = ((Entry) ze).getOffsetEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,367,final long start = offsetEntry.dataOffset;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,383,numeration<ZipArchiveEntry> src = getEntriesInPhysicalOrder();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,383,final Enumeration<ZipArchiveEntry> src = getEntriesInPhysicalOrder();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,385,ipArchiveEntry entry = src.nextElement();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,385,final ZipArchiveEntry entry = src.nextElement();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,406,ffsetEntry offsetEntry = ((Entry) ze).getOffsetEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,406,final OffsetEntry offsetEntry = ((Entry) ze).getOffsetEntry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,408,ong start = offsetEntry.dataOffset;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,409,oundedInputStream bis =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,408,final long start = offsetEntry.dataOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,409,final BoundedInputStream bis =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,472,yte[] symlinkBytes = IOUtils.toByteArray(in);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,472,final byte[] symlinkBytes = IOUtils.toByteArray(in);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,539,"ashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag ="
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,539,"final HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag ="
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,574,ffsetEntry offset = new OffsetEntry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,575,ntry ze = new Entry(offset);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,574,final OffsetEntry offset = new OffsetEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,575,final Entry ze = new Entry(offset);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,577,"nt versionMadeBy = ZipShort.getValue(CFH_BUF, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,577,"final int versionMadeBy = ZipShort.getValue(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,598,"ong time = ZipUtil.dosToJavaTime(ZipLong.getValue(CFH_BUF, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,598,"final long time = ZipUtil.dosToJavaTime(ZipLong.getValue(CFH_BUF, off));"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,611,"nt fileNameLen = ZipShort.getValue(CFH_BUF, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,611,"final int fileNameLen = ZipShort.getValue(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,614,"nt extraLen = ZipShort.getValue(CFH_BUF, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,614,"final int extraLen = ZipShort.getValue(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,617,"nt commentLen = ZipShort.getValue(CFH_BUF, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,617,"final int commentLen = ZipShort.getValue(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,620,"nt diskStart = ZipShort.getValue(CFH_BUF, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,620,"final int diskStart = ZipShort.getValue(CFH_BUF, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,629,yte[] fileName = new byte[fileNameLen];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,629,final byte[] fileName = new byte[fileNameLen];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,638,yte[] cdExtraData = new byte[extraLen];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,638,final byte[] cdExtraData = new byte[extraLen];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,644,yte[] comment = new byte[commentLen];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,644,final byte[] comment = new byte[commentLen];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,669,ip64ExtendedInformationExtraField z64 =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,669,final Zip64ExtendedInformationExtraField z64 =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,673,oolean hasUncompressedSize = ze.getSize() == ZIP64_MAGIC;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,674,oolean hasCompressedSize = ze.getCompressedSize() == ZIP64_MAGIC;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,675,oolean hasRelativeHeaderOffset =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,673,final boolean hasUncompressedSize = ze.getSize() == ZIP64_MAGIC;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,674,final boolean hasCompressedSize = ze.getCompressedSize() == ZIP64_MAGIC;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,675,final boolean hasRelativeHeaderOffset =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,803,oolean searchedForZip64EOCD =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,803,final boolean searchedForZip64EOCD =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,868,"oolean found = tryToLocateSignature(MIN_EOCD_SIZE, MAX_EOCD_SIZE,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,868,"final boolean found = tryToLocateSignature(MIN_EOCD_SIZE, MAX_EOCD_SIZE,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,922,nt skippedNow = archive.skipBytes(count - totalSkipped);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,922,final int skippedNow = archive.skipBytes(count - totalSkipped);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,955,or (ZipArchiveEntry zipArchiveEntry : entries) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,955,for (final ZipArchiveEntry zipArchiveEntry : entries) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,958,ntry ze = (Entry) zipArchiveEntry;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,959,ffsetEntry offsetEntry = ze.getOffsetEntry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,960,ong offset = offsetEntry.headerOffset;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,958,final Entry ze = (Entry) zipArchiveEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,959,final OffsetEntry offsetEntry = ze.getOffsetEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,960,final long offset = offsetEntry.headerOffset;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,963,nt fileNameLen = ZipShort.getValue(SHORT_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,963,final int fileNameLen = ZipShort.getValue(SHORT_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,965,nt extraFieldLen = ZipShort.getValue(SHORT_BUF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,965,final int extraFieldLen = ZipShort.getValue(SHORT_BUF);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,968,nt skipped = archive.skipBytes(lenToSkip);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,968,final int skipped = archive.skipBytes(lenToSkip);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,975,yte[] localExtraData = new byte[extraFieldLen];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,975,final byte[] localExtraData = new byte[extraFieldLen];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,982,ameAndComment nc = entriesWithoutUTF8Flag.get(ze);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,982,final NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,987,tring name = ze.getName();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,987,final String name = ze.getName();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1101,ntry ent1 = e1 instanceof Entry ? (Entry) e1 : null;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1102,ntry ent2 = e2 instanceof Entry ? (Entry) e2 : null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1101,final Entry ent1 = e1 instanceof Entry ? (Entry) e1 : null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1102,final Entry ent2 = e2 instanceof Entry ? (Entry) e2 : null;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1109,ong val = (ent1.getOffsetEntry().headerOffset
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1109,final long val = (ent1.getOffsetEntry().headerOffset
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1140,ntry otherEntry = (Entry) other;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,1140,final Entry otherEntry = (Entry) other;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,136,yte[] result = new byte[WORD];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,136,final byte[] result = new byte[WORD];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,210, catch (CloneNotSupportedException cnfe) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,210,} catch (final CloneNotSupportedException cnfe) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,176,"ap<Integer, ZipMethod> cte = new HashMap<Integer, ZipMethod>();"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,177,or (ZipMethod method : values()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,176,"final Map<Integer, ZipMethod> cte = new HashMap<Integer, ZipMethod>();"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java,177,for (final ZipMethod method : values()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,67,yte[] result = new byte[2];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,67,final byte[] result = new byte[2];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,87,yte[] result = new byte[2];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,87,final byte[] result = new byte[2];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,152, catch (CloneNotSupportedException cnfe) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,152,} catch (final CloneNotSupportedException cnfe) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,54,yte[] result = new byte[4];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,54,final byte[] result = new byte[4];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,76,nt year = c.get(Calendar.YEAR);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,76,final int year = c.get(Calendar.YEAR);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,81,nt month = c.get(Calendar.MONTH) + 1;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,82,ong value =  ((year - 1980) << 25)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,81,final int month = c.get(Calendar.MONTH) + 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,82,final long value =  ((year - 1980) << 25)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,120,yte x = array[i];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,120,final byte x = array[i];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,203,ong dosTime = zipDosTime.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,203,final long dosTime = zipDosTime.getValue();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,214,alendar cal = Calendar.getInstance();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,214,final Calendar cal = Calendar.getInstance();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,235,nicodePathExtraField name = (UnicodePathExtraField)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,235,final UnicodePathExtraField name = (UnicodePathExtraField)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,237,tring originalName = ze.getName();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,238,"tring newName = getUnicodeStringIfOriginalMatches(name,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,237,final String originalName = ze.getName();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,238,"final String newName = getUnicodeStringIfOriginalMatches(name,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,245,nicodeCommentExtraField cmt = (UnicodeCommentExtraField)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,245,final UnicodeCommentExtraField cmt = (UnicodeCommentExtraField)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,247,tring newComment =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,247,final String newComment =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,266,RC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,266,final CRC32 crc32 = new CRC32();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,268,ong origCRC32 = crc32.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,268,final long origCRC32 = crc32.getValue();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,274, catch (IOException ex) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,274,} catch (final IOException ex) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,292,yte[] to = new byte[from.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,292,final byte[] to = new byte[from.length];
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,348,ipMethod m = ZipMethod.getMethodByCode(ze.getMethod());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,348,final ZipMethod m = ZipMethod.getMethodByCode(ze.getMethod());
False,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,100,or (Iterator<Change> it = changes.iterator(); it.hasNext();) {
False,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,101,hange change = it.next();
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,100,for (final Iterator<Change> it = changes.iterator(); it.hasNext();) {
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,101,final Change change = it.next();
False,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,104,rchiveEntry entry = change.getEntry();
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,104,final ArchiveEntry entry = change.getEntry();
False,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,133,tring source = pChange.targetFile();
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,133,final String source = pChange.targetFile();
False,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,136,or (Iterator<Change> it = changes.iterator(); it.hasNext();) {
False,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,137,hange change = it.next();
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,136,for (final Iterator<Change> it = changes.iterator(); it.hasNext();) {
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,137,final Change change = it.next();
False,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,140,tring target = change.getEntry().getName();
True,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,src/main/java/org/apache/commons/compress/changes/ChangeSet.java,140,final String target = change.getEntry().getName();
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,114,hangeSetResults results = new ChangeSetResults();
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,114,final ChangeSetResults results = new ChangeSetResults();
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,116,et<Change> workingSet = new LinkedHashSet<Change>(changes);
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,116,final Set<Change> workingSet = new LinkedHashSet<Change>(changes);
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,118,or (Iterator<Change> it = workingSet.iterator(); it.hasNext();) {
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,119,hange change = it.next();
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,118,for (final Iterator<Change> it = workingSet.iterator(); it.hasNext();) {
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,119,final Change change = it.next();
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,129,rchiveEntry entry = entryIterator.next();
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,129,final ArchiveEntry entry = entryIterator.next();
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,132,or (Iterator<Change> it = workingSet.iterator(); it.hasNext();) {
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,133,hange change = it.next();
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,132,for (final Iterator<Change> it = workingSet.iterator(); it.hasNext();) {
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,133,final Change change = it.next();
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,163,or (Iterator<Change> it = workingSet.iterator(); it.hasNext();) {
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,164,hange change = it.next();
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,163,for (final Iterator<Change> it = workingSet.iterator(); it.hasNext();) {
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,164,final Change change = it.next();
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,188,tring source = entry.getName();
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,188,final String source = entry.getName();
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,191,or (Change change : workingSet) {
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,191,for (final Change change : workingSet) {
False,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,193,tring target = change.targetFile();
True,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java,193,final String target = change.targetFile();
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,217,"nt signatureLength = IOUtils.readFully(in, signature);"
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,217,"final int signatureLength = IOUtils.readFully(in, signature);"
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,254, catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,254,} catch (final IOException e) {
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,318, catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,318,} catch (final IOException e) {
False,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,366, catch (IOException e) {
True,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java,366,} catch (final IOException e) {
False,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,96,"or (Map.Entry<String, String> ent : uncompressSuffix.entrySet()) {"
False,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,97,nt cl = ent.getKey().length();
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,96,"for (final Map.Entry<String, String> ent : uncompressSuffix.entrySet()) {"
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,97,final int cl = ent.getKey().length();
False,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,105,tring u = ent.getValue();
False,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,106,nt ul = u.length();
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,105,final String u = ent.getValue();
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,106,final int ul = u.length();
False,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,163,tring suffix = uncompressSuffix.get(lower.substring(n - i));
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,163,final String suffix = uncompressSuffix.get(lower.substring(n - i));
False,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,187,tring suffix = compressSuffix.get(lower.substring(n - i));
True,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java,187,final String suffix = compressSuffix.get(lower.substring(n - i));
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,140,nt r = read0();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,140,final int r = read0();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,180,nt c = (destOffs == offs) ? -1 : (destOffs - offs);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,180,final int c = (destOffs == offs) ? -1 : (destOffs - offs);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,235,nt magic0 = this.in.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,235,final int magic0 = this.in.read();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,239,nt magic1 = this.in.read();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,240,nt magic2 = this.in.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,239,final int magic1 = this.in.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,240,final int magic2 = this.in.read();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,248,nt blockSize = this.in.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,248,final int blockSize = this.in.read();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,355,nputStream inShadow = this.in;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,355,final InputStream inShadow = this.in;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,375,nt thech = inShadow.read();
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,375,final int thech = inShadow.read();
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,838,nt su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,838,final int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,908,nt su_ch2Shadow = this.su_ch2;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java,908,final int su_ch2Shadow = this.su_ch2;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,171,nt tmp = heap[zz];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,171,final int tmp = heap[zz];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,180,nt n1 = heap[1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,180,final int n1 = heap[1];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,210,nt n2 = heap[1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,210,final int n2 = heap[1];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,499,utputStream outShadow = this.out;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,499,final OutputStream outShadow = this.out;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,507,utputStream outShadow = this.out;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,507,final OutputStream outShadow = this.out;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,540,oolean[] inUse = this.data.inUse;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,540,final boolean[] inUse = this.data.inUse;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,632,or (int hi = offs + len; offs < hi;) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,632,for (final int hi = offs + len; offs < hi;) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,679,nt ch = this.bsBuff >> 24;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,679,final int ch = this.bsBuff >> 24;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,717,yte[] len_t = len[t];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,717,final byte[] len_t = len[t];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,811,nt[] rfreqt = rfreq[t];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,811,final int[] rfreqt = rfreq[t];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,912,yte[] pos = dataShadow.sendMTFValues2_pos;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,912,final byte[] pos = dataShadow.sendMTFValues2_pos;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,925,yte tmp2 = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,925,final byte tmp2 = tmp;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,936,nt[][] code = this.data.sendMTFValues_code;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,937,yte[][] len = this.data.sendMTFValues_len;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,936,final int[][] code = this.data.sendMTFValues_code;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,937,final byte[][] len = this.data.sendMTFValues_len;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1050,yte[] len_t = len[t];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1050,final byte[] len_t = len[t];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1063,nt lti = len_t[i] & 0xff;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1063,final int lti = len_t[i] & 0xff;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1210,yte tmp2 = tmp;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1210,final byte tmp2 = tmp;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,35,"ap<String, String> uncompressSuffix ="
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java,35,"final Map<String, String> uncompressSuffix ="
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,278,nt tmp = fmap[i];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,279,nt ec_tmp = eclass[tmp];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,278,final int tmp = fmap[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,279,final int ec_tmp = eclass[tmp];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,289,nt tmp = fmap[i];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,290,nt ec_tmp = eclass[tmp];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,289,final int tmp = fmap[i];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,290,final int ec_tmp = eclass[tmp];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,304,nt zztmp = fmap[zz1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,304,final int zztmp = fmap[zz1];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,353,nt[] s = fpop(--sp);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,353,final int[] s = fpop(--sp);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,369,"ong r3 = r % 3, med;"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,369,final long r3 = r % 3;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,370,long med;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,499,itSet bhtab = new BitSet(nBhtab);
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,500,final BitSet bhtab = new BitSet(nBhtab);
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,786,nt t = fmap[p1];
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java,787,final int t = fmap[p1];
False,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,125,nt temp = (globalCrcShadow >> 24) ^ inCh;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java,125,final int temp = (globalCrcShadow >> 24) ^ inCh;
False,src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java,69,nt ret = in.read();
True,src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java,69,final int ret = in.read();
False,src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java,77,"nt ret = in.read(buf, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java,77,"final int ret = in.read(buf, off, len);"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,152,nt magic0 = in.read();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,153,nt magic1 = in.read();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,152,final int magic0 = in.read();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,153,final int magic1 = in.read();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,168,ataInputStream inData = new DataInputStream(in);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,169,nt method = inData.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,168,final DataInputStream inData = new DataInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,169,final int method = inData.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,175,nt flg = inData.readUnsignedByte();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,175,final int flg = inData.readUnsignedByte();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,237,yteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,237,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,287, catch (DataFormatException e) {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,287,} catch (final DataFormatException e) {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,305,nt skipAmount = bufUsed - inf.getRemaining();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,305,final int skipAmount = bufUsed - inf.getRemaining();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,312,ataInputStream inData = new DataInputStream(in);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,312,final DataInputStream inData = new DataInputStream(in);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,315,ong crcStored = readLittleEndianInt(inData);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,315,final long crcStored = readLittleEndianInt(inData);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,323,ong isize = readLittleEndianInt(inData);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,323,final long isize = readLittleEndianInt(inData);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,89,tring filename = parameters.getFilename();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,90,tring comment = parameters.getComment();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,89,final String filename = parameters.getFilename();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,90,final String comment = parameters.getComment();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,92,yteBuffer buffer = ByteBuffer.allocate(10);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,92,final ByteBuffer buffer = ByteBuffer.allocate(10);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,100,nt compressionLevel = parameters.getCompressionLevel();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,100,final int compressionLevel = parameters.getCompressionLevel();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,125,yteBuffer buffer = ByteBuffer.allocate(8);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,125,final ByteBuffer buffer = ByteBuffer.allocate(8);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,170,"nt length = deflater.deflate(deflateBuffer, 0, deflateBuffer.length);"
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,170,"final int length = deflater.deflate(deflateBuffer, 0, deflateBuffer.length);"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,37,"ap<String, String> uncompressSuffix ="
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java,37,"final Map<String, String> uncompressSuffix ="
False,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,54,nt ret = in.read();
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,54,final int ret = in.read();
False,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,62,"nt ret = in.read(buf, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java,62,"final int ret = in.read(buf, off, len);"
False,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,48,"ap<String, String> uncompressSuffix = new HashMap<String, String>();"
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,48,"final Map<String, String> uncompressSuffix = new HashMap<String, String>();"
False,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,55, catch (Exception ex) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,55,} catch (final Exception ex) {
False,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,102, catch (NoClassDefFoundError error) {
True,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java,102,} catch (final NoClassDefFoundError error) {
False,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,64,nt ret = read(oneByte);
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,64,final int ret = read(oneByte);
False,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,75,nt result = decompressNextSymbol();
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,75,final int result = decompressNextSymbol();
False,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,195,nt remainingInStack = outputStack.length - outputStackLocation;
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,195,final int remainingInStack = outputStack.length - outputStackLocation;
False,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,197,"nt maxLength = Math.min(remainingInStack, len);"
True,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java,197,"final int maxLength = Math.min(remainingInStack, len);"
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,174,arOutputStream jarOut = new JarOutputStream(streamBridge);
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,175,ack200.Unpacker u = Pack200.newUnpacker();
True,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,174,final JarOutputStream jarOut = new JarOutputStream(streamBridge);
True,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,175,final Pack200.Unpacker u = Pack200.newUnpacker();
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,218, catch (IOException ex) {
True,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,218,} catch (final IOException ex) {
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,227, catch (IOException ex) {
True,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java,227,} catch (final IOException ex) {
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,129,ack200.Packer p = Pack200.newPacker();
True,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java,129,final Pack200.Packer p = Pack200.newPacker();
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,134,"ile f = File.createTempFile(""commons-compress"", ""pack200normalize"");"
True,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,134,"final File f = File.createTempFile(""commons-compress"", ""pack200normalize"");"
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,140,ack200.Packer p = Pack200.newPacker();
True,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,140,final Pack200.Packer p = Pack200.newPacker();
False,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,147,ack200.Unpacker u = Pack200.newUnpacker();
True,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java,147,final Pack200.Unpacker u = Pack200.newUnpacker();
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,135,"nt amount = Math.min(uncompressedBytesRemaining, len);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,135,"final int amount = Math.min(uncompressedBytesRemaining, len);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,145,ong before = currentCompressedChunk.getBytesRead();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,145,final long before = currentCompressedChunk.getBytesRead();
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,163,nt type = readOneByte();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,163,final int type = readOneByte();
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,184,ong size = readSize() - 4 /* CRC */;
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,184,final long size = readSize() - 4 /* CRC */;
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,198,yte[] b = new byte[4];
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,199,"nt read = IOUtils.readFully(in, b);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,198,final byte[] b = new byte[4];
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,199,"final int read = IOUtils.readFully(in, b);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,233,nt size = readSize();
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,234,"ong read = IOUtils.skip(in, size);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,233,final int size = readSize();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,234,"final long read = IOUtils.skip(in, size);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,242,yte[] b = new byte[10];
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,243,"nt read = IOUtils.readFully(in, b);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,242,final byte[] b = new byte[10];
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,243,"final int read = IOUtils.readFully(in, b);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,251,nt b = in.read();
True,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java,251,final int b = in.read();
False,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,47,ong ret = crc;
True,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java,47,final long ret = crc;
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,137,"nt readable = Math.min(len, available());"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,137,"final int readable = Math.min(len, available());"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,310,"nt bytesRead = IOUtils.readFully(in, decompressBuf, writeIndex, length);"
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,310,"final int bytesRead = IOUtils.readFully(in, decompressBuf, writeIndex, length);"
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,343,nt offset = (int) off;
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,343,final int offset = (int) off;
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,346,yte lastChar = decompressBuf[writeIndex - 1];
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,346,final byte lastChar = decompressBuf[writeIndex - 1];
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,356,nt pad = length - (offset * fullRotations);
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,356,final int pad = length - (offset * fullRotations);
False,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,385,nt b = in.read();
True,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java,385,final int b = in.read();
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,104,nt ret = in.read();
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,104,final int ret = in.read();
False,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,111,"nt ret = in.read(buf, off, len);"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java,111,"final int ret = in.read(buf, off, len);"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,51,"ap<String, String> uncompressSuffix = new HashMap<String, String>();"
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,51,"final Map<String, String> uncompressSuffix = new HashMap<String, String>();"
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,59, catch (Exception ex) {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,59,} catch (final Exception ex) {
False,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,111, catch (NoClassDefFoundError error) {
True,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java,111,} catch (final NoClassDefFoundError error) {
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,43,nt firstByte = (int) in.readBits(8);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,44,nt secondByte = (int) in.readBits(8);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,45,nt thirdByte = (int) in.readBits(8);
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,43,final int firstByte = (int) in.readBits(8);
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,44,final int secondByte = (int) in.readBits(8);
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,45,final int thirdByte = (int) in.readBits(8);
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,70,nt code = super.readNextCode();
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,70,final int code = super.readNextCode();
False,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,101,"nt r = addEntry(previousCode, character, maxTableSize);"
True,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java,101,"final int r = addEntry(previousCode, character, maxTableSize);"
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,47,tringBuilder sb = new StringBuilder();
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,47,final StringBuilder sb = new StringBuilder();
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,49,tring size = Long.toString(entry.getSize());
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,49,final String size = Long.toString(entry.getSize());
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,74, catch (UnsupportedEncodingException e) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,74,} catch (final UnsupportedEncodingException e) {
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,101, catch (UnsupportedEncodingException e) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,101,} catch (final UnsupportedEncodingException e) {
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,115, catch (UnsupportedEncodingException e) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,115,} catch (final UnsupportedEncodingException e) {
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,131, catch (UnsupportedEncodingException e) {
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,131,} catch (final UnsupportedEncodingException e) {
False,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,152,nt minLen=length1 < length2 ? length1 : length2;
True,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java,152,final int minLen=length1 < length2 ? length1 : length2;
False,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,55,nt ret = in.read();
True,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,55,final int ret = in.read();
False,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,85,"nt ret = in.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,src/main/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStream.java,85,"final int ret = in.read(b, off, len);"
False,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,39,nt r = in.read();
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,39,final int r = in.read();
False,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,51,"nt r = in.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,src/main/java/org/apache/commons/compress/utils/CountingInputStream.java,51,"final int r = in.read(b, off, len);"
False,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,101,ong available = numToSkip;
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,101,final long available = numToSkip;
False,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,103,ong skipped = input.skip(numToSkip);
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,103,final long skipped = input.skip(numToSkip);
False,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,111,"nt read = readFully(input, SKIP_BUF, 0,"
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,111,"final int read = readFully(input, SKIP_BUF, 0,"
False,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,202, catch (IOException ignored) { // NOPMD
True,src/main/java/org/apache/commons/compress/utils/IOUtils.java,src/main/java/org/apache/commons/compress/utils/IOUtils.java,202,} catch (final IOException ignored) { // NOPMD
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,64,"ile f = File.createTempFile(name, """");"
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,64,"final File f = File.createTempFile(name, """");"
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,71,RL url = AbstractTestCase.class.getClassLoader().getResource(path);
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,71,final URL url = AbstractTestCase.class.getClassLoader().getResource(path);
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,78, catch (java.net.URISyntaxException ex) {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,78,} catch (final java.net.URISyntaxException ex) {
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,96,tring[] s = f.list();
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,96,final String[] s = f.list();
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,98,or (String element : s) {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,98,for (final String element : s) {
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,103,oolean ok = tryHardToDelete(file);
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,103,final boolean ok = tryHardToDelete(file);
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,133, catch (InterruptedException ex) {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,133,} catch (final InterruptedException ex) {
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,214,"rchiveEntry entry = out.createArchiveEntry(infile, filename);"
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,214,"final ArchiveEntry entry = out.createArchiveEntry(infile, filename);"
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,320,"ile result = mkdir(""dir-result"");"
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,320,"final File result = mkdir(""dir-result"");"
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,326,"ile outfile = new File(result.getCanonicalPath() + ""/result/"""
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,326,"final File outfile = new File(result.getCanonicalPath() + ""/result/"""
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,333,utputStream out = new FileOutputStream(outfile);
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,333,final OutputStream out = new FileOutputStream(outfile);
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,384,ile tmpDir = createTempDir();
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,385,"ile tmpFile = File.createTempFile(""testfile"", """", tmpDir);"
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,384,final File tmpDir = createTempDir();
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,385,"final File tmpFile = File.createTempFile(""testfile"", """", tmpDir);"
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,387,ileOutputStream fos = new FileOutputStream(tmpFile);
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,387,final FileOutputStream fos = new FileOutputStream(tmpFile);
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,397,"ile tmpDir = mkdir(""testdir"");"
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,397,"final File tmpDir = mkdir(""testdir"");"
False,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,406, catch (IOException ignored) {
True,src/test/java/org/apache/commons/compress/AbstractTestCase.java,src/test/java/org/apache/commons/compress/AbstractTestCase.java,406,} catch (final IOException ignored) {
False,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,63,"ile listing= new File(ARCDIR,""files.txt"");"
True,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,63,"final File listing= new File(ARCDIR,""files.txt"");"
False,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,65,ufferedReader br = new BufferedReader(new FileReader(listing));
True,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,65,final BufferedReader br = new BufferedReader(new FileReader(listing));
False,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,78,ollection<Object[]> params = new ArrayList<Object[]>();
False,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,79,or (String f : ARCDIR.list(new FilenameFilter() {
True,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,78,final Collection<Object[]> params = new ArrayList<Object[]>();
True,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,79,for (final String f : ARCDIR.list(new FilenameFilter() {
True,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,100,final
False,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,103, catch (ArchiveException e) {
True,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,104,} catch (final ArchiveException e) {
False,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,105, catch (AssertionError e) { // show error in context
True,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,src/test/java/org/apache/commons/compress/ArchiveReadTest.java,106,} catch (final AssertionError e) { // show error in context
False,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,40,"yte[] buffer1 = {1,2,3};"
False,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,41,"yte[] buffer2 = {1,2,3,0};"
False,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,42,"yte[] buffer3 = {1,2,3};"
True,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,40,"final byte[] buffer1 = {1,2,3};"
True,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,41,"final byte[] buffer2 = {1,2,3,0};"
True,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,42,"final byte[] buffer3 = {1,2,3};"
False,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,55,"yte[] buffer1 = {'a','b','c'};"
False,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,56,"yte[] buffer2 = {'d','e','f',0};"
True,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,55,"final byte[] buffer1 = {'a','b','c'};"
True,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,56,"final byte[] buffer2 = {'d','e','f',0};"
False,src/test/java/org/apache/commons/compress/ChainingTestCase.java,src/test/java/org/apache/commons/compress/ChainingTestCase.java,37,"ile file = getFile(""bla.tgz"");"
True,src/test/java/org/apache/commons/compress/ChainingTestCase.java,src/test/java/org/apache/commons/compress/ChainingTestCase.java,37,"final File file = getFile(""bla.tgz"");"
False,src/test/java/org/apache/commons/compress/ChainingTestCase.java,src/test/java/org/apache/commons/compress/ChainingTestCase.java,47,"ile file = getFile(""bla.tar.bz2"");"
True,src/test/java/org/apache/commons/compress/ChainingTestCase.java,src/test/java/org/apache/commons/compress/ChainingTestCase.java,47,"final File file = getFile(""bla.tar.bz2"");"
False,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,46, catch (ArchiveException e) {
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,46,} catch (final ArchiveException e) {
False,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,133,ile ar = createEmptyArchive(type); // will be deleted by tearDown()
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,133,final File ar = createEmptyArchive(type); // will be deleted by tearDown()
False,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,140, catch (ArchiveException ae) {
True,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,140,} catch (final ArchiveException ae) {
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,57,"rchiveEntry entry = new ArArchiveEntry(""dummy"", bytesToTest);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,57,"final ArchiveEntry entry = new ArArchiveEntry(""dummy"", bytesToTest);"
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,63,"rchiveEntry entry = new CpioArchiveEntry(""dummy"", bytesToTest);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,63,"final ArchiveEntry entry = new CpioArchiveEntry(""dummy"", bytesToTest);"
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,69,"rchiveEntry entry = new JarArchiveEntry(""dummy"");"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,69,"final ArchiveEntry entry = new JarArchiveEntry(""dummy"");"
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,75,"arArchiveEntry entry = new TarArchiveEntry(""dummy"");"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,75,"final TarArchiveEntry entry = new TarArchiveEntry(""dummy"");"
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,82,"rchiveEntry entry = new ZipArchiveEntry(""dummy"");"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,82,"final ArchiveEntry entry = new ZipArchiveEntry(""dummy"");"
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,112,utputStream out1 = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,113,utputStream out2 = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,114,utputStream out3 = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,115,"rchiveOutputStream aos1 = factory.createArchiveOutputStream(archiverName, out1);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,112,final OutputStream out1 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,113,final OutputStream out2 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,114,final OutputStream out3 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,115,"final ArchiveOutputStream aos1 = factory.createArchiveOutputStream(archiverName, out1);"
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,117,"rchiveOutputStream aos2 = factory.createArchiveOutputStream(archiverName, out2);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,117,"final ArchiveOutputStream aos2 = factory.createArchiveOutputStream(archiverName, out2);"
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,119,"rchiveOutputStream aos3 = factory.createArchiveOutputStream(archiverName, out3);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,119,"final ArchiveOutputStream aos3 = factory.createArchiveOutputStream(archiverName, out3);"
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,121,or (byte element : byteTest) {
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,121,for (final byte element : byteTest) {
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,143,utputStream out1 = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,144,utputStream out2 = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,145,utputStream out3 = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,146,ile file = createSingleEntryArchive(archiverName);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,143,final OutputStream out1 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,144,final OutputStream out2 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,145,final OutputStream out3 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,146,final File file = createSingleEntryArchive(archiverName);
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,149,nputStream is1 = new FileInputStream(file);
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,150,"rchiveInputStream ais1 = factory.createArchiveInputStream(archiverName, is1);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,149,final InputStream is1 = new FileInputStream(file);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,150,"final ArchiveInputStream ais1 = factory.createArchiveInputStream(archiverName, is1);"
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,154,yte [] buff = new byte[10]; // small so multiple reads are needed;
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,155,ong size = nextEntry.getSize();
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,154,final byte [] buff = new byte[10]; // small so multiple reads are needed;
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,155,final long size = nextEntry.getSize();
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,160,nputStream is2 = new FileInputStream(file);
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,161,"rchiveInputStream ais2 = factory.createArchiveInputStream(archiverName, is2);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,160,final InputStream is2 = new FileInputStream(file);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,161,"final ArchiveInputStream ais2 = factory.createArchiveInputStream(archiverName, is2);"
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,166,nputStream is3 = new FileInputStream(file);
False,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,167,"rchiveInputStream ais3 = factory.createArchiveInputStream(archiverName, is3);"
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,166,final InputStream is3 = new FileInputStream(file);
True,src/test/java/org/apache/commons/compress/IOMethodsTest.java,src/test/java/org/apache/commons/compress/IOMethodsTest.java,167,"final ArchiveInputStream ais3 = factory.createArchiveInputStream(archiverName, is3);"
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,87,"ile target = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,87,"final File target = new File(dir, entry.getName());"
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,195,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,195,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,203,ong beforeArchiveWrite = tmp[0].lastModified();
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,204,"rArchiveEntry in = new ArArchiveEntry(tmp[0], ""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,203,final long beforeArchiveWrite = tmp[0].lastModified();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,204,"final ArArchiveEntry in = new ArArchiveEntry(tmp[0], ""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,210,rArchiveEntry out = ais.getNextArEntry();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,210,final ArArchiveEntry out = ais.getNextArEntry();
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,237,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,237,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,245,ong beforeArchiveWrite = tmp[0].lastModified();
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,246,"rArchiveEntry in = new ArArchiveEntry(""foo"", 0, 0, 0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,245,final long beforeArchiveWrite = tmp[0].lastModified();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,246,"final ArArchiveEntry in = new ArArchiveEntry(""foo"", 0, 0, 0, 0,"
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,253,rArchiveEntry out = ais.getNextArEntry();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,253,final ArArchiveEntry out = ais.getNextArEntry();
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,277,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,277,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,286,"rArchiveEntry in = new ArArchiveEntry(tmp[1], ""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,286,"final ArArchiveEntry in = new ArArchiveEntry(tmp[1], ""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,288,yte[] b = new byte[(int) tmp[1].length()];
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,288,final byte[] b = new byte[(int) tmp[1].length()];
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,299,rArchiveEntry out = ais.getNextArEntry();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,299,final ArArchiveEntry out = ais.getNextArEntry();
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,327,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,327,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,336,"rArchiveEntry in = new ArArchiveEntry(""foo"", tmp[1].length(),"
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,336,"final ArArchiveEntry in = new ArArchiveEntry(""foo"", tmp[1].length(),"
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,340,yte[] b = new byte[(int) tmp[1].length()];
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,340,final byte[] b = new byte[(int) tmp[1].length()];
False,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,351,rArchiveEntry out = ais.getNextArEntry();
True,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,351,final ArArchiveEntry out = ais.getNextArEntry();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,43,utputStream out1 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,43,final OutputStream out1 = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,50, catch (IOException io) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,50,} catch (final IOException io) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,59, catch (IOException io) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,59,} catch (final IOException io) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,68, catch (IOException io) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,68,} catch (final IOException io) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,77, catch (IOException io) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,77,} catch (final IOException io) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,86, catch (IOException io) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,86,} catch (final IOException io) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,93,utputStream out1 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,93,final OutputStream out1 = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,107, catch (IOException io) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,107,} catch (final IOException io) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,138,utputStream out1 = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,139,"ile dummy = getFile(""test1.xml""); // need a real file"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,138,final OutputStream out1 = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,139,"final File dummy = getFile(""test1.xml""); // need a real file"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,156, catch (IOException expected) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,156,} catch (final IOException expected) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,169, catch (IOException expected) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,169,} catch (final IOException expected) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,174, catch (IOException expected) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,174,} catch (final IOException expected) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,180, catch (IOException expected) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,180,} catch (final IOException expected) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,187, catch (IOException expected) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,187,} catch (final IOException expected) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,56, catch (ArchiveException ae) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,56,} catch (final ArchiveException ae) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,66,"ileInputStream fis = new FileInputStream(""src/test/resources/testAIFF.aif"");"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,66,"final FileInputStream fis = new FileInputStream(""src/test/resources/testAIFF.aif"");"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,68,nputStream is = new BufferedInputStream(fis);
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,68,final InputStream is = new BufferedInputStream(fis);
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,72, catch (ArchiveException ae) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,72,} catch (final ArchiveException ae) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,84,"ileInputStream fis = new FileInputStream(""src/test/resources/testCompress209.doc"");"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,84,"final FileInputStream fis = new FileInputStream(""src/test/resources/testCompress209.doc"");"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,86,nputStream bis = new BufferedInputStream(fis);
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,86,final InputStream bis = new BufferedInputStream(fis);
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,90, catch (ArchiveException ae) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,90,} catch (final ArchiveException ae) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,121,"ileInputStream fis = new FileInputStream(""src/test/resources/bla.7z"");"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,121,"final FileInputStream fis = new FileInputStream(""src/test/resources/bla.7z"");"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,123,nputStream bis = new BufferedInputStream(fis);
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,123,final InputStream bis = new BufferedInputStream(fis);
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,127, catch (StreamingNotSupportedException ex) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,127,} catch (final StreamingNotSupportedException ex) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,144,"ileInputStream fis = new FileInputStream(""src/test/resources/COMPRESS-208.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,144,"final FileInputStream fis = new FileInputStream(""src/test/resources/COMPRESS-208.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,146,nputStream bis = new BufferedInputStream(fis);
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,146,final InputStream bis = new BufferedInputStream(fis);
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,148,rchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(bis);
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,148,final ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(bis);
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,186, catch (IllegalStateException ise) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,186,} catch (final IllegalStateException ise) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,210,rchiveStreamFactory fac = new ArchiveStreamFactory();
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,210,final ArchiveStreamFactory fac = new ArchiveStreamFactory();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,236, catch (ArchiveException e) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,236,} catch (final ArchiveException e) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,238, catch (Exception e) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,238,} catch (final Exception e) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,245, catch (ArchiveException e) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,245,} catch (final ArchiveException e) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,247, catch (Exception e) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,247,} catch (final Exception e) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,295,estData test = TESTS[i-1];
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,296,"rchiveInputStream ais = getInputStreamFor(test.testFile, test.fac);"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,295,final TestData test = TESTS[i-1];
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,296,"final ArchiveInputStream ais = getInputStreamFor(test.testFile, test.fac);"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,312,estData test = TESTS[i-1];
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,313,"rchiveInputStream ais = getInputStreamFor(test.type, test.testFile, test.fac);"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,312,final TestData test = TESTS[i-1];
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,313,"final ArchiveInputStream ais = getInputStreamFor(test.type, test.testFile, test.fac);"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,329,estData test = TESTS[i-1];
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,329,final TestData test = TESTS[i-1];
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,331,"rchiveOutputStream ais = getOutputStreamFor(test.type, test.fac);"
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,331,"final ArchiveOutputStream ais = getOutputStreamFor(test.type, test.fac);"
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,353,lass<?> cls = instance.getClass();
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,353,final Class<?> cls = instance.getClass();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,357, catch (NoSuchFieldException nsfe) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,357,} catch (final NoSuchFieldException nsfe) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,360, catch (NoSuchFieldException e) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,360,} catch (final NoSuchFieldException e) {
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,365,oolean isAccessible = fld.isAccessible();
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,365,final boolean isAccessible = fld.isAccessible();
False,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,376, catch (Exception e) {
True,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,376,} catch (final Exception e) {
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,95,"ap<String, File> result = new HashMap<String, File>();"
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,95,"final Map<String, File> result = new HashMap<String, File>();"
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,98,"ile cpioget = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,98,"final File cpioget = new File(dir, entry.getName());"
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,118,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,118,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,126,ong beforeArchiveWrite = tmp[0].lastModified();
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,127,"pioArchiveEntry in = new CpioArchiveEntry(tmp[0], ""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,126,final long beforeArchiveWrite = tmp[0].lastModified();
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,127,"final CpioArchiveEntry in = new CpioArchiveEntry(tmp[0], ""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,133,pioArchiveEntry out = tis.getNextCPIOEntry();
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,133,final CpioArchiveEntry out = tis.getNextCPIOEntry();
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,158,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,158,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,166,ong beforeArchiveWrite = tmp[0].lastModified();
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,167,"pioArchiveEntry in = new CpioArchiveEntry(""foo/"");"
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,166,final long beforeArchiveWrite = tmp[0].lastModified();
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,167,"final CpioArchiveEntry in = new CpioArchiveEntry(""foo/"");"
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,175,pioArchiveEntry out = tis.getNextCPIOEntry();
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,175,final CpioArchiveEntry out = tis.getNextCPIOEntry();
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,199,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,199,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,208,"pioArchiveEntry in = new CpioArchiveEntry(tmp[1], ""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,208,"final CpioArchiveEntry in = new CpioArchiveEntry(tmp[1], ""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,210,yte[] b = new byte[(int) tmp[1].length()];
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,210,final byte[] b = new byte[(int) tmp[1].length()];
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,221,pioArchiveEntry out = tis.getNextCPIOEntry();
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,221,final CpioArchiveEntry out = tis.getNextCPIOEntry();
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,248,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,248,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,257,"pioArchiveEntry in = new CpioArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,257,"final CpioArchiveEntry in = new CpioArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,262,yte[] b = new byte[(int) tmp[1].length()];
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,262,final byte[] b = new byte[(int) tmp[1].length()];
False,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,273,pioArchiveEntry out = tis.getNextCPIOEntry();
True,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java,273,final CpioArchiveEntry out = tis.getNextCPIOEntry();
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,58,"ile archiveEntry = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,58,"final File archiveEntry = new File(dir, entry.getName());"
False,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,115,rrayList<String> expected = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java,115,final ArrayList<String> expected = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,38,catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,38,}catch (final IllegalArgumentException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,40, catch (ArchiveException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,40,} catch (final ArchiveException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,50,catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,50,}catch (final IllegalArgumentException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,52, catch (ArchiveException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,52,} catch (final ArchiveException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,62, catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,62,} catch (final IllegalArgumentException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,64, catch (ArchiveException e){
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,64,} catch (final ArchiveException e){
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,74, catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,74,} catch (final IllegalArgumentException e) {
False,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,76, catch (ArchiveException e) {
True,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java,76,} catch (final ArchiveException e) {
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,96,"ile archiveEntry = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,96,"final File archiveEntry = new File(dir, entry.getName());"
False,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,103,utputStream out = new FileOutputStream(archiveEntry);
True,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,src/test/java/org/apache/commons/compress/archivers/JarTestCase.java,103,final OutputStream out = new FileOutputStream(archiveEntry);
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,70,"ile listing= new File(ARCDIR,""files.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,70,"final File listing= new File(ARCDIR,""files.txt"");"
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,72,ufferedReader br = new BufferedReader(new FileReader(listing));
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,72,final BufferedReader br = new BufferedReader(new FileReader(listing));
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,84,ollection<Object[]> params = new ArrayList<Object[]>();
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,85,or (String f : ARCDIR.list(new FilenameFilter() {
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,84,final Collection<Object[]> params = new ArrayList<Object[]>();
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,85,for (final String f : ARCDIR.list(new FilenameFilter() {
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,100,arArchiveEntry tarEntry = (TarArchiveEntry) entry;
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,100,final TarArchiveEntry tarEntry = (TarArchiveEntry) entry;
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,111,final
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,112,tring name = file.getName();
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,113,final String name = file.getName();
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,117,rchiveInputStream ais = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(file)));
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,118,final ArchiveInputStream ais = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(file)));
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,127,tring ent = expected.get(i);
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,128,final String ent = expected.get(i);
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,136,or (String ent : FILELIST) {
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,137,for (final String ent : FILELIST) {
False,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,151, catch (AssertionFailedError e) {
True,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,src/test/java/org/apache/commons/compress/archivers/LongPathTest.java,152,} catch (final AssertionFailedError e) {
False,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,70,"ile listing= new File(ARCDIR,""files.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,70,"final File listing= new File(ARCDIR,""files.txt"");"
False,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,72,ufferedReader br = new BufferedReader(new FileReader(listing));
True,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,72,final BufferedReader br = new BufferedReader(new FileReader(listing));
False,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,84,ollection<Object[]> params = new ArrayList<Object[]>();
False,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,85,or (String f : ARCDIR.list(new FilenameFilter() {
True,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,84,final Collection<Object[]> params = new ArrayList<Object[]>();
True,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,85,for (final String f : ARCDIR.list(new FilenameFilter() {
False,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,101,arArchiveEntry tarEntry = (TarArchiveEntry) entry;
True,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,101,final TarArchiveEntry tarEntry = (TarArchiveEntry) entry;
True,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,112,final
False,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,113,tring name = file.getName();
True,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,114,final String name = file.getName();
False,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,118,rchiveInputStream ais = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(file)));
True,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,119,final ArchiveInputStream ais = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(file)));
False,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,128,tring ent = expected.get(i);
True,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,129,final String ent = expected.get(i);
False,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,137,or (String ent : FILELIST) {
True,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,138,for (final String ent : FILELIST) {
False,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,152, catch (AssertionFailedError e) {
True,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java,153,} catch (final AssertionFailedError e) {
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,62,"tring name = ""testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml"";"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,63,yte[] bytes = name.getBytes(CharsetNames.UTF_8);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,62,"final String name = ""testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml"";"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,63,final byte[] bytes = name.getBytes(CharsetNames.UTF_8);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,79,ileInputStream in = new FileInputStream(file1);
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,79,final FileInputStream in = new FileInputStream(file1);
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,89,"tring toLongName = ""testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml"";"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,89,"final String toLongName = ""testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml"";"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,104, catch(IOException e) {
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,104,} catch(final IOException e) {
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,140,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,140,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,148,ong beforeArchiveWrite = tmp[0].lastModified();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,149,"arArchiveEntry in = new TarArchiveEntry(tmp[0], ""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,148,final long beforeArchiveWrite = tmp[0].lastModified();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,149,"final TarArchiveEntry in = new TarArchiveEntry(tmp[0], ""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,155,arArchiveEntry out = tis.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,155,final TarArchiveEntry out = tis.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,180,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,180,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,188,ong beforeArchiveWrite = tmp[0].lastModified();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,189,"arArchiveEntry in = new TarArchiveEntry(""foo/"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,188,final long beforeArchiveWrite = tmp[0].lastModified();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,189,"final TarArchiveEntry in = new TarArchiveEntry(""foo/"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,196,arArchiveEntry out = tis.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,196,final TarArchiveEntry out = tis.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,220,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,220,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,229,"arArchiveEntry in = new TarArchiveEntry(tmp[1], ""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,229,"final TarArchiveEntry in = new TarArchiveEntry(tmp[1], ""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,231,yte[] b = new byte[(int) tmp[1].length()];
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,231,final byte[] b = new byte[(int) tmp[1].length()];
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,242,arArchiveEntry out = tis.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,242,final TarArchiveEntry out = tis.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,269,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,269,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,278,"arArchiveEntry in = new TarArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,278,"final TarArchiveEntry in = new TarArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,282,yte[] b = new byte[(int) tmp[1].length()];
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,282,final byte[] b = new byte[(int) tmp[1].length()];
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,293,arArchiveEntry out = tis.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,293,final TarArchiveEntry out = tis.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,326, catch (IOException e) {
False,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,327,hrowable t = e.getCause();
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,326,} catch (final IOException e) {
True,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,327,final Throwable t = e.getCause();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,80,ist<File> results = new ArrayList<File>();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,80,final List<File> results = new ArrayList<File>();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,90,"ile outfile = new File(resultDir.getCanonicalPath() + ""/result/"" + entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,90,"final File outfile = new File(resultDir.getCanonicalPath() + ""/result/"" + entry.getName());"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,92,utputStream o = new FileOutputStream(outfile);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,92,final OutputStream o = new FileOutputStream(outfile);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,138,nputStream is = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,139,rrayList<String> al = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,138,final InputStream is = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,139,final ArrayList<String> al = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,162,"ipFile moby = new ZipFile(getFile(""moby.zip""));"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,163,"ipArchiveEntry entry = moby.getEntry(""README"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,162,"final ZipFile moby = new ZipFile(getFile(""moby.zip""));"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,163,"final ZipArchiveEntry entry = moby.getEntry(""README"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,180,ipArchiveInputStream zip =
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,180,final ZipArchiveInputStream zip =
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,183,ipArchiveEntry entry = zip.getNextZipEntry();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,183,final ZipArchiveEntry entry = zip.getNextZipEntry();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,189, catch (IOException e) {
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,189,} catch (final IOException e) {
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,211,ist<String> results = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,211,final List<String> results = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,222,"rchiveInputStream nestedIn = new ArchiveStreamFactory().createArchiveInputStream(""zip"", in);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,222,"final ArchiveInputStream nestedIn = new ArchiveStreamFactory().createArchiveInputStream(""zip"", in);"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,244,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,244,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,252,ong beforeArchiveWrite = tmp[0].lastModified();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,253,"ipArchiveEntry in = new ZipArchiveEntry(tmp[0], ""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,252,final long beforeArchiveWrite = tmp[0].lastModified();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,253,"final ZipArchiveEntry in = new ZipArchiveEntry(tmp[0], ""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,259,"ipArchiveEntry out = zf.getEntry(""foo/"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,259,"final ZipArchiveEntry out = zf.getEntry(""foo/"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,280,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,280,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,288,ong beforeArchiveWrite = tmp[0].lastModified();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,289,"ipArchiveEntry in = new ZipArchiveEntry(""foo/"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,288,final long beforeArchiveWrite = tmp[0].lastModified();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,289,"final ZipArchiveEntry in = new ZipArchiveEntry(""foo/"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,296,"ipArchiveEntry out = zf.getEntry(""foo/"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,296,"final ZipArchiveEntry out = zf.getEntry(""foo/"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,326,ile[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,327,"ile reference = createReferenceFile(tmp[0], Zip64Mode.Never, ""expected."");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,326,final File[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,327,"final File reference = createReferenceFile(tmp[0], Zip64Mode.Never, ""expected."");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,329,"ile a1 = File.createTempFile(""src1."", "".zip"", tmp[0]);"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,330,ipArchiveOutputStream zos = new ZipArchiveOutputStream(a1);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,329,"final File a1 = File.createTempFile(""src1."", "".zip"", tmp[0]);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,330,final ZipArchiveOutputStream zos = new ZipArchiveOutputStream(a1);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,334,"ile a2 = File.createTempFile(""src2."", "".zip"", tmp[0]);"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,335,ipArchiveOutputStream zos1 = new ZipArchiveOutputStream(a2);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,334,"final File a2 = File.createTempFile(""src2."", "".zip"", tmp[0]);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,335,final ZipArchiveOutputStream zos1 = new ZipArchiveOutputStream(a2);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,339,ipFile zf1 = new ZipFile(a1);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,340,ipFile zf2 = new ZipFile(a2);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,341,"ile fileResult = File.createTempFile(""file-actual."", "".zip"", tmp[0]);"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,342,ipArchiveOutputStream zos2 = new ZipArchiveOutputStream(fileResult);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,339,final ZipFile zf1 = new ZipFile(a1);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,340,final ZipFile zf2 = new ZipFile(a2);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,341,"final File fileResult = File.createTempFile(""file-actual."", "".zip"", tmp[0]);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,342,final ZipArchiveOutputStream zos2 = new ZipArchiveOutputStream(fileResult);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,358,ile[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,359,"ile reference = File.createTempFile(""z64reference."", "".zip"", tmp[0]);"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,360,ipArchiveOutputStream zos1 = new ZipArchiveOutputStream(reference);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,358,final File[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,359,"final File reference = File.createTempFile(""z64reference."", "".zip"", tmp[0]);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,360,final ZipArchiveOutputStream zos1 = new ZipArchiveOutputStream(reference);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,365,"ile a1 = File.createTempFile(""zip64src."", "".zip"", tmp[0]);"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,366,ipArchiveOutputStream zos = new ZipArchiveOutputStream(a1);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,365,"final File a1 = File.createTempFile(""zip64src."", "".zip"", tmp[0]);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,366,final ZipArchiveOutputStream zos = new ZipArchiveOutputStream(a1);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,370,ipFile zf1 = new ZipFile(a1);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,371,"ile fileResult = File.createTempFile(""file-actual."", "".zip"", tmp[0]);"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,372,ipArchiveOutputStream zos2 = new ZipArchiveOutputStream(fileResult);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,370,final ZipFile zf1 = new ZipFile(a1);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,371,"final File fileResult = File.createTempFile(""file-actual."", "".zip"", tmp[0]);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,372,final ZipArchiveOutputStream zos2 = new ZipArchiveOutputStream(fileResult);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,383,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,383,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,385,"ile a1 = File.createTempFile(""unixModeBits."", "".zip"", tmp[0]);"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,386,ipArchiveOutputStream zos = new ZipArchiveOutputStream(a1);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,385,"final File a1 = File.createTempFile(""unixModeBits."", "".zip"", tmp[0]);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,386,final ZipArchiveOutputStream zos = new ZipArchiveOutputStream(a1);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,388,"ipArchiveEntry archiveEntry = new ZipArchiveEntry(""fred"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,388,"final ZipArchiveEntry archiveEntry = new ZipArchiveEntry(""fred"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,394,ipFile zf1 = new ZipFile(a1);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,395,"ipArchiveEntry fred = zf1.getEntry(""fred"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,394,final ZipFile zf1 = new ZipFile(a1);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,395,"final ZipArchiveEntry fred = zf1.getEntry(""fred"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,401,"ile reference = File.createTempFile(prefix, "".zip"", directory);"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,402,ipArchiveOutputStream zos = new ZipArchiveOutputStream(reference);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,401,"final File reference = File.createTempFile(prefix, "".zip"", directory);"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,402,final ZipArchiveOutputStream zos = new ZipArchiveOutputStream(reference);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,422,"nt size = (int) Math.max(expectedFile.length(), actualFile.length());"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,423,ipFile expected = new ZipFile(expectedFile);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,424,ipFile actual = new ZipFile(actualFile);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,425,yte[] expectedBuf = new byte[size];
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,426,yte[] actualBuf = new byte[size];
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,422,"final int size = (int) Math.max(expectedFile.length(), actualFile.length());"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,423,final ZipFile expected = new ZipFile(expectedFile);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,424,final ZipFile actual = new ZipFile(actualFile);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,425,final byte[] expectedBuf = new byte[size];
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,426,final byte[] actualBuf = new byte[size];
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,428,numeration<ZipArchiveEntry> actualInOrder = actual.getEntriesInPhysicalOrder();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,429,numeration<ZipArchiveEntry> expectedInOrder = expected.getEntriesInPhysicalOrder();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,428,final Enumeration<ZipArchiveEntry> actualInOrder = actual.getEntriesInPhysicalOrder();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,429,final Enumeration<ZipArchiveEntry> expectedInOrder = expected.getEntriesInPhysicalOrder();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,432,ipArchiveEntry actualElement = actualInOrder.nextElement();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,433,ipArchiveEntry expectedElement = expectedInOrder.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,432,final ZipArchiveEntry actualElement = actualInOrder.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,433,final ZipArchiveEntry expectedElement = expectedInOrder.nextElement();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,445,nputStream actualIs = actual.getInputStream(actualElement);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,446,nputStream expectedIs = expected.getInputStream(expectedElement);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,445,final InputStream actualIs = actual.getInputStream(actualElement);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,446,final InputStream expectedIs = expected.getInputStream(expectedElement);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,461,ipArchiveEntry in = new ZipArchiveEntry(name);
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,461,final ZipArchiveEntry in = new ZipArchiveEntry(name);
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,470,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,470,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,479,"ipArchiveEntry in = new ZipArchiveEntry(tmp[1], ""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,479,"final ZipArchiveEntry in = new ZipArchiveEntry(tmp[1], ""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,481,yte[] b = new byte[(int) tmp[1].length()];
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,481,final byte[] b = new byte[(int) tmp[1].length()];
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,492,"ipArchiveEntry out = zf.getEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,492,"final ZipArchiveEntry out = zf.getEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,515,ile[] tmp = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,515,final File[] tmp = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,524,"ipArchiveEntry in = new ZipArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,524,"final ZipArchiveEntry in = new ZipArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,528,yte[] b = new byte[(int) tmp[1].length()];
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,528,final byte[] b = new byte[(int) tmp[1].length()];
False,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,539,"ipArchiveEntry out = zf.getEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,539,"final ZipArchiveEntry out = zf.getEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,44,ileInputStream fis = new FileInputStream(getFile(archive));
True,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,44,final FileInputStream fis = new FileInputStream(getFile(archive));
False,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,51,yte[] hello = new byte[14];
True,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,51,final byte[] hello = new byte[14];
False,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,57,yte[] bye = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java,57,final byte[] bye = new byte[4];
False,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,40,"rArchiveEntry ae = new ArArchiveEntry(""this_is_a_long_name.txt"","
True,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,40,"final ArArchiveEntry ae = new ArArchiveEntry(""this_is_a_long_name.txt"","
False,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,44, catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,44,} catch (final IOException ex) {
False,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,55,ile[] df = createTempDirAndFile();
True,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,55,final File[] df = createTempDirAndFile();
False,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,60,"rArchiveEntry ae = new ArArchiveEntry(""this_is_a_long_name.txt"","
True,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,60,"final ArArchiveEntry ae = new ArArchiveEntry(""this_is_a_long_name.txt"","
False,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,72,ist<String> expected = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java,72,final List<String> expected = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,35,tringBuilder expected = new StringBuilder();
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,35,final StringBuilder expected = new StringBuilder();
False,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,41,"rjArchiveInputStream in = new ArjArchiveInputStream(new FileInputStream(getFile(""bla.arj"")));"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,41,"final ArjArchiveInputStream in = new ArjArchiveInputStream(new FileInputStream(getFile(""bla.arj"")));"
False,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,44,tringBuilder result = new StringBuilder();
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,44,final StringBuilder result = new StringBuilder();
False,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,59,"rjArchiveInputStream in = new ArjArchiveInputStream(new FileInputStream(getFile(""bla.arj"")));"
False,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,60,rjArchiveEntry entry = in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,59,"final ArjArchiveInputStream in = new ArjArchiveInputStream(new FileInputStream(getFile(""bla.arj"")));"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,60,final ArjArchiveEntry entry = in.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,64,alendar cal = Calendar.getInstance();
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,64,final Calendar cal = Calendar.getInstance();
False,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,73,"rjArchiveInputStream in = new ArjArchiveInputStream(new FileInputStream(getFile(""bla.unix.arj"")));"
False,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,74,rjArchiveEntry entry = in.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,73,"final ArjArchiveInputStream in = new ArjArchiveInputStream(new FileInputStream(getFile(""bla.unix.arj"")));"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,74,final ArjArchiveEntry entry = in.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,78,"alendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT+0000""));"
True,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java,78,"final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT+0000""));"
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,32,tringBuilder expected = new StringBuilder();
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,32,final StringBuilder expected = new StringBuilder();
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,38,"pioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(""bla.cpio"")));"
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,38,"final CpioArchiveInputStream in = new CpioArchiveInputStream(new FileInputStream(getFile(""bla.cpio"")));"
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,41,tringBuilder result = new StringBuilder();
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,41,final StringBuilder result = new StringBuilder();
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,55,pioArchiveInputStream in =
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,55,final CpioArchiveInputStream in =
False,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java,61,pioArchiveEntry e = ((CpioArchiveInputStream) in)
True,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java,61,final CpioArchiveEntry e = ((CpioArchiveInputStream) in)
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntryTest.java,28,"umpArchiveEntry ent = new DumpArchiveEntry(""foo"", ""bar"", -1,"
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntryTest.java,28,"final DumpArchiveEntry ent = new DumpArchiveEntry(""foo"", ""bar"", -1,"
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntryTest.java,38,"umpArchiveEntry ent = new DumpArchiveEntry(""./foo"", ""bar"");"
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntryTest.java,38,"final DumpArchiveEntry ent = new DumpArchiveEntry(""./foo"", ""bar"");"
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,34,"ileInputStream is = new FileInputStream(getFile(""bla.zip""));"
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,34,"final FileInputStream is = new FileInputStream(getFile(""bla.zip""));"
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,38, catch (ArchiveException ex) {
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,38,} catch (final ArchiveException ex) {
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,48,"ileInputStream is = new FileInputStream(getFile(""zip64support.tar.bz2""));"
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,48,"final FileInputStream is = new FileInputStream(getFile(""zip64support.tar.bz2""));"
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,52, catch (ArchiveException ex) {
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,52,} catch (final ArchiveException ex) {
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,62,nputStream is = DumpArchiveInputStreamTest.class
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,62,final InputStream is = DumpArchiveInputStreamTest.class
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,64,umpArchiveInputStream dump = new DumpArchiveInputStream(is);
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,64,final DumpArchiveInputStream dump = new DumpArchiveInputStream(is);
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,68,yte[] expected = new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,68,final byte[] expected = new byte[] {
False,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,71,yte[] actual = new byte[expected.length];
True,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java,71,final byte[] actual = new byte[expected.length];
False,src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java,38,"ile testArchive = File.createTempFile(""jar-aostest"", "".jar"");"
True,src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java,38,"final File testArchive = File.createTempFile(""jar-aostest"", "".jar"");"
False,src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java,68, catch (IOException e) { /* swallow */ }
True,src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java,68,} catch (final IOException e) { /* swallow */ }
False,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,37,tring[] nameAndContent = pFiles[i];
True,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java,37,final String[] nameAndContent = pFiles[i];
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,46,"ap<String, byte[]> entriesByName = new HashMap<String, byte[]>();"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,46,"final Map<String, byte[]> entriesByName = new HashMap<String, byte[]>();"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,56,tring[] variants = {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,56,final String[] variants = {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,73,andom rnd = new Random(0xdeadbeef);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,74,or (String fileName : variants) {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,73,final Random rnd = new Random(0xdeadbeef);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,74,for (final String fileName : variants) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,85,yte [] content = readFully(archive);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,85,final byte [] content = readFully(archive);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,96,yte [] buf = new byte [1024];
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,97,yteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,96,final byte [] buf = new byte [1024];
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,97,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,106,"evenZFile archive = new SevenZFile(getFile(""7z-empty-mhc-off.7z""));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,106,"final SevenZFile archive = new SevenZFile(getFile(""7z-empty-mhc-off.7z""));"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,151, catch (PasswordRequiredException ex) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,152,tring msg = ex.getMessage();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,151,} catch (final PasswordRequiredException ex) {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,152,final String msg = ex.getMessage();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,167,"evenZFile sevenZFile = new SevenZFile(getFile(""COMPRESS-256.7z""));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,167,"final SevenZFile sevenZFile = new SevenZFile(getFile(""COMPRESS-256.7z""));"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,196,"ile output = new File(dir, ""lzma2-dictsize.7z"");"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,197,evenZOutputFile outArchive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,196,"final File output = new File(dir, ""lzma2-dictsize.7z"");"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,197,final SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,200,evenZArchiveEntry entry = new SevenZArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,200,final SevenZArchiveEntry entry = new SevenZArchiveEntry();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,209,evenZFile archive = new SevenZFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,209,final SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,211,evenZArchiveEntry entry = archive.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,212,evenZMethodConfiguration m = entry.getContentMethods().iterator().next();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,211,final SevenZArchiveEntry entry = archive.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,212,final SevenZMethodConfiguration m = entry.getContentMethods().iterator().next();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,222,"ile output = new File(dir, ""delta-distance.7z"");"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,223,evenZOutputFile outArchive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,222,"final File output = new File(dir, ""delta-distance.7z"");"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,223,final SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,227,evenZArchiveEntry entry = new SevenZArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,227,final SevenZArchiveEntry entry = new SevenZArchiveEntry();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,236,evenZFile archive = new SevenZFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,236,final SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,238,evenZArchiveEntry entry = archive.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,239,evenZMethodConfiguration m = entry.getContentMethods().iterator().next();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,238,final SevenZArchiveEntry entry = archive.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,239,final SevenZMethodConfiguration m = entry.getContentMethods().iterator().next();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,249,"evenZFile sevenZFile = new SevenZFile(getFile(""bla.7z""));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,249,"final SevenZFile sevenZFile = new SevenZFile(getFile(""bla.7z""));"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,251,terable<SevenZArchiveEntry> entries = sevenZFile.getEntries();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,252,terator<SevenZArchiveEntry> iter = entries.iterator();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,251,final Iterable<SevenZArchiveEntry> entries = sevenZFile.getEntries();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,252,final Iterator<SevenZArchiveEntry> iter = entries.iterator();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,264,"evenZFile sevenZFile = new SevenZFile(f, password);"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,264,"final SevenZFile sevenZFile = new SevenZFile(f, password);"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,272,yte[] contents = new byte[(int)entry.getSize()];
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,272,final byte[] contents = new byte[(int)entry.getSize()];
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,275,"nt bytesRead = sevenZFile.read(contents, off, contents.length - off);"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,275,"final int bytesRead = sevenZFile.read(contents, off, contents.length - off);"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,287,evenZFile sevenZFile = new SevenZFile(getFile(filename));
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,287,final SevenZFile sevenZFile = new SevenZFile(getFile(filename));
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,289,evenZArchiveEntry entry = sevenZFile.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,289,final SevenZArchiveEntry entry = sevenZFile.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,291,yte[] contents = new byte[(int)entry.getSize()];
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,291,final byte[] contents = new byte[(int)entry.getSize()];
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,294,"nt bytesRead = sevenZFile.read(contents, off, contents.length - off);"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,294,"final int bytesRead = sevenZFile.read(contents, off, contents.length - off);"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,59,ate accessDate = new Date();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,60,alendar cal = Calendar.getInstance();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,59,final Date accessDate = new Date();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,60,final Calendar cal = Calendar.getInstance();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,62,ate creationDate = cal.getTime();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,62,final Date creationDate = cal.getTime();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,64,evenZOutputFile outArchive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,64,final SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,139,yte[] content = new byte[2];
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,139,final byte[] content = new byte[2];
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,155,evenZOutputFile outArchive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,155,final SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,157,evenZArchiveEntry entry = new SevenZArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,157,final SevenZArchiveEntry entry = new SevenZArchiveEntry();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,168,evenZArchiveEntry entry = archive.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,168,final SevenZArchiveEntry entry = archive.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,184,evenZOutputFile outArchive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,184,final SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,189, catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,189,} catch (final IOException ex) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,310,rrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,310,final ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,345,ZMA2Options opts = new LZMA2Options(1);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,345,final LZMA2Options opts = new LZMA2Options(1);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,353,evenZOutputFile outArchive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,353,final SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,361,evenZFile archive = new SevenZFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,361,final SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,374,nt nonEmptyModulus = numberOfNonEmptyFiles != 0
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,374,final int nonEmptyModulus = numberOfNonEmptyFiles != 0
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,379,evenZOutputFile archive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,379,final SevenZOutputFile archive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,394,evenZFile archive = new SevenZFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,394,final SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,414,"evenZArchiveEntry entry = archive.createArchiveEntry(dir, ""foo/"");"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,414,"final SevenZArchiveEntry entry = archive.createArchiveEntry(dir, ""foo/"");"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,420,evenZArchiveEntry entry = archive.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,420,final SevenZArchiveEntry entry = archive.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,433,evenZArchiveEntry entry = new SevenZArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,433,final SevenZArchiveEntry entry = new SevenZArchiveEntry();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,447,evenZArchiveEntry entry = archive.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,447,final SevenZArchiveEntry entry = archive.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,467,rrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,467,final ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,474,rrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,474,final ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,481,evenZOutputFile outArchive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,481,final SevenZOutputFile outArchive = new SevenZOutputFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,489,evenZFile archive = new SevenZFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,489,final SevenZFile archive = new SevenZFile(output);
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,500,terator<? extends SevenZMethodConfiguration> expectedIter = expected.iterator();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,501,terator<? extends SevenZMethodConfiguration> actualIter = actual.iterator();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,500,final Iterator<? extends SevenZMethodConfiguration> expectedIter = expected.iterator();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,501,final Iterator<? extends SevenZMethodConfiguration> actualIter = actual.iterator();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,504,evenZMethodConfiguration expConfig = expectedIter.next();
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,505,evenZMethodConfiguration actConfig = actualIter.next();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,504,final SevenZMethodConfiguration expConfig = expectedIter.next();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,505,final SevenZMethodConfiguration actConfig = actualIter.next();
False,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,55,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,55,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,80,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,80,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,85,andom r = new Random(System.currentTimeMillis());
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,85,final Random r = new Random(System.currentTimeMillis());
False,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,87,yte[] buf = new byte[1024 * 1024];
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,87,final byte[] buf = new byte[1024 * 1024];
False,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,92,nt idx = r.nextInt(readNow);
True,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java,92,final int idx = r.nextInt(readNow);
False,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,33,"ile file = getFile(""oldgnu_sparse.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,33,"final File file = getFile(""oldgnu_sparse.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,37,arArchiveEntry ae = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,37,final TarArchiveEntry ae = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,52,"ile file = getFile(""pax_gnu_sparse.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,52,"final File file = getFile(""pax_gnu_sparse.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,67,arArchiveEntry ae = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java,67,final TarArchiveEntry ae = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,46,arArchiveEntry t = new TarArchiveEntry(new File(ROOT));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,46,final TarArchiveEntry t = new TarArchiveEntry(new File(ROOT));
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,52,"ile f = File.createTempFile(""taetest"", "".tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,52,"final File f = File.createTempFile(""taetest"", "".tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,112,"arArchiveEntry t = new TarArchiveEntry("""");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,112,"final TarArchiveEntry t = new TarArchiveEntry("""");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,118, catch (IllegalArgumentException expected) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,118,} catch (final IllegalArgumentException expected) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,126,"arArchiveEntry t = new TarArchiveEntry(""/foo"", LF_GNUTYPE_LONGNAME);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,126,"final TarArchiveEntry t = new TarArchiveEntry(""/foo"", LF_GNUTYPE_LONGNAME);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,133,"arArchiveEntry t = new TarArchiveEntry(""/foo"", LF_NORMAL);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,133,"final TarArchiveEntry t = new TarArchiveEntry(""/foo"", LF_NORMAL);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,140,"arArchiveEntry t = new TarArchiveEntry(""/foo"", LF_GNUTYPE_LONGNAME,"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,140,"final TarArchiveEntry t = new TarArchiveEntry(""/foo"", LF_GNUTYPE_LONGNAME,"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,155,yte[] buf = new byte[512];
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java,155,final byte[] buf = new byte[512];
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,52,"ap<String, String> headers = tais"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,52,"final Map<String, String> headers = tais"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,64,"ap<String, String> headers = tais"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,64,"final Map<String, String> headers = tais"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,76,"ap<String, String> headers = tais"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,76,"final Map<String, String> headers = tais"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,87,"ap<String, String> headers = tais"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,87,"final Map<String, String> headers = tais"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,97,"tring ae = ""\u00e4"";"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,98,"tring line = ""11 path=""+ ae + ""\n"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,97,"final String ae = ""\u00e4"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,98,"final String line = ""11 path=""+ ae + ""\n"";"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,102,"ap<String, String> headers = tais"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,102,"final Map<String, String> headers = tais"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,142,arArchiveEntry tae = in.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,142,final TarArchiveEntry tae = in.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,144,"alendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,144,"final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,158,"arArchiveInputStream tar = getTestStream(""/COMPRESS-197.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,158,"final TarArchiveInputStream tar = getTestStream(""/COMPRESS-197.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,164, catch (IOException e) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,164,} catch (final IOException e) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,174,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,175,tring encoding = CharsetNames.UTF_16;
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,176,"tring name = ""1234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,174,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,175,final String encoding = CharsetNames.UTF_16;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,176,"final String name = ""1234567890123456789012345678901234567890123456789"""
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,179,arArchiveOutputStream tos =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,179,final TarArchiveOutputStream tos =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,188,yte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,189,yteArrayInputStream bis = new ByteArrayInputStream(data);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,190,arArchiveInputStream tis =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,188,final byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,189,final ByteArrayInputStream bis = new ByteArrayInputStream(data);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,190,final TarArchiveInputStream tis =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,199,nputStream is = TarArchiveInputStreamTest.class
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,199,final InputStream is = TarArchiveInputStreamTest.class
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,201,arArchiveInputStream tar = new TarArchiveInputStream(is);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,201,final TarArchiveInputStream tar = new TarArchiveInputStream(is);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,205,yte[] expected = new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,205,final byte[] expected = new byte[] {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,208,yte[] actual = new byte[expected.length];
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,208,final byte[] actual = new byte[expected.length];
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,216,nputStream is = TarArchiveInputStreamTest.class
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,216,final InputStream is = TarArchiveInputStreamTest.class
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,219,nputStream gin = new GZIPInputStream(is);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,220,arArchiveInputStream tar = new TarArchiveInputStream(gin);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,219,final InputStream gin = new GZIPInputStream(is);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,220,final TarArchiveInputStream tar = new TarArchiveInputStream(gin);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,229, catch (IOException e) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,229,} catch (final IOException e) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,238,"ile dir = mkdir(""COMPRESS-279"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,239,"arArchiveInputStream is = getTestStream(""/COMPRESS-279.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,238,"final File dir = mkdir(""COMPRESS-279"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,239,"final TarArchiveInputStream is = getTestStream(""/COMPRESS-279.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,263,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,264,arArchiveOutputStream tos = new TarArchiveOutputStream(bos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,263,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,264,final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,273,yte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,274,yteArrayInputStream bis = new ByteArrayInputStream(data);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,275,arArchiveInputStream tis =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,273,final byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,274,final ByteArrayInputStream bis = new ByteArrayInputStream(data);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,275,final TarArchiveInputStream tis =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,287,"arArchiveInputStream is = getTestStream(""/COMPRESS-324.tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,287,"final TarArchiveInputStream is = getTestStream(""/COMPRESS-324.tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,289,arArchiveEntry entry = is.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,289,final TarArchiveEntry entry = is.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,49,"ile f = File.createTempFile(""commons-compress-tarcount"", "".tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,49,"final File f = File.createTempFile(""commons-compress-tarcount"", "".tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,51,ileOutputStream fos = new FileOutputStream(f);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,51,final FileOutputStream fos = new FileOutputStream(f);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,53,rchiveOutputStream tarOut = new ArchiveStreamFactory()
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,53,final ArchiveOutputStream tarOut = new ArchiveStreamFactory()
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,56,"ile file1 = getFile(""test1.xml"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,57,"arArchiveEntry sEntry = new TarArchiveEntry(file1, file1.getName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,56,"final File file1 = getFile(""test1.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,57,"final TarArchiveEntry sEntry = new TarArchiveEntry(file1, file1.getName());"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,60,ileInputStream in = new FileInputStream(file1);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,61,yte[] buf = new byte[8192];
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,60,final FileInputStream in = new FileInputStream(file1);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,61,final byte[] buf = new byte[8192];
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,77,"arArchiveEntry t = new TarArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,77,"final TarArchiveEntry t = new TarArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,87, catch (RuntimeException expected) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,87,} catch (final RuntimeException expected) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,93,"arArchiveEntry t = new TarArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,93,"final TarArchiveEntry t = new TarArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,95,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,96,arArchiveOutputStream tos = new TarArchiveOutputStream(bos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,95,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,96,final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,101,yte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,101,final byte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,107,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,107,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,109,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,109,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,119,"arArchiveEntry t = new TarArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,119,"final TarArchiveEntry t = new TarArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,121,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,122,arArchiveOutputStream tos = new TarArchiveOutputStream(bos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,121,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,122,final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,127,yte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,127,final byte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,135,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,135,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,137,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,137,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,147,"ap<String, String> m = new HashMap<String, String>();"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,147,"final Map<String, String> m = new HashMap<String, String>();"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,149,yte[] data = writePaxHeader(m);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,149,final byte[] data = writePaxHeader(m);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,161,"ap<String, String> m = new HashMap<String, String>();"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,161,"final Map<String, String> m = new HashMap<String, String>();"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,166,yte[] data = writePaxHeader(m);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,166,final byte[] data = writePaxHeader(m);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,180,"ap<String, String> m = new HashMap<String, String>();"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,180,"final Map<String, String> m = new HashMap<String, String>();"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,185,yte[] data = writePaxHeader(m);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,185,final byte[] data = writePaxHeader(m);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,198,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,199,"arArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,198,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,199,"final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,203,"arArchiveEntry t = new TarArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,203,"final TarArchiveEntry t = new TarArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,215,"tring n = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,215,"final String n = ""01234567890123456789012345678901234567890123456789"""
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,218,arArchiveEntry t =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,218,final TarArchiveEntry t =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,221,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,222,"arArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,221,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,222,"final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,227,yte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,227,final byte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,230,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,230,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,232,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,232,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,240,"arArchiveEntry t = new TarArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,240,"final TarArchiveEntry t = new TarArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,243,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,244,arArchiveOutputStream tos = new TarArchiveOutputStream(bos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,243,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,244,final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,249,yte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,249,final byte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,256,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,256,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,258,arArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,259,"alendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,258,final TarArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,259,"final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,271,"arArchiveEntry t = new TarArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,271,"final TarArchiveEntry t = new TarArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,274,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,275,arArchiveOutputStream tos = new TarArchiveOutputStream(bos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,274,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,275,final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,280,yte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,280,final byte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,289,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,289,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,291,arArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,292,"alendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,291,final TarArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,292,"final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,304,"arArchiveEntry t = new TarArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,304,"final TarArchiveEntry t = new TarArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,307,arArchiveOutputStream tos =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,307,final TarArchiveOutputStream tos =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,312, catch (RuntimeException expected) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,312,} catch (final RuntimeException expected) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,319,"tring n = ""\u00e4"";"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,320,arArchiveEntry t = new TarArchiveEntry(n);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,319,"final String n = ""\u00e4"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,320,final TarArchiveEntry t = new TarArchiveEntry(n);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,322,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,323,arArchiveOutputStream tos = new TarArchiveOutputStream(bos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,322,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,323,final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,329,yte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,329,final byte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,332,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,332,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,334,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,334,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,341,"tring n = ""\u00e4"";"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,342,"arArchiveEntry t = new TarArchiveEntry(""a"", TarConstants.LF_LINK);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,341,"final String n = ""\u00e4"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,342,"final TarArchiveEntry t = new TarArchiveEntry(""a"", TarConstants.LF_LINK);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,345,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,346,arArchiveOutputStream tos = new TarArchiveOutputStream(bos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,345,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,346,final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,352,yte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,352,final byte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,355,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,355,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,357,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,357,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,379,"tring n = ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,379,"final String n = ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"""
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,382,arArchiveEntry t = new TarArchiveEntry(n);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,382,final TarArchiveEntry t = new TarArchiveEntry(n);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,384,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,385,"arArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,384,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,385,"final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,391,yte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,392,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,391,final byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,392,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,394,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,394,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,401,"tring n = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,401,"final String n = ""01234567890123456789012345678901234567890123456789"""
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,406,arArchiveEntry t = new TarArchiveEntry(n);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,407,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,408,"arArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,406,final TarArchiveEntry t = new TarArchiveEntry(n);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,407,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,408,"final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,415, catch (RuntimeException e) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,415,} catch (final RuntimeException e) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,422,"tring n = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,422,"final String n = ""01234567890123456789012345678901234567890123456789"""
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,425,arArchiveEntry t = new TarArchiveEntry(n);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,426,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,427,"arArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,425,final TarArchiveEntry t = new TarArchiveEntry(n);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,426,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,427,"final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,432,yte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,433,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,432,final byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,433,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,435,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,435,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,458,"tring n = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,458,"final String n = ""01234567890123456789012345678901234567890123456789"""
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,461,arArchiveEntry t = new TarArchiveEntry(n);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,462,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,463,"arArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,461,final TarArchiveEntry t = new TarArchiveEntry(n);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,462,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,463,"final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,468,yte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,469,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,468,final byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,469,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,471,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,471,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,482,"tring n = ""f\u00f6\u00f6/"";"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,483,arArchiveEntry t = new TarArchiveEntry(n);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,484,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,485,arArchiveOutputStream tos = new TarArchiveOutputStream(bos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,482,"final String n = ""f\u00f6\u00f6/"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,483,final TarArchiveEntry t = new TarArchiveEntry(n);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,484,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,485,final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,490,yte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,491,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,490,final byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,491,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,493,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,493,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,504,"tring n = ""f\u00f6\u00f6\u00dc"";"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,505,arArchiveEntry t = new TarArchiveEntry(n);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,506,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,507,arArchiveOutputStream tos = new TarArchiveOutputStream(bos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,504,"final String n = ""f\u00f6\u00f6\u00dc"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,505,final TarArchiveEntry t = new TarArchiveEntry(n);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,506,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,507,final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,512,yte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,513,arArchiveInputStream tin =
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,512,final byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,513,final TarArchiveInputStream tin =
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,515,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,515,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,526,"tring linkname = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,526,"final String linkname = ""01234567890123456789012345678901234567890123456789"""
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,529,"arArchiveEntry entry = new TarArchiveEntry(""test"", TarConstants.LF_SYMLINK);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,529,"final TarArchiveEntry entry = new TarArchiveEntry(""test"", TarConstants.LF_SYMLINK);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,533,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,534,"arArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,533,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,534,"final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,541, catch (RuntimeException e) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,541,} catch (final RuntimeException e) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,548,"tring linkname = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,548,"final String linkname = ""01234567890123456789012345678901234567890123456789"""
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,551,"arArchiveEntry entry = new TarArchiveEntry(""test"" , TarConstants.LF_SYMLINK);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,551,"final TarArchiveEntry entry = new TarArchiveEntry(""test"" , TarConstants.LF_SYMLINK);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,554,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,555,"arArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,554,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,555,"final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,561,yte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,562,arArchiveInputStream tin = new TarArchiveInputStream(new ByteArrayInputStream(data));
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,563,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,561,final byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,562,final TarArchiveInputStream tin = new TarArchiveInputStream(new ByteArrayInputStream(data));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,563,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,588,"tring linkname = ""01234567890123456789012345678901234567890123456789"""
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,588,"final String linkname = ""01234567890123456789012345678901234567890123456789"""
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,591,"arArchiveEntry entry = new TarArchiveEntry(""test"", TarConstants.LF_SYMLINK);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,591,"final TarArchiveEntry entry = new TarArchiveEntry(""test"", TarConstants.LF_SYMLINK);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,594,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,595,"arArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,594,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,595,"final TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, ""ASCII"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,601,yte[] data = bos.toByteArray();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,602,arArchiveInputStream tin = new TarArchiveInputStream(new ByteArrayInputStream(data));
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,603,arArchiveEntry e = tin.getNextTarEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,601,final byte[] data = bos.toByteArray();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,602,final TarArchiveInputStream tin = new TarArchiveInputStream(new ByteArrayInputStream(data));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,603,final TarArchiveEntry e = tin.getNextTarEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,612,"ile f = File.createTempFile(""commons-compress-padding"", "".tar"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,612,"final File f = File.createTempFile(""commons-compress-padding"", "".tar"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,614,ileOutputStream fos = new FileOutputStream(f);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,615,arArchiveOutputStream tos = new TarArchiveOutputStream(fos);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,616,"ile file1 = getFile(""test1.xml"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,617,"arArchiveEntry sEntry = new TarArchiveEntry(file1, file1.getName());"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,614,final FileOutputStream fos = new FileOutputStream(f);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,615,final TarArchiveOutputStream tos = new TarArchiveOutputStream(fos);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,616,"final File file1 = getFile(""test1.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,617,"final TarArchiveEntry sEntry = new TarArchiveEntry(file1, file1.getName());"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,619,ileInputStream in = new FileInputStream(file1);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,619,final FileInputStream in = new FileInputStream(file1);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,639,tring fname = longFileName;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,639,final String fname = longFileName;
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,642,"yte[] archive1 = createTarArchiveContainingOneDirectory(fname, modificationDate);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,643,"yte[] digest1 = MessageDigest.getInstance(""MD5"").digest(archive1);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,642,"final byte[] archive1 = createTarArchiveContainingOneDirectory(fname, modificationDate);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,643,"final byte[] digest1 = MessageDigest.getInstance(""MD5"").digest(archive1);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,649,"yte[] archive2 = createTarArchiveContainingOneDirectory(fname, modificationDate);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,649,"final byte[] archive2 = createTarArchiveContainingOneDirectory(fname, modificationDate);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,651,"yte[] digest2 = MessageDigest.getInstance(""MD5"").digest(archive2);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,651,"final byte[] digest2 = MessageDigest.getInstance(""MD5"").digest(archive2);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,658,arArchiveInputStream tarIn = new TarArchiveInputStream(new ByteArrayInputStream(archive2));
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,659,rchiveEntry nextEntry = tarIn.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,658,final TarArchiveInputStream tarIn = new TarArchiveInputStream(new ByteArrayInputStream(archive2));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,659,final ArchiveEntry nextEntry = tarIn.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,667,yteArrayOutputStream baos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,668,"arArchiveOutputStream tarOut = new TarArchiveOutputStream(baos, 1024);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,667,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,668,"final TarArchiveOutputStream tarOut = new TarArchiveOutputStream(baos, 1024);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,670,"arArchiveEntry tarEntry = new TarArchiveEntry(""d"");"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,670,"final TarArchiveEntry tarEntry = new TarArchiveEntry(""d"");"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,42,ile f = new File(args[0]);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,42,final File f = new File(args[0]);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,46,nputStream fis = new BufferedInputStream(new FileInputStream(f));
True,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,46,final InputStream fis = new BufferedInputStream(new FileInputStream(f));
False,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,67,tringBuilder sb = new StringBuilder(Integer.toOctalString(ae.getMode()))
True,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java,67,final StringBuilder sb = new StringBuilder(Integer.toOctalString(ae.getMode()))
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,37,"tring sb1 = ""abcdefghijklmnopqrstuvwxyz"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,37,"final String sb1 = ""abcdefghijklmnopqrstuvwxyz"";"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,85, catch (IllegalArgumentException expected) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,85,} catch (final IllegalArgumentException expected) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,91, catch (IllegalArgumentException expected) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,91,} catch (final IllegalArgumentException expected) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,97, catch (IllegalArgumentException expected) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,97,} catch (final IllegalArgumentException expected) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,103, catch (IllegalArgumentException expected) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,103,} catch (final IllegalArgumentException expected) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,109, catch (IllegalArgumentException expected) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,109,} catch (final IllegalArgumentException expected) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,114,yte [] buffer = new byte[bufsize];
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,114,final byte [] buffer = new byte[bufsize];
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,139,yte [] buffer = new byte[bufsize];
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,139,final byte [] buffer = new byte[bufsize];
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,169,yte [] buffer = new byte[12];
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,169,final byte [] buffer = new byte[12];
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,185,yte [] buffer = new byte[22];
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,185,final byte [] buffer = new byte[22];
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,192,yte [] buffer = new byte[8-1]; // a lot of the numbers have 8-byte buffers (nul term)
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,192,final byte [] buffer = new byte[8-1]; // a lot of the numbers have 8-byte buffers (nul term)
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,198, catch (IllegalArgumentException expected) {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,198,} catch (final IllegalArgumentException expected) {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,213,ipEncoding enc = ZipEncodingHelper.getZipEncoding(CharsetNames.ISO_8859_1);
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,214,"tring s = ""0302-0601-3\u00b1\u00b1\u00b1F06\u00b1W220\u00b1ZB\u00b1LALALA\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1CAN\u00b1\u00b1DC\u00b1\u00b1\u00b104\u00b1060302\u00b1MOE.model"";"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,215,yte buff[] = new byte[100];
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,216,"nt len = TarUtils.formatNameBytes(s, buff, 0, buff.length, enc);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,213,final ZipEncoding enc = ZipEncodingHelper.getZipEncoding(CharsetNames.ISO_8859_1);
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,214,"final String s = ""0302-0601-3\u00b1\u00b1\u00b1F06\u00b1W220\u00b1ZB\u00b1LALALA\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1CAN\u00b1\u00b1DC\u00b1\u00b1\u00b104\u00b1060302\u00b1MOE.model"";"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,215,final byte buff[] = new byte[100];
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,216,"final int len = TarUtils.formatNameBytes(s, buff, 0, buff.length, enc);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,221,yte buff[] = new byte[100];
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,222,"nt len = TarUtils.formatNameBytes(string, buff, 0, buff.length);"
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,221,final byte buff[] = new byte[100];
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,222,"final int len = TarUtils.formatNameBytes(string, buff, 0, buff.length);"
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,228,yte[] b = new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,228,final byte[] b = new byte[] {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,237,yte[] b = new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,237,final byte[] b = new byte[] {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,248,yte[] b = new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,248,final byte[] b = new byte[] {
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,258,yte[] valid = { // from bla.tar
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,258,final byte[] valid = { // from bla.tar
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,288,yte[] compress117 = { // from COMPRESS-117
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,288,final byte[] compress117 = { // from COMPRESS-117
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,329,yte[] invalid = { // from the testAIFF.aif file in Tika
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,329,final byte[] invalid = { // from the testAIFF.aif file in Tika
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,363,ong expected = 0100000;
False,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,364,yte [] buffer = new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,363,final long expected = 0100000;
True,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,364,final byte [] buffer = new byte[] {
False,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,36,siExtraField a = new AsiExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,36,final AsiExtraField a = new AsiExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,50,siExtraField a = new AsiExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,50,final AsiExtraField a = new AsiExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,138, catch (Exception e) {
True,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,138,} catch (final Exception e) {
False,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,146,siExtraField s1 = new AsiExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,146,final AsiExtraField s1 = new AsiExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,152,siExtraField s2 = (AsiExtraField) s1.clone();
True,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java,152,final AsiExtraField s2 = (AsiExtraField) s1.clone();
False,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,34,"nputStream in = new ByteArrayInputStream(new byte[] { 0x02, 0x42, 0x01, 0x13 });"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,34,"final InputStream in = new ByteArrayInputStream(new byte[] { 0x02, 0x42, 0x01, 0x13 });"
False,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,36,"inaryTree tree = BinaryTree.decode(in, 8);"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,36,"final BinaryTree tree = BinaryTree.decode(in, 8);"
False,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,40,"itStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0x8D, (byte) 0xC5, (byte) 0x11, 0x00 }));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java,40,"final BitStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0x8D, (byte) 0xC5, (byte) 0x11, 0x00 }));"
False,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,32,itStream stream = new BitStream(new ByteArrayInputStream(new byte[0]));
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,32,final BitStream stream = new BitStream(new ByteArrayInputStream(new byte[0]));
False,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,41,"itStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x03 }));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,41,"final BitStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x03 }));"
False,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,67,itStream stream = new BitStream(new ByteArrayInputStream(new byte[0]));
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,67,final BitStream stream = new BitStream(new ByteArrayInputStream(new byte[0]));
False,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,75,"itStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x35 }));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,75,"final BitStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x35 }));"
False,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,84,"itStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x35 }));"
True,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java,84,"final BitStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x35 }));"
False,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,30,nt size = 16;
False,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,31,ircularBuffer buffer = new CircularBuffer(size);
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,30,final int size = 16;
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,31,final CircularBuffer buffer = new CircularBuffer(size);
False,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,48,ircularBuffer buffer = new CircularBuffer(16);
True,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java,48,final CircularBuffer buffer = new CircularBuffer(16);
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,35,"ile file = getFile(""password-encrypted.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,35,"final File file = getFile(""password-encrypted.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,39,"ipArchiveEntry zae = zf.getEntry(""LICENSE.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,39,"final ZipArchiveEntry zae = zf.getEntry(""LICENSE.txt"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,46, catch (UnsupportedZipFeatureException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,46,} catch (final UnsupportedZipFeatureException ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,58,"ile file = getFile(""password-encrypted.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,58,"final File file = getFile(""password-encrypted.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,62,ipArchiveEntry zae = zin.getNextZipEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,62,final ZipArchiveEntry zae = zin.getNextZipEntry();
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,68,yte[] buf = new byte[1024];
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,68,final byte[] buf = new byte[1024];
False,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,71, catch (UnsupportedZipFeatureException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java,71,} catch (final UnsupportedZipFeatureException ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,38,ipFile zip = new ZipFile(new File(filename));
False,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,39,ipArchiveEntry entry = zip.getEntries().nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,38,final ZipFile zip = new ZipFile(new File(filename));
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,39,final ZipArchiveEntry entry = zip.getEntries().nextElement();
False,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,44,yteArrayOutputStream bout = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,45,"heckedOutputStream out = new CheckedOutputStream(bout, new CRC32());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,44,final ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,45,"final CheckedOutputStream out = new CheckedOutputStream(bout, new CRC32());"
False,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,70,ipArchiveInputStream zin = new ZipArchiveInputStream(new FileInputStream(new File(filename)));
False,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,71,ipArchiveEntry entry = zin.getNextZipEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,70,final ZipArchiveInputStream zin = new ZipArchiveInputStream(new FileInputStream(new File(filename)));
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,71,final ZipArchiveEntry entry = zin.getNextZipEntry();
False,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,76,"nputStream bio = new BoundedInputStream(zin, entry.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,76,"final InputStream bio = new BoundedInputStream(zin, entry.getSize());"
False,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,78,yteArrayOutputStream bout = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,79,"heckedOutputStream out = new CheckedOutputStream(bout, new CRC32());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,78,final ByteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java,79,"final CheckedOutputStream out = new CheckedOutputStream(bout, new CRC32());"
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,56,yte[] dummyLocal = dummy.getLocalFileDataData();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,56,final byte[] dummyLocal = dummy.getLocalFileDataData();
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,75,ipExtraField[] ze = ExtraFieldUtils.parse(data);
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,75,final ZipExtraField[] ze = ExtraFieldUtils.parse(data);
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,84,yte[] data2 = new byte[data.length-1];
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,84,final byte[] data2 = new byte[data.length-1];
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,89, catch (Exception e) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,89,} catch (final Exception e) {
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,110,yte[] data2 = new byte[data.length-1];
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,110,final byte[] data2 = new byte[data.length-1];
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,141,yte[] data2 = new byte[data.length-1];
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,141,final byte[] data2 = new byte[data.length-1];
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,156,yte[] local =
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,156,final byte[] local =
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,163,yte[] dummyCentral = dummy.getCentralDirectoryData();
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,164,yte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length];
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,163,final byte[] dummyCentral = dummy.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,164,final byte[] data2 = new byte[4 + aLocal.length + 4 + dummyCentral.length];
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,172,yte[] central =
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,172,final byte[] central =
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,183,ipExtraField d = new UnparseableExtraFieldData();
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,184,yte[] b = UNRECOGNIZED_HEADER.getBytes();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,183,final ZipExtraField d = new UnparseableExtraFieldData();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,184,final byte[] b = UNRECOGNIZED_HEADER.getBytes();
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,186,yte[] local =
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,186,final byte[] local =
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,193,yte[] dCentral = d.getCentralDirectoryData();
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,194,yte[] data2 = new byte[4 + aLocal.length + dCentral.length];
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,193,final byte[] dCentral = d.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,194,final byte[] data2 = new byte[4 + aLocal.length + dCentral.length];
False,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,200,yte[] central =
True,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java,200,final byte[] central =
False,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,36,yte[] b = new byte[2];
True,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,36,final byte[] b = new byte[2];
False,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,66,"yte[] flags = new byte[] {(byte) 8, (byte) 0};"
True,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,66,"final byte[] flags = new byte[] {(byte) 8, (byte) 0};"
False,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,68,eneralPurposeBit b = new GeneralPurposeBit();
True,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,68,final GeneralPurposeBit b = new GeneralPurposeBit();
False,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,75,"yte[] flags = new byte[] {(byte) 0, (byte) 8};"
True,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,75,"final byte[] flags = new byte[] {(byte) 0, (byte) 8};"
False,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,77,eneralPurposeBit b = new GeneralPurposeBit();
True,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,77,final GeneralPurposeBit b = new GeneralPurposeBit();
False,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,84,"yte[] flags = new byte[] {(byte) 1, (byte) 0};"
True,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,84,"final byte[] flags = new byte[] {(byte) 1, (byte) 0};"
False,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,86,eneralPurposeBit b = new GeneralPurposeBit();
True,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,86,final GeneralPurposeBit b = new GeneralPurposeBit();
False,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,95,eneralPurposeBit b = new GeneralPurposeBit();
True,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,95,final GeneralPurposeBit b = new GeneralPurposeBit();
False,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,106,eneralPurposeBit b = new GeneralPurposeBit();
True,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java,106,final GeneralPurposeBit b = new GeneralPurposeBit();
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,50,ommandLine cl = parse(args);
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,51,ile f = new File(cl.archive);
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,50,final CommandLine cl = parse(args);
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,51,final File f = new File(cl.archive);
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,57,ufferedInputStream fs =
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,57,final BufferedInputStream fs =
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,60,ipArchiveInputStream zs =
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,60,final ZipArchiveInputStream zs =
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,66,ipArchiveEntry ze = (ZipArchiveEntry) entry;
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,66,final ZipArchiveEntry ze = (ZipArchiveEntry) entry;
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,76,"ipFile zf = new ZipFile(f, cl.encoding);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,76,"final ZipFile zf = new ZipFile(f, cl.encoding);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,78,or (Enumeration<ZipArchiveEntry> entries = zf.getEntries();
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,78,for (final Enumeration<ZipArchiveEntry> entries = zf.getEntries();
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,80,ipArchiveEntry ze = entries.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,80,final ZipArchiveEntry ze = entries.nextElement();
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,83,nputStream is = zf.getInputStream(ze);
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,83,final InputStream is = zf.getInputStream(ze);
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,103,"ile f = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,103,"final File f = new File(dir, entry.getName());"
False,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,119,ommandLine cl = new CommandLine();
True,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,src/test/java/org/apache/commons/compress/archivers/zip/Lister.java,119,final CommandLine cl = new CommandLine();
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,71,ileInputStream archive =
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,71,final FileInputStream archive =
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,79,or (String element : ENTRIES) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,79,for (final String element : ENTRIES) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,84,rchiveEntry lastEntry = zi.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,84,final ArchiveEntry lastEntry = zi.getNextEntry();
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,86,yte [] buffer = new byte [4096];
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,86,final byte [] buffer = new byte [4096];
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,95, catch (IOException e) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,95,} catch (final IOException e) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,105, catch (IOException e) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,105,} catch (final IOException e) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,117,"ile file = getFile(""apache-maven-2.2.1.zip.001"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,117,"final File file = getFile(""apache-maven-2.2.1.zip.001"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,60,ipArchiveOutputStream zos = new ZipArchiveOutputStream(result);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,60,final ZipArchiveOutputStream zos = new ZipArchiveOutputStream(result);
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,62,arallelScatterZipCreator zipCreator = new ParallelScatterZipCreator();
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,62,final ParallelScatterZipCreator zipCreator = new ParallelScatterZipCreator();
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,64,"ap<String, byte[]> entries = writeEntries(zipCreator);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,64,"final Map<String, byte[]> entries = writeEntries(zipCreator);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,76,ipArchiveOutputStream zos = new ZipArchiveOutputStream(result);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,76,final ZipArchiveOutputStream zos = new ZipArchiveOutputStream(result);
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,78,xecutorService es = Executors.newFixedThreadPool(1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,78,final ExecutorService es = Executors.newFixedThreadPool(1);
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,80,catterGatherBackingStoreSupplier supp = new ScatterGatherBackingStoreSupplier() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,80,final ScatterGatherBackingStoreSupplier supp = new ScatterGatherBackingStoreSupplier() {
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,87,"arallelScatterZipCreator zipCreator = new ParallelScatterZipCreator(es, supp);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,88,"ap<String, byte[]> entries = writeEntriesAsCallable(zipCreator);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,87,"final ParallelScatterZipCreator zipCreator = new ParallelScatterZipCreator(es, supp);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,88,"final Map<String, byte[]> entries = writeEntriesAsCallable(zipCreator);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,99,ipFile zf = new ZipFile(result);
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,100,numeration<ZipArchiveEntry> entriesInPhysicalOrder = zf.getEntriesInPhysicalOrder();
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,99,final ZipFile zf = new ZipFile(result);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,100,final Enumeration<ZipArchiveEntry> entriesInPhysicalOrder = zf.getEntriesInPhysicalOrder();
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,102,ipArchiveEntry zipArchiveEntry = entriesInPhysicalOrder.nextElement();
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,103,nputStream inputStream = zf.getInputStream(zipArchiveEntry);
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,104,yte[] actual = IOUtils.toByteArray(inputStream);
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,105,yte[] expected = entries.remove(zipArchiveEntry.getName());
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,102,final ZipArchiveEntry zipArchiveEntry = entriesInPhysicalOrder.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,103,final InputStream inputStream = zf.getInputStream(zipArchiveEntry);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,104,final byte[] actual = IOUtils.toByteArray(inputStream);
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,105,final byte[] expected = entries.remove(zipArchiveEntry.getName());
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,112,"ap<String, byte[]> entries = new HashMap<String, byte[]>();"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,112,"final Map<String, byte[]> entries = new HashMap<String, byte[]>();"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,115,"ipArchiveEntry za = createZipArchiveEntry(entries, i, payloadBytes);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,115,"final ZipArchiveEntry za = createZipArchiveEntry(entries, i, payloadBytes);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,127,"ap<String, byte[]> entries = new HashMap<String, byte[]>();"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,127,"final Map<String, byte[]> entries = new HashMap<String, byte[]>();"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,130,"ipArchiveEntry za = createZipArchiveEntry(entries, i, payloadBytes);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,130,"final ZipArchiveEntry za = createZipArchiveEntry(entries, i, payloadBytes);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,143,"ipArchiveEntry za = new ZipArchiveEntry( ""file"" + i);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java,143,"final ZipArchiveEntry za = new ZipArchiveEntry( ""file"" + i);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,37,"ile result = File.createTempFile(""testSample"", ""fe"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,37,"final File result = File.createTempFile(""testSample"", ""fe"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,44,catterSample scatterSample = new ScatterSample();
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,45,"ipArchiveEntry archiveEntry = new ZipArchiveEntry(""test1.xml"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,44,final ScatterSample scatterSample = new ScatterSample();
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,45,"final ZipArchiveEntry archiveEntry = new ZipArchiveEntry(""test1.xml"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,47,nputStreamSupplier supp = new InputStreamSupplier() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,47,final InputStreamSupplier supp = new InputStreamSupplier() {
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,55,ipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(result);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,55,final ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(result);
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,61,ipFile zf = new ZipFile(result);
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,62,ipArchiveEntry archiveEntry1 = zf.getEntries().nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,61,final ZipFile zf = new ZipFile(result);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,62,final ZipArchiveEntry archiveEntry1 = zf.getEntries().nextElement();
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,64,nputStream inputStream = zf.getInputStream(archiveEntry1);
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,65,yte[] b = new byte[6];
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,66,"nt i = IOUtils.readFully(inputStream, b);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,64,final InputStream inputStream = zf.getInputStream(archiveEntry1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,65,final byte[] b = new byte[6];
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java,66,"final int i = IOUtils.readFully(inputStream, b);"
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,49,catterZipOutputStream scatterZipOutputStream = ScatterZipOutputStream.fileBased(scatterFile);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,49,final ScatterZipOutputStream scatterZipOutputStream = ScatterZipOutputStream.fileBased(scatterFile);
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,53,"ipArchiveEntry zab = new ZipArchiveEntry(""b.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,53,"final ZipArchiveEntry zab = new ZipArchiveEntry(""b.txt"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,58,"ipArchiveEntry zae = new ZipArchiveEntry(""a.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,58,"final ZipArchiveEntry zae = new ZipArchiveEntry(""a.txt"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,60,yteArrayInputStream payload1 = new ByteArrayInputStream(A_PAYLOAD);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,60,final ByteArrayInputStream payload1 = new ByteArrayInputStream(A_PAYLOAD);
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,64,ipArchiveOutputStream outputStream = new ZipArchiveOutputStream(target);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,64,final ZipArchiveOutputStream outputStream = new ZipArchiveOutputStream(target);
False,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,69,ipFile zf = new ZipFile(target);
True,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java,69,final ZipFile zf = new ZipFile(target);
False,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,33,yteArrayOutputStream baos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,34,treamCompressor sc = StreamCompressor.create( baos);
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,33,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,34,final StreamCompressor sc = StreamCompressor.create( baos);
False,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,46,yteArrayOutputStream baos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,47,treamCompressor sc = StreamCompressor.create( baos);
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,46,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,47,final StreamCompressor sc = StreamCompressor.create( baos);
False,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,54,"yte[] expected = new byte[]{115,116,4,1,39,48,0,0};"
True,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java,54,"final byte[] expected = new byte[]{115,116,4,1,39,48,0,0};"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,99,"ile archive = getFile(""utf8-7zip-test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,99,"final File archive = getFile(""utf8-7zip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,113,ileInputStream archive =
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,113,final FileInputStream archive =
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,134,"ile archive = getFile(""utf8-winzip-test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,134,"final File archive = getFile(""utf8-winzip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,147,ipArchiveEntry entry = zf.getEntry(fileName);
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,147,final ZipArchiveEntry entry = zf.getEntry(fileName);
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,149,nputStream is = zf.getInputStream(entry);
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,149,final InputStream is = zf.getInputStream(entry);
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,160,ileInputStream archive =
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,160,final FileInputStream archive =
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,177,"ile file = File.createTempFile(""unicode-test"", "".zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,177,"final File file = File.createTempFile(""unicode-test"", "".zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,182,ileInputStream archive = new FileInputStream(file);
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,182,final FileInputStream archive = new FileInputStream(file);
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,198,"ile file = File.createTempFile(""unicode-test"", "".zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,198,"final File file = File.createTempFile(""unicode-test"", "".zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,216,"ile archive = getFile(""utf8-7zip-test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,216,"final File archive = getFile(""utf8-7zip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,229,ileInputStream archive =
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,229,final FileInputStream archive =
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,246,"ile file = File.createTempFile(encoding + ""-test"", "".zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,246,"final File file = File.createTempFile(encoding + ""-test"", "".zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,261,ipEncoding zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,261,final ZipEncoding zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,278,yteBuffer en = zipEncoding.encode(ze.getName());
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,278,final ByteBuffer en = zipEncoding.encode(ze.getName());
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,295,yteBuffer en = zipEncoding.encode(ze.getName());
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,295,final ByteBuffer en = zipEncoding.encode(ze.getName());
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,313,yteBuffer en = zipEncoding.encode(ze.getName());
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,313,final ByteBuffer en = zipEncoding.encode(ze.getName());
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,331, catch (IOException e) { /* swallow */ }
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,331,} catch (final IOException e) { /* swallow */ }
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,342,numeration<ZipArchiveEntry> e = zf.getEntries();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,342,final Enumeration<ZipArchiveEntry> e = zf.getEntries();
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,344,ipArchiveEntry ze = e.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,344,final ZipArchiveEntry ze = e.nextElement();
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,371,nicodePathExtraField ucpf = findUniCodePath(ze);
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,371,final UnicodePathExtraField ucpf = findUniCodePath(ze);
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,374,ipEncoding enc = ZipEncodingHelper.getZipEncoding(encoding);
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,375,yteBuffer ne = enc.encode(ze.getName());
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,374,final ZipEncoding enc = ZipEncodingHelper.getZipEncoding(encoding);
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,375,final ByteBuffer ne = enc.encode(ze.getName());
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,377,RC32 crc = new CRC32();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,377,final CRC32 crc = new CRC32();
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,389,"ile file1 = getFile(""utf8-7zip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,390,"ile file2 = getFile(""utf8-winzip-test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,389,"final File file1 = getFile(""utf8-7zip-test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,390,"final File file2 = getFile(""utf8-winzip-test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,398,yte[] b = ze.getRawName();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,398,final byte[] b = ze.getRawName();
False,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,30,000A_NTFS xf = new X000A_NTFS();
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,30,final X000A_NTFS xf = new X000A_NTFS();
False,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,35,yte[] b = xf.getLocalFileDataData();
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,35,final byte[] b = xf.getLocalFileDataData();
False,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,37,000A_NTFS xf2 = new X000A_NTFS();
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,37,final X000A_NTFS xf2 = new X000A_NTFS();
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,110,"ile archive = getFile(""COMPRESS-210_unix_time_zip_test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,110,"final File archive = getFile(""COMPRESS-210_unix_time_zip_test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,115,numeration<ZipArchiveEntry> en = zf.getEntries();
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,115,final Enumeration<ZipArchiveEntry> en = zf.getEntries();
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,121,ipArchiveEntry zae = en.nextElement();
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,122,tring name = zae.getName();
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,123,5455_ExtendedTimestamp xf = (X5455_ExtendedTimestamp) zae.getExtraField(X5455);
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,124,ate rawZ = zae.getLastModifiedDate();
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,125,ate m = xf.getModifyJavaTime();
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,126,oolean zipTimeUsesExtendedTimestamp = rawZ.equals(m);
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,127,ate z = zipTimeUsesExtendedTimestamp ? rawZ : adjustFromGMTToExpectedOffset(rawZ);
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,128,ate a = xf.getAccessJavaTime();
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,121,final ZipArchiveEntry zae = en.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,122,final String name = zae.getName();
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,123,final X5455_ExtendedTimestamp xf = (X5455_ExtendedTimestamp) zae.getExtraField(X5455);
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,124,final Date rawZ = zae.getLastModifiedDate();
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,125,final Date m = xf.getModifyJavaTime();
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,126,final boolean zipTimeUsesExtendedTimestamp = rawZ.equals(m);
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,127,final Date z = zipTimeUsesExtendedTimestamp ? rawZ : adjustFromGMTToExpectedOffset(rawZ);
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,128,final Date a = xf.getAccessJavaTime();
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,130,tring zipTime = DATE_FORMAT.format(z);
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,131,tring modTime = DATE_FORMAT.format(m);
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,132,tring accTime = DATE_FORMAT.format(a);
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,130,final String zipTime = DATE_FORMAT.format(z);
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,131,final String modTime = DATE_FORMAT.format(m);
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,132,final String accTime = DATE_FORMAT.format(a);
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,135,nt x = name.lastIndexOf('/');
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,136,tring yearString = name.substring(x + 1);
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,135,final int x = name.lastIndexOf('/');
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,136,final String yearString = name.substring(x + 1);
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,140, catch (NumberFormatException nfe) {
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,140,} catch (final NumberFormatException nfe) {
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,232,"alendar cal = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));"
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,232,"final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));"
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,239,ate timeMillis = cal.getTime();
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,240,ipLong time = new ZipLong(timeMillis.getTime() / 1000);
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,239,final Date timeMillis = cal.getTime();
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,240,final ZipLong time = new ZipLong(timeMillis.getTime() / 1000);
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,247, catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,247,} catch (final IllegalArgumentException iae) {
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,426,"ile output = new File(tmpDir, ""write_rewrite.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,426,"final File output = new File(tmpDir, ""write_rewrite.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,428,"ate d = new Date(97, 8, 24, 15, 10, 2);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,428,"final Date d = new Date(97, 8, 24, 15, 10, 2);"
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,432,"ipArchiveEntry ze = new ZipArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,432,"final ZipArchiveEntry ze = new ZipArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,445,ipFile zf = new ZipFile(output);
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,446,"ipArchiveEntry ze = zf.getEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,447,5455_ExtendedTimestamp ext =
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,445,final ZipFile zf = new ZipFile(output);
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,446,"final ZipArchiveEntry ze = zf.getEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,447,final X5455_ExtendedTimestamp ext =
False,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,551,alendar cal = Calendar.getInstance();
True,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,551,final Calendar cal = Calendar.getInstance();
False,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,49,"ile archive = getFile(""COMPRESS-211_uid_gid_zip_test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,49,"final File archive = getFile(""COMPRESS-211_uid_gid_zip_test.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,54,numeration<ZipArchiveEntry> en = zf.getEntries();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,54,final Enumeration<ZipArchiveEntry> en = zf.getEntries();
False,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,60,ipArchiveEntry zae = en.nextElement();
False,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,61,tring name = zae.getName();
False,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,62,7875_NewUnix xf = (X7875_NewUnix) zae.getExtraField(X7875);
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,60,final ZipArchiveEntry zae = en.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,61,final String name = zae.getName();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,62,final X7875_NewUnix xf = (X7875_NewUnix) zae.getExtraField(X7875);
False,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,100,bject o = xf.clone();
True,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,100,final Object o = xf.clone();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,42,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,42,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,45,yte[] b = f.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,45,final byte[] b = f.getCentralDirectoryData();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,52,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,52,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,55,yte[] b = f.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,55,final byte[] b = f.getCentralDirectoryData();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,63,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,63,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,66,yte[] b = f.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,66,final byte[] b = f.getCentralDirectoryData();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,75,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,75,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,78,yte[] b = f.getCentralDirectoryData();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,78,final byte[] b = f.getCentralDirectoryData();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,86,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,86,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,88,yte[] b = new byte[16];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,88,final byte[] b = new byte[16];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,100,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,100,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,102,yte[] b = new byte[24];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,102,final byte[] b = new byte[24];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,115,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,115,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,117,yte[] b = new byte[28];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,117,final byte[] b = new byte[28];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,131,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,131,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,133,yte[] b = new byte[20];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,133,final byte[] b = new byte[20];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,146,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,146,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,148,yte[] b = new byte[28];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,148,final byte[] b = new byte[28];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,162,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,162,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,164,yte[] b = new byte[24];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,164,final byte[] b = new byte[24];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,177,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,177,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,179,yte[] b = new byte[12];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,179,final byte[] b = new byte[12];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,191,ip64ExtendedInformationExtraField f =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,191,final Zip64ExtendedInformationExtraField f =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,193,yte[] b = new byte[8];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java,193,final byte[] b = new byte[8];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,146,ile f = getTempFile(testName);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,147,ipArchiveOutputStream zos = new ZipArchiveOutputStream(f);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,146,final File f = getTempFile(testName);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,147,final ZipArchiveOutputStream zos = new ZipArchiveOutputStream(f);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,150,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,151,"ipArchiveEntry zae = new ZipArchiveEntry(""5GB_of_Zeros"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,150,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,151,"final ZipArchiveEntry zae = new ZipArchiveEntry(""5GB_of_Zeros"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,161, catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,161,} catch (final IOException ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,214,"andomAccessFile a = new RandomAccessFile(f, ""r"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,214,"final RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,223,yte[] eocd = new byte[12];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,223,final byte[] eocd = new byte[12];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,239,ong expectedZ64EocdOffset = end - 22 /* eocd.length */
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,239,final long expectedZ64EocdOffset = end - 22 /* eocd.length */
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,242,yte[] loc =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,242,final byte[] loc =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,245,yte[] z64EocdLoc = new byte[20];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,245,final byte[] z64EocdLoc = new byte[20];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,264,yte[] z64EocdStart = new byte[40];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,264,final byte[] z64EocdStart = new byte[40];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,286,yte[] cdOffset = new byte[8];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,286,final byte[] cdOffset = new byte[8];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,288,ong cdLoc = ZipEightByteInteger.getLongValue(cdOffset);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,288,final long cdLoc = ZipEightByteInteger.getLongValue(cdOffset);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,293,yte[] sig = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,293,final byte[] sig = new byte[4];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,332, catch (Zip64RequiredException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,332,} catch (final Zip64RequiredException ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,386,"andomAccessFile a = new RandomAccessFile(f, ""r"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,386,"final RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,400,yte[] header = new byte[12];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,400,final byte[] header = new byte[12];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,416,yte[] rest = new byte[23];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,416,final byte[] rest = new byte[23];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,438,yte[] extra = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,438,final byte[] extra = new byte[4];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,448,yte[] offset = new byte[8];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,448,final byte[] offset = new byte[8];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,452,yte[] sig = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,452,final byte[] sig = new byte[4];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,499, catch (Zip64RequiredException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,499,} catch (final Zip64RequiredException ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,533,or (Enumeration<ZipArchiveEntry> e =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,533,for (final Enumeration<ZipArchiveEntry> e =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,536,ipArchiveEntry zae = e.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,536,final ZipArchiveEntry zae = e.nextElement();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,545,nputStream i =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,545,final InputStream i =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,585,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,586,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,585,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,586,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,599,"andomAccessFile a = new RandomAccessFile(f, ""r"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,599,"final RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,647,yte[] extra = new byte[20];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,647,final byte[] extra = new byte[20];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,766,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,767,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,766,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,767,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,779, catch (Zip64RequiredException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,779,} catch (final Zip64RequiredException ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,826,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,827,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,826,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,827,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,839,andomAccessFile a =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,839,final RandomAccessFile a =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,844,ong cfhPos = a.getFilePointer();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,844,final long cfhPos = a.getFilePointer();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,890,yte[] extra = new byte[20];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,890,final byte[] extra = new byte[20];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1013,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1014,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1013,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1014,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1022, catch (Zip64RequiredException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1022,} catch (final Zip64RequiredException ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1069,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1070,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1069,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1070,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1084,"andomAccessFile a = new RandomAccessFile(f, ""r"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1084,"final RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1241,ipArchiveEntry zae =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1241,final ZipArchiveEntry zae =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1248, catch (Zip64RequiredException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1248,} catch (final Zip64RequiredException ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1274,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1275,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1274,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1275,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1288, catch (Zip64RequiredException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1288,} catch (final Zip64RequiredException ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1331,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1332,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1331,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1332,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1343,"andomAccessFile a = new RandomAccessFile(f, ""r"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1343,"final RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1397,oolean hasExtra = mode == Zip64Mode.Always
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1397,final boolean hasExtra = mode == Zip64Mode.Always
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1432,yte[] extra = new byte[20];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1432,final byte[] extra = new byte[20];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1508,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1509,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1508,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1509,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1520,"andomAccessFile a = new RandomAccessFile(f, ""r"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1520,"final RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1673,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1674,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1673,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1674,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1684,"andomAccessFile a = new RandomAccessFile(f, ""r"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1684,"final RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1688,ong cfhPos = a.getFilePointer();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1688,final long cfhPos = a.getFilePointer();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1708,yte[] crc = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1708,final byte[] crc = new byte[4];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1844,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1845,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1844,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1845,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1855,"andomAccessFile a = new RandomAccessFile(f, ""r"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1855,"final RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1859,ong cfhPos = a.getFilePointer();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1859,final long cfhPos = a.getFilePointer();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1879,yte[] crc = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,1879,final byte[] crc = new byte[4];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2029,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2030,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2029,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2030,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2040,"andomAccessFile a = new RandomAccessFile(f, ""r"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2040,"final RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2120,oolean hasExtra =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2120,final boolean hasExtra =
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2134,yte[] extra = new byte[12];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2134,final byte[] extra = new byte[12];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2202,yte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2203,"ipArchiveEntry zae = new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2202,final byte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2203,"final ZipArchiveEntry zae = new ZipArchiveEntry(""0"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2213,"andomAccessFile a = new RandomAccessFile(f, ""r"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2213,"final RandomAccessFile a = new RandomAccessFile(f, ""r"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2355,ile f = getTempFile(testName);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2355,final File f = getTempFile(testName);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2357,ipArchiveOutputStream zos = useRandomAccessFile
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2357,final ZipArchiveOutputStream zos = useRandomAccessFile
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2362, catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2362,} catch (final IOException ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2424,"ile f = File.createTempFile(""commons-compress-"" + testName, "".zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2424,"final File f = File.createTempFile(""commons-compress-"" + testName, "".zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2431,ileInputStream fin = new FileInputStream(f);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2431,final FileInputStream fin = new FileInputStream(f);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2440,yte[] buf = new byte[1024 * 1024];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2440,final byte[] buf = new byte[1024 * 1024];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2442,andom r = new Random(System.currentTimeMillis());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2442,final Random r = new Random(System.currentTimeMillis());
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2448,nt idx = r.nextInt(readNow);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2448,final int idx = r.nextInt(readNow);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2470,numeration<ZipArchiveEntry> e = zf.getEntries();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2470,final Enumeration<ZipArchiveEntry> e = zf.getEntries();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2478,yte[] buf = new byte[1024 * 1024];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2478,final byte[] buf = new byte[1024 * 1024];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2480,andom r = new Random(System.currentTimeMillis());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2480,final Random r = new Random(System.currentTimeMillis());
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2482,nputStream zin = zf.getInputStream(zae);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2482,final InputStream zin = zf.getInputStream(zae);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2488,nt idx = r.nextInt(readNow);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2488,final int idx = r.nextInt(readNow);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2504,ileInputStream fin = new FileInputStream(f);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2504,final FileInputStream fin = new FileInputStream(f);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2531,or (Enumeration<ZipArchiveEntry> e = zf.getEntries(); e.hasMoreElements(); ) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2532,ipArchiveEntry zae = e.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2531,for (final Enumeration<ZipArchiveEntry> e = zf.getEntries(); e.hasMoreElements(); ) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2532,final ZipArchiveEntry zae = e.nextElement();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2548,yte[] sig = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2548,final byte[] sig = new byte[4];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2556,ong cdOffsetLoc = end - 22 - 20 - 56 + 48;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2556,final long cdOffsetLoc = end - 22 - 20 - 56 + 48;
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2559,yte[] cdOffset = new byte[8];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2559,final byte[] cdOffset = new byte[8];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2568,yte[] cdOffset = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2568,final byte[] cdOffset = new byte[4];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2577,ipArchiveEntry zae = new ZipArchiveEntry(String.valueOf(i));
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2577,final ZipArchiveEntry zae = new ZipArchiveEntry(String.valueOf(i));
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2588,yte[] buf = new byte[ONE_MILLION];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java,2588,final byte[] buf = new byte[ONE_MILLION];
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,39,siExtraField a = new AsiExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,39,final AsiExtraField a = new AsiExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,42,nrecognizedExtraField u = new UnrecognizedExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,42,final UnrecognizedExtraField u = new UnrecognizedExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,46,"ipArchiveEntry ze = new ZipArchiveEntry(""test/"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,46,"final ZipArchiveEntry ze = new ZipArchiveEntry(""test/"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,48,yte[] data1 = ze.getExtra();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,48,final byte[] data1 = ze.getExtra();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,54,nrecognizedExtraField u2 = new UnrecognizedExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,54,final UnrecognizedExtraField u2 = new UnrecognizedExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,59,yte[] data2 = ze.getExtra();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,59,final byte[] data2 = ze.getExtra();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,66,nrecognizedExtraField u3 = new UnrecognizedExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,66,final UnrecognizedExtraField u3 = new UnrecognizedExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,74,yte[] data3 = ze.getExtra();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,74,final byte[] data3 = ze.getExtra();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,84, catch (java.util.NoSuchElementException nse) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,84,} catch (final java.util.NoSuchElementException nse) {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,93,siExtraField a = new AsiExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,93,final AsiExtraField a = new AsiExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,96,nrecognizedExtraField u = new UnrecognizedExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,96,final UnrecognizedExtraField u = new UnrecognizedExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,100,"ipArchiveEntry ze = new ZipArchiveEntry(""test/"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,100,"final ZipArchiveEntry ze = new ZipArchiveEntry(""test/"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,105,yte[] b = ExtraFieldUtilsTest.UNRECOGNIZED_HEADER.getBytes();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,105,final byte[] b = ExtraFieldUtilsTest.UNRECOGNIZED_HEADER.getBytes();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,140,siExtraField a = new AsiExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,140,final AsiExtraField a = new AsiExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,143,nrecognizedExtraField u = new UnrecognizedExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,143,final UnrecognizedExtraField u = new UnrecognizedExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,147,"ipArchiveEntry ze = new ZipArchiveEntry(""test/"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,147,"final ZipArchiveEntry ze = new ZipArchiveEntry(""test/"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,149,yte[] data1 = ze.getExtra();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,149,final byte[] data1 = ze.getExtra();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,151,nrecognizedExtraField u2 = new UnrecognizedExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,151,final UnrecognizedExtraField u2 = new UnrecognizedExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,156,yte[] data2 = ze.getExtra();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,156,final byte[] data2 = ze.getExtra();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,163,nrecognizedExtraField u3 = new UnrecognizedExtraField();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,163,final UnrecognizedExtraField u3 = new UnrecognizedExtraField();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,212,ipArchiveOutputStream zos =
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,212,final ZipArchiveOutputStream zos =
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,214,"ipArchiveEntry entry = new ZipArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,214,"final ZipArchiveEntry entry = new ZipArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,240,"ipArchiveEntry entry1 = new ZipArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,241,"ipArchiveEntry entry2 = new ZipArchiveEntry(""bar"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,240,"final ZipArchiveEntry entry1 = new ZipArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,241,"final ZipArchiveEntry entry2 = new ZipArchiveEntry(""bar"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,251,"ipArchiveEntry entry1 = new ZipArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,252,"ipArchiveEntry entry2 = new ZipArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,253,"ipArchiveEntry entry3 = new ZipArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,251,"final ZipArchiveEntry entry1 = new ZipArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,252,"final ZipArchiveEntry entry2 = new ZipArchiveEntry(""foo"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,253,"final ZipArchiveEntry entry3 = new ZipArchiveEntry(""foo"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,264,"ipArchiveEntry archiveEntry = new ZipArchiveEntry(""fred"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,264,"final ZipArchiveEntry archiveEntry = new ZipArchiveEntry(""fred"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,268,ipArchiveEntry copy = new ZipArchiveEntry(archiveEntry);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,268,final ZipArchiveEntry copy = new ZipArchiveEntry(archiveEntry);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,65,"ipArchiveEntry zae = zf.getEntry(""USD0558682-20080101.ZIP"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,65,"final ZipArchiveEntry zae = zf.getEntry(""USD0558682-20080101.ZIP"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,85,nputStream is = ZipArchiveInputStreamTest.class
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,85,final InputStream is = ZipArchiveInputStreamTest.class
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,87,ipArchiveInputStream zip = new ZipArchiveInputStream(is);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,87,final ZipArchiveInputStream zip = new ZipArchiveInputStream(is);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,91,yte[] expected = new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,91,final byte[] expected = new byte[] {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,94,yte[] actual = new byte[expected.length];
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,94,final byte[] actual = new byte[expected.length];
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,129,"ipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""SHRUNK.ZIP"")));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,129,"final ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""SHRUNK.ZIP"")));"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,162,"ipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""COMPRESS-264.zip"")));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,162,"final ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""COMPRESS-264.zip"")));"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,165,ipArchiveEntry ze = in.getNextZipEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,165,final ZipArchiveEntry ze = in.getNextZipEntry();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,176,"ipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""bzip2-zip.zip"")));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,176,"final ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""bzip2-zip.zip"")));"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,179,ipArchiveEntry ze = in.getNextZipEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,179,final ZipArchiveEntry ze = in.getNextZipEntry();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,181,yte[] expected = new byte[42];
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,181,final byte[] expected = new byte[42];
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,38,ipEightByteInteger zl = new ZipEightByteInteger(0xAB12345678l);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,39,yte[] result = zl.getBytes();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,38,final ZipEightByteInteger zl = new ZipEightByteInteger(0xAB12345678l);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,39,final byte[] result = zl.getBytes();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,56,"yte[] val = new byte[] {0x78, 0x56, 0x34, 0x12, (byte) 0xAB, 0x00, 0x00, 0x00};"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,57,ipEightByteInteger zl = new ZipEightByteInteger(val);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,56,"final byte[] val = new byte[] {0x78, 0x56, 0x34, 0x12, (byte) 0xAB, 0x00, 0x00, 0x00};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,57,final ZipEightByteInteger zl = new ZipEightByteInteger(val);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,66,ipEightByteInteger zl =
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,66,final ZipEightByteInteger zl =
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,69,yte[] result = zl.getBytes();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,69,final byte[] result = zl.getBytes();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,86,"yte[] val = new byte[] {(byte) 0xFE, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,87,ipEightByteInteger zl = new ZipEightByteInteger(val);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,86,"final byte[] val = new byte[] {(byte) 0xFE, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,87,final ZipEightByteInteger zl = new ZipEightByteInteger(val);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,98,ipEightByteInteger zl = new ZipEightByteInteger(0x12345678);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,99,ipEightByteInteger zl2 = new ZipEightByteInteger(0x12345678);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,100,ipEightByteInteger zl3 = new ZipEightByteInteger(0x87654321);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,98,final ZipEightByteInteger zl = new ZipEightByteInteger(0x12345678);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,99,final ZipEightByteInteger zl2 = new ZipEightByteInteger(0x12345678);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,100,final ZipEightByteInteger zl3 = new ZipEightByteInteger(0x87654321);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,118,"ipEightByteInteger zl = new ZipEightByteInteger(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,118,"final ZipEightByteInteger zl = new ZipEightByteInteger(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,63,yte[] b =
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,63,final byte[] b =
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,119,or (byte anExpected : expected) {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,120,yte a = actual.get();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,119,for (final byte anExpected : expected) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,120,final byte a = actual.get();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,129,ipEncoding enc = ZipEncodingHelper.getZipEncoding(name);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,129,final ZipEncoding enc = ZipEncodingHelper.getZipEncoding(name);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,139,tring decoded = enc.decode(testBytes);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,139,final String decoded = enc.decode(testBytes);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,143,yteBuffer encoded = enc.encode(decoded);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java,143,final ByteBuffer encoded = enc.encode(decoded);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,51,rrayList<ZipArchiveEntry> l = Collections.list(zf.getEntries());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,51,final ArrayList<ZipArchiveEntry> l = Collections.list(zf.getEntries());
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,80,rrayList<ZipArchiveEntry> l = Collections.list(zf.getEntriesInPhysicalOrder());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,80,final ArrayList<ZipArchiveEntry> l = Collections.list(zf.getEntriesInPhysicalOrder());
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,112, catch (Exception ex) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,112,} catch (final Exception ex) {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,119,"ile f = File.createTempFile(""commons-compress-zipfiletest"", "".zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,119,"final File f = File.createTempFile(""commons-compress-zipfiletest"", "".zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,125,ipArchiveOutputStream zo = new ZipArchiveOutputStream(o);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,125,final ZipArchiveOutputStream zo = new ZipArchiveOutputStream(o);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,141,yte[] b = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,141,final byte[] b = new byte[4];
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,160,"ile archive = getFile(""test-winzip.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,160,"final File archive = getFile(""test-winzip.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,173,"ile archive = getFile(""COMPRESS-208.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,173,"final File archive = getFile(""COMPRESS-208.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,201,"ile archive = getFile(""COMPRESS-214_unix_symlinks.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,201,"final File archive = getFile(""COMPRESS-214_unix_symlinks.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,204,numeration<ZipArchiveEntry> en = zf.getEntries();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,204,final Enumeration<ZipArchiveEntry> en = zf.getEntries();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,206,ipArchiveEntry zae = en.nextElement();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,207,tring link = zf.getUnixSymlink(zae);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,206,final ZipArchiveEntry zae = en.nextElement();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,207,final String link = zf.getUnixSymlink(zae);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,209,tring name = zae.getName();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,210,tring expected = expectedVals.get(name);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,209,final String name = zae.getName();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,210,final String expected = expectedVals.get(name);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,224,"ile archive = getFile(""COMPRESS-227.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,224,"final File archive = getFile(""COMPRESS-227.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,227,"ipArchiveEntry ze = zf.getEntry(""test1.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,227,"final ZipArchiveEntry ze = zf.getEntry(""test1.txt"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,232,"or (ZipArchiveEntry entry : zf.getEntries(""test1.txt"")) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,232,"for (final ZipArchiveEntry entry : zf.getEntries(""test1.txt"")) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,244,"ile archive = getFile(""COMPRESS-228.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,244,"final File archive = getFile(""COMPRESS-228.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,248,"ipArchiveEntry ze = zf.getEntry(""src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,248,"final ZipArchiveEntry ze = zf.getEntry(""src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,280,"ile archive = getFile(""COMPRESS-264.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,280,"final File archive = getFile(""COMPRESS-264.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,282,"ipArchiveEntry ze = zf.getEntry(""test.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,282,"final ZipArchiveEntry ze = zf.getEntry(""test.txt"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,290,"ile archive = getFile(""bzip2-zip.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,290,"final File archive = getFile(""bzip2-zip.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,292,"ipArchiveEntry ze = zf.getEntry(""lots-of-as"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,292,"final ZipArchiveEntry ze = zf.getEntry(""lots-of-as"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,294,yte[] expected = new byte[42];
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,294,final byte[] expected = new byte[42];
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,310,"ile archive = getFile(""ordertest.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,310,"final File archive = getFile(""ordertest.zip"");"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,317,ipArchiveEntry ze = entries.get(index);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,317,final ZipArchiveEntry ze = entries.get(index);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,36,ipLong zl = new ZipLong(0x12345678);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,37,yte[] result = zl.getBytes();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,36,final ZipLong zl = new ZipLong(0x12345678);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,37,final byte[] result = zl.getBytes();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,50,yte[] arr = new byte[5];
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,50,final byte[] arr = new byte[5];
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,63,"yte[] val = new byte[] {0x78, 0x56, 0x34, 0x12};"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,64,ipLong zl = new ZipLong(val);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,63,"final byte[] val = new byte[] {0x78, 0x56, 0x34, 0x12};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,64,final ZipLong zl = new ZipLong(val);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,73,ipLong zl = new ZipLong(0x12345678);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,74,ipLong zl2 = new ZipLong(0x12345678);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,75,ipLong zl3 = new ZipLong(0x87654321);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,73,final ZipLong zl = new ZipLong(0x12345678);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,74,final ZipLong zl2 = new ZipLong(0x12345678);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,75,final ZipLong zl3 = new ZipLong(0x87654321);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,93,"ipLong zl = new ZipLong(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,93,"final ZipLong zl = new ZipLong(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,99,ipLong s1 = new ZipLong(42);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,100,ipLong s2 = (ZipLong) s1.clone();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,99,final ZipLong s1 = new ZipLong(42);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java,100,final ZipLong s2 = (ZipLong) s1.clone();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,36,ipShort zs = new ZipShort(0x1234);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,37,yte[] result = zs.getBytes();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,36,final ZipShort zs = new ZipShort(0x1234);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,37,final byte[] result = zs.getBytes();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,49,yte[] arr = new byte[3];
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,49,final byte[] arr = new byte[3];
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,61,"yte[] val = new byte[] {0x34, 0x12};"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,62,ipShort zs = new ZipShort(val);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,61,"final byte[] val = new byte[] {0x34, 0x12};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,62,final ZipShort zs = new ZipShort(val);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,71,ipShort zs = new ZipShort(0x1234);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,72,ipShort zs2 = new ZipShort(0x1234);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,73,ipShort zs3 = new ZipShort(0x5678);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,71,final ZipShort zs = new ZipShort(0x1234);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,72,final ZipShort zs2 = new ZipShort(0x1234);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,73,final ZipShort zs3 = new ZipShort(0x5678);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,91,"ipShort zs = new ZipShort(new byte[] {(byte)0xFF, (byte)0xFF});"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,91,"final ZipShort zs = new ZipShort(new byte[] {(byte)0xFF, (byte)0xFF});"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,97,ipShort s1 = new ZipShort(42);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,98,ipShort s2 = (ZipShort) s1.clone();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,97,final ZipShort s1 = new ZipShort(42);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java,98,final ZipShort s2 = (ZipShort) s1.clone();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,40,alendar cal = Calendar.getInstance();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,40,final Calendar cal = Calendar.getInstance();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,42,nt year = cal.get(Calendar.YEAR);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,43,nt month = cal.get(Calendar.MONTH) + 1;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,44,ong value =  ((year - 1980) << 25)
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,42,final int year = cal.get(Calendar.YEAR);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,43,final int month = cal.get(Calendar.MONTH) + 1;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,44,final long value =  ((year - 1980) << 25)
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,51,yte[] result = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,51,final byte[] result = new byte[4];
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,61,ipLong test = ZipUtil.toDosTime(time);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,61,final ZipLong test = ZipUtil.toDosTime(time);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,77,yte[] b1 = ZipUtil.toDosTime(0);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,78,yte b10 = b1[0]; // Save the first byte
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,77,final byte[] b1 = ZipUtil.toDosTime(0);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,78,final byte b10 = b1[0]; // Save the first byte
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,80,yte[] b2 = ZipUtil.toDosTime(0); // get the same time
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,80,final byte[] b2 = ZipUtil.toDosTime(0); // get the same time
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,86,yte[] b1 = ZipUtil.toDosTime(160441200000L); // 1.1..1975
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,86,final byte[] b1 = ZipUtil.toDosTime(160441200000L); // 1.1..1975
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,95,imeZone tz = TimeZone.getDefault();
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,96,"ong date = 476096400000L; // 1.1.1985, 10:00 am GMT"
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,97,yte[] b1 = ZipUtil.toDosTime(date - tz.getOffset(date));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,95,final TimeZone tz = TimeZone.getDefault();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,96,"final long date = 476096400000L; // 1.1.1985, 10:00 am GMT"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,97,final byte[] b1 = ZipUtil.toDosTime(date - tz.getOffset(date));
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,106,yte[][] bTest = new byte[6][];
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,106,final byte[][] bTest = new byte[6][];
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,114,yte[][] rTest = new byte[6][];
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,114,final byte[][] rTest = new byte[6][];
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,125,yte[] result = ZipUtil.reverse(bTest[i]);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,125,final byte[] result = ZipUtil.reverse(bTest[i]);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,133,igInteger big1 = BigInteger.valueOf(1);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,134,igInteger big2 = BigInteger.valueOf(Long.MAX_VALUE);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,135,igInteger big3 = BigInteger.valueOf(Long.MIN_VALUE);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,133,final BigInteger big1 = BigInteger.valueOf(1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,134,final BigInteger big2 = BigInteger.valueOf(Long.MAX_VALUE);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,135,final BigInteger big3 = BigInteger.valueOf(Long.MIN_VALUE);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,141,igInteger big4 = big2.add(big1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,141,final BigInteger big4 = big2.add(big1);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,145, catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,145,} catch (final IllegalArgumentException iae) {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,149,igInteger big5 = big3.subtract(big1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,149,final BigInteger big5 = big3.subtract(big1);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,153, catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,153,} catch (final IllegalArgumentException iae) {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,160,ong l0 = 0;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,161,ong l1 = 1;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,162,ong l2 = -1;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,163,ong l3 = Integer.MIN_VALUE;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,164,ong l4 = Long.MAX_VALUE;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,165,ong l5 = Long.MIN_VALUE;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,167,igInteger big0 = ZipUtil.longToBig(l0);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,168,igInteger big1 = ZipUtil.longToBig(l1);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,169,igInteger big2 = ZipUtil.longToBig(l2);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,170,igInteger big3 = ZipUtil.longToBig(l3);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,171,igInteger big4 = ZipUtil.longToBig(l4);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,160,final long l0 = 0;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,161,final long l1 = 1;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,162,final long l2 = -1;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,163,final long l3 = Integer.MIN_VALUE;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,164,final long l4 = Long.MAX_VALUE;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,165,final long l5 = Long.MIN_VALUE;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,167,final BigInteger big0 = ZipUtil.longToBig(l0);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,168,final BigInteger big1 = ZipUtil.longToBig(l1);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,169,final BigInteger big2 = ZipUtil.longToBig(l2);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,170,final BigInteger big3 = ZipUtil.longToBig(l3);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,171,final BigInteger big4 = ZipUtil.longToBig(l4);
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,182, catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,182,} catch (final IllegalArgumentException iae) {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,192,yte b = (byte) i;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,192,final byte b = (byte) i;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,205,yte expectedVal = (byte) i;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,205,final byte expectedVal = (byte) i;
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,216, catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,216,} catch (final IllegalArgumentException iae) {
False,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,223, catch (IllegalArgumentException iae) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java,223,} catch (final IllegalArgumentException iae) {
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,53,terator<String> it = archiveList.iterator();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,53,final Iterator<String> it = archiveList.iterator();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,55,tring entry = it.next();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,55,final String entry = it.next();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,64,terator<String> it = archiveList.iterator();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,64,final Iterator<String> it = archiveList.iterator();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,66,tring entry = it.next();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,66,final String entry = it.next();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,88,"rchiveEntry e = new ZipArchiveEntry(""test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,89,"rchiveEntry e2 = new ZipArchiveEntry(""test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,88,"final ArchiveEntry e = new ZipArchiveEntry(""test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,89,"final ArchiveEntry e2 = new ZipArchiveEntry(""test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,91,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,91,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,96,hange c = changes.getChanges().iterator().next();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,96,final Change c = changes.getChanges().iterator().next();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,123,"rchiveEntry e = new ZipArchiveEntry(""test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,124,"rchiveEntry e2 = new ZipArchiveEntry(""test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,123,"final ArchiveEntry e = new ZipArchiveEntry(""test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,124,"final ArchiveEntry e2 = new ZipArchiveEntry(""test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,126,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,126,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,131,hange c = changes.getChanges().iterator().next();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,131,final Change c = changes.getChanges().iterator().next();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,154,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,154,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,158,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,158,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,168,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,168,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,171,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,171,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,196,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,196,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,200,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,200,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,210,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,210,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,213,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,213,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,238,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,238,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,242,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,242,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,252,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,252,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,255,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,255,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,280,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,280,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,284,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,284,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,294,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,294,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,298,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,298,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,323,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,323,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,327,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,327,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,337,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,337,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,341,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,341,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,367,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,367,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,371,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,371,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,382,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,382,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,388,"rchiveEntry entry = out.createArchiveEntry(testtxt, ""test/test3.xml"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,388,"final ArchiveEntry entry = out.createArchiveEntry(testtxt, ""test/test3.xml"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,392,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,392,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,413,"ile test3xml = new File(check,""result/test/test3.xml"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,413,"final File test3xml = new File(check,""result/test/test3.xml"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,416,ufferedReader reader = new BufferedReader(new FileReader(test3xml));
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,416,final BufferedReader reader = new BufferedReader(new FileReader(test3xml));
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,439,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,439,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,443,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,443,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,452,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,452,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,458,"rchiveEntry entry = out.createArchiveEntry(file1, ""bla/test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,458,"final ArchiveEntry entry = out.createArchiveEntry(file1, ""bla/test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,462,hangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,463,"hangeSetResults results = performer.perform(ais, out);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,462,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,463,"final ChangeSetResults results = performer.perform(ais, out);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,503,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,503,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,507,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,507,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,516,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,516,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,522,"rchiveEntry entry = out.createArchiveEntry(file1, ""bla/test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,522,"final ArchiveEntry entry = out.createArchiveEntry(file1, ""bla/test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,526,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,526,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,550,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,550,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,554,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,554,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,563,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,563,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,566,"rchiveEntry entry = new ZipArchiveEntry(""blub/test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,566,"final ArchiveEntry entry = new ZipArchiveEntry(""blub/test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,573,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,573,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,597,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,597,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,601,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,601,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,609,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,609,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,612,"rchiveEntry entry = new ZipArchiveEntry(""blub/test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,612,"final ArchiveEntry entry = new ZipArchiveEntry(""blub/test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,619,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,619,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,643,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,643,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,647,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,647,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,656,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,656,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,659,"rchiveEntry entry = new CpioArchiveEntry(""blub/test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,659,"final ArchiveEntry entry = new CpioArchiveEntry(""blub/test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,666,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,666,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,692,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,692,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,696,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,696,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,705,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,705,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,710,"rchiveEntry entry = new CpioArchiveEntry(""bla/test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,710,"final ArchiveEntry entry = new CpioArchiveEntry(""bla/test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,717,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,717,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,745,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,745,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,757,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,757,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,769,ist<String> expected = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,769,final List<String> expected = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,786,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,786,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,797,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,797,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,808,ist<String> expected = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,808,final List<String> expected = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,824,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,824,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,838,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,838,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,849,ist<String> expected = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,849,final List<String> expected = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,860,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,860,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,885,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,885,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,896,ist<String> expected = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,896,final List<String> expected = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,914,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,914,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,921,"arArchiveEntry entry = new JarArchiveEntry(""testdata/test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,921,"final JarArchiveEntry entry = new JarArchiveEntry(""testdata/test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,932,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,932,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,943,ist<String> expected = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,943,final List<String> expected = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,960,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,960,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,971,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,971,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,983,ist<String> expected = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,983,final List<String> expected = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,999,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,999,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1017,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1017,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1028,ist<String> expected = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1028,final List<String> expected = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1068,ile input = this.createEmptyArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1068,final File input = this.createEmptyArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1073,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1073,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1075,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1075,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1085,"rchiveEntry entry = new ZipArchiveEntry(""bla/test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1085,"final ArchiveEntry entry = new ZipArchiveEntry(""bla/test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1088,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1088,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1114,ile input = this.createSingleEntryArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1114,final File input = this.createSingleEntryArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1119,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1119,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1121,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1121,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1133,"rchiveEntry entry = out.createArchiveEntry(file,""bla/test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1133,"final ArchiveEntry entry = out.createArchiveEntry(file,""bla/test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1137,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1137,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1163,ile input = this.createSingleEntryArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1163,final File input = this.createSingleEntryArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1168,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1168,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1170,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1170,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1179,"rchiveEntry entry = out.createArchiveEntry(file,""bla/test.txt"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1179,"final ArchiveEntry entry = out.createArchiveEntry(file,""bla/test.txt"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1186,hangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1186,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1213,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1213,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1217,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1217,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1226,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1226,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1229,"rchiveEntry entry = new ZipArchiveEntry(""testdata/test1.xml"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1229,"final ArchiveEntry entry = new ZipArchiveEntry(""testdata/test1.xml"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1232,hangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1233,"hangeSetResults results = performer.perform(ais, out);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1232,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1233,"final ChangeSetResults results = performer.perform(ais, out);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1258,ile input = this.createArchive(archivename);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1258,final File input = this.createArchive(archivename);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1262,"ile result = File.createTempFile(""test"", "".""+archivename);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1262,"final File result = File.createTempFile(""test"", "".""+archivename);"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1271,hangeSet changes = new ChangeSet();
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1271,final ChangeSet changes = new ChangeSet();
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1274,"rchiveEntry entry = new ZipArchiveEntry(""testdata/test1.xml"");"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1274,"final ArchiveEntry entry = new ZipArchiveEntry(""testdata/test1.xml"");"
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1277,hangeSetPerformer performer = new ChangeSetPerformer(changes);
False,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1278,"hangeSetResults results = performer.perform(ais, out);"
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1277,final ChangeSetPerformer performer = new ChangeSetPerformer(changes);
True,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java,1278,"final ChangeSetResults results = performer.perform(ais, out);"
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,44,ileInputStream in = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,44,final FileInputStream in = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,56,ileOutputStream os = new FileOutputStream(decompressed);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,56,final FileOutputStream os = new FileOutputStream(decompressed);
False,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,71,ileOutputStream os = new FileOutputStream(output);
True,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java,71,final FileOutputStream os = new FileOutputStream(output);
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,70,eflateParameters params = new DeflateParameters();
True,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,70,final DeflateParameters params = new DeflateParameters();
False,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,122,eflateParameters params = new DeflateParameters();
True,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java,122,final DeflateParameters params = new DeflateParameters();
False,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,92,"ompressorInputStream bzip2 = getStreamFor(""bla.txt.bz2"");"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,92,"final CompressorInputStream bzip2 = getStreamFor(""bla.txt.bz2"");"
False,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,96,"ompressorInputStream gzip = getStreamFor(""bla.tgz"");"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,96,"final CompressorInputStream gzip = getStreamFor(""bla.tgz"");"
False,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,100,"ompressorInputStream pack200 = getStreamFor(""bla.pack"");"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,100,"final CompressorInputStream pack200 = getStreamFor(""bla.pack"");"
False,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,104,"ompressorInputStream xz = getStreamFor(""bla.tar.xz"");"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,104,"final CompressorInputStream xz = getStreamFor(""bla.tar.xz"");"
False,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,108,"ompressorInputStream zlib = getStreamFor(""bla.tar.deflatez"");"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,108,"final CompressorInputStream zlib = getStreamFor(""bla.tar.deflatez"");"
False,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,115, catch (CompressorException e) {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,115,} catch (final CompressorException e) {
False,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,132, catch (IllegalStateException ise) {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,132,} catch (final IllegalStateException ise) {
False,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,141, catch (IllegalStateException ise) {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,141,} catch (final IllegalStateException ise) {
False,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,149,estData test = tests[i];
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,149,final TestData test = tests[i];
False,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,153,"ompressorInputStream in = getStreamFor(test.fileName, fac);"
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,153,"final CompressorInputStream in = getStreamFor(test.fileName, fac);"
False,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,155,or (char entry : test.entryNames) {
True,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,155,for (final char entry : test.entryNames) {
False,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,95,ileInputStream orig = new FileInputStream(original);
True,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java,95,final FileInputStream orig = new FileInputStream(original);
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,138,yte[] data = ((ByteArrayOutputStream) out).toByteArray();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,138,final byte[] data = ((ByteArrayOutputStream) out).toByteArray();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,147, catch (IOException ioex) {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,147,} catch (final IOException ioex) {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,166,"ileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,166,"final FileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,174,yteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,174,final ByteArrayOutputStream bout = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,176,zipParameters parameters = new GzipParameters();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,176,final GzipParameters parameters = new GzipParameters();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,182,"zipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,182,"final GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,187,zipCompressorInputStream in = new GzipCompressorInputStream(new ByteArrayInputStream(bout.toByteArray()));
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,188,yte[] content2 = IOUtils.toByteArray(in);
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,187,final GzipCompressorInputStream in = new GzipCompressorInputStream(new ByteArrayInputStream(bout.toByteArray()));
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,188,final byte[] content2 = IOUtils.toByteArray(in);
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,195,"ileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,195,"final FileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,203,yteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,203,final ByteArrayOutputStream bout = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,205,zipParameters parameters = new GzipParameters();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,205,final GzipParameters parameters = new GzipParameters();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,211,"zipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,211,"final GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,216,ZIPInputStream in = new GZIPInputStream(new ByteArrayInputStream(bout.toByteArray()));
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,217,yte[] content2 = IOUtils.toByteArray(in);
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,216,final GZIPInputStream in = new GZIPInputStream(new ByteArrayInputStream(bout.toByteArray()));
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,217,final byte[] content2 = IOUtils.toByteArray(in);
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,224,zipParameters parameters = new GzipParameters();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,224,final GzipParameters parameters = new GzipParameters();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,228, catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,228,} catch (final IllegalArgumentException e) {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,235, catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,235,} catch (final IllegalArgumentException e) {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,241,"ileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,241,"final FileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,249,yteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,249,final ByteArrayOutputStream bout = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,251,zipParameters parameters = new GzipParameters();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,251,final GzipParameters parameters = new GzipParameters();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,253,"zipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,253,"final GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,278,zipCompressorOutputStream out = new GzipCompressorOutputStream(new ByteArrayOutputStream());
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,278,final GzipCompressorOutputStream out = new GzipCompressorOutputStream(new ByteArrayOutputStream());
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,283, catch (IOException e) {
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,283,} catch (final IOException e) {
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,290,yteArrayOutputStream bout = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,290,final ByteArrayOutputStream bout = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,292,zipParameters parameters = new GzipParameters();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,292,final GzipParameters parameters = new GzipParameters();
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,298,"zipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,299,"ileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,298,"final GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);"
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,299,"final FileInputStream fis = new FileInputStream(getFile(""test3.xml""));"
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,307,zipCompressorInputStream input =
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,307,final GzipCompressorInputStream input =
False,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,310,zipParameters readParams = input.getMetaData();
True,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java,310,final GzipParameters readParams = input.getMetaData();
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,80,"ile archiveEntry = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,80,"final File archiveEntry = new File(dir, entry.getName());"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,87,utputStream out = new FileOutputStream(archiveEntry);
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,87,final OutputStream out = new FileOutputStream(archiveEntry);
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,139,ist<String> files = new ArrayList<String>();
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,139,final List<String> files = new ArrayList<String>();
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,153,yte[] sig = new byte[4];
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,153,final byte[] sig = new byte[4];
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,165,yte[] sig = new byte[4];
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,165,final byte[] sig = new byte[4];
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,177,yte[] sig = new byte[2];
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,177,final byte[] sig = new byte[2];
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,187,"ap<String, String> m = new HashMap<String, String>();"
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,187,"final Map<String, String> m = new HashMap<String, String>();"
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,198,yte[] rest = new byte[3];
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,198,final byte[] rest = new byte[3];
False,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,215,"ap<String, String> m = new HashMap<String, String>();"
True,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java,215,"final Map<String, String> m = new HashMap<String, String>();"
False,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,39,ong max = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();
True,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,src/test/java/org/apache/commons/compress/compressors/XZTestCase.java,39,final long max = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,34,"ileInputStream in = new FileInputStream(getFile(""bla.zip""));"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,34,"final FileInputStream in = new FileInputStream(getFile(""bla.zip""));"
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,48,yte[] rawData = new byte[1048576];
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,48,final byte[] rawData = new byte[1048576];
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,54,yteArrayOutputStream baos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,55,Zip2CompressorOutputStream bzipOut = new BZip2CompressorOutputStream(baos);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,54,final ByteArrayOutputStream baos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,55,final BZip2CompressorOutputStream bzipOut = new BZip2CompressorOutputStream(baos);
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,63,yteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,64,Zip2CompressorInputStream bzipIn = new BZip2CompressorInputStream(bais);
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,65,yte[] buffer = new byte[1024];
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,63,final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,64,final BZip2CompressorInputStream bzipIn = new BZip2CompressorInputStream(bais);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,65,final byte[] buffer = new byte[1024];
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,82,S ds = setUpFixture();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,82,final DS ds = setUpFixture();
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,90,S ds = setUpFixture();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,90,final DS ds = setUpFixture();
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,97,S ds = setUpFixture();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,97,final DS ds = setUpFixture();
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,104,S ds = setUpFixture2();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,104,final DS ds = setUpFixture2();
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,112,S ds = setUpFixture2();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,112,final DS ds = setUpFixture2();
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,119,S ds = setUpFixture2();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,119,final DS ds = setUpFixture2();
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,126,Zip2CompressorOutputStream.Data data = new BZip2CompressorOutputStream.Data(1);
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,127,lockSort s = new BlockSort(data);
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,128,nt[] fmap = new int[FIXTURE.length];
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,126,final BZip2CompressorOutputStream.Data data = new BZip2CompressorOutputStream.Data(1);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,127,final BlockSort s = new BlockSort(data);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,128,final int[] fmap = new int[FIXTURE.length];
False,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,150,Zip2CompressorOutputStream.Data data = new BZip2CompressorOutputStream.Data(1);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java,150,final BZip2CompressorOutputStream.Data data = new BZip2CompressorOutputStream.Data(1);
False,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,51,yteArrayOutputStream out = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,52,Zip2CompressorOutputStream bz2out = new BZip2CompressorOutputStream(out);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,51,final ByteArrayOutputStream out = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,52,final BZip2CompressorOutputStream bz2out = new BZip2CompressorOutputStream(out);
False,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,63,nputStream source = new ByteArrayInputStream(TRUNCATED_DATA);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,63,final InputStream source = new ByteArrayInputStream(TRUNCATED_DATA);
False,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,78,yteBuffer buffer = ByteBuffer.allocate(8192);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,78,final ByteBuffer buffer = ByteBuffer.allocate(8192);
False,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,100, catch (IOException e) {
True,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,100,} catch (final IOException e) {
False,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,106,ufferedInputStream bin = new BufferedInputStream(source);
False,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,107,"Zip2CompressorInputStream bZin = new BZip2CompressorInputStream(bin, true);"
True,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,106,final BufferedInputStream bin = new BufferedInputStream(source);
True,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,107,"final BZip2CompressorInputStream bZin = new BZip2CompressorInputStream(bin, true);"
False,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,115,nt length = to - from;
False,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,116,yte buff[] = new byte[length];
True,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,115,final int length = to - from;
True,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,116,final byte buff[] = new byte[length];
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,38,eflateCompressorInputStream in =
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,38,final DeflateCompressorInputStream in =
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,52,eflateCompressorInputStream in =
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,52,final DeflateCompressorInputStream in =
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,66,eflateCompressorInputStream in =
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,66,final DeflateCompressorInputStream in =
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,81,eflateCompressorInputStream in =
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java,81,final DeflateCompressorInputStream in =
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java,31,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java,32,eflateCompressorOutputStream cos = new DeflateCompressorOutputStream(bos);
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java,31,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java,32,final DeflateCompressorOutputStream cos = new DeflateCompressorOutputStream(bos);
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,28,eflateParameters p = new DeflateParameters();
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,28,final DeflateParameters p = new DeflateParameters();
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,35,eflateParameters p = new DeflateParameters();
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,35,final DeflateParameters p = new DeflateParameters();
False,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,41,eflateParameters p = new DeflateParameters();
True,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,src/test/java/org/apache/commons/compress/compressors/deflate/DeflateParametersTest.java,41,final DeflateParameters p = new DeflateParameters();
False,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,69,yte[] data = {
True,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/lzma/LZMAUtilsTestCase.java,69,final byte[] data = {
False,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,50,"ile archiveEntry = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,50,"final File archiveEntry = new File(dir, entry.getName());"
False,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,57,utputStream out = new FileOutputStream(archiveEntry);
True,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,57,final OutputStream out = new FileOutputStream(archiveEntry);
False,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,98,"ile archiveEntry = new File(dir, entry.getName());"
True,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,98,"final File archiveEntry = new File(dir, entry.getName());"
False,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,105,utputStream out = new FileOutputStream(archiveEntry);
True,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java,105,final OutputStream out = new FileOutputStream(archiveEntry);
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,41,yte[] b = new byte[12];
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,41,final byte[] b = new byte[12];
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,43,ileInputStream in = new FileInputStream(input);
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,43,final FileInputStream in = new FileInputStream(input);
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,95,ileInputStream gz = new FileInputStream(outputGz);
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,95,final FileInputStream gz = new FileInputStream(outputGz);
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,110,yteArrayOutputStream out = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,110,final ByteArrayOutputStream out = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,112,ramedSnappyCompressorInputStream in = new FramedSnappyCompressorInputStream(isSz);
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,112,final FramedSnappyCompressorInputStream in = new FramedSnappyCompressorInputStream(isSz);
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,134,ramedSnappyCompressorInputStream in = new FramedSnappyCompressorInputStream(isSz);
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,134,final FramedSnappyCompressorInputStream in = new FramedSnappyCompressorInputStream(isSz);
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,152,yte[] input = new byte[] {
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,152,final byte[] input = new byte[] {
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,157,ramedSnappyCompressorInputStream in =
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,157,final FramedSnappyCompressorInputStream in =
False,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,162, catch (IOException ex) {
True,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java,162,} catch (final IOException ex) {
False,src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStreamTest.java,27,yte[] data = {
True,src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStreamTest.java,src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStreamTest.java,27,final byte[] data = {
False,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,73,yte[] data = {
True,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java,73,final byte[] data = {
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,33,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,33,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,40,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,40,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,47,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,47,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,54,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,54,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,61,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,61,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,68,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,68,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,76,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,76,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,83,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,83,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,91,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,91,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,98,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,98,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,106,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,106,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,115,"itInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
True,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,115,"final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);"
False,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,35,yteArrayOutputStream bos = new ByteArrayOutputStream();
False,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,36,ountingOutputStream o = new CountingOutputStream(bos);
True,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,35,final ByteArrayOutputStream bos = new ByteArrayOutputStream();
True,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,36,final CountingOutputStream o = new CountingOutputStream(bos);
False,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,55,yteArrayInputStream bis =
True,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,55,final ByteArrayInputStream bis =
False,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,57,ountingInputStream i = new CountingInputStream(bis);
True,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java,57,final CountingInputStream i = new CountingInputStream(bis);
False,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,81,yteArrayInputStream in = new ByteArrayInputStream(new byte[] {
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,81,final ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {
False,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,84,nputStream sut = wrapper.wrap(in);
True,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,84,final InputStream sut = wrapper.wrap(in);

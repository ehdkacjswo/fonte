is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,49,register(X000A_NTFS.class);
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,18,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,20,import java.util.Date;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,21,import java.util.zip.ZipException;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,24,* NTFS extra field that was thought to store various attributes but
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,25,* in reality only stores timestamps.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,27,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,28,*    4.5.5 -NTFS Extra Field (0x000a):
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,30,*       The following is the layout of the NTFS attributes
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,31,"*       ""extra"" block. (Note: At this time the Mtime, Atime"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,32,*       and Ctime values MAY be used on any WIN32 system.)
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,34,*       Note: all fields stored in Intel low-byte/high-byte order.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,36,*         Value      Size       Description
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,38,"* (NTFS)  0x000a     2 bytes    Tag for this ""extra"" block type"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,39,"*         TSize      2 bytes    Size of the total ""extra"" block"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,40,*         Reserved   4 bytes    Reserved for future use
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,41,*         Tag1       2 bytes    NTFS attribute tag value #1
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,42,"*         Size1      2 bytes    Size of attribute #1, in bytes"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,43,*         (var)      Size1      Attribute #1 data
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,47,*          TagN       2 bytes    NTFS attribute tag value #N
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,48,"*          SizeN      2 bytes    Size of attribute #N, in bytes"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,49,*          (var)      SizeN      Attribute #N data
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,51,"*        For NTFS, values for Tag1 through TagN are as follows:"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,52,*        (currently only one set of attributes is defined for NTFS)
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,54,*          Tag        Size       Description
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,56,*          0x0001     2 bytes    Tag for attribute #1
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,57,"*          Size1      2 bytes    Size of attribute #1, in bytes"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,58,*          Mtime      8 bytes    File last modification time
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,59,*          Atime      8 bytes    File last access time
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,60,*          Ctime      8 bytes    File creation time
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,61,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,63,public class X000A_NTFS implements ZipExtraField {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,64,private static final ZipShort HEADER_ID = new ZipShort(0x000a);
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,65,private static final ZipShort TIME_ATTR_TAG = new ZipShort(0x0001);
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,66,private static final ZipShort TIME_ATTR_SIZE = new ZipShort(3 * 8);
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,68,private ZipEightByteInteger modifyTime = ZipEightByteInteger.ZERO;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,69,private ZipEightByteInteger accessTime = ZipEightByteInteger.ZERO;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,70,private ZipEightByteInteger createTime = ZipEightByteInteger.ZERO;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,73,* The Header-ID.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,75,* @return the value for the header id for this extrafield
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,77,public ZipShort getHeaderId() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,78,return HEADER_ID;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,82,* Length of the extra field in the local file data - without
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,83,* Header-ID or length specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,85,* @return a <code>ZipShort</code> for the length of the data of this extra field
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,87,public ZipShort getLocalFileDataLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,88,return new ZipShort(4 /* reserved */
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,89,+ 2 /* Tag#1 */
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,90,+ 2 /* Size#1 */
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,91,+ 3 * 8 /* time values */);
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,95,* Length of the extra field in the local file data - without
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,96,* Header-ID or length specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,98,* <p>For X5455 the central length is often smaller than the
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,99,"* local length, because central cannot contain access or create"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,100,* timestamps.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,102,* @return a <code>ZipShort</code> for the length of the data of this extra field
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,104,public ZipShort getCentralDirectoryLength() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,105,return getLocalFileDataLength();
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,109,* The actual data to put into local file data - without Header-ID
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,110,* or length specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,112,* @return get the data
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,114,public byte[] getLocalFileDataData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,115,byte[] data = new byte[getLocalFileDataLength().getValue()];
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,116,int pos = 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,117,"System.arraycopy(TIME_ATTR_TAG.getBytes(), 0, data, pos, 2);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,118,pos += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,119,"System.arraycopy(TIME_ATTR_SIZE.getBytes(), 0, data, pos, 2);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,120,pos += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,121,"System.arraycopy(modifyTime.getBytes(), 0, data, pos, 8);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,122,pos += 8;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,123,"System.arraycopy(accessTime.getBytes(), 0, data, pos, 8);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,124,pos += 8;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,125,"System.arraycopy(createTime.getBytes(), 0, data, pos, 8);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,126,return data;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,130,* The actual data to put into central directory data - without Header-ID
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,131,* or length specifier.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,133,* @return the central directory data
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,135,public byte[] getCentralDirectoryData() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,136,return getLocalFileDataData();
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,140,* Populate data from this array as if it was in local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,142,* @param data   an array of bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,143,* @param offset the start offset
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,144,* @param length the number of bytes in the array from offset
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,145,* @throws java.util.zip.ZipException on error
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,147,public void parseFromLocalFileData(
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,148,"byte[] data, int offset, int length"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,149,) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,150,final int len = offset + length;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,152,// skip reserved
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,153,offset += 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,155,while (offset + 4 <= len) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,156,"ZipShort tag = new ZipShort(data, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,157,offset += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,158,if (tag.equals(TIME_ATTR_TAG)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,159,"readTimeAttr(data, offset, len - offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,160,break;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,162,"ZipShort size = new ZipShort(data, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,163,offset += 2 + size.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,168,* Doesn't do anything special since this class always uses the
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,169,* same parsing logic for both central directory and local file data.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,171,public void parseFromCentralDirectoryData(
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,172,"byte[] buffer, int offset, int length"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,173,) throws ZipException {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,174,reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,175,"parseFromLocalFileData(buffer, offset, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,179,"* Returns the ""File last modification time"" of this zip entry as"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,180,"* a ZipEightByteInteger object, or {@link"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,181,* ZipEightByteInteger#ZERO} if no such timestamp exists in the
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,182,* zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,184,* @return File last modification time
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,186,public ZipEightByteInteger getModifyTime() { return modifyTime; }
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,189,"* Returns the ""File last access time"" of this zip entry as a"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,190,"* ZipEightByteInteger object, or {@link ZipEightByteInteger#ZERO}"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,191,* if no such timestamp exists in the zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,193,* @return File last access time
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,195,public ZipEightByteInteger getAccessTime() { return accessTime; }
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,198,"* Returns the ""File creation time"" of this zip entry as a"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,199,"* ZipEightByteInteger object, or {@link ZipEightByteInteger#ZERO}"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,200,* if no such timestamp exists in the zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,202,* @return File creation time
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,204,public ZipEightByteInteger getCreateTime() { return createTime; }
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,207,* Returns the modify time as a java.util.Date
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,208,"* of this zip entry, or null if no such timestamp exists in the zip entry."
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,210,* @return modify time as java.util.Date or null.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,212,public Date getModifyJavaTime() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,213,return zipToDate(modifyTime);
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,217,* Returns the access time as a java.util.Date
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,218,"* of this zip entry, or null if no such timestamp exists in the zip entry."
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,220,* @return access time as java.util.Date or null.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,222,public Date getAccessJavaTime() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,223,return zipToDate(accessTime);
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,227,* Returns the create time as a a java.util.Date of this zip
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,228,"* entry, or null if no such timestamp exists in the zip entry."
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,230,* @return create time as java.util.Date or null.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,232,public Date getCreateJavaTime() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,233,return zipToDate(createTime);
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,237,* Sets the File last modification time of this zip entry using a
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,238,* ZipEightByteInteger object.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,240,* @param t ZipEightByteInteger of the modify time
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,242,public void setModifyTime(ZipEightByteInteger t) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,243,modifyTime = t == null ? ZipEightByteInteger.ZERO : t;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,247,* Sets the File last access time of this zip entry using a
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,248,* ZipEightByteInteger object.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,250,* @param t ZipEightByteInteger of the access time
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,252,public void setAccessTime(ZipEightByteInteger t) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,253,accessTime = t == null ? ZipEightByteInteger.ZERO : t;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,257,* Sets the File creation time of this zip entry using a
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,258,* ZipEightByteInteger object.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,260,* @param t ZipEightByteInteger of the create time
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,262,public void setCreateTime(ZipEightByteInteger t) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,263,createTime = t == null ? ZipEightByteInteger.ZERO : t;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,267,* Sets the modify time as a java.util.Date of this zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,269,* @param d modify time as java.util.Date
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,271,public void setModifyJavaTime(Date d) { setModifyTime(dateToZip(d)); }
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,274,* Sets the access time as a java.util.Date
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,275,* of this zip entry.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,277,* @param d access time as java.util.Date
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,279,public void setAccessJavaTime(Date d) { setAccessTime(dateToZip(d)); }
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,282,* <p>
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,283,* Sets the create time as a java.util.Date
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,284,* of this zip entry.  Supplied value is truncated to per-second
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,285,* precision (milliseconds zeroed-out).
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,286,* </p><p>
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,287,* Note: the setters for flags and timestamps are decoupled.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,288,"* Even if the timestamp is not-null, it will only be written"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,289,* out if the corresponding bit in the flags is also set.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,290,* </p>
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,292,* @param d create time as java.util.Date
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,294,public void setCreateJavaTime(Date d) { setCreateTime(dateToZip(d)); }
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,297,* Returns a String representation of this class useful for
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,298,* debugging purposes.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,300,* @return A String representation of this class useful for
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,301,*         debugging purposes.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,303,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,304,public String toString() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,305,StringBuilder buf = new StringBuilder();
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,306,"buf.append(""0x000A Zip Extra Field:"")"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,307,".append("" Modify:["").append(getModifyJavaTime()).append(""] "")"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,308,".append("" Access:["").append(getAccessJavaTime()).append(""] "")"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,309,".append("" Create:["").append(getCreateJavaTime()).append(""] "");"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,310,return buf.toString();
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,313,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,314,public boolean equals(Object o) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,315,if (o instanceof X000A_NTFS) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,316,X000A_NTFS xf = (X000A_NTFS) o;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,318,return (modifyTime == xf.modifyTime || (modifyTime != null && modifyTime.equals(xf.modifyTime))) &&
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,319,(accessTime == xf.accessTime || (accessTime != null && accessTime.equals(xf.accessTime))) &&
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,320,(createTime == xf.createTime || (createTime != null && createTime.equals(xf.createTime)));
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,321,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,322,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,326,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,327,public int hashCode() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,328,int hc = -123;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,329,if (modifyTime != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,330,hc ^= modifyTime.hashCode();
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,332,if (accessTime != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,333,"// Since accessTime is often same as modifyTime,"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,334,// this prevents them from XOR negating each other.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,335,"hc ^= Integer.rotateLeft(accessTime.hashCode(), 11);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,337,if (createTime != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,338,"hc ^= Integer.rotateLeft(createTime.hashCode(), 22);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,340,return hc;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,344,* Reset state back to newly constructed state.  Helps us make sure
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,345,* parse() calls always generate clean results.
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,347,private void reset() {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,348,this.modifyTime = ZipEightByteInteger.ZERO;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,349,this.accessTime = ZipEightByteInteger.ZERO;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,350,this.createTime = ZipEightByteInteger.ZERO;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,353,"private void readTimeAttr(byte[] data, int offset, int length) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,354,if (length >= 2 + 3 * 8) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,355,"ZipShort tagValueLength = new ZipShort(data, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,356,if (TIME_ATTR_SIZE.equals(tagValueLength)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,357,offset += 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,358,"modifyTime = new ZipEightByteInteger(data, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,359,offset += 8;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,360,"accessTime = new ZipEightByteInteger(data, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,361,offset += 8;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,362,"createTime = new ZipEightByteInteger(data, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,367,// https://msdn.microsoft.com/en-us/library/windows/desktop/ms724290%28v=vs.85%29.aspx
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,368,// A file time is a 64-bit value that represents the number of
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,369,// 100-nanosecond intervals that have elapsed since 12:00
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,370,"// A.M. January 1, 1601 Coordinated Universal Time (UTC)."
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,371,// this is the offset of Windows time 0 to Unix epoch in 100-nanosecond intervals
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,372,private static final long EPOCH_OFFSET = -116444736000000000L;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,374,private static ZipEightByteInteger dateToZip(final Date d) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,375,if (d == null) { return null; }
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,376,return new ZipEightByteInteger((d.getTime() * 10000l) - EPOCH_OFFSET);
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,379,private static Date zipToDate(ZipEightByteInteger z) {
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,380,if (z == null || ZipEightByteInteger.ZERO.equals(z)) { return null; }
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,381,long l = (z.getLongValue() + EPOCH_OFFSET) / 10000l;
True,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,src/main/java/org/apache/commons/compress/archivers/zip/X000A_NTFS.java,382,return new Date(l);
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,4,*  this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,7,*  the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,14,*  See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,15,*  limitations under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,18,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,20,import org.junit.Test;
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,22,import java.util.Date;
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,24,import static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,26,public class X000A_NTFSTest {
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,28,@Test
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,29,public void simpleRountrip() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,30,X000A_NTFS xf = new X000A_NTFS();
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,31,xf.setModifyJavaTime(new Date(0));
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,32,// one second past midnight
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,33,xf.setAccessJavaTime(new Date(-11644473601000l));
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,34,xf.setCreateJavaTime(null);
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,35,byte[] b = xf.getLocalFileDataData();
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,37,X000A_NTFS xf2 = new X000A_NTFS();
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,38,"xf2.parseFromLocalFileData(b, 0, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,39,"assertEquals(new Date(0), xf2.getModifyJavaTime());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,40,"assertEquals(new Date(-11644473601000l), xf2.getAccessJavaTime());"
True,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,src/test/java/org/apache/commons/compress/archivers/zip/X000A_NTFSTest.java,41,"assertEquals(null, xf2.getCreateJavaTime());"

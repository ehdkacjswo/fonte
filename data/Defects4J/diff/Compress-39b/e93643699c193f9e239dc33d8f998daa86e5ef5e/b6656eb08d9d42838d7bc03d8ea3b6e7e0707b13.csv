is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,60,"put(SevenZMethod.DELTA_FILTER, new DeltaDecoder());"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,18,package org.apache.commons.compress.archivers.sevenz;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,20,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,21,import java.io.InputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,22,import java.io.OutputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,23,import org.tukaani.xz.DeltaOptions;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,24,import org.tukaani.xz.FinishableWrapperOutputStream;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,25,import org.tukaani.xz.UnsupportedOptionsException;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,27,class DeltaDecoder extends CoderBase {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,28,DeltaDecoder() {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,29,super(Number.class);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,32,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,33,"InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,34,return new DeltaOptions(getOptionsFromCoder(coder)).getInputStream(in);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,37,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,38,"OutputStream encode(final OutputStream out, final Object options) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,39,"int distance = numberOptionOrDefault(options, 1);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,40,try {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,41,return new DeltaOptions(distance).getOutputStream(new FinishableWrapperOutputStream(out));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,42,} catch (UnsupportedOptionsException ex) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,43,throw new IOException(ex.getMessage());
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,47,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,48,byte[] getOptionsAsProperties(Object options) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,49,return new byte[] {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,50,"(byte) (numberOptionOrDefault(options, 1) - 1)"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,54,@Override
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,55,"Object getOptionsFromCoder(Coder coder, InputStream in) {"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,56,return getOptionsFromCoder(coder);
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,59,private int getOptionsFromCoder(Coder coder) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,60,if (coder.properties == null || coder.properties.length == 0) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,61,return 1;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,63,return (0xff & coder.properties[0]) + 1;
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,81,"CJ_SPARC_FILTER(new byte[] { 0x03, 0x03, 0x08, 0x05 });"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,81,"BCJ_SPARC_FILTER(new byte[] { 0x03, 0x03, 0x08, 0x05 }),"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,83,* Delta filter.
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,84,* @since 1.8
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java,86,DELTA_FILTER(new byte[] { 0x03 });
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java,32,* <tr><td>DELTA_FILTER</td><td>Number</td><td>Delta Distance - a number between 1 and 256</td></tr>
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,132,public void testReadingBackDeltaDistance() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,133,"File output = new File(dir, ""delta-distance.7z"");"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,134,SevenZOutputFile outArchive = new SevenZOutputFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,135,try {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,136,"outArchive.setContentMethods(Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.DELTA_FILTER, 32),"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,137,new SevenZMethodConfiguration(SevenZMethod.LZMA2)));
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,138,SevenZArchiveEntry entry = new SevenZArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,139,"entry.setName(""foo.txt"");"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,140,outArchive.putArchiveEntry(entry);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,141,outArchive.write(new byte[] { 'A' });
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,142,outArchive.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,143,} finally {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,144,outArchive.close();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,147,SevenZFile archive = new SevenZFile(output);
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,148,try {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,149,SevenZArchiveEntry entry = archive.getNextEntry();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,150,SevenZMethodConfiguration m = entry.getContentMethods().iterator().next();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,151,"assertEquals(SevenZMethod.DELTA_FILTER, m.getMethod());"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,152,"assertEquals(32, m.getOptions());"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,153,} finally {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,154,archive.close();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,263,public void testDeltaRoundtrip() throws Exception {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,264,testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.DELTA_FILTER));

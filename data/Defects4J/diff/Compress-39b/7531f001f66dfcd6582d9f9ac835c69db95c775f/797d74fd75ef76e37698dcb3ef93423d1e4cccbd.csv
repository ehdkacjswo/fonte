is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,18,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,20,import java.math.BigInteger;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,23,* Utility class that represents an eight byte integer with conversion
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,24,* rules for the big endian byte order of ZIP files.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,25,* @Immutable
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,27,public final class ZipEightByteInteger {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,29,private static final int BYTE_MASK = 0xFF;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,31,private static final int BYTE_1 = 1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,32,private static final int BYTE_1_MASK = 0xFF00;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,33,private static final int BYTE_1_SHIFT = 8;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,35,private static final int BYTE_2 = 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,36,private static final int BYTE_2_MASK = 0xFF0000;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,37,private static final int BYTE_2_SHIFT = 16;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,39,private static final int BYTE_3 = 3;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,40,private static final long BYTE_3_MASK = 0xFF000000L;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,41,private static final int BYTE_3_SHIFT = 24;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,43,private static final int BYTE_4 = 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,44,private static final long BYTE_4_MASK = 0xFF00000000L;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,45,private static final int BYTE_4_SHIFT = 32;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,47,private static final int BYTE_5 = 5;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,48,private static final long BYTE_5_MASK = 0xFF0000000000L;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,49,private static final int BYTE_5_SHIFT = 40;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,51,private static final int BYTE_6 = 6;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,52,private static final long BYTE_6_MASK = 0xFF000000000000L;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,53,private static final int BYTE_6_SHIFT = 48;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,55,private static final int BYTE_7 = 7;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,56,private static final long BYTE_7_MASK = 0x7F00000000000000L;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,57,private static final int BYTE_7_SHIFT = 56;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,59,private static final int LEFTMOST_BIT_SHIFT = 63;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,60,private static final byte LEFTMOST_BIT = (byte) 0x80;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,62,private final BigInteger value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,65,* Create instance from a number.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,66,* @param value the long to store as a ZipEightByteInteger
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,68,public ZipEightByteInteger(long value) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,69,this(BigInteger.valueOf(value));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,73,* Create instance from a number.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,74,* @param value the BigInteger to store as a ZipEightByteInteger
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,76,public ZipEightByteInteger(BigInteger value) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,77,this.value = value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,81,* Create instance from bytes.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,82,* @param bytes the bytes to store as a ZipEightByteInteger
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,84,public ZipEightByteInteger (byte[] bytes) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,85,"this(bytes, 0);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,89,* Create instance from the eight bytes starting at offset.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,90,* @param bytes the bytes to store as a ZipEightByteInteger
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,91,* @param offset the offset to start
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,93,"public ZipEightByteInteger (byte[] bytes, int offset) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,94,"value = ZipEightByteInteger.getValue(bytes, offset);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,98,* Get value as eight bytes in big endian byte order.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,99,* @return value as eight bytes in big endian order
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,101,public byte[] getBytes() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,102,return ZipEightByteInteger.getBytes(value);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,106,* Get value as Java long.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,107,* @return value as a long
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,109,public long getLongValue() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,110,return value.longValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,114,* Get value as Java long.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,115,* @return value as a long
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,117,public BigInteger getValue() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,118,return value;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,122,* Get value as eight bytes in big endian byte order.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,123,* @param value the value to convert
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,124,* @return value as eight bytes in big endian byte order
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,126,public static byte[] getBytes(long value) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,127,return getBytes(BigInteger.valueOf(value));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,131,* Get value as eight bytes in big endian byte order.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,132,* @param value the value to convert
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,133,* @return value as eight bytes in big endian byte order
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,135,public static byte[] getBytes(BigInteger value) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,136,byte[] result = new byte[8];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,137,long val = value.longValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,138,result[0] = (byte) ((val & BYTE_MASK));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,139,result[BYTE_1] = (byte) ((val & BYTE_1_MASK) >> BYTE_1_SHIFT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,140,result[BYTE_2] = (byte) ((val & BYTE_2_MASK) >> BYTE_2_SHIFT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,141,result[BYTE_3] = (byte) ((val & BYTE_3_MASK) >> BYTE_3_SHIFT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,142,result[BYTE_4] = (byte) ((val & BYTE_4_MASK) >> BYTE_4_SHIFT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,143,result[BYTE_5] = (byte) ((val & BYTE_5_MASK) >> BYTE_5_SHIFT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,144,result[BYTE_6] = (byte) ((val & BYTE_6_MASK) >> BYTE_6_SHIFT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,145,result[BYTE_7] = (byte) ((val & BYTE_7_MASK) >> BYTE_7_SHIFT);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,146,if (value.testBit(LEFTMOST_BIT_SHIFT)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,147,result[BYTE_7] |= LEFTMOST_BIT;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,149,return result;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,153,* Helper method to get the value as a Java long from eight bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,154,* starting at given array offset
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,155,* @param bytes the array of bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,156,* @param offset the offset to start
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,157,* @return the corresponding Java long value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,159,"public static long getLongValue(byte[] bytes, int offset) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,160,"return getValue(bytes, offset).longValue();"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,164,* Helper method to get the value as a Java BigInteger from eight
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,165,* bytes starting at given array offset
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,166,* @param bytes the array of bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,167,* @param offset the offset to start
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,168,* @return the corresponding Java BigInteger value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,170,"public static BigInteger getValue(byte[] bytes, int offset) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,171,long value = ((long) bytes[offset + BYTE_7] << BYTE_7_SHIFT) & BYTE_7_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,172,value += ((long) bytes[offset + BYTE_6] << BYTE_6_SHIFT) & BYTE_6_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,173,value += ((long) bytes[offset + BYTE_5] << BYTE_5_SHIFT) & BYTE_5_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,174,value += ((long) bytes[offset + BYTE_4] << BYTE_4_SHIFT) & BYTE_4_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,175,value += ((long) bytes[offset + BYTE_3] << BYTE_3_SHIFT) & BYTE_3_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,176,value += ((long) bytes[offset + BYTE_2] << BYTE_2_SHIFT) & BYTE_2_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,177,value += ((long) bytes[offset + BYTE_1] << BYTE_1_SHIFT) & BYTE_1_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,178,value += ((long) bytes[offset] & BYTE_MASK);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,179,BigInteger val = BigInteger.valueOf(value);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,180,return (bytes[offset + BYTE_7] & LEFTMOST_BIT) == LEFTMOST_BIT
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,181,? val.setBit(LEFTMOST_BIT_SHIFT) : val;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,185,* Helper method to get the value as a Java long from an eight-byte array
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,186,* @param bytes the array of bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,187,* @return the corresponding Java long value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,189,public static long getLongValue(byte[] bytes) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,190,"return getLongValue(bytes, 0);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,194,* Helper method to get the value as a Java long from an eight-byte array
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,195,* @param bytes the array of bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,196,* @return the corresponding Java BigInteger value
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,198,public static BigInteger getValue(byte[] bytes) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,199,"return getValue(bytes, 0);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,203,* Override to make two instances with same value equal.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,204,* @param o an object to compare
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,205,* @return true if the objects are equal
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,207,public boolean equals(Object o) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,208,if (o == null || !(o instanceof ZipEightByteInteger)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,209,return false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,211,return value.equals(((ZipEightByteInteger) o).getValue());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,215,* Override to make two instances with same value equal.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,216,* @return the hashCode of the value stored in the ZipEightByteInteger
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,218,public int hashCode() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,219,return value.hashCode();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,4,*  this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,7,*  the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,14,*  See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,15,*  limitations under the License.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,19,package org.apache.commons.compress.archivers.zip;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,21,import java.math.BigInteger;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,22,import junit.framework.TestCase;
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,25,* JUnit 3 testcases for org.apache.commons.compress.archivers.zip.ZipEightByteInteger.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,28,public class ZipEightByteIntegerTest extends TestCase {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,30,public ZipEightByteIntegerTest(String name) {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,31,super(name);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,35,* Test conversion to bytes.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,37,public void testLongToBytes() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,38,ZipEightByteInteger zl = new ZipEightByteInteger(0xAB12345678l);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,39,byte[] result = zl.getBytes();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,40,"assertEquals(""length getBytes"", 8, result.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,41,"assertEquals(""first byte getBytes"", 0x78, result[0]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,42,"assertEquals(""second byte getBytes"", 0x56, result[1]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,43,"assertEquals(""third byte getBytes"", 0x34, result[2]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,44,"assertEquals(""fourth byte getBytes"", 0x12, result[3]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,45,"assertEquals(""fifth byte getBytes"", (byte) 0xAB, result[4]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,46,"assertEquals(""sixth byte getBytes"", 0, result[5]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,47,"assertEquals(""seventh byte getBytes"", 0, result[6]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,48,"assertEquals(""eighth byte getBytes"", 0, result[7]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,52,* Test conversion from bytes.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,54,public void testLongFromBytes() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,55,"byte[] val = new byte[] {0x78, 0x56, 0x34, 0x12, (byte) 0xAB, 0x00, 0x00, 0x00};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,56,ZipEightByteInteger zl = new ZipEightByteInteger(val);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,57,"assertEquals(""longValue from bytes"", 0xAB12345678l, zl.getLongValue());"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,61,* Test conversion to bytes.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,63,public void testBIToBytes() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,64,ZipEightByteInteger zl =
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,65,new ZipEightByteInteger(BigInteger.valueOf(Long.MAX_VALUE)
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,66,.shiftLeft(1));
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,67,byte[] result = zl.getBytes();
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,68,"assertEquals(""length getBytes"", 8, result.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,69,"assertEquals(""first byte getBytes"", (byte) 0xFE, result[0]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,70,"assertEquals(""second byte getBytes"", (byte) 0xFF, result[1]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,71,"assertEquals(""third byte getBytes"", (byte) 0xFF, result[2]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,72,"assertEquals(""fourth byte getBytes"", (byte) 0xFF, result[3]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,73,"assertEquals(""fifth byte getBytes"", (byte) 0xFF, result[4]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,74,"assertEquals(""sixth byte getBytes"", (byte) 0xFF, result[5]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,75,"assertEquals(""seventh byte getBytes"", (byte) 0xFF, result[6]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,76,"assertEquals(""eighth byte getBytes"", (byte) 0xFF, result[7]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,80,* Test conversion from bytes.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,82,public void testBIFromBytes() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,83,"byte[] val = new byte[] {(byte) 0xFE, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,84,ZipEightByteInteger zl = new ZipEightByteInteger(val);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,85,"assertEquals(""value from bytes"","
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,86,"BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1),"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,87,zl.getValue());
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,91,* Test the contract of the equals method.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,93,public void testEquals() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,94,ZipEightByteInteger zl = new ZipEightByteInteger(0x12345678);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,95,ZipEightByteInteger zl2 = new ZipEightByteInteger(0x12345678);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,96,ZipEightByteInteger zl3 = new ZipEightByteInteger(0x87654321);
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,98,"assertTrue(""reflexive"", zl.equals(zl));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,100,"assertTrue(""works"", zl.equals(zl2));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,101,"assertTrue(""works, part two"", !zl.equals(zl3));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,103,"assertTrue(""symmetric"", zl2.equals(zl));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,105,"assertTrue(""null handling"", !zl.equals(null));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,106,"assertTrue(""non ZipEightByteInteger handling"", !zl.equals(new Integer(0x1234)));"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,110,* Test sign handling.
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,112,public void testSign() {
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,113,"ZipEightByteInteger zl = new ZipEightByteInteger(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,114,"assertEquals(BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1).setBit(0),"
True,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java,115,zl.getValue());

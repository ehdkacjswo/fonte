is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,39,"inal byte[] expected = ""!<arch>\n"".getBytes();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,39,"final byte[] expected = ""!<arch>\n"".getBytes();"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,75,"inal byte[] expected = ""`\012"".getBytes();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java,75,"final byte[] expected = ""`\012"".getBytes();"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,29,rivate long archiveOffset = 0;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,30,rivate long entryOffset = 0;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,31,rivate ArArchiveEntry prevEntry;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,33,ublic ArArchiveOutputStream( final OutputStream pOut ) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,34,uper(pOut);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,37,rivate long writeArchiveHeader() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,38,"inal String header = ""!<arch>\n"";"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,39,ut.write(header.getBytes());
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,40,eturn header.length();
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,43,ublic void closeArchiveEntry() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,44,f ((entryOffset % 2) != 0) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,45,ut.write('\n');
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,46,rchiveOffset++;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,50,ublic void putArchiveEntry( final ArchiveEntry pEntry ) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,51,rArchiveEntry pArEntry = (ArArchiveEntry)pEntry;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,52,f (prevEntry == null) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,53,rchiveOffset += writeArchiveHeader();
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,54, else {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,55,f (prevEntry.getLength() != entryOffset) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,56,"hrow new IOException(""length does not match entry ("" + prevEntry.getLength() + "" != "" + entryOffset);"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,59,loseArchiveEntry();
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,62,revEntry = pArEntry;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,64,rchiveOffset += writeEntryHeader(pArEntry);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,66,ntryOffset = 0;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,69,"rivate long fill( final long pOffset, final long pNewOffset, final char pFill ) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,70,inal long diff = pNewOffset - pOffset;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,72,f (diff > 0) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,73,or (int i = 0; i < diff; i++) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,74,rite(pFill);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,78,eturn pNewOffset;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,81,rivate long write( final String data ) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,82,"inal byte[] bytes = data.getBytes(""ascii"");"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,83,rite(bytes);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,84,eturn bytes.length;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,87,rivate long writeEntryHeader( final ArArchiveEntry pEntry ) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,89,ong offset = 0;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,91,inal String n = pEntry.getName();
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,92,f (n.length() > 16) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,93,"hrow new IOException(""filename too long"");"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,95,ffset += write(n);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,97,"ffset = fill(offset, 16, ' ');"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,98,"inal String m = """" + (pEntry.getLastModified() / 1000);"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,99,f (m.length() > 12) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,100,"hrow new IOException(""modified too long"");"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,102,ffset += write(m);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,104,"ffset = fill(offset, 28, ' ');"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,105,"inal String u = """" + pEntry.getUserId();"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,106,f (u.length() > 6) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,107,"hrow new IOException(""userid too long"");"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,109,ffset += write(u);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,111,"ffset = fill(offset, 34, ' ');"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,112,"inal String g = """" + pEntry.getGroupId();"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,113,f (g.length() > 6) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,114,"hrow new IOException(""groupid too long"");"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,116,ffset += write(g);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,118,"ffset = fill(offset, 40, ' ');"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,119,"inal String fm = """" + Integer.toString(pEntry.getMode(), 8);"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,120,f (fm.length() > 8) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,121,"hrow new IOException(""filemode too long"");"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,123,ffset += write(fm);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,125,"ffset = fill(offset, 48, ' ');"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,126,"inal String s = """" + pEntry.getLength();"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,127,f (s.length() > 10) {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,128,"hrow new IOException(""size too long"");"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,130,ffset += write(s);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,132,"ffset = fill(offset, 58, ' ');"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,134,"ffset += write(""`\012"");"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,136,eturn offset;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,139,ublic void write(int b) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,140,ut.write(b);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,141,ntryOffset++;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,144,"ublic void write(byte[] b, int off, int len) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,145,"ut.write(b, off, len);"
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,146,ntryOffset += len;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,149,ublic void write(byte[] b) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,150,ut.write(b);
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,151,ntryOffset += b.length;
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,154,ublic void close() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,155,loseArchiveEntry();
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,156,ut.close();
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,157,revEntry = null;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,29,private long archiveOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,30,private long entryOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,31,private ArArchiveEntry prevEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,33,public ArArchiveOutputStream( final OutputStream pOut ) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,34,super(pOut);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,37,private long writeArchiveHeader() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,38,"final String header = ""!<arch>\n"";"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,39,out.write(header.getBytes());
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,40,return header.length();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,43,public void closeArchiveEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,44,if ((entryOffset % 2) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,45,out.write('\n');
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,46,archiveOffset++;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,50,public void putArchiveEntry( final ArchiveEntry pEntry ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,51,ArArchiveEntry pArEntry = (ArArchiveEntry)pEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,52,if (prevEntry == null) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,53,archiveOffset += writeArchiveHeader();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,54,} else {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,55,if (prevEntry.getLength() != entryOffset) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,56,"throw new IOException(""length does not match entry ("" + prevEntry.getLength() + "" != "" + entryOffset);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,59,closeArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,62,prevEntry = pArEntry;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,64,archiveOffset += writeEntryHeader(pArEntry);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,66,entryOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,69,"private long fill( final long pOffset, final long pNewOffset, final char pFill ) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,70,final long diff = pNewOffset - pOffset;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,72,if (diff > 0) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,73,for (int i = 0; i < diff; i++) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,74,write(pFill);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,78,return pNewOffset;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,81,private long write( final String data ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,82,"final byte[] bytes = data.getBytes(""ascii"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,83,write(bytes);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,84,return bytes.length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,87,private long writeEntryHeader( final ArArchiveEntry pEntry ) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,89,long offset = 0;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,91,final String n = pEntry.getName();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,92,if (n.length() > 16) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,93,"throw new IOException(""filename too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,95,offset += write(n);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,97,"offset = fill(offset, 16, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,98,"final String m = """" + (pEntry.getLastModified() / 1000);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,99,if (m.length() > 12) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,100,"throw new IOException(""modified too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,102,offset += write(m);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,104,"offset = fill(offset, 28, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,105,"final String u = """" + pEntry.getUserId();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,106,if (u.length() > 6) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,107,"throw new IOException(""userid too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,109,offset += write(u);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,111,"offset = fill(offset, 34, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,112,"final String g = """" + pEntry.getGroupId();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,113,if (g.length() > 6) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,114,"throw new IOException(""groupid too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,116,offset += write(g);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,118,"offset = fill(offset, 40, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,119,"final String fm = """" + Integer.toString(pEntry.getMode(), 8);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,120,if (fm.length() > 8) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,121,"throw new IOException(""filemode too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,123,offset += write(fm);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,125,"offset = fill(offset, 48, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,126,"final String s = """" + pEntry.getLength();"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,127,if (s.length() > 10) {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,128,"throw new IOException(""size too long"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,130,offset += write(s);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,132,"offset = fill(offset, 58, ' ');"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,134,"offset += write(""`\012"");"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,136,return offset;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,139,public void write(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,140,out.write(b);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,141,entryOffset++;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,144,"public void write(byte[] b, int off, int len) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,145,"out.write(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,146,entryOffset += len;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,149,public void write(byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,150,out.write(b);
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,151,entryOffset += b.length;
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,154,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,155,closeArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,156,out.close();
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java,157,prevEntry = null;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,113,ase FORMAT_NEW:
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,114,ase FORMAT_NEW_CRC:
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,115,ase FORMAT_OLD_ASCII:
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,116,ase FORMAT_OLD_BINARY:
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,117,reak;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,118,efault:
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,119,"hrow new IllegalArgumentException(""Unknown header type"");"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,113,case FORMAT_NEW:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,114,case FORMAT_NEW_CRC:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,115,case FORMAT_OLD_ASCII:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,116,case FORMAT_OLD_BINARY:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,117,break;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,118,default:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,119,"throw new IllegalArgumentException(""Unknown header type"");"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,161,ase FORMAT_NEW:
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,162,ut.write(MAGIC_NEW.getBytes());
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,163,riteNewEntry(e);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,164,reak;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,165,ase FORMAT_NEW_CRC:
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,166,ut.write(MAGIC_NEW_CRC.getBytes());
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,167,riteNewEntry(e);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,168,reak;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,169,ase FORMAT_OLD_ASCII:
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,170,ut.write(MAGIC_OLD_ASCII.getBytes());
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,171,riteOldAsciiEntry(e);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,172,reak;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,173,ase FORMAT_OLD_BINARY:
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,174,oolean swapHalfWord = true;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,175,"riteBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,176,"riteOldBinaryEntry(e, swapHalfWord);"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,177,reak;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,161,case FORMAT_NEW:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,162,out.write(MAGIC_NEW.getBytes());
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,163,writeNewEntry(e);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,164,break;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,165,case FORMAT_NEW_CRC:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,166,out.write(MAGIC_NEW_CRC.getBytes());
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,167,writeNewEntry(e);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,168,break;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,169,case FORMAT_OLD_ASCII:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,170,out.write(MAGIC_OLD_ASCII.getBytes());
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,171,writeOldAsciiEntry(e);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,172,break;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,173,case FORMAT_OLD_BINARY:
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,174,boolean swapHalfWord = true;
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,175,"writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,176,"writeOldBinaryEntry(e, swapHalfWord);"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,177,break;
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,241," this.cpioEntry.getSize() + "" but got "" + this.written"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,242," "" bytes)"");"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,241,"+ this.cpioEntry.getSize() + "" but got "" + this.written"
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,242,"+ "" bytes)"");"
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,270,hrows IOException {
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,270,throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,370,ut.write(str.getBytes());
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,371,ut.write('\0');
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,370,out.write(str.getBytes());
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,371,out.write('\0');
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,411,* (non-Javadoc)
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,412, @see org.apache.commons.compress.archivers.ArchiveOutputStream#closeArchiveEntry()
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,414,ublic void closeArchiveEntry() throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,415,his.closeEntry();
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,418,* (non-Javadoc)
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,419, @see org.apache.commons.compress.archivers.ArchiveOutputStream#putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,421,ublic void putArchiveEntry(ArchiveEntry entry) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,422,his.putNextEntry((CpioArchiveEntry)entry);
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,425,* (non-Javadoc)
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,426, @see java.io.OutputStream#write(int)
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,428,ublic void write(int b) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,429,ut.write(b);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,411,/* (non-Javadoc)
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,412,* @see org.apache.commons.compress.archivers.ArchiveOutputStream#closeArchiveEntry()
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,414,public void closeArchiveEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,415,this.closeEntry();
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,418,/* (non-Javadoc)
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,419,* @see org.apache.commons.compress.archivers.ArchiveOutputStream#putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry)
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,421,public void putArchiveEntry(ArchiveEntry entry) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,422,this.putNextEntry((CpioArchiveEntry)entry);
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,425,/* (non-Javadoc)
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,426,* @see java.io.OutputStream#write(int)
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,428,public void write(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java,429,out.write(b);
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,30,ublic JarArchiveOutputStream( final OutputStream out ) {
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,31,uper(out);
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,32,"etEncoding(""UTF8"");"
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,30,public JarArchiveOutputStream( final OutputStream out ) {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,31,super(out);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,32,"setEncoding(""UTF8"");"
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,35,ublic void putArchiveEntry(ArchiveEntry entry) throws IOException {
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,36,/ TODO special jar stuff
False,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,37,uper.putArchiveEntry((ZipArchiveEntry) entry);
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,35,public void putArchiveEntry(ArchiveEntry entry) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,36,// TODO special jar stuff
True,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java,37,super.putArchiveEntry((ZipArchiveEntry) entry);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,215," currEntry.getName() + ""' SZ """
False,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,216," entrySize + "" OFF """
False,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,217," entryOffset + ""  skipping """
False,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,218," numToSkip + "" bytes"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,215,"+ currEntry.getName() + ""' SZ """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,216,"+ entrySize + "" OFF """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,217,"+ entryOffset + ""  skipping """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,218,"+ numToSkip + "" bytes"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,254, currEntry.getName()
False,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,255," ""' size = """
False,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,256, currEntry.getSize());
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,254,+ currEntry.getName()
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,255,"+ ""' size = """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,256,+ currEntry.getSize());
False,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,328, numToRead;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,328,: numToRead;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,354," "" bytes unread"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,354,"+ "" bytes unread"");"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,175,arConstants.LF_GNUTYPE_LONGNAME);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,175,TarConstants.LF_GNUTYPE_LONGNAME);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,184," ""' is too long ( > """
False,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,185," TarConstants.NAMELEN + "" bytes)"");"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,184,"+ ""' is too long ( > """
True,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,185,"+ TarConstants.NAMELEN + "" bytes)"");"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,470,"Invalid compression level: "" + level);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,470,"""Invalid compression level: "" + level);"
False,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,24,/ TODO
True,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java,24,// TODO
False,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,24,/ TODO
True,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java,24,// TODO
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,164, (weight[n2] & 0x000000ff))
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,164,> (weight[n2] & 0x000000ff))
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,381,losed = true;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,381,closed = true;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,441,eturn;
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,441,return;
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1214, (ftab[((vv) + 1) << 8] - ftab[(vv) << 8])) {
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1214,> (ftab[((vv) + 1) << 8] - ftab[(vv) << 8])) {
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1508,"841, 29524, 88573, 265720,"
False,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1509,"97161, 2391484};"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1508,"9841, 29524, 88573, 265720,"
True,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java,1509,"797161, 2391484};"
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,29,rivate final GZIPInputStream in;
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,31,ublic GzipCompressorInputStream(InputStream inputStream) throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,32,n = new GZIPInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,29,private final GZIPInputStream in;
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,35,ublic int read() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,36,eturn in.read();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,31,public GzipCompressorInputStream(InputStream inputStream) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,32,in = new GZIPInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,35,public int read() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java,36,return in.read();
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,29,rivate final GZIPOutputStream out;
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,31,ublic GzipCompressorOutputStream( final OutputStream outputStream ) throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,32,ut = new GZIPOutputStream(outputStream);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,35,ublic void write(int b) throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,36,ut.write(b);
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,39,ublic void close() throws IOException {
False,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,40,ut.close();
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,29,private final GZIPOutputStream out;
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,31,public GzipCompressorOutputStream( final OutputStream outputStream ) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,32,out = new GZIPOutputStream(outputStream);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,35,public void write(int b) throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,36,out.write(b);
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,39,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java,40,out.close();

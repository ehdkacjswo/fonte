is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,45, Due to the limitation of the file name length to 16 bytes GNU and BSD has
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,46, their own variants of this format. This formats are currently not supported
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,47, and file names with a bigger size than 16 bytes are not possible at the
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,48, moment.
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,45,* Due to the limitation of the file name length to 16 bytes GNU and
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,46,* BSD has their own variants of this format. Currently Commons
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,47,* Compress can read but not write the GNU variant and doesn't support
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,48,* the BSD variant at all.
False,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,65, (Not yet supported by this implementation)
True,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java,65,* (Not yet fully supported by this implementation)
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,22,import java.nio.ByteBuffer;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,82,* <p>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,83,* The C structure for a old GNU Tar Entry's header is:
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,84,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,85,* struct oldgnu_header {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,86,* char unused_pad1[345]; // TarConstants.PAD1LEN_GNU       - offset 0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,87,* char atime[12];        // TarConstants.ATIMELEN_GNU      - offset 345
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,88,* char ctime[12];        // TarConstants.CTIMELEN_GNU      - offset 357
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,89,* char offset[12];       // TarConstants.OFFSETLEN_GNU     - offset 369
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,90,* char longnames[4];     // TarConstants.LONGNAMESLEN_GNU  - offset 381
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,91,* char unused_pad2;      // TarConstants.PAD2LEN_GNU       - offset 385
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,92,* struct sparse sp[4];   // TarConstants.SPARSELEN_GNU     - offset 386
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,93,* char isextended;       // TarConstants.ISEXTENDEDLEN_GNU - offset 482
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,94,* char realsize[12];     // TarConstants.REALSIZELEN_GNU   - offset 483
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,95,* char unused_pad[17];   // TarConstants.PAD3LEN_GNU       - offset 495
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,97,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,98,"* Whereas, ""struct sparse"" is:"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,99,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,100,* struct sparse {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,101,* char offset[12];   // offset 0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,102,* char numbytes[12]; // offset 12
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,104,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,151,/** If an extension sparse header follows. */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,152,private boolean isExtended;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,154,/** The entry's real size in case of a sparse file. */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,155,private long realSize;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,254,his.name = fileName;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,285,this.name = fileName;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,573,* Indicates in case of a sparse file if an extension sparse header
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,574,* follows.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,576,* @return true if an extension sparse header follows.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,578,public boolean isExtended() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,579,return isExtended;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,583,* Get this entry's real file size in case of a sparse file.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,585,* @return This entry's real file size.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,587,public long getRealSize() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,588,return realSize;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,592,* Indicate if this entry is a GNU sparse block
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,594,* @return true if this is a sparse extension provided by GNU tar
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,596,public boolean isGNUSparse() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,597,return linkFlag == LF_GNUTYPE_SPARSE;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,752,"tring prefix = TarUtils.parseName(header, offset, PREFIXLEN);"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,753,"/ SunOS tar -E does not add / to directory names, so fix up to be consistent"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,754,"f (isDirectory() && !name.endsWith(""/"")){"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,755,"ame = name + ""/"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,811,int type = evaluateType(header);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,812,switch (type) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,813,case FORMAT_OLDGNU: {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,814,offset += ATIMELEN_GNU;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,815,offset += CTIMELEN_GNU;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,816,offset += OFFSETLEN_GNU;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,817,offset += LONGNAMESLEN_GNU;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,818,offset += PAD2LEN_GNU;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,819,offset += SPARSELEN_GNU;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,820,"isExtended = TarUtils.parseBoolean(header, offset);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,821,offset += ISEXTENDEDLEN_GNU;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,822,"realSize = TarUtils.parseOctal(header, offset, REALSIZELEN_GNU);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,823,offset += REALSIZELEN_GNU;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,824,break;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,826,case FORMAT_POSIX:
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,827,default: {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,828,"String prefix = TarUtils.parseName(header, offset, PREFIXLEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,829,"// SunOS tar -E does not add / to directory names, so fix"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,830,// up to be consistent
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,831,"if (isDirectory() && !name.endsWith(""/"")){"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,832,"name = name + ""/"";"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,834,if (prefix.length() > 0){
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,835,"name = prefix + ""/"" + name;"
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,757,f (prefix.length() >0){
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,758,"ame = prefix + ""/"" + name;"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,885,* Evaluate an entry's header format from a header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,887,* @param header The tar entry header buffer to evaluate the format for.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,888,* @return format type
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,890,private int evaluateType(byte[] header) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,891,"final ByteBuffer magic = ByteBuffer.wrap(header, MAGIC_OFFSET, MAGICLEN);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,892,if (magic.compareTo(ByteBuffer.wrap(MAGIC_GNU.getBytes())) == 0)
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,893,return FORMAT_OLDGNU;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,894,if (magic.compareTo(ByteBuffer.wrap(MAGIC_POSIX.getBytes())) == 0)
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,895,return FORMAT_POSIX;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java,896,return 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,188,yte[] headerBuf = buffer.readRecord();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,190,f (headerBuf == null) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,191,asHitEOF = true;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,192, else if (buffer.isEOFRecord(headerBuf)) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,193,asHitEOF = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,188,byte[] headerBuf = getRecord();
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,198, else {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,199,urrEntry = new TarArchiveEntry(headerBuf);
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,200,ntryOffset = 0;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,201,ntrySize = currEntry.getSize();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,192,return null;
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,204,f (currEntry != null && currEntry.isGNULongNameEntry()) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,195,currEntry = new TarArchiveEntry(headerBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,196,entryOffset = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,197,entrySize = currEntry.getSize();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,199,if (currEntry.isGNULongNameEntry()) {
False,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,226,f (currEntry != null && currEntry.isPaxHeader()){ // Process Pax headers
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,221,if (currEntry.isPaxHeader()){ // Process Pax headers
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,225,if (currEntry.isGNUSparse()){ // Process sparse files
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,226,readGNUSparse();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,233,* Get the next record in this tar archive. This will skip
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,234,"* over any remaining data in the current entry, if there"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,235,"* is one, and place the input stream at the header of the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,236,* next entry.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,237,"* If there are no more entries in the archive, null will"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,238,* be returned to indicate that the end of the archive has
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,239,* been reached.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,241,"* @return The next header in the archive, or null."
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,242,* @throws IOException on error
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,244,private byte[] getRecord() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,245,if (hasHitEOF) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,246,return null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,249,byte[] headerBuf = buffer.readRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,251,if (headerBuf == null) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,252,hasHitEOF = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,253,} else if (buffer.isEOFRecord(headerBuf)) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,254,hasHitEOF = true;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,257,return hasHitEOF ? null : headerBuf;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,332,"* Adds the sparse chunks from the current entry to the sparse chunks,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,333,* including any additional sparse entries following the current entry.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,335,* @throws IOException on error
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,337,* @todo Sparse files get not yet really processed.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,339,private void readGNUSparse() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,340,/* we do not really process sparse files yet
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,341,sparses = new ArrayList();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,342,sparses.addAll(currEntry.getSparses());
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,344,if (currEntry.isExtended()) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,345,TarArchiveSparseEntry entry;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,346,do {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,347,byte[] headerBuf = getRecord();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,348,if (hasHitEOF) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,349,currEntry = null;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,350,break;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,352,entry = new TarArchiveSparseEntry(headerBuf);
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,353,/* we do not really process sparse files yet
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,354,sparses.addAll(entry.getSparses());
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,356,} while (entry.isExtended());
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,445,* Whether this class is able to read the given entry.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,447,* <p>May return false if the current entry is a sparse file.</p>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,449,public boolean canReadEntryData(ArchiveEntry ae) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,450,if (ae instanceof TarArchiveEntry) {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,451,TarArchiveEntry te = (TarArchiveEntry) ae;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,452,return !te.isGNUSparse();
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java,454,return false;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,2,* Licensed to the Apache Software Foundation (ASF) under one
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,3,* or more contributor license agreements.  See the NOTICE file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,4,* distributed with this work for additional information
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,5,* regarding copyright ownership.  The ASF licenses this file
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,6,"* to you under the Apache License, Version 2.0 (the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,7,"* ""License""); you may not use this file except in compliance"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,8,* with the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,10,* http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,12,"* Unless required by applicable law or agreed to in writing,"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,13,* software distributed under the License is distributed on an
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,14,"* ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,15,"* KIND, either express or implied.  See the License for the"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,16,* specific language governing permissions and limitations
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,17,* under the License.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,19,package org.apache.commons.compress.archivers.tar;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,21,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,24,* This class represents a sparse entry in a Tar archive.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,26,* <p>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,27,* The C structure for a sparse entry is:
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,28,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,29,* struct posix_header {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,30,* struct sparse sp[21]; // TarConstants.SPARSELEN_GNU_SPARSE     - offset 0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,31,* char isextended;      // TarConstants.ISEXTENDEDLEN_GNU_SPARSE - offset 504
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,33,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,34,"* Whereas, ""struct sparse"" is:"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,35,* <pre>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,36,* struct sparse {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,37,* char offset[12];   // offset 0
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,38,* char numbytes[12]; // offset 12
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,40,* </pre>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,43,public class TarArchiveSparseEntry implements TarConstants {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,44,/** If an extension sparse header follows. */
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,45,private boolean isExtended;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,48,* Construct an entry from an archive's header bytes. File is set
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,49,* to null.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,51,* @param headerBuf The header bytes from a tar archive entry.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,52,* @throws IOException on unknown format
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,54,public TarArchiveSparseEntry(byte[] headerBuf) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,55,int offset = 0;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,56,offset += SPARSELEN_GNU_SPARSE;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,57,"isExtended = TarUtils.parseBoolean(headerBuf, offset);"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,60,public boolean isExtended() {
True,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry.java,61,return isExtended;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,24,"* For tar formats (FORMAT_OLDGNU, FORMAT_POSIX, etc.) see GNU tar"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,25,* <I>tar.h</I> type <I>enum archive_format</I>
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,31,* GNU format as per before tar 1.12.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,33,int    FORMAT_OLDGNU = 2;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,36,* Pure Posix format.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,38,int    FORMAT_POSIX = 3;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,117,* The length of the access time field in an old GNU header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,120,int    ATIMELEN_GNU = 12;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,123,* The length of the created time field in an old GNU header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,126,int    CTIMELEN_GNU = 12;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,129,* The length of the multivolume start offset field in an old GNU header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,132,int    OFFSETLEN_GNU = 12;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,135,* The length of the long names field in an old GNU header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,138,int    LONGNAMESLEN_GNU = 4;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,141,* The length of the padding field in an old GNU header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,144,int    PAD2LEN_GNU = 1;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,147,* The sum of the length of all sparse headers in an old GNU header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,150,int    SPARSELEN_GNU = 96;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,153,* The length of the is extension field in an old GNU header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,156,int    ISEXTENDEDLEN_GNU = 1;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,159,* The length of the real size field in an old GNU header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,162,int    REALSIZELEN_GNU = 12;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,165,* The sum of the length of all sparse headers in a sparse header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,168,int    SPARSELEN_GNU_SPARSE = 504;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,171,* The length of the is extension field in a sparse header buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,174,int    ISEXTENDEDLEN_GNU_SPARSE = 1;
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,228,* Sparse file type.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,229,* @since Apache Commons Compress 1.1.1
True,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java,231,byte LF_GNUTYPE_SPARSE = (byte) 'S';
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,110,* Parse a boolean byte from a buffer.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,111,* Leading spaces and NUL are ignored.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,112,* The buffer may contain trailing spaces or NULs.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,114,* @param buffer The buffer from which to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,115,* @param offset The offset into the buffer from which to parse.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,116,* @param length The maximum number of bytes to parse - must be at least 1 byte.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,117,* @return The boolean value of the bytes.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,118,* @throws IllegalArgumentException if an invalid byte is detected.
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,120,"public static boolean parseBoolean(final byte[] buffer, final int offset) {"
True,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java,121,return (buffer[offset] == 1);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,85,private byte[] rawName = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,530,* Package private setter that sets the name using the raw bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,531,* and the string created from it by guessing or suing the
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,532,* configured encoding.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,534,"void setName(String name, byte[] rawName) {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,535,setName(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,536,this.rawName = rawName;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,540,* Returns the raw bytes that made up the name before it has been
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,541,* converted using the configured or guessed encoding.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,543,* <p>This method will return null if this instance has not been
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,544,* read from an archive.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,546,* @since Apache Commons Compress 1.2
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,548,public byte[] getRawName() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,549,if (rawName != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,550,byte[] b = new byte[rawName.length];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,551,"System.arraycopy(rawName, 0, b, 0, rawName.length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,552,return b;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,554,return null;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,198,urrent.setName(entryEncoding.decode(fileName));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,198,"current.setName(entryEncoding.decode(fileName), fileName);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,453,e.setName(entryEncoding.decode(fileName));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,453,"ze.setName(entryEncoding.decode(fileName), fileName);"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,195,public void testRawNameReadFromZipFile()
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,196,"throws IOException, URISyntaxException {"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,197,"URL zip = getClass().getResource(""/utf8-7zip-test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,198,File archive = new File(new URI(zip.toString()));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,199,ZipFile zf = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,200,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,201,"zf = new ZipFile(archive, CP437, false);"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,202,assertRawNameOfAcsiiTxt(zf.getEntry(ASCII_TXT));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,203,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,204,ZipFile.closeQuietly(zf);
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,208,public void testRawNameReadFromStream()
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,209,"throws IOException, URISyntaxException {"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,210,"URL zip = getClass().getResource(""/utf8-7zip-test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,211,FileInputStream archive =
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,212,new FileInputStream(new File(new URI(zip.toString())));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,213,ZipArchiveInputStream zi = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,214,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,215,"zi = new ZipArchiveInputStream(archive, CP437, false);"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,216,assertRawNameOfAcsiiTxt((ZipArchiveEntry) zi.getNextEntry());
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,217,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,218,if (zi != null) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,219,zi.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,375,private static void assertRawNameOfAcsiiTxt(ZipArchiveEntry ze) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,376,byte[] b = ze.getRawName();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,377,assertNotNull(b);
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,378,final int len = ASCII_TXT.length();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,379,"assertEquals(len, b.length);"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,380,for (int i = 0; i < len; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,381,"assertEquals(""Byte "" + i, (byte) ASCII_TXT.charAt(i), b[i]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,383,"assertNotSame(b, ze.getRawName());"

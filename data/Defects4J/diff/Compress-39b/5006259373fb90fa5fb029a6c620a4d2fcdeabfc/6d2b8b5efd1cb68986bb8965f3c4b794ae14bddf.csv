is_addition,old_file_path,new_file_path,line_num,content
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,45,ileInputStream fin = new FileInputStream(get5GBZerosFile());
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,46,ipArchiveInputStream zin = null;
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,47,ry {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,48,in = new ZipArchiveInputStream(fin);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,49,ipArchiveEntry zae = zin.getNextZipEntry();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,50,"ssertEquals(""5GB_of_Zeros"", zae.getName());"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,51,"ssertEquals(FIVE_BILLION, zae.getSize());"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,52,yte[] buf = new byte[1024 * 1024];
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,53,ong read = 0;
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,54,andom r = new Random(System.currentTimeMillis());
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,55,nt readNow;
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,56,"hile ((readNow = zin.read(buf, 0, buf.length)) > 0) {"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,57,/ testing all bytes for a value of 0 is going to take
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,58,"/ too long, just pick a few ones randomly"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,59,or (int i = 0; i < 1024; i++) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,60,nt idx = r.nextInt(readNow);
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,61,"ssertEquals(""testing byte "" + (read + idx), 0, buf[idx]);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,63,ead += readNow;
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,65,"ssertEquals(FIVE_BILLION, read);"
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,66,ssertNull(zin.getNextZipEntry());
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,67, finally {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,68,f (zin != null) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,69,in.close();
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,71,f (fin != null) {
False,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,72,in.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,45,"read5GBOfZerosImpl(get5GBZerosFile(), ""5GB_of_Zeros"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,317,@Ignore
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,468,"* One entry of length 5 billion bytes, written with"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,469,* compression to a stream.
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,471,* Compression + Stream => sizes are set to 0 in LFH and ZIP64
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,472,"* entry, real values are inside the data descriptor."
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,474,* Creates a temporary archive of approx 4MB in size
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,476,@Ignore
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,477,@Test public void writeBigDeflatedEntryKnownSizeToStream()
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,478,throws Throwable {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,479,"withTemporaryArchive(""writeBigDeflatedEntryKnownSizeToStream"","
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,480,new ZipOutputTest() {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,481,"public void test(File f,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,482,ZipArchiveOutputStream zos)
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,483,throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,484,byte[] buf = new byte[1000 * 1000];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,485,ZipArchiveEntry zae =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,486,"new ZipArchiveEntry(""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,487,zae.setSize(FIVE_BILLION);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,488,zae.setMethod(ZipArchiveEntry.DEFLATED);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,489,zos.putArchiveEntry(zae);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,490,for (int j = 0;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,491,j < FIVE_BILLION / 1000 / 1000;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,492,j++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,493,zos.write(buf);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,495,zos.closeArchiveEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,496,zos.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,498,RandomAccessFile a =
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,499,"new RandomAccessFile(f, ""r"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,500,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,501,final long end = a.length();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,502,long cdOffsetLoc = end - 22
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,503,- 20
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,504,- 56
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,505,+ 48;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,506,// seek to central directory
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,507,a.seek(cdOffsetLoc);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,508,byte[] cdOffset = new byte[8];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,509,a.readFully(cdOffset);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,510,a.seek(ZipEightByteInteger
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,511,.getLongValue(cdOffset));
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,513,"// grab first entry, verify"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,514,// sizes are 0xFFFFFFFF and
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,515,// it has a ZIP64 extended
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,516,// information extra field
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,517,byte[] header = new byte[12];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,518,a.readFully(header);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,519,assertArrayEquals(new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,520,// sig
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,521,"(byte) 0x50, (byte) 0x4b, 1, 2,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,522,// version made by
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,523,"45, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,524,// version needed to extract
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,525,"45, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,526,// GPB
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,527,"8, 8,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,528,// method
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,529,"8, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,530,"}, header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,531,// ignore timestamp
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,532,a.skipBytes(4);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,533,byte[] crc = new byte[4];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,534,a.readFully(crc);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,535,assertArrayEquals(new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,536,"(byte) 0x50, (byte) 0x6F,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,537,"(byte) 0x31, (byte) 0x5c,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,538,"}, crc);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,539,"// ignore compressed size,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,540,// check it is smaller than
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,541,// 4GB by validating it is
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,542,// not part of the ZIP64
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,543,// extra field
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,544,a.skipBytes(4);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,545,byte[] rest = new byte[23];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,546,a.readFully(rest);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,547,assertArrayEquals(new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,548,// Original Size
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,549,"(byte) 0xFF, (byte) 0xFF,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,550,"(byte) 0xFF, (byte) 0xFF,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,551,// file name length
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,552,"1, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,553,// extra field length
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,554,"12, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,555,// comment length
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,556,"0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,557,// disk number
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,558,"0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,559,// attributes
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,560,"0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,561,"0, 0, 0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,562,// offset
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,563,"0, 0, 0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,564,// file name
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,565,(byte) '0'
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,566,"}, rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,567,byte[] extra = new byte[12];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,568,a.readFully(extra);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,569,// 5e9 == 0x12A05F200
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,570,assertArrayEquals(new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,571,// Header-ID
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,572,"1, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,573,// size of extra
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,574,"8, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,575,// original size
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,576,"0, (byte) 0xF2, 5, (byte) 0x2A,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,577,"1, 0, 0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,578,"}, extra);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,580,// and now validate local file header
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,581,a.seek(0);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,582,header = new byte[10];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,583,a.readFully(header);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,584,assertArrayEquals(new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,585,// sig
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,586,"(byte) 0x50, (byte) 0x4b, 3, 4,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,587,// version needed to extract
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,588,"45, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,589,// GPB
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,590,"8, 8,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,591,// method
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,592,"8, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,593,"}, header);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,594,// ignore timestamp
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,595,a.skipBytes(4);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,596,rest = new byte[17];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,597,a.readFully(rest);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,598,assertArrayEquals(new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,599,// CRC
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,600,"0, 0, 0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,601,// Compressed Size
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,602,"0, 0, 0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,603,// Original Size
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,604,"0, 0, 0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,605,// file name length
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,606,"1, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,607,// extra field length
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,608,"20, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,609,// file name
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,610,(byte) '0'
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,611,"}, rest);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,612,a.readFully(extra);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,613,assertArrayEquals(new byte[] {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,614,// Header-ID
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,615,"1, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,616,// size of extra
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,617,"16, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,618,// original size
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,619,"0, 0, 0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,620,// compressed size
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,621,"0, 0, 0, 0,"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,622,"}, extra);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,623,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,624,a.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,627,"read5GBOfZerosImpl(f, ""0"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,630,false);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,687,"private static void read5GBOfZerosImpl(File f, String expectedName)"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,688,throws IOException {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,689,FileInputStream fin = new FileInputStream(f);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,690,ZipArchiveInputStream zin = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,691,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,692,zin = new ZipArchiveInputStream(fin);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,693,ZipArchiveEntry zae = zin.getNextZipEntry();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,694,"assertEquals(expectedName, zae.getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,695,byte[] buf = new byte[1024 * 1024];
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,696,long read = 0;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,697,Random r = new Random(System.currentTimeMillis());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,698,int readNow;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,699,"while ((readNow = zin.read(buf, 0, buf.length)) > 0) {"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,700,// testing all bytes for a value of 0 is going to take
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,701,"// too long, just pick a few ones randomly"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,702,for (int i = 0; i < 1024; i++) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,703,int idx = r.nextInt(readNow);
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,704,"assertEquals(""testing byte "" + (read + idx), 0, buf[idx]);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,706,read += readNow;
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,708,"assertEquals(FIVE_BILLION, read);"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,709,"assertEquals(FIVE_BILLION, zae.getSize());"
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,710,assertNull(zin.getNextZipEntry());
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,711,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,712,if (zin != null) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,713,zin.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,715,if (fin != null) {
True,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java,716,fin.close();

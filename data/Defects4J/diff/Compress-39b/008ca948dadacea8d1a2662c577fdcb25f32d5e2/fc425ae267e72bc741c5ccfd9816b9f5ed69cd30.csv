is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,58,setName(entry.getName());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,21,import java.io.EOFException;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,23,mport java.util.zip.ZipInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,24,import java.io.PushbackInputStream;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,25,import java.util.zip.CRC32;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,26,import java.util.zip.DataFormatException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,27,import java.util.zip.Inflater;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,28,import java.util.zip.ZipException;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,30,rivate final ZipInputStream input;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,35,private static final int SHORT = 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,36,private static final int WORD = 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,39,* The zip encoding to use for filenames and the file comment.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,41,private final ZipEncoding zipEncoding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,44,* Whether to look for and use Unicode extra fields.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,46,private final boolean useUnicodeExtraFields;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,48,private final InputStream in;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,50,private final Inflater inf = new Inflater(true);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,51,private final CRC32 crc = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,53,private final byte[] SINGLE = new byte[1];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,54,private final byte[] buf = new byte[ZipArchiveOutputStream.BUFFER_SIZE];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,56,private ZipArchiveEntry current = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,57,private boolean closed = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,58,private boolean hitCentralDirectory = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,59,"private int readBytesOfEntry = 0, offsetInBuffer = 0;"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,60,private int bytesReadFromStream = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,61,private int lengthOfLastRead = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,62,private boolean hasDataDescriptor = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,64,private static final int LFH_LEN = 30;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,66,local file header signature     4 bytes  (0x04034b50)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,67,version needed to extract       2 bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,68,general purpose bit flag        2 bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,69,compression method              2 bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,70,last mod file time              2 bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,71,last mod file date              2 bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,72,crc-32                          4 bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,73,compressed size                 4 bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,74,uncompressed size               4 bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,75,file name length                2 bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,76,extra field length              2 bytes
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,33,nput = new ZipInputStream(inputStream);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,80,"this(inputStream, ZipEncodingHelper.UTF8, true);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,84,"* @param encoding the encoding to use for file names, use null"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,85,* for the platform's default encoding
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,86,* @param useUnicodeExtraFields whether to use InfoZIP Unicode
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,87,* Extra Fields (if present) to set the file names.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,89,"public ZipArchiveInputStream(InputStream inputStream,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,90,"String encoding,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,91,boolean useUnicodeExtraFields) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,92,zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,93,this.useUnicodeExtraFields = useUnicodeExtraFields;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,94,"in = new PushbackInputStream(inputStream, buf.length);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,37,ava.util.zip.ZipEntry entry = input.getNextEntry();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,38,f(entry == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,98,if (closed || hitCentralDirectory) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,41,eturn new ZipArchiveEntry(entry);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,101,if (current != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,102,closeEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,104,"int x = 0, count = 0;"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,105,byte[] lfh = new byte[LFH_LEN];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,106,try {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,107,readFully(lfh);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,108,} catch (EOFException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,109,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,111,ZipLong sig = new ZipLong(lfh);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,112,if (sig.equals(ZipLong.CFH_SIG)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,113,hitCentralDirectory = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,114,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,116,if (!sig.equals(ZipLong.LFH_SIG)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,117,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,120,int off = WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,121,current = new ZipArchiveEntry();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,123,"int versionMadeBy = ZipShort.getValue(lfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,124,off += SHORT;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,125,current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,126,& ZipFile.NIBLET_MASK);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,128,"final int generalPurposeFlag = ZipShort.getValue(lfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,129,final boolean hasEFS =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,130,(generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,131,final ZipEncoding entryEncoding =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,132,hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,133,hasDataDescriptor = (generalPurposeFlag & 8) != 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,135,off += SHORT;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,137,"current.setMethod(ZipShort.getValue(lfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,138,off += SHORT;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,140,"long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,141,current.setTime(time);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,142,off += WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,144,if (!hasDataDescriptor) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,145,"current.setCrc(ZipLong.getValue(lfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,146,off += WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,148,"current.setCompressedSize(ZipLong.getValue(lfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,149,off += WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,151,"current.setSize(ZipLong.getValue(lfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,152,off += WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,153,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,154,off += 3 * WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,157,"int fileNameLen = ZipShort.getValue(lfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,159,off += SHORT;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,161,"int extraLen = ZipShort.getValue(lfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,162,off += SHORT;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,164,byte[] fileName = new byte[fileNameLen];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,165,readFully(fileName);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,166,current.setName(entryEncoding.decode(fileName));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,168,byte[] extraData = new byte[extraLen];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,169,readFully(extraData);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,170,current.setExtra(extraData);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,172,"ZipUtil.setNameAndCommentFromExtraFields(current, fileName, null);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,174,return current;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,48,"ublic int read(byte[] b, int off, int len) throws IOException {"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,49,"eturn input.read(b, off, len);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,181,"public int read(byte[] buffer, int start, int length) throws IOException {"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,182,if (closed) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,183,"throw new IOException(""The stream is closed"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,185,if (inf.finished() || current == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,186,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,189,"// avoid int overflow, check null buffer"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,190,if (start <= buffer.length && length >= 0 && start >= 0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,191,&& buffer.length - start >= length) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,192,if (current.getMethod() == ZipArchiveOutputStream.STORED) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,193,int csize = (int) current.getSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,194,if (readBytesOfEntry >= csize) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,195,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,197,if (offsetInBuffer >= lengthOfLastRead) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,198,offsetInBuffer = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,199,if ((lengthOfLastRead = in.read(buf)) == -1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,200,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,202,bytesReadFromStream += lengthOfLastRead;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,204,int toRead = length > lengthOfLastRead
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,205,? lengthOfLastRead - offsetInBuffer
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,206,: length;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,207,if ((csize - readBytesOfEntry) < toRead) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,208,toRead = csize - readBytesOfEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,210,"System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,211,offsetInBuffer += toRead;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,212,readBytesOfEntry += toRead;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,213,"crc.update(buffer, start, toRead);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,214,return toRead;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,216,if (inf.needsInput()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,217,fill();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,218,if (lengthOfLastRead > 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,219,bytesReadFromStream += lengthOfLastRead;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,222,int read = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,223,try {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,224,"read = inf.inflate(buffer, start, length);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,225,} catch (DataFormatException e) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,226,throw new ZipException(e.getMessage());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,228,if (read == 0 && inf.finished()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,229,return -1;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,231,"crc.update(buffer, start, read);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,232,return read;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,234,throw new ArrayIndexOutOfBoundsException();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,237,public void close() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,238,if (!closed) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,239,closed = true;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,240,in.close();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,53,eturn input.read();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,245,"int num = read(SINGLE, 0, 1);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,246,return num == -1 ? -1 : SINGLE[0] & ZipArchiveOutputStream.BYTE_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,249,public long skip(long value) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,250,if (value >= 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,251,long skipped = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,252,byte[] b = new byte[1024];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,253,while (skipped != value) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,254,long rem = value - skipped;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,255,"int x = read(b, 0, (int) (b.length > rem ? rem : b.length));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,256,if (x == -1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,257,return skipped;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,259,skipped += x;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,261,return skipped;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,263,throw new IllegalArgumentException();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,280,private void closeEntry() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,281,if (closed) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,282,"throw new IOException(""The stream is closed"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,284,if (current == null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,285,return;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,287,// Ensure all entry bytes are read
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,288,skip(Long.MAX_VALUE);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,289,"int inB, out;"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,290,if (current.getMethod() == ZipArchiveOutputStream.DEFLATED) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,291,inB = inf.getTotalIn();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,292,out = inf.getTotalOut();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,293,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,294,inB = readBytesOfEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,295,out = readBytesOfEntry;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,297,int diff = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,299,// Pushback any required bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,300,if ((diff = bytesReadFromStream - inB) != 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,301,"((PushbackInputStream) in).unread(buf,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,302,"lengthOfLastRead - diff, diff);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,305,if (hasDataDescriptor) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,306,readFully(new byte[4 * WORD]);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,309,inf.reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,310,readBytesOfEntry = offsetInBuffer = bytesReadFromStream =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,311,lengthOfLastRead = 0;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,312,crc.reset();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,313,current = null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,316,private void fill() throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,317,if (closed) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,318,"throw new IOException(""The stream is closed"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,320,if ((lengthOfLastRead = in.read(buf)) > 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,321,"inf.setInput(buf, 0, lengthOfLastRead);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,325,private void readFully(byte[] b) throws IOException {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,326,"int count = 0, x = 0;"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,327,while (count != b.length) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,328,"count += x = in.read(b, count, b.length - count);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,329,if (x == -1) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,330,throw new EOFException();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,60,rivate static final int BYTE_MASK = 0xFF;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,60,static final int BYTE_MASK = 0xFF;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,63,rivate static final int BUFFER_SIZE = 512;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,63,static final int BUFFER_SIZE = 512;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,589,tatic final byte[] LFH_SIG = ZipLong.getBytes(0X04034B50L);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,589,static final byte[] LFH_SIG = ZipLong.LFH_SIG.getBytes();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,597,tatic final byte[] CFH_SIG = ZipLong.getBytes(0X02014B50L);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,597,static final byte[] CFH_SIG = ZipLong.CFH_SIG.getBytes();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,28,mport java.util.zip.CRC32;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,65,rivate static final int NIBLET_MASK = 0x0f;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,66,rivate static final int BYTE_SHIFT = 8;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,64,static final int NIBLET_MASK = 0x0f;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,65,static final int BYTE_SHIFT = 8;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,532,"etNameAndCommentFromExtraFields(ze,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,533,NameAndComment)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,534,ntriesWithoutEFS.get(ze));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,531,String orig = ze.getName();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,532,NameAndComment nc = (NameAndComment) entriesWithoutEFS.get(ze);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,533,"ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,534,nc.comment);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,535,if (!orig.equals(ze.getName())) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,536,nameMap.remove(orig);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,537,"nameMap.put(ze.getName(), ze);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,556, If the entry has Unicode*ExtraFields and the CRCs of the
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,557," names/comments match those of the extra fields, transfer the"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,558, known Unicode values from the extra field.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,560,"rivate void setNameAndCommentFromExtraFields(ZipArchiveEntry ze,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,561,ameAndComment nc) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,562,nicodePathExtraField name = (UnicodePathExtraField)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,563,e.getExtraField(UnicodePathExtraField.UPATH_ID);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,564,tring originalName = ze.getName();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,565,"tring newName = getUnicodeStringIfOriginalMatches(name, nc.name);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,566,f (newName != null && !originalName.equals(newName)) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,567,e.setName(newName);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,568,ameMap.remove(originalName);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,569,"ameMap.put(newName, ze);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,572,f (nc.comment != null && nc.comment.length > 0) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,573,nicodeCommentExtraField cmt = (UnicodeCommentExtraField)
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,574,e.getExtraField(UnicodeCommentExtraField.UCOM_ID);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,575,tring newComment =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,576,"etUnicodeStringIfOriginalMatches(cmt, nc.comment);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,577,f (newComment != null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,578,e.setComment(newComment);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,584," If the stored CRC matches the one of the given name, return the"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,585, Unicode name of the given field.
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,587," <p>If the field is null or the CRCs don't match, return null"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,588, instead.</p>
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,590,"rivate String getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField f,"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,591,yte[] orig) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,592,f (f != null) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,593,RC32 crc32 = new CRC32();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,594,rc32.update(orig);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,595,ong origCRC32 = crc32.getValue();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,597,f (origCRC32 == f.getNameCRC32()) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,598,ry {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,599,eturn ZipEncodingHelper
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,600,UTF8_ZIP_ENCODING.decode(f.getUnicodeName());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,601, catch (IOException ex) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,602,/ UTF-8 unsupported?  should be impossible the
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,603,/ Unicode*ExtraField must contain some bad bytes
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,605,/ TODO log this anywhere?
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,606,eturn null;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java,610,eturn null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,44,public static final ZipLong CFH_SIG = new ZipLong(0X02014B50L);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,45,public static final ZipLong LFH_SIG = new ZipLong(0X04034B50L);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,20,import java.io.IOException;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,23,import java.util.zip.CRC32;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,109,* If the entry has Unicode*ExtraFields and the CRCs of the
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,110,"* names/comments match those of the extra fields, transfer the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,111,* known Unicode values from the extra field.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,113,"static void setNameAndCommentFromExtraFields(ZipArchiveEntry ze,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,114,"byte[] originalNameBytes,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,115,byte[] commentBytes) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,116,UnicodePathExtraField name = (UnicodePathExtraField)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,117,ze.getExtraField(UnicodePathExtraField.UPATH_ID);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,118,String originalName = ze.getName();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,119,"String newName = getUnicodeStringIfOriginalMatches(name,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,120,originalNameBytes);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,121,if (newName != null && !originalName.equals(newName)) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,122,ze.setName(newName);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,125,if (commentBytes != null && commentBytes.length > 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,126,UnicodeCommentExtraField cmt = (UnicodeCommentExtraField)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,127,ze.getExtraField(UnicodeCommentExtraField.UCOM_ID);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,128,String newComment =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,129,"getUnicodeStringIfOriginalMatches(cmt, commentBytes);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,130,if (newComment != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,131,ze.setComment(newComment);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,137,"* If the stored CRC matches the one of the given name, return the"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,138,* Unicode name of the given field.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,140,"* <p>If the field is null or the CRCs don't match, return null"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,141,* instead.</p>
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,143,private static
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,144,"String getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField f,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,145,byte[] orig) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,146,if (f != null) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,147,CRC32 crc32 = new CRC32();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,148,crc32.update(orig);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,149,long origCRC32 = crc32.getValue();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,151,if (origCRC32 == f.getNameCRC32()) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,152,try {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,153,return ZipEncodingHelper
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,154,.UTF8_ZIP_ENCODING.decode(f.getUnicodeName());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,155,} catch (IOException ex) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,156,// UTF-8 unsupported?  should be impossible the
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,157,// Unicode*ExtraField must contain some bad bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,159,// TODO log this anywhere?
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,160,return null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,164,return null;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,22,import java.io.FileInputStream;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,103,"public void testRead7ZipArchiveForStream() throws IOException,"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,104,URISyntaxException {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,105,"URL zip = getClass().getResource(""/utf8-7zip-test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,106,FileInputStream archive =
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,107,new FileInputStream(new File(new URI(zip.toString())));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,108,ZipArchiveInputStream zi = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,109,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,110,"zi = new ZipArchiveInputStream(archive, CP437, false);"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,111,"assertEquals(ASCII_TXT, zi.getNextEntry().getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,112,"assertEquals(OIL_BARREL_TXT, zi.getNextEntry().getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,113,"assertEquals(EURO_FOR_DOLLAR_TXT, zi.getNextEntry().getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,114,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,115,if (zi != null) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,116,zi.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,139,"public void testReadWinZipArchiveForStream() throws IOException,"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,140,URISyntaxException {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,141,"URL zip = getClass().getResource(""/utf8-winzip-test.zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,142,FileInputStream archive =
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,143,new FileInputStream(new File(new URI(zip.toString())));
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,144,ZipArchiveInputStream zi = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,145,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,146,"zi = new ZipArchiveInputStream(archive, null, true);"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,147,"assertEquals(EURO_FOR_DOLLAR_TXT, zi.getNextEntry().getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,148,"assertEquals(OIL_BARREL_TXT, zi.getNextEntry().getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,149,"assertEquals(ASCII_TXT, zi.getNextEntry().getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,150,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,151,if (zi != null) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,152,zi.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,158,"File file = File.createTempFile(""unicode-test"", "".zip"");"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,159,ZipArchiveInputStream zi = null;
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,160,try {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,161,"createTestFile(file, US_ASCII, false, true);"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,162,FileInputStream archive = new FileInputStream(file);
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,163,"zi = new ZipArchiveInputStream(archive, US_ASCII, true);"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,164,"assertEquals(OIL_BARREL_TXT, zi.getNextEntry().getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,165,"assertEquals(EURO_FOR_DOLLAR_TXT, zi.getNextEntry().getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,166,"assertEquals(ASCII_TXT, zi.getNextEntry().getName());"
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,167,} finally {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,168,if (zi != null) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,169,zi.close();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,171,if (file.exists()) {
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,172,file.delete();
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,177,public void testZipArchiveInputStreamReadsUnicodeFields()
True,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,178,throws IOException {

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,38,rivate static final Map implementations;
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,38,"private static final Map<ZipShort, Class<?>> implementations;"
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,41,mplementations = new HashMap();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,41,"implementations = new HashMap<ZipShort, Class<?>>();"
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,46,register(Zip64ExtendedInformationExtraField.class);
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,55,ublic static void register(Class c) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,56,public static void register(Class<?> c) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,78,lass c = (Class) implementations.get(headerId);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,79,Class<?> c = implementations.get(headerId);
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,129,ist v = new ArrayList();
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,130,List<ZipExtraField> v = new ArrayList<ZipExtraField>();
False,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,184,eturn (ZipExtraField[]) v.toArray(result);
True,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,185,return v.toArray(result);
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,152,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java,160,@Override
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,85,rivate final List reverseMapping;
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,85,private final List<Simple8BitChar> reverseMapping;
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,93,ist temp = new ArrayList(this.highChars.length);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,93,List temp = new ArrayList<Simple8BitChar>(this.highChars.length);
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,175,imple8BitChar m = (Simple8BitChar) this.reverseMapping.get(i);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,175,Simple8BitChar m = this.reverseMapping.get(i);
False,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,192,imple8BitChar r = (Simple8BitChar) this.reverseMapping.get(i0);
True,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java,192,Simple8BitChar r = this.reverseMapping.get(i0);
False,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,80,rivate static final ZipShort HEADER_ID = new ZipShort(0x0001);
True,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java,80,static final ZipShort HEADER_ID = new ZipShort(0x0001);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,72,* The {@link java.util.zip.ZipEntry#setSize} method in the base
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,73,* class throws an IllegalArgumentException if the size is bigger
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,74,* than 2GB for Java versions < 7.  Need to keep our own size
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,75,* information for Zip64 support.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,77,private long size = SIZE_UNKNOWN;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,74,"rivate LinkedHashMap/*<ZipShort, ZipExtraField>*/ extraFields = null;"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,82,"private LinkedHashMap<ZipShort, ZipExtraField> extraFields = null;"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,123,this.size = entry.getSize();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,171,@Override
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,280,xtraFields = new LinkedHashMap();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,290,"extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,314,ist result = new ArrayList(extraFields.values());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,324,List<ZipExtraField> result =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,325,new ArrayList<ZipExtraField>(extraFields.values());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,318,eturn (ZipExtraField[]) result.toArray(new ZipExtraField[0]);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,329,return result.toArray(new ZipExtraField[0]);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,334,xtraFields = new LinkedHashMap();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,345,"extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,353,xtraFields = new LinkedHashMap();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,364,"extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,397,eturn (ZipExtraField) extraFields.get(type);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,408,return extraFields.get(type);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,432,@Override
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,428,/ actually this is not be possible as of Commons Compress 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,440,// actually this is not possible as of Commons Compress 1.1
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,491,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,513,* Gets the uncompressed size of the entry data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,514,* @return the entry size
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,516,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,517,public long getSize() {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,518,return size;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,522,* Sets the uncompressed size of the entry data.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,523,* @param size the uncompressed size in bytes
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,524,* @exception IllegalArgumentException if the specified size is less
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,525,*            than 0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,527,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,528,public void setSize(long size) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,529,if (size < 0) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,530,"throw new IllegalArgumentException(""invalid entry size"");"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,532,this.size = size;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,572,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java,641,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,35,import static org.apache.commons.compress.archivers.zip.ZipConstants.BYTE_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,36,import static org.apache.commons.compress.archivers.zip.ZipConstants.DWORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,37,import static org.apache.commons.compress.archivers.zip.ZipConstants.SHORT;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,38,import static org.apache.commons.compress.archivers.zip.ZipConstants.WORD;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,39,import static org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MIN_VERSION;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,48,rivate static final int SHORT = 2;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,49,rivate static final int WORD = 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,78,private boolean usesZip64 = false;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,180,"ZipLong size = null, cSize = null;"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,180,"urrent.setCompressedSize(ZipLong.getValue(lfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,185,"cSize = new ZipLong(lfh, off);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,183,"urrent.setSize(ZipLong.getValue(lfh, off));"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,188,"size = new ZipLong(lfh, off);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,213,Zip64ExtendedInformationExtraField z64 =
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,214,(Zip64ExtendedInformationExtraField)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,215,current.getExtraField(Zip64ExtendedInformationExtraField
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,216,.HEADER_ID);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,217,usesZip64 = z64 != null;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,218,if (!hasDataDescriptor) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,219,if (usesZip64 && (cSize.equals(ZipLong.ZIP64_MAGIC)
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,220,|| size.equals(ZipLong.ZIP64_MAGIC))
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,222,current.setCompressedSize(z64.getCompressedSize()
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,223,.getLongValue());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,224,current.setSize(z64.getSize().getLongValue());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,225,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,226,current.setCompressedSize(cSize.getValue());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,227,current.setSize(size.getValue());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,234,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,246,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,257,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,336,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,359,@Override
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,423,nB = ZipUtil.adjustToLong(inf.getTotalIn());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,451,inB = inf.getBytesRead();
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,483,eadFully(b);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,484,urrent.setCompressedSize(new ZipLong(b).getValue());
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,485,eadFully(b);
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,486,urrent.setSize(new ZipLong(b).getValue());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,511,if (!usesZip64) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,512,readFully(b);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,513,current.setCompressedSize(ZipLong.getValue(b));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,514,readFully(b);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,515,current.setSize(ZipLong.getValue(b));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,516,} else {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,517,byte[] b8 = new byte[DWORD];
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,518,readFully(b8);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,519,current.setCompressedSize(ZipEightByteInteger.getLongValue(b8));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,520,readFully(b8);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,521,current.setSize(ZipEightByteInteger.getLongValue(b8));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,563,// length of DD without signature
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,564,int ddLen = usesZip64 ? WORD + 2 * DWORD : 3 * WORD;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,546,eadTooMuch = off + r - i - 12 /* dd without signature */;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,585,readTooMuch = off + r - i - ddLen;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,567,/ signature (12 bytes) plus the first three bytes of
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,606,// signature (up to 20 bytes) plus the first three bytes of
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,569,"/ save the last 15 bytes in the buffer, cache"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,608,"// save the last ddLen + 3 bytes in the buffer, cache"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,571,f (off + r > 15) {
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,572,"os.write(buf, 0, off + r - 15);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,573,"ystem.arraycopy(buf, off + r - 15, buf, 0, 15);"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,574,ff = 15;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,610,if (off + r > ddLen + 3) {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,611,"bos.write(buf, 0, off + r - ddLen - 3);"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,612,"System.arraycopy(buf, off + r - ddLen - 3, buf, 0,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,613,ddLen + 3);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java,614,off = ddLen + 3;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,379,ntry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,380,ntry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()));
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,379,entry.setSize(def.getBytesRead());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java,380,entry.setCompressedSize(def.getBytesWritten());
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,2,*  Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,3,*  contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,4,*  this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,5,"*  The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,6,"*  (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,7,*  the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,11,"*  Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,12,"*  distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,13,"*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,14,*  See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,15,*  limitations under the License.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,18,package org.apache.commons.compress.archivers.zip;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,21,* Various constants used throughout the package.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,23,* @since Apache Commons Compress 1.3
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,25,final class ZipConstants {
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,26,private ZipConstants() { }
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,28,/** Masks last eight bits */
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,29,static final int BYTE_MASK = 0xFF;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,31,/** length of a ZipShort in bytes */
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,32,static final int SHORT = 2;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,34,/** length of a ZipLong in bytes */
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,35,static final int WORD = 4;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,37,/** length of a ZipEightByteInteger in bytes */
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,38,static final int DWORD = 8;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,40,/** ZIP specification version that introduced ZIP64 */
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java,41,static final int ZIP64_MIN_VERSION = 45;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,22,import static org.apache.commons.compress.archivers.zip.ZipConstants.BYTE_MASK;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,31,rivate static final int BYTE_MASK = 0xFF;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,209,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,221,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEightByteInteger.java,226,@Override
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,65,rivate static final Map simpleEncodings;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,65,"private static final Map<String, SimpleEncodingHolder> simpleEncodings;"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,68,impleEncodings = new HashMap();
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,68,"simpleEncodings = new HashMap<String, SimpleEncodingHolder>();"
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,221,impleEncodingHolder h =
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,222,SimpleEncodingHolder) simpleEncodings.get(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java,221,SimpleEncodingHolder h = simpleEncodings.get(name);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,20,import static org.apache.commons.compress.archivers.zip.ZipConstants.BYTE_MASK;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,21,import static org.apache.commons.compress.archivers.zip.ZipConstants.WORD;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,27,rivate static final int WORD = 4;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,29,rivate static final int BYTE_MASK = 0xFF;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,59,* Value stored in size and similar fields if ZIP64 extensions are
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,60,* used.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,61,* @since Apache Commons Compress 1.3
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,63,static final ZipLong ZIP64_MAGIC = new ZipLong(0xFFFFFFFFL);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,148,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,160,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,165,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java,175,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,20,import static org.apache.commons.compress.archivers.zip.ZipConstants.BYTE_MASK;
False,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,26,rivate static final int BYTE_MASK = 0xFF;
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,34,* Value stored in size and similar fields if ZIP64 extensions are
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,35,* used.
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,36,* @since Apache Commons Compress 1.3
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,38,static final ZipShort ZIP64_MAGIC = new ZipShort(0xFFFF);
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,122,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,134,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,139,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java,149,@Override
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,73,* <p>This methods is no longer used as of Apache Commons Compress
True,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java,74,* 1.3</p>

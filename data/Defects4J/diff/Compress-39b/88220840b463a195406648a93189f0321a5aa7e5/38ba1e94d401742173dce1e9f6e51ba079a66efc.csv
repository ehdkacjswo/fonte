is_addition,old_file_path,new_file_path,line_num,content
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,5,* you may not use this file except in compliance with the License.
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,6,* You may obtain a copy of the License at
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,13,* See the License for the specific language governing permissions and
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,14,* limitations under the License.
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,16,package org.apache.commons.compress.examples;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,18,import java.io.File;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,19,import java.io.FileInputStream;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,20,import java.io.FileNotFoundException;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,21,import java.io.FileOutputStream;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,22,import java.io.IOException;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,23,import java.io.InputStream;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,25,import org.apache.commons.compress.CompressException;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,26,import org.apache.commons.compress.Compressor;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,27,import org.apache.commons.compress.CompressorFactory;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,29,* BZIP2 .Example
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,31,public class BZip2Example {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,35,public BZip2Example() {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,36,super();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,40,* Compression
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,42,public void compress() {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,43,Compressor compressor;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,44,try {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,45,"compressor = CompressorFactory.getInstance(""bz2"");"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,46,compressor.compressToHere(
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,47,"new File(""C:\\Temp\\test.tar""));"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,48,} catch (CompressException e) {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,49,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,56,public void compressStream() {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,57,InputStream in = null;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,58,FileOutputStream out = null;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,59,FileInputStream param = null;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,60,try {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,61,// Get a filestream
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,62,param = new FileInputStream(
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,63,"new File(""C:\\Temp\\test.tar""));"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,65,// get the compressor
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,66,"Compressor compressor = CompressorFactory.getInstance(""bz2"");"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,68,// compress this stream and get back an readable inputstream
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,69,in = compressor.compress(param);
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,71,// write this stream to a destination of your desire
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,72,"File f = new File(""C:\\Temp\\test.tar.example.bz2"");"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,73,out = new FileOutputStream(f);
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,74,final byte[] buffer = new byte[ 8024 ];
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,75,int n = 0;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,76,while( -1 != ( n = in.read( buffer ) ) ) {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,77,"out.write( buffer, 0, n );"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,79,} catch (CompressException e) {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,80,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,81,} catch (FileNotFoundException e) {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,82,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,83,} catch (IOException e) {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,84,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,85,} finally {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,86,try {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,87,out.close();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,88,in.close();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,89,param.close();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,90,} catch (IOException e1) {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,91,e1.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,97,* Decompress a file.
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,99,public void decompress() {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,100,Compressor decompressor;
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,101,try {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,102,//			decompressor = DecompressorFactory.BZIP2.getInstance();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,103,"decompressor = CompressorFactory.getInstance(""bz2"");"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,105,decompressor.decompressTo(
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,106,"new File(""C:\\Temp\\asf-logo-huge.tar.bz2""),"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,107,"new File(""C:\\Temp\\asf-logo-huge.tar""));"
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,108,} catch (CompressException e) {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,109,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,113,public static void main(String[] args) {
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,114,new BZip2Example().compress();
True,src/examples/org/apache/commons/compress/examples/BZip2Example.java,src/examples/org/apache/commons/compress/examples/BZip2Example.java,115,new BZip2Example().decompress();
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,5,* you may not use this file except in compliance with the License.
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,6,* You may obtain a copy of the License at
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,13,* See the License for the specific language governing permissions and
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,14,* limitations under the License.
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,17,package org.apache.commons.compress.examples;
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,18,import java.io.File;
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,19,import java.io.FileInputStream;
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,20,import java.io.FileOutputStream;
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,21,import java.io.IOException;
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,22,import java.io.InputStream;
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,23,import java.io.OutputStream;
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,25,import org.apache.commons.compress.CompressUtils;
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,26,import org.apache.commons.compress.compressors.bzip2.BZip2OutputStream;
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,29,* This simple example shows how to use the Bzip2 classes to compress a file.
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,31,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,32,* @version $Revision: 155439 $ $Date$
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,33,* @deprecated Take a look at Bzip2Example instead
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,35,public class Bzip2Compress
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,37,public static void main( final String[] args )
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,38,throws Exception
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,40,if( 2 != args.length )
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,42,"System.out.println( ""java Bzip2Compress <input> <output>"" );"
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,43,System.exit( 1 );
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,46,final File source = new File( args[ 0 ] );
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,47,final File destination = new File( args[ 1 ] );
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,48,final BZip2OutputStream output =
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,49,new BZip2OutputStream( new FileOutputStream( destination ) );
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,50,final FileInputStream input = new FileInputStream( source );
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,51,"CompressUtils.copy( input, output );"
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,52,input.close();
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,53,output.close();
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,57,* Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,59,"private static void copy( final InputStream input,"
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,60,final OutputStream output )
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,61,throws IOException
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,63,final byte[] buffer = new byte[ 8024 ];
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,64,int n = 0;
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,65,while( -1 != ( n = input.read( buffer ) ) )
True,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,src/examples/org/apache/commons/compress/examples/Bzip2Compress.java,67,"output.write( buffer, 0, n );"
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,5,* you may not use this file except in compliance with the License.
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,6,* You may obtain a copy of the License at
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,13,* See the License for the specific language governing permissions and
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,14,* limitations under the License.
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,17,package org.apache.commons.compress.examples;
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,18,import java.io.File;
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,19,import java.io.FileInputStream;
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,20,import java.io.FileOutputStream;
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,21,import java.io.IOException;
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,22,import java.io.InputStream;
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,23,import java.io.OutputStream;
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,25,import org.apache.commons.compress.CompressUtils;
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,26,import org.apache.commons.compress.compressors.bzip2.BZip2InputStream;
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,29,* This simple example shows how to use the Bzip2 classes to uncompress a file.
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,31,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,32,"* @author <a href=""mailto:nicolaken@apache.org"">Nicola Ken Barozzi</a>"
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,33,* @version $Revision: 155439 $ $Date$
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,34,* @deprecated Take a look at Bzip2Example instead
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,36,public class Bzip2Uncompress
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,38,public static void main( final String[] args )
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,40,try
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,42,if( 2 != args.length )
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,44,"System.out.println( ""java Bzip2Uncompress <input> <output>"" );"
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,45,System.exit( 1 );
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,47,final File source = new File( args[ 0 ] );
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,48,final File destination = new File( args[ 1 ] );
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,49,final FileOutputStream output =
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,50,new FileOutputStream( destination );
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,51,final BZip2InputStream input = new BZip2InputStream( new FileInputStream( source ) );
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,52,"CompressUtils.copy( input, output );"
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,53,input.close();
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,54,output.close();
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,55,}catch(Exception e){
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,56,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,57,System.exit(1);
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,63,* Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,65,"private static void copy( final InputStream input,"
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,66,final OutputStream output )
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,67,throws IOException
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,69,final byte[] buffer = new byte[ 8024 ];
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,70,int n = 0;
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,71,while( -1 != ( n = input.read( buffer ) ) )
True,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java,73,"output.write( buffer, 0, n );"
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,5,* you may not use this file except in compliance with the License.
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,6,* You may obtain a copy of the License at
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,13,* See the License for the specific language governing permissions and
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,14,* limitations under the License.
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,16,package org.apache.commons.compress.examples;
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,18,import java.io.File;
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,19,import java.io.FileNotFoundException;
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,21,import org.apache.commons.compress.Archive;
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,22,import org.apache.commons.compress.ArchiveException;
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,23,import org.apache.commons.compress.ArchiverFactory;
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,26,* @author christian.grobmeier
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,28,public class TarExample {
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,32,public TarExample() {
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,33,super();
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,37,* Example for Tar-packing
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,39,public void pack() {
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,40,try {
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,41,"Archive archiver = ArchiverFactory.getInstance(""tar"");"
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,42,"archiver.add( new File(""C:\\Temp\\allclasses-frame.html""));"
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,43,"archiver.add( new File(""C:\\Temp\\allclasses-frame.html.bz2""));"
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,44,"archiver.save(new File(""C:\\Temp\\myTar.tar""));"
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,45,} catch (ArchiveException e) {
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,46,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,47,} catch (FileNotFoundException e) {
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,48,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,53,* Example for an unpack operation
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,55,public void unpack() {
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,56,try {
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,57,Archive archiver = ArchiverFactory.getInstance(
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,58,"new File(""C:\\Temp\\myTar.tar""));"
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,59,"archiver.unpack(new File(""C:\\Temp\\unpacked\\""));"
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,60,} catch (ArchiveException e) {
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,61,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,65,public static void main(String[] args) {
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,66,new TarExample().pack();
True,src/examples/org/apache/commons/compress/examples/TarExample.java,src/examples/org/apache/commons/compress/examples/TarExample.java,67,new TarExample().unpack();
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,5,* you may not use this file except in compliance with the License.
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,6,* You may obtain a copy of the License at
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,13,* See the License for the specific language governing permissions and
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,14,* limitations under the License.
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,16,package org.apache.commons.compress.examples;
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,18,import java.io.File;
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,19,import java.io.FileNotFoundException;
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,21,import org.apache.commons.compress.Archive;
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,22,import org.apache.commons.compress.ArchiveException;
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,23,import org.apache.commons.compress.ArchiverFactory;
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,26,* Example for how to use the TarArchive
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,28,public class ZipExample {
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,30,* Example for an pack operation
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,32,public void pack() {
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,33,try {
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,34,"Archive archiver = ArchiverFactory.getInstance(""zip"");"
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,35,"archiver.add(	new File(""C:\\Temp\\1.html""));"
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,36,"archiver.add(	new File(""C:\\Temp\\1.html.bz2""));"
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,37,"archiver.save(	new File(""C:\\Temp\\ZIPTEST.zip""));"
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,38,} catch (ArchiveException e) {
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,39,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,40,} catch (FileNotFoundException e) {
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,41,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,46,* Example for an unpack operation
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,48,public void unpack() {
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,49,try {
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,50,Archive archiver = ArchiverFactory.getInstance(
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,51,"new File(""C:\\Temp\\ZIPTEST.zip""));"
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,52,"archiver.unpack( new File(""C:\\Temp\\unpacked\\""));"
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,53,} catch (ArchiveException e) {
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,54,e.printStackTrace();
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,58,public static void main (String argv[]) {
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,59,new ZipExample().pack();
True,src/examples/org/apache/commons/compress/examples/ZipExample.java,src/examples/org/apache/commons/compress/examples/ZipExample.java,60,new ZipExample().unpack();
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,16,package org.apache.commons.compress;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,18,import java.io.File;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,19,import java.io.FileInputStream;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,20,import java.io.FileNotFoundException;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,21,import java.io.FileOutputStream;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,22,import java.io.IOException;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,23,import java.io.InputStream;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,24,import java.util.ArrayList;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,25,import java.util.Iterator;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,27,* Abstract implementation of an archiver
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,29,public abstract class AbstractArchive extends PackableObject implements Archive {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,31,/* hold filestreams for a possible pack operation */
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,32,private ArrayList entries = new ArrayList();
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,34,/* the source of an unpack-operation */
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,35,private File archive = null;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,37,public Archive newInstance() {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,38,return this.newInstance();
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,41,* Compresses the file with the given String as a filename
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,42,* @see org.apache.commons.compress.Archive#save(java.lang.String)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,44,public void save(File output) throws ArchiveException {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,45,if(output == null) {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,46,"throw new ArchiveException(""Destination directory must not be null."");"
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,48,try {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,49,this.save(new FileOutputStream(output));
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,50,} catch (FileNotFoundException e) {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,51,"throw new ArchiveException(""This path is not writeable"", e);"
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,53,this.setArchive(output);
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,56,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,57,* @see org.apache.commons.compress.Archive#save(java.io.FileOutputStream)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,59,public void save(FileOutputStream output) throws ArchiveException {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,60,doSave(output);
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,64,* Specific implementation of the save opteration.
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,65,* @param output - stream to archive to
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,66,* @throws ArchiveException
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,68,protected abstract void doSave(FileOutputStream output) throws ArchiveException;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,70,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,71,* @see org.apache.commons.compress.Archive#getArchive()
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,73,public File getArchive() {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,74,return this.archive;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,77,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,78,* @see org.apache.commons.compress.Archive#setArchive(java.io.File)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,80,public void setArchive(File file) {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,81,"// TODO: when an archive is set, it's files must be added to the"
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,82,// internal file list for possible delete operations
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,83,this.archive = file;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,86,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,87,* @see org.apache.commons.compress.Archive#add(java.io.File)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,89,public void add(File file) throws FileNotFoundException {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,90,InputStream is = new FileInputStream(file);
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,91,"ArchiveEntry archiveEntry = new ArchiveEntry(file.getName(), is);"
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,92,entries.add( archiveEntry );
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,95,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,96,* @see org.apache.commons.compress.Archive#add(java.io.InputStream)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,98,public void add(ArchiveEntry archiveEntry) {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,99,entries.add( archiveEntry );
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,102,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,103,* @see org.apache.commons.compress.Archive#getPackFilesIterator()
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,105,public Iterator getEntryIterator() {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,106,return this.entries.iterator();
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,109,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,110,* @see org.apache.commons.compress.Archive#unpack(java.lang.String)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,112,public void unpack(File unpackDir) throws UnpackException {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,113,if(unpackDir == null) {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,114,"throw new UnpackException(""Destination directory must not be null."");"
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,116,if(!unpackDir.isDirectory()) {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,117,"throw new UnpackException(""This file must be a valid directory."");"
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,119,if(!unpackDir.canWrite()) {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,120,"throw new UnpackException(""This path is not writeable"");"
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,122,doUnpack(unpackDir);
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,126,* Specific implementation of the unpack opteration.
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,127,"* @param unpackDir dir, to unpack to"
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,128,* @throws UnpackException
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,130,protected abstract void doUnpack(File unpackDir) throws UnpackException;
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,132,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,133,* @see org.apache.commons.compress.Archive#close()
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,135,public void close() throws IOException {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,136,Iterator it = getEntryIterator();
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,137,while(it.hasNext()) {
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,138,ArchiveEntry ae = (ArchiveEntry)it.next();
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,139,InputStream is = ae.getStream();
True,src/java/org/apache/commons/compress/AbstractArchive.java,src/java/org/apache/commons/compress/AbstractArchive.java,140,is.close();
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,16,package org.apache.commons.compress;
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,18,import java.io.InputStream;
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,20,* Represents an entry of an archive.
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,22,public class ArchiveEntry {
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,23,/* Name of this entry */
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,24,private String name = null;
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,25,/* name of this entry stream */
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,26,private InputStream stream = null;
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,29,* Should only called with parameters
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,31,private ArchiveEntry() {
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,32,// unused
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,36,* Constructs a new ArchiveEntry with name and stram
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,37,* @param name the name of this entry
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,38,* @param stream the inputstream of this entry
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,40,"public ArchiveEntry(String entryName, InputStream entryStream) {"
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,41,super();
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,42,this.name = entryName;
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,43,this.stream = entryStream;
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,47,* Returns this entries name
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,48,* @return name of this entry
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,50,public String getName() {
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,51,return name;
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,55,* Returns this entries InputStream stream
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,56,* @return InputStream of this entry
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,58,public InputStream getStream() {
True,src/java/org/apache/commons/compress/ArchiveEntry.java,src/java/org/apache/commons/compress/ArchiveEntry.java,59,return stream;
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,16,package org.apache.commons.compress;
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,18,* Exception for the archiver.
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,20,public class ArchiveException extends PackableObjectException {
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,22,* Comment for <code>serialVersionUID</code>
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,24,private static final long serialVersionUID = 3256440322136748848L;
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,27,* Calls the IOException constructor
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,29,public ArchiveException() {
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,30,super();
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,34,* Calls the super constructor with a message
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,35,* @param message the message
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,37,public ArchiveException(String message) {
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,38,super(message);
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,42,* Calls the super constructor with a message
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,43,* and fills the stacktrace with the stacktrace of
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,44,* an exception
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,46,* @param message the message
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,47,* @param e the exception
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,49,"public ArchiveException(String message, Exception e) {"
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,50,super(message);
True,src/java/org/apache/commons/compress/ArchiveException.java,src/java/org/apache/commons/compress/ArchiveException.java,51,this.initCause(e);
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,16,package org.apache.commons.compress;
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,18,* Exception for the archiver.
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,20,public class PackableObjectException extends Exception {
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,22,* Comment for <code>serialVersionUID</code>
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,24,private static final long serialVersionUID = 3904960871745534257L;
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,27,* Calls the IOException constructor
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,29,public PackableObjectException() {
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,30,super();
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,34,* Calls the super constructor with a message
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,35,* @param message the message
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,37,public PackableObjectException(String message) {
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,38,super(message);
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,42,* Calls the super constructor with a message
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,43,* and fills the stacktrace with the stacktrace of
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,44,* an exception
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,46,* @param message the message
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,47,* @param e the exception
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,49,"public PackableObjectException(String message, Exception e) {"
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,50,super(message);
True,src/java/org/apache/commons/compress/PackableObjectException.java,src/java/org/apache/commons/compress/PackableObjectException.java,51,this.initCause(e);
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,16,package org.apache.commons.compress;
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,19,* Exception occurs when a exception within
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,20,* the unpack actions occurs.
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,22,public class UnpackException  extends ArchiveException {
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,24,* Comment for <code>serialVersionUID</code>
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,26,private static final long serialVersionUID = 3906647522633135668L;
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,29,* Calls the super constructor
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,31,public UnpackException() {
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,32,super();
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,36,* Calls the super constructor with a message
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,37,* @param message the message
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,39,public UnpackException(String message) {
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,40,super(message);
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,44,* Calls the super constructor with a message
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,45,* and fills the stacktrace with the stacktrace of
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,46,* an exception
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,48,* @param message the message
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,49,* @param e the exception
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,51,"public UnpackException(String message, Exception e) {"
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,52,super(message);
True,src/java/org/apache/commons/compress/UnpackException.java,src/java/org/apache/commons/compress/UnpackException.java,53,this.initCause(e);
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,16,package org.apache.commons.compress.archivers.tar;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,18,import java.io.BufferedInputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,19,import java.io.BufferedOutputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,20,import java.io.File;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,21,import java.io.FileInputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,22,import java.io.FileNotFoundException;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,23,import java.io.FileOutputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,24,import java.io.IOException;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,25,import java.io.InputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,26,import java.util.Iterator;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,28,import org.apache.commons.compress.AbstractArchive;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,29,import org.apache.commons.compress.ArchiveEntry;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,30,import org.apache.commons.compress.ArchiveException;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,31,import org.apache.commons.compress.UnpackException;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,34,* Archive-Implementation for Tar.
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,35,"* An tar archive has no header. This means, that the"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,36,"* ArchiverFactory.getInstance( new File(""file.tar"")) Method"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,37,* cannot be used.
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,39,public class TarArchive extends AbstractArchive {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,41,/* Buffer for the file operations */
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,42,private static final int BUFFER = 2048;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,45,* DEFAULT_FILE_EXTENSION Field for this archiver.
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,47,"public final static String DEFAULT_FILE_EXTENSION = ""tar"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,50,* ARCHIVER_NAME Field for this archiver.
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,52,"private final static String ARCHIVER_NAME = ""tar"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,55,* This Archive should be instantiated in the Archive-Interface.
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,57,public TarArchive() {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,58,// Empty
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,61,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,62,* @see org.apache.commons.compress.Archive#unpack()
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,64,protected void doUnpack(File unpackDir) throws UnpackException {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,65,FileInputStream fInputStream = null;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,66,TarInputStream zInputStream = null;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,68,try {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,69,fInputStream = new FileInputStream(this.getArchive());
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,70,zInputStream = new TarInputStream(new BufferedInputStream(fInputStream));
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,71,} catch(FileNotFoundException e) {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,72,"throw new UnpackException(""SourceFile could not be found."", e);"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,75,try {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,76,TarEntry entry = null;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,78,while((entry = zInputStream.getNextEntry()) != null) {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,79,BufferedOutputStream destination = null;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,81,int count;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,82,byte data[] = new byte[BUFFER];
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,84,"String filename = """";"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,85,File f = new File(entry.getName());
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,86,if(f.isAbsolute()) {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,87,filename = entry.getName().substring(3);
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,88,} else {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,89,filename = entry.getName();
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,92,String fosString = unpackDir.getPath() + File.separator + filename;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,93,File destFile = new File(fosString);
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,94,File destPath = new File(destFile.getParent());
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,95,destPath.mkdirs();
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,97,FileOutputStream fos = new FileOutputStream(destFile);
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,98,try {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,99,"destination = new BufferedOutputStream(fos, BUFFER);"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,101,"while((count = zInputStream.read(data, 0, BUFFER))!= -1) {"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,102,"destination.write(data, 0, count);"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,104,destination.flush();
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,105,} finally {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,106,destination.close();
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,109,} catch(IOException e) {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,110,"throw new UnpackException(""Exception while unpacking."", e);"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,111,} finally {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,112,try {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,113,fInputStream.close();
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,114,} catch (IOException e1) {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,115,"throw new UnpackException(""Exception while unpacking."", e1);"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,120,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,121,* @see org.apache.commons.compress.AbstractArchive#doSave(java.io.FileOutputStream)
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,123,public void doSave(FileOutputStream output) throws ArchiveException {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,124,// Stream initializing
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,125,BufferedInputStream origin = null;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,127,//out.setMethod(ZipOutputStream.DEFLATED);
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,128,byte data[] = new byte[BUFFER];
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,130,// get a list of files from current directory
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,131,// less than one file leads to an exception
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,132,Iterator iterator = this.getEntryIterator();
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,133,if(!iterator.hasNext()) {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,134,"throw new ArchiveException(""There must be at least one file to be pack."");"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,137,// Pack-Operation
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,138,TarOutputStream out = null;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,140,try {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,141,out = new TarOutputStream(new BufferedOutputStream(output));
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,142,while(iterator.hasNext()) {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,144,ArchiveEntry archiveEntry = (ArchiveEntry)iterator.next();
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,145,InputStream fInputStream = archiveEntry.getStream();
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,147,TarEntry entry = new TarEntry(archiveEntry.getName());
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,148,entry.setModTime( 0 );
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,149,entry.setSize( fInputStream.available() );
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,150,entry.setUserID( 0 );
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,151,entry.setGroupID( 0 );
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,152,"entry.setUserName( ""avalon"" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,153,"entry.setGroupName( ""excalibur"" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,154,entry.setMode( 0100000 );
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,155,out.putNextEntry( entry );
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,157,out.copyEntryContents( fInputStream );
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,158,out.closeEntry();
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,160,} catch (IOException e) {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,161,"throw new ArchiveException(""Creation of this archive failed cause of IOExceptions."", e);"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,162,} finally {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,163,try {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,164,out.close();
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,165,} catch (IOException e1) {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,166,"throw new ArchiveException(""Creation of this archive failed cause of IOExceptions."", e1);"
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,171,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,172,* @see org.apache.commons.compress.Archive#getArchiverName()
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,174,public String getName() {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,175,return ARCHIVER_NAME;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,178,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,179,* @see org.apache.commons.compress.Archive#getDefaultFileExtension()
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,181,public String getDefaultFileExtension() {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,182,return DEFAULT_FILE_EXTENSION;
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,185,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,186,* @see org.apache.commons.compress.Archive#getHeader()
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,188,public byte[] getHeader() {
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,189,// tar's have no specific header
True,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,src/java/org/apache/commons/compress/archivers/tar/TarArchive.java,190,return null;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,16,package org.apache.commons.compress.archivers.tar;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,18,import java.io.IOException;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,19,import java.io.InputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,20,import java.io.OutputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,23,* The TarBuffer class implements the tar archive concept of a buffered input
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,24,* stream. This concept goes back to the days of blocked tape drives and special
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,25,"* io devices. In the Java universe, the only real function that this class"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,26,"* performs is to ensure that files have the correct ""block"" size, or other tars"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,27,* will complain. <p>
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,29,* You should never have a need to access this class directly. TarBuffers are
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,30,* created by Tar IO Streams.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,32,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,33,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,34,* @version $Revision: 155439 $ $Date$
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,36,public class TarBuffer
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,38,public static final int DEFAULT_RECORDSIZE = ( 512 );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,39,public static final int DEFAULT_BLOCKSIZE = ( DEFAULT_RECORDSIZE * 20 );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,41,private byte[] m_blockBuffer;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,42,private int m_blockSize;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,43,private int m_currBlkIdx;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,44,private int m_currRecIdx;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,45,private boolean m_debug;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,47,private InputStream m_input;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,48,private OutputStream m_output;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,49,private int m_recordSize;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,50,private int m_recsPerBlock;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,52,public TarBuffer( final InputStream input )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,54,"this( input, TarBuffer.DEFAULT_BLOCKSIZE );"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,57,"public TarBuffer( final InputStream input, final int blockSize )"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,59,"this( input, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,62,"public TarBuffer( final InputStream input,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,63,"final int blockSize,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,64,final int recordSize )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,66,m_input = input;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,67,"initialize( blockSize, recordSize );"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,70,public TarBuffer( final OutputStream output )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,72,"this( output, TarBuffer.DEFAULT_BLOCKSIZE );"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,75,"public TarBuffer( final OutputStream output, final int blockSize )"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,77,"this( output, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,80,"public TarBuffer( final OutputStream output,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,81,"final int blockSize,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,82,final int recordSize )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,84,m_output = output;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,85,"initialize( blockSize, recordSize );"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,89,* Set the debugging flag for the buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,91,"* @param debug If true, print debugging output."
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,93,public void setDebug( final boolean debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,95,m_debug = debug;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,99,* Get the TAR Buffer's block size. Blocks consist of multiple records.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,101,* @return The BlockSize value
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,103,public int getBlockSize()
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,105,return m_blockSize;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,109,"* Get the current block number, zero based."
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,111,* @return The current zero based block number.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,113,public int getCurrentBlockNum()
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,115,return m_currBlkIdx;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,119,"* Get the current record number, within the current block, zero based."
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,120,"* Thus, current offset = (currentBlockNum * recsPerBlk) + currentRecNum."
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,122,* @return The current zero based record number.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,124,public int getCurrentRecordNum()
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,126,return m_currRecIdx - 1;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,130,* Get the TAR Buffer's record size.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,132,* @return The RecordSize value
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,134,public int getRecordSize()
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,136,return m_recordSize;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,140,* Determine if an archive record indicate End of Archive. End of archive is
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,141,* indicated by a record that consists entirely of null bytes.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,143,* @param record The record data to check.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,144,* @return The EOFRecord value
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,146,public boolean isEOFRecord( final byte[] record )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,148,final int size = getRecordSize();
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,149,for( int i = 0; i < size; ++i )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,151,if( record[ i ] != 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,153,return false;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,157,return true;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,161,"* Close the TarBuffer. If this is an output buffer, also flush the current"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,162,* block before closing.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,164,public void close()
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,165,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,167,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,169,"debug( ""TarBuffer.closeBuffer()."" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,172,if( null != m_output )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,174,flushBlock();
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,176,if( m_output != System.out && m_output != System.err )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,178,m_output.close();
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,179,m_output = null;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,182,else if( m_input != null )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,184,if( m_input != System.in )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,186,m_input.close();
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,187,m_input = null;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,193,* Read a record from the input stream and return the data.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,195,* @return The record data.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,196,* @exception IOException Description of Exception
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,198,public byte[] readRecord()
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,199,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,201,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,203,"final String message = ""ReadRecord: recIdx = "" + m_currRecIdx +"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,204,""" blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,205,debug( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,208,if( null == m_input )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,210,"final String message = ""reading from an output buffer"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,211,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,214,if( m_currRecIdx >= m_recsPerBlock )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,216,if( !readBlock() )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,218,return null;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,222,final byte[] result = new byte[ m_recordSize ];
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,223,"System.arraycopy( m_blockBuffer,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,224,"( m_currRecIdx * m_recordSize ),"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,225,"result,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,226,"0,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,227,m_recordSize );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,229,m_currRecIdx++;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,231,return result;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,235,* Skip over a record on the input stream.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,237,public void skipRecord()
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,238,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,240,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,242,"final String message = ""SkipRecord: recIdx = "" + m_currRecIdx +"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,243,""" blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,244,debug( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,247,if( null == m_input )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,249,"final String message = ""reading (via skip) from an output buffer"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,250,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,253,if( m_currRecIdx >= m_recsPerBlock )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,255,if( !readBlock() )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,257,return;// UNDONE
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,261,m_currRecIdx++;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,265,* Write an archive record to the archive.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,267,* @param record The record data to write to the archive.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,269,public void writeRecord( final byte[] record )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,270,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,272,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,274,"final String message = ""WriteRecord: recIdx = "" + m_currRecIdx +"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,275,""" blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,276,debug( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,279,if( null == m_output )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,281,"final String message = ""writing to an input buffer"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,282,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,285,if( record.length != m_recordSize )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,287,"final String message = ""record to write has length '"" +"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,288,"record.length + ""' which is not the record size of '"" +"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,289,"m_recordSize + ""'"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,290,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,293,if( m_currRecIdx >= m_recsPerBlock )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,295,writeBlock();
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,298,"System.arraycopy( record,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,299,"0,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,300,"m_blockBuffer,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,301,"( m_currRecIdx * m_recordSize ),"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,302,m_recordSize );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,304,m_currRecIdx++;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,308,"* Write an archive record to the archive, where the record may be inside of"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,309,"* a larger array buffer. The buffer must be ""offset plus record size"" long."
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,311,* @param buffer The buffer containing the record data to write.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,312,* @param offset The offset of the record data within buf.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,314,"public void writeRecord( final byte[] buffer, final int offset )"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,315,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,317,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,319,"final String message = ""WriteRecord: recIdx = "" + m_currRecIdx +"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,320,""" blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,321,debug( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,324,if( null == m_output )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,326,"final String message = ""writing to an input buffer"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,327,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,330,if( ( offset + m_recordSize ) > buffer.length )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,332,"final String message = ""record has length '"" + buffer.length +"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,333,"""' with offset '"" + offset + ""' which is less than the record size of '"" +"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,334,"m_recordSize + ""'"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,335,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,338,if( m_currRecIdx >= m_recsPerBlock )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,340,writeBlock();
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,343,"System.arraycopy( buffer,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,344,"offset,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,345,"m_blockBuffer,"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,346,"( m_currRecIdx * m_recordSize ),"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,347,m_recordSize );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,349,m_currRecIdx++;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,353,* Flush the current data block if it has any data in it.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,355,private void flushBlock()
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,356,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,358,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,360,"final String message = ""TarBuffer.flushBlock() called."";"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,361,debug( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,364,if( m_output == null )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,366,"final String message = ""writing to an input buffer"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,367,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,370,if( m_currRecIdx > 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,372,writeBlock();
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,377,* Initialization common to all constructors.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,379,"private void initialize( final int blockSize, final int recordSize )"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,381,m_debug = false;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,382,m_blockSize = blockSize;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,383,m_recordSize = recordSize;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,384,m_recsPerBlock = ( m_blockSize / m_recordSize );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,385,m_blockBuffer = new byte[ m_blockSize ];
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,387,if( null != m_input )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,389,m_currBlkIdx = -1;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,390,m_currRecIdx = m_recsPerBlock;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,392,else
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,394,m_currBlkIdx = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,395,m_currRecIdx = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,400,"* @return false if End-Of-File, else true"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,402,private boolean readBlock()
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,403,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,405,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,407,"final String message = ""ReadBlock: blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,408,debug( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,411,if( null == m_input )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,413,"final String message = ""reading from an output buffer"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,414,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,417,m_currRecIdx = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,419,int offset = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,420,int bytesNeeded = m_blockSize;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,422,while( bytesNeeded > 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,424,"final long numBytes = m_input.read( m_blockBuffer, offset, bytesNeeded );"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,427,// NOTE
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,428,"// We have fit EOF, and the block is not full!"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,430,// This is a broken archive. It does not follow the standard
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,431,"// blocking algorithm. However, because we are generous, and"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,432,"// it requires little effort, we will simply ignore the error"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,433,// and continue as if the entire block were read. This does
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,434,// not appear to break anything upstream. We used to return
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,435,// false in this case.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,437,// Thanks to 'Yohann.Roussel@alcatel.fr' for this fix.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,439,if( numBytes == -1 )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,441,break;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,444,offset += numBytes;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,445,bytesNeeded -= numBytes;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,447,if( numBytes != m_blockSize )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,449,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,451,"System.err.println( ""ReadBlock: INCOMPLETE READ """
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,452,"+ numBytes + "" of "" + m_blockSize"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,453,"+ "" bytes read."" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,458,m_currBlkIdx++;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,460,return true;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,464,* Write a TarBuffer block to the archive.
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,466,* @exception IOException Description of Exception
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,468,private void writeBlock()
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,469,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,471,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,473,"final String message = ""WriteBlock: blkIdx = "" + m_currBlkIdx;"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,474,debug( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,477,if( null == m_output )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,479,"final String message = ""writing to an input buffer"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,480,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,483,"m_output.write( m_blockBuffer, 0, m_blockSize );"
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,484,m_output.flush();
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,486,m_currRecIdx = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,487,m_currBlkIdx++;
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,490,protected void debug( final String message )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,492,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,src/java/org/apache/commons/compress/archivers/tar/TarBuffer.java,494,System.err.println( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,16,package org.apache.commons.compress.archivers.tar;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,18,import java.io.File;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,19,import java.util.Date;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,20,import java.util.Locale;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,23,* This class represents an entry in a Tar archive. It consists of the entry's
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,24,"* header, as well as the entry's File. Entries can be instantiated in one of"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,25,"* three ways, depending on how they are to be used. <p>"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,27,* TarEntries that are created from the header bytes read from an archive are
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,28,* instantiated with the TarEntry( byte[] ) constructor. These entries will be
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,29,* used when extracting from or listing the contents of an archive. These
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,30,* entries have their header filled in using the header bytes. They also set the
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,31,"* File to null, since they reference an archive entry not a file. <p>"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,33,* TarEntries that are created from Files that are to be written into an archive
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,34,* are instantiated with the TarEntry( File ) constructor. These entries have
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,35,* their header filled in using the File's information. They also keep a
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,36,* reference to the File for convenience when writing entries. <p>
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,38,"* Finally, TarEntries can be constructed from nothing but a name. This allows"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,39,"* the programmer to construct the entry by hand, for instance when only an"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,40,"* InputStream is available for writing to the archive, and the header"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,41,* information is constructed from other information. In this case the header
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,42,* fields are set to defaults and the File is set to null. <p>
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,44,* The C structure for a Tar Entry's header is: <pre>
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,45,* struct header {
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,46,* char name[NAMSIZ];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,47,* char mode[8];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,48,* char uid[8];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,49,* char gid[8];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,50,* char size[12];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,51,* char mtime[12];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,52,* char chksum[8];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,53,* char linkflag;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,54,* char linkname[NAMSIZ];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,55,* char magic[8];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,56,* char uname[TUNMLEN];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,57,* char gname[TGNMLEN];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,58,* char devmajor[8];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,59,* char devminor[8];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,60,* } header;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,61,* </pre>
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,63,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,64,"* @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,65,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,66,* @version $Revision: 155439 $ $Date$
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,67,* @see TarInputStream
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,68,* @see TarOutputStream
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,70,public class TarEntry
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,73,* The length of the mode field in a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,75,private final static int MODELEN = 8;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,78,* The length of the user id field in a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,80,private final static int UIDLEN = 8;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,83,* The length of the group id field in a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,85,private final static int GIDLEN = 8;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,88,* The length of the checksum field in a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,90,private final static int CHKSUMLEN = 8;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,93,* The length of the size field in a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,95,private final static int SIZELEN = 12;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,98,* The length of the magic field in a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,100,private final static int MAGICLEN = 8;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,103,* The length of the modification time field in a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,105,private final static int MODTIMELEN = 12;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,108,* The length of the user name field in a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,110,private final static int UNAMELEN = 32;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,113,* The length of the group name field in a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,115,private final static int GNAMELEN = 32;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,118,* The length of the devices field in a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,120,private final static int DEVLEN = 8;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,123,"* LF_ constants represent the ""link flag"" of an entry, or more commonly,"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,124,"* the ""entry type"". This is the ""old way"" of indicating a normal file."
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,126,private final static byte LF_OLDNORM = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,129,* Normal file type.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,131,private final static byte LF_NORMAL = (byte)'0';
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,134,* Link file type.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,136,private final static byte LF_LINK = (byte)'1';
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,139,* Symbolic link file type.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,141,private final static byte LF_SYMLINK = (byte)'2';
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,144,* Character device file type.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,146,private final static byte LF_CHR = (byte)'3';
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,149,* Block device file type.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,151,private final static byte LF_BLK = (byte)'4';
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,154,* Directory file type.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,156,private final static byte LF_DIR = (byte)'5';
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,159,* FIFO (pipe) file type.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,161,private final static byte LF_FIFO = (byte)'6';
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,164,* Contiguous file type.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,166,private final static byte LF_CONTIG = (byte)'7';
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,169,* The magic tag representing a POSIX tar archive.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,171,"private final static String TMAGIC = ""ustar"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,174,* The magic tag representing a GNU tar archive.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,176,"private final static String GNU_TMAGIC = ""ustar  "";"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,179,* The name of the GNU tar entry which contains a long name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,181,"static String GNU_LONGLINK = ""././@LongLink"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,184,* Identifies the *next* file on the tape as having a long name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,186,static byte LF_GNUTYPE_LONGNAME = (byte)'L';
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,196,* The length of the name field in a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,198,public static final int NAMELEN = 100;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,201,* The entry's modification time.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,203,private int m_checkSum;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,206,* The entry's group name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,208,private int m_devMajor;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,211,* The entry's major device number.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,213,private int m_devMinor;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,216,* The entry's minor device number.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,218,private File m_file;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,221,* The entry's user id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,223,private int m_groupID;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,226,* The entry's user name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,228,private StringBuffer m_groupName;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,231,* The entry's checksum.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,233,private byte m_linkFlag;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,236,* The entry's link flag.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,238,private StringBuffer m_linkName;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,241,* The entry's link name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,243,private StringBuffer m_magic;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,246,* The entry's size.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,248,private long m_modTime;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,251,* The entry's name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,253,private int m_mode;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,255,private StringBuffer m_name;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,258,* The entry's group id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,260,private long m_size;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,263,* The entry's permission mode.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,265,private int m_userID;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,268,* The entry's magic tag.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,270,private StringBuffer m_userName;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,273,* Construct an entry with only a name. This allows the programmer to
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,274,"* construct the entry's header ""by hand"". File is set to null."
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,276,* @param name the name of the entry
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,278,public TarEntry( final String name )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,280,this();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,282,"final boolean isDir = name.endsWith( ""/"" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,284,m_name = new StringBuffer( name );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,285,m_mode = isDir ? 040755 : 0100644;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,286,m_linkFlag = isDir ? TarEntry.LF_DIR : TarEntry.LF_NORMAL;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,287,m_modTime = ( new Date() ).getTime() / 1000;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,288,"m_linkName = new StringBuffer( """" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,289,"m_userName = new StringBuffer( """" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,290,"m_groupName = new StringBuffer( """" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,294,* Construct an entry with a name an a link flag.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,296,* @param name Description of Parameter
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,297,* @param linkFlag Description of Parameter
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,299,"public TarEntry( final String name, final byte linkFlag )"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,301,this( name );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,302,m_linkFlag = linkFlag;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,306,"* Construct an entry for a file. File is set to file, and the header is"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,307,* constructed from information from the file.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,309,* @param file The file that the entry represents.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,311,public TarEntry( final File file )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,313,this();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,315,m_file = file;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,317,String name = file.getPath();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,319,// Strip off drive letters!
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,320,final String osName =
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,321,"System.getProperty( ""os.name"" ).toLowerCase( Locale.US );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,322,"if( -1 != osName.indexOf( ""netware"" ) )"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,324,if( name.length() > 2 )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,326,final char ch1 = name.charAt( 0 );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,327,final char ch2 = name.charAt( 1 );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,329,if( ch2 == ':' &&
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,330,( ( ch1 >= 'a' && ch1 <= 'z' ) ||
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,331,( ch1 >= 'A' && ch1 <= 'Z' ) ) )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,333,name = name.substring( 2 );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,337,"else if( -1 != osName.indexOf( ""netware"" ) )"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,339,final int colon = name.indexOf( ':' );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,340,if( colon != -1 )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,342,name = name.substring( colon + 1 );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,346,"name = name.replace( File.separatorChar, '/' );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,348,// No absolute pathnames
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,349,"// Windows (and Posix?) paths can start with ""\\NetworkDrive\"","
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,350,// so we loop on starting /'s.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,351,"while( name.startsWith( ""/"" ) )"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,353,name = name.substring( 1 );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,356,"m_linkName = new StringBuffer( """" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,357,m_name = new StringBuffer( name );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,359,if( file.isDirectory() )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,361,m_mode = 040755;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,362,m_linkFlag = TarEntry.LF_DIR;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,364,if( m_name.charAt( m_name.length() - 1 ) != '/' )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,366,"m_name.append( ""/"" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,369,else
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,371,m_mode = 0100644;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,372,m_linkFlag = TarEntry.LF_NORMAL;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,375,m_size = file.length();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,376,m_modTime = file.lastModified() / 1000;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,377,m_checkSum = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,378,m_devMajor = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,379,m_devMinor = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,383,* Construct an entry from an archive's header bytes. File is set to null.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,385,* @param header The header bytes from a tar archive entry.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,387,public TarEntry( final byte[] header )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,389,this();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,390,parseTarHeader( header );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,394,* Construct an empty entry and prepares the header values.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,396,private TarEntry()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,398,m_magic = new StringBuffer( TarEntry.TMAGIC );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,399,m_name = new StringBuffer();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,400,m_linkName = new StringBuffer();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,402,"String user = System.getProperty( ""user.name"", """" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,403,if( user.length() > 31 )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,405,"user = user.substring( 0, 31 );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,408,m_userName = new StringBuffer( user );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,409,"m_groupName = new StringBuffer( """" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,413,* Set this entry's group id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,415,* @param groupId This entry's new group id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,417,public void setGroupID( final int groupId )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,419,m_groupID = groupId;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,423,* Set this entry's group id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,425,* @param groupId This entry's new group id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,426,* @deprecated Use setGroupID() instead
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,427,* @see #setGroupID(int)
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,429,public void setGroupId( final int groupId )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,431,m_groupID = groupId;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,435,* Set this entry's group name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,437,* @param groupName This entry's new group name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,439,public void setGroupName( final String groupName )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,441,m_groupName = new StringBuffer( groupName );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,445,* Set this entry's modification time. The parameter passed to this method
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,446,"* is in ""Java time""."
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,448,* @param time This entry's new modification time.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,450,public void setModTime( final long time )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,452,m_modTime = time / 1000;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,456,* Set this entry's modification time.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,458,* @param time This entry's new modification time.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,460,public void setModTime( final Date time )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,462,m_modTime = time.getTime() / 1000;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,466,* Set the mode for this entry
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,468,* @param mode The new Mode value
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,470,public void setMode( final int mode )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,472,m_mode = mode;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,476,* Set this entry's name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,478,* @param name This entry's new name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,480,public void setName( final String name )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,482,m_name = new StringBuffer( name );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,486,* Set this entry's file size.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,488,* @param size This entry's new file size.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,490,public void setSize( final long size )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,492,m_size = size;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,496,* Set this entry's user id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,498,* @param userId This entry's new user id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,500,public void setUserID( final int userId )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,502,m_userID = userId;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,506,* Set this entry's user id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,508,* @param userId This entry's new user id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,509,* @deprecated Use setUserID() instead
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,510,* @see #setUserID(int)
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,512,public void setUserId( final int userId )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,514,m_userID = userId;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,518,* Set this entry's user name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,520,* @param userName This entry's new user name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,522,public void setUserName( final String userName )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,524,m_userName = new StringBuffer( userName );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,528,"* If this entry represents a file, and the file is a directory, return an"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,529,* array of TarEntries for this entry's children.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,531,* @return An array of TarEntry's for this entry's children.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,533,public TarEntry[] getDirectoryEntries()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,535,if( null == m_file || !m_file.isDirectory() )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,537,return new TarEntry[ 0 ];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,540,final String[] list = m_file.list();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,541,final TarEntry[] result = new TarEntry[ list.length ];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,543,for( int i = 0; i < list.length; ++i )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,545,"result[ i ] = new TarEntry( new File( m_file, list[ i ] ) );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,548,return result;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,552,* Get this entry's file.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,554,* @return This entry's file.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,556,public File getFile()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,558,return m_file;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,562,* Get this entry's group id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,564,* @return This entry's group id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,565,* @deprecated Use getGroupID() instead
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,566,* @see #getGroupID()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,568,public int getGroupId()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,570,return m_groupID;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,574,* Get this entry's group id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,576,* @return This entry's group id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,578,public int getGroupID()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,580,return m_groupID;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,584,* Get this entry's group name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,586,* @return This entry's group name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,588,public String getGroupName()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,590,return m_groupName.toString();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,594,* Set this entry's modification time.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,596,* @return The ModTime value
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,598,public Date getModTime()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,600,return new Date( m_modTime * 1000 );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,604,* Get this entry's mode.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,606,* @return This entry's mode.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,608,public int getMode()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,610,return m_mode;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,614,* Get this entry's name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,616,* @return This entry's name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,618,public String getName()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,620,return m_name.toString();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,624,* Get this entry's file size.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,626,* @return This entry's file size.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,628,public long getSize()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,630,return m_size;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,634,* Get this entry's checksum.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,636,* @return This entry's checksum.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,638,public int getCheckSum()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,640,return m_checkSum;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,644,* Get this entry's user id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,646,* @return This entry's user id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,647,* @deprecated Use getUserID() instead
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,648,* @see #getUserID()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,650,public int getUserId()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,652,return m_userID;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,656,* Get this entry's user id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,658,* @return This entry's user id.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,660,public int getUserID()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,662,return m_userID;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,666,* Get this entry's user name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,668,* @return This entry's user name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,670,public String getUserName()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,672,return m_userName.toString();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,676,* Determine if the given entry is a descendant of this entry. Descendancy
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,677,* is determined by the name of the descendant starting with this entry's
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,678,* name.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,680,* @param desc Entry to be checked as a descendent of
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,681,* @return True if entry is a descendant of
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,683,public boolean isDescendent( final TarEntry desc )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,685,return desc.getName().startsWith( getName() );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,689,* Return whether or not this entry represents a directory.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,691,* @return True if this entry is a directory.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,693,public boolean isDirectory()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,695,if( m_file != null )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,697,return m_file.isDirectory();
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,700,if( m_linkFlag == TarEntry.LF_DIR )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,702,return true;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,705,"if( getName().endsWith( ""/"" ) )"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,707,return true;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,710,return false;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,714,* Indicate if this entry is a GNU long name block
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,716,* @return true if this is a long name extension provided by GNU tar
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,718,public boolean isGNULongNameEntry()
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,720,return m_linkFlag == TarEntry.LF_GNUTYPE_LONGNAME &&
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,721,m_name.toString().equals( TarEntry.GNU_LONGLINK );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,725,* Determine if the two entries are equal. Equality is determined by the
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,726,* header names being equal.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,728,* @param other Entry to be checked for equality.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,729,* @return True if the entries are equal.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,731,public boolean equals( final TarEntry other )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,733,return getName().equals( other.getName() );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,737,* Parse an entry's header information from a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,739,* @param header The tar entry header buffer to get information from.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,741,private void parseTarHeader( final byte[] header )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,743,int offset = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,745,"m_name = TarUtils.parseName( header, offset, NAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,746,offset += NAMELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,747,"m_mode = (int)TarUtils.parseOctal( header, offset, TarEntry.MODELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,748,offset += TarEntry.MODELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,749,"m_userID = (int)TarUtils.parseOctal( header, offset, TarEntry.UIDLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,750,offset += TarEntry.UIDLEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,751,"m_groupID = (int)TarUtils.parseOctal( header, offset, TarEntry.GIDLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,752,offset += TarEntry.GIDLEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,753,"m_size = TarUtils.parseOctal( header, offset, TarEntry.SIZELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,754,offset += TarEntry.SIZELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,755,"m_modTime = TarUtils.parseOctal( header, offset, TarEntry.MODTIMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,756,offset += TarEntry.MODTIMELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,757,"m_checkSum = (int)TarUtils.parseOctal( header, offset, TarEntry.CHKSUMLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,758,offset += TarEntry.CHKSUMLEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,759,m_linkFlag = header[ offset++ ];
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,760,"m_linkName = TarUtils.parseName( header, offset, NAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,761,offset += NAMELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,762,"m_magic = TarUtils.parseName( header, offset, TarEntry.MAGICLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,763,offset += TarEntry.MAGICLEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,764,"m_userName = TarUtils.parseName( header, offset, TarEntry.UNAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,765,offset += TarEntry.UNAMELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,766,"m_groupName = TarUtils.parseName( header, offset, TarEntry.GNAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,767,offset += TarEntry.GNAMELEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,768,"m_devMajor = (int)TarUtils.parseOctal( header, offset, TarEntry.DEVLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,769,offset += TarEntry.DEVLEN;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,770,"m_devMinor = (int)TarUtils.parseOctal( header, offset, TarEntry.DEVLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,774,* Write an entry's header information to a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,776,* @param buffer The tar entry header buffer to fill in.
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,778,public void writeEntryHeader( final byte[] buffer )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,780,int offset = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,782,"offset = TarUtils.getNameBytes( m_name, buffer, offset, NAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,783,"offset = TarUtils.getOctalBytes( m_mode, buffer, offset, TarEntry.MODELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,784,"offset = TarUtils.getOctalBytes( m_userID, buffer, offset, TarEntry.UIDLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,785,"offset = TarUtils.getOctalBytes( m_groupID, buffer, offset, TarEntry.GIDLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,786,"offset = TarUtils.getLongOctalBytes( m_size, buffer, offset, TarEntry.SIZELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,787,"offset = TarUtils.getLongOctalBytes( m_modTime, buffer, offset, TarEntry.MODTIMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,789,final int checkSumOffset = offset;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,790,for( int i = 0; i < TarEntry.CHKSUMLEN; ++i )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,792,buffer[ offset++ ] = (byte)' ';
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,795,buffer[ offset++ ] = m_linkFlag;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,796,"offset = TarUtils.getNameBytes( m_linkName, buffer, offset, NAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,797,"offset = TarUtils.getNameBytes( m_magic, buffer, offset, TarEntry.MAGICLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,798,"offset = TarUtils.getNameBytes( m_userName, buffer, offset, TarEntry.UNAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,799,"offset = TarUtils.getNameBytes( m_groupName, buffer, offset, TarEntry.GNAMELEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,800,"offset = TarUtils.getOctalBytes( m_devMajor, buffer, offset, TarEntry.DEVLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,801,"offset = TarUtils.getOctalBytes( m_devMinor, buffer, offset, TarEntry.DEVLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,803,while( offset < buffer.length )
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,805,buffer[ offset++ ] = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,808,final long checkSum = TarUtils.computeCheckSum( buffer );
True,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,src/java/org/apache/commons/compress/archivers/tar/TarEntry.java,809,"TarUtils.getCheckSumOctalBytes( checkSum, buffer, checkSumOffset, TarEntry.CHKSUMLEN );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,16,package org.apache.commons.compress.archivers.tar;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,18,import java.io.FilterInputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,19,import java.io.IOException;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,20,import java.io.InputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,21,import java.io.OutputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,23,* The TarInputStream reads a UNIX tar archive as an InputStream. methods are
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,24,"* provided to position at each successive entry in the archive, and the read"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,25,* each entry as a normal input stream using read().
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,27,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,28,"* @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,29,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,30,* @version $Revision: 155439 $ $Date$
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,31,* @see TarInputStream
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,32,* @see TarEntry
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,34,public final class TarInputStream extends FilterInputStream
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,36,private TarBuffer m_buffer;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,37,private TarEntry m_currEntry;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,38,private boolean m_debug;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,39,private int m_entryOffset;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,40,private int m_entrySize;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,41,private boolean m_hasHitEOF;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,42,private byte[] m_oneBuf;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,43,private byte[] m_readBuf;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,46,* Construct a TarInputStream using specified input
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,47,* stream and default block and record sizes.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,49,* @param input stream to create TarInputStream from
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,50,* @see TarBuffer#DEFAULT_BLOCKSIZE
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,51,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,53,public TarInputStream( final InputStream input )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,55,"this( input, TarBuffer.DEFAULT_BLOCKSIZE, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,59,* Construct a TarInputStream using specified input
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,60,"* stream, block size and default record sizes."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,62,* @param input stream to create TarInputStream from
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,63,* @param blockSize the block size to use
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,64,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,66,"public TarInputStream( final InputStream input,"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,67,final int blockSize )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,69,"this( input, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,73,* Construct a TarInputStream using specified input
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,74,"* stream, block size and record sizes."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,76,* @param input stream to create TarInputStream from
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,77,* @param blockSize the block size to use
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,78,* @param recordSize the record size to use
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,80,"public TarInputStream( final InputStream input,"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,81,"final int blockSize,"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,82,final int recordSize )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,84,super( input );
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,86,"m_buffer = new TarBuffer( input, blockSize, recordSize );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,87,m_oneBuf = new byte[ 1 ];
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,91,* Sets the debugging flag.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,93,* @param debug The new Debug value
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,95,public void setDebug( final boolean debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,97,m_debug = debug;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,98,m_buffer.setDebug( debug );
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,102,* Get the next entry in this tar archive. This will skip over any remaining
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,103,"* data in the current entry, if there is one, and place the input stream at"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,104,"* the header of the next entry, and read the header and instantiate a new"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,105,* TarEntry from the header bytes and return that entry. If there are no
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,106,"* more entries in the archive, null will be returned to indicate that the"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,107,* end of the archive has been reached.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,109,"* @return The next TarEntry in the archive, or null."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,110,* @exception IOException Description of Exception
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,112,public TarEntry getNextEntry()
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,113,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,115,if( m_hasHitEOF )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,117,return null;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,120,if( m_currEntry != null )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,122,final int numToSkip = m_entrySize - m_entryOffset;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,124,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,126,"final String message = ""TarInputStream: SKIP currENTRY '"" +"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,127,"m_currEntry.getName() + ""' SZ "" + m_entrySize +"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,128,""" OFF "" + m_entryOffset + ""  skipping "" + numToSkip + "" bytes"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,129,debug( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,132,if( numToSkip > 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,134,skip( numToSkip );
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,137,m_readBuf = null;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,140,final byte[] headerBuf = m_buffer.readRecord();
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,141,if( headerBuf == null )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,143,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,145,"debug( ""READ NULL RECORD"" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,147,m_hasHitEOF = true;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,149,else if( m_buffer.isEOFRecord( headerBuf ) )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,151,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,153,"debug( ""READ EOF RECORD"" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,155,m_hasHitEOF = true;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,158,if( m_hasHitEOF )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,160,m_currEntry = null;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,162,else
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,164,m_currEntry = new TarEntry( headerBuf );
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,166,if( !( headerBuf[ 257 ] == 'u' && headerBuf[ 258 ] == 's' &&
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,167,headerBuf[ 259 ] == 't' && headerBuf[ 260 ] == 'a' &&
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,168,headerBuf[ 261 ] == 'r' ) )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,170,//Must be v7Format
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,173,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,175,"final String message = ""TarInputStream: SET CURRENTRY '"" +"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,176,"m_currEntry.getName() + ""' size = "" + m_currEntry.getSize();"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,177,debug( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,180,m_entryOffset = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,182,// REVIEW How do we resolve this discrepancy?!
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,183,m_entrySize = (int)m_currEntry.getSize();
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,186,if( null != m_currEntry && m_currEntry.isGNULongNameEntry() )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,188,// read in the name
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,189,final StringBuffer longName = new StringBuffer();
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,190,final byte[] buffer = new byte[ 256 ];
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,191,int length = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,192,while( ( length = read( buffer ) ) >= 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,194,"final String str = new String( buffer, 0, length );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,195,longName.append( str );
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,197,getNextEntry();
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,199,// remove trailing null terminator
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,200,if (longName.length() > 0
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,201,&& longName.charAt(longName.length() - 1) == 0) {
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,202,longName.deleteCharAt(longName.length() - 1);
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,205,m_currEntry.setName( longName.toString() );
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,208,return m_currEntry;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,212,* Get the record size being used by this stream's TarBuffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,214,* @return The TarBuffer record size.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,216,public int getRecordSize()
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,218,return m_buffer.getRecordSize();
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,222,* Get the available data that can be read from the current entry in the
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,223,* archive. This does not indicate how much data is left in the entire
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,224,"* archive, only in the current entry. This value is determined from the"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,225,* entry's size header field and the amount of data already read from the
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,226,* current entry.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,228,* @return The number of available bytes for the current entry.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,229,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,231,public int available()
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,232,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,234,return m_entrySize - m_entryOffset;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,238,* Closes this stream. Calls the TarBuffer's close() method.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,240,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,242,public void close()
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,243,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,245,m_buffer.close();
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,249,* Copies the contents of the current tar archive entry directly into an
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,250,* output stream.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,252,* @param output The OutputStream into which to write the entry's data.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,253,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,255,public void copyEntryContents( final OutputStream output )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,256,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,258,final byte[] buffer = new byte[ 32 * 1024 ];
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,259,while( true )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,261,"final int numRead = read( buffer, 0, buffer.length );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,262,if( numRead == -1 )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,264,break;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,267,"output.write( buffer, 0, numRead );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,272,"* Since we do not support marking just yet, we do nothing."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,274,* @param markLimit The limit to mark.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,276,public void mark( int markLimit )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,281,"* Since we do not support marking just yet, we return false."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,283,* @return False.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,285,public boolean markSupported()
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,287,return false;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,291,* Reads a byte from the current tar archive entry. This method simply calls
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,292,"* read( byte[], int, int )."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,294,"* @return The byte read, or -1 at EOF."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,295,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,297,public int read()
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,298,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,300,"final int num = read( m_oneBuf, 0, 1 );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,301,if( num == -1 )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,303,return num;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,305,else
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,307,return (int)m_oneBuf[ 0 ];
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,312,* Reads bytes from the current tar archive entry. This method simply calls
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,313,"* read( byte[], int, int )."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,315,* @param buffer The buffer into which to place bytes read.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,316,"* @return The number of bytes read, or -1 at EOF."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,317,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,319,public int read( final byte[] buffer )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,320,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,322,"return read( buffer, 0, buffer.length );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,326,* Reads bytes from the current tar archive entry. This method is aware of
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,327,* the boundaries of the current entry in the archive and will deal with
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,328,* them as if they were this stream's start and EOF.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,330,* @param buffer The buffer into which to place bytes read.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,331,* @param offset The offset at which to place bytes read.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,332,* @param count The number of bytes to read.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,333,"* @return The number of bytes read, or -1 at EOF."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,334,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,336,"public int read( final byte[] buffer,"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,337,"final int offset,"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,338,final int count )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,339,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,341,int position = offset;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,342,int numToRead = count;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,343,int totalRead = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,345,if( m_entryOffset >= m_entrySize )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,347,return -1;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,350,if( ( numToRead + m_entryOffset ) > m_entrySize )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,352,numToRead = ( m_entrySize - m_entryOffset );
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,355,if( null != m_readBuf )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,357,final int size =
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,358,( numToRead > m_readBuf.length ) ? m_readBuf.length : numToRead;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,360,"System.arraycopy( m_readBuf, 0, buffer, position, size );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,362,if( size >= m_readBuf.length )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,364,m_readBuf = null;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,366,else
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,368,final int newLength = m_readBuf.length - size;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,369,final byte[] newBuffer = new byte[ newLength ];
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,371,"System.arraycopy( m_readBuf, size, newBuffer, 0, newLength );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,373,m_readBuf = newBuffer;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,376,totalRead += size;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,377,numToRead -= size;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,378,position += size;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,381,while( numToRead > 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,383,final byte[] rec = m_buffer.readRecord();
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,384,if( null == rec )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,386,// Unexpected EOF!
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,387,final String message =
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,388,"""unexpected EOF with "" + numToRead + "" bytes unread"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,389,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,392,int size = numToRead;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,393,final int recordLength = rec.length;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,395,if( recordLength > size )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,397,"System.arraycopy( rec, 0, buffer, position, size );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,399,m_readBuf = new byte[ recordLength - size ];
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,401,"System.arraycopy( rec, size, m_readBuf, 0, recordLength - size );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,403,else
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,405,size = recordLength;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,407,"System.arraycopy( rec, 0, buffer, position, recordLength );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,410,totalRead += size;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,411,numToRead -= size;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,412,position += size;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,415,m_entryOffset += totalRead;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,417,return totalRead;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,421,"* Since we do not support marking just yet, we do nothing."
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,423,public void reset()
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,428,* Skip bytes in the input buffer. This skips bytes in the current entry's
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,429,"* data, not the entire archive, and will stop at the end of the current"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,430,* entry's data if the number to skip extends beyond that point.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,432,* @param numToSkip The number of bytes to skip.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,433,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,435,public void skip( final int numToSkip )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,436,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,438,// REVIEW
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,439,"// This is horribly inefficient, but it ensures that we"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,440,// properly skip over bytes via the TarBuffer...
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,442,final byte[] skipBuf = new byte[ 8 * 1024 ];
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,443,int num = numToSkip;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,444,while( num > 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,446,final int count = ( num > skipBuf.length ) ? skipBuf.length : num;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,447,"final int numRead = read( skipBuf, 0, count );"
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,448,if( numRead == -1 )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,450,break;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,453,num -= numRead;
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,458,* Utility method to do debugging.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,459,* Capable of being overidden in sub-classes.
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,461,* @param message the message to use in debugging
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,463,protected void debug( final String message )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,465,if( m_debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarInputStream.java,467,System.err.println( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,16,package org.apache.commons.compress.archivers.tar;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,18,import java.io.FilterOutputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,19,import java.io.IOException;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,20,import java.io.InputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,21,import java.io.OutputStream;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,23,* The TarOutputStream writes a UNIX tar archive as an OutputStream. Methods are
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,24,"* provided to put entries, and then write their contents by writing to this"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,25,* stream using write().
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,27,"* @author Timothy Gerard Endres <a href=""mailto:time@ice.com"">time@ice.com</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,28,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,29,* @version $Revision: 155439 $ $Date$
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,30,* @see TarInputStream
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,31,* @see TarEntry
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,33,public final class TarOutputStream extends FilterOutputStream
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,36,* Flag to indicate that an error should be generated if
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,37,* an attempt is made to write an entry that exceeds the 100 char
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,38,* POSIX limit.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,40,public static final int LONGFILE_ERROR = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,43,* Flag to indicate that entry name should be truncated if
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,44,* an attempt is made to write an entry that exceeds the 100 char
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,45,* POSIX limit.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,47,public static final int LONGFILE_TRUNCATE = 1;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,50,* Flag to indicate that entry name should be formatted
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,51,* according to GNU tar extension if an attempt is made
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,52,* to write an entry that exceeds the 100 char POSIX
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,53,* limit. Note that this makes the jar unreadable by
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,54,* non-GNU tar commands.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,56,public static final int LONGFILE_GNU = 2;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,58,private int m_longFileMode = LONGFILE_ERROR;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,59,private byte[] m_assemBuf;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,60,private int m_assemLen;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,61,private TarBuffer m_buffer;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,62,private int m_currBytes;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,63,private int m_currSize;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,65,private byte[] m_oneBuf;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,66,private byte[] m_recordBuf;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,69,* Construct a TarOutputStream using specified input
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,70,* stream and default block and record sizes.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,72,* @param output stream to create TarOutputStream from
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,73,* @see TarBuffer#DEFAULT_BLOCKSIZE
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,74,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,76,public TarOutputStream( final OutputStream output )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,78,"this( output, TarBuffer.DEFAULT_BLOCKSIZE, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,82,* Construct a TarOutputStream using specified input
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,83,"* stream, block size and default record sizes."
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,85,* @param output stream to create TarOutputStream from
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,86,* @param blockSize the block size
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,87,* @see TarBuffer#DEFAULT_RECORDSIZE
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,89,"public TarOutputStream( final OutputStream output,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,90,final int blockSize )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,92,"this( output, blockSize, TarBuffer.DEFAULT_RECORDSIZE );"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,96,* Construct a TarOutputStream using specified input
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,97,"* stream, block size and record sizes."
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,99,* @param output stream to create TarOutputStream from
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,100,* @param blockSize the block size
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,101,* @param recordSize the record size
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,103,"public TarOutputStream( final OutputStream output,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,104,"final int blockSize,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,105,final int recordSize )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,107,super( output );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,109,"m_buffer = new TarBuffer( output, blockSize, recordSize );"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,110,m_assemLen = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,111,m_assemBuf = new byte[ recordSize ];
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,112,m_recordBuf = new byte[ recordSize ];
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,113,m_oneBuf = new byte[ 1 ];
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,117,* Sets the debugging flag in this stream's TarBuffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,119,* @param debug The new BufferDebug value
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,121,public void setBufferDebug( boolean debug )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,123,m_buffer.setDebug( debug );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,127,* Set the mode used to work with entrys exceeding
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,128,* 100 chars (and thus break the POSIX standard).
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,129,* Must be one of the LONGFILE_* constants.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,131,* @param longFileMode the mode
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,133,public void setLongFileMode( final int longFileMode )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,135,if( LONGFILE_ERROR != longFileMode &&
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,136,LONGFILE_GNU != longFileMode &&
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,137,LONGFILE_TRUNCATE != longFileMode )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,139,"throw new IllegalArgumentException( ""longFileMode"" );"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,141,m_longFileMode = longFileMode;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,145,* Get the record size being used by this stream's TarBuffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,147,* @return The TarBuffer record size.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,149,public int getRecordSize()
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,151,return m_buffer.getRecordSize();
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,155,* Ends the TAR archive and closes the underlying OutputStream. This means
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,156,* that finish() is called followed by calling the TarBuffer's close().
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,158,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,160,public void close()
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,161,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,163,finish();
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,164,m_buffer.close();
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,168,* Close an entry. This method MUST be called for all file entries that
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,169,* contain data. The reason is that we must buffer data written to the
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,170,"* stream in order to satisfy the buffer's record based writes. Thus, there"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,171,* may be data fragments still being assembled that must be written to the
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,172,* output stream before this entry is closed and the next entry written.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,174,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,176,public void closeEntry()
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,177,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,179,if( m_assemLen > 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,181,for( int i = m_assemLen; i < m_assemBuf.length; ++i )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,183,m_assemBuf[ i ] = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,186,m_buffer.writeRecord( m_assemBuf );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,188,m_currBytes += m_assemLen;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,189,m_assemLen = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,192,if( m_currBytes < m_currSize )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,194,"final String message = ""entry closed at '"" + m_currBytes +"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,195,"""' before the '"" + m_currSize +"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,196,"""' bytes specified in the header were written"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,197,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,202,* Ends the TAR archive without closing the underlying OutputStream. The
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,203,* result is that the EOF record of nulls is written.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,205,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,207,public void finish()
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,208,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,210,writeEOFRecord();
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,214,* Put an entry on the output stream. This writes the entry's header record
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,215,* and positions the output stream for writing the contents of the entry.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,216,"* Once this method is called, the stream is ready for calls to write() to"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,217,"* write the entry's contents. Once the contents are written, closeEntry()"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,218,* <B>MUST</B> be called to ensure that all buffered data is completely
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,219,* written to the output stream.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,221,* @param entry The TarEntry to be written to the archive.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,222,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,224,public void putNextEntry( final TarEntry entry )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,225,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,227,if( entry.getName().length() >= TarEntry.NAMELEN )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,229,if( m_longFileMode == LONGFILE_GNU )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,231,"// create a TarEntry for the LongLink, the contents"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,232,// of which are the entry's name
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,233,final TarEntry longLinkEntry =
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,234,"new TarEntry( TarEntry.GNU_LONGLINK,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,235,TarEntry.LF_GNUTYPE_LONGNAME );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,237,longLinkEntry.setSize( entry.getName().length() );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,238,putNextEntry( longLinkEntry );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,239,write( entry.getName().getBytes() );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,240,//write( 0 );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,241,closeEntry();
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,243,else if( m_longFileMode != LONGFILE_TRUNCATE )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,245,"final String message = ""file name '"" + entry.getName() +"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,246,"""' is too long ( > "" + TarEntry.NAMELEN + "" bytes)"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,247,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,251,entry.writeEntryHeader( m_recordBuf );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,252,m_buffer.writeRecord( m_recordBuf );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,254,m_currBytes = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,256,if( entry.isDirectory() )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,258,m_currSize = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,260,else
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,262,m_currSize = (int)entry.getSize();
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,267,* Copies the contents of the specified stream into current tar
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,268,* archive entry.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,270,* @param input The InputStream from which to read entrys data
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,271,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,273,void copyEntryContents( final InputStream input )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,274,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,276,final byte[] buffer = new byte[ 32 * 1024 ];
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,277,while( true )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,279,"final int numRead = input.read( buffer, 0, buffer.length );"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,280,if( numRead == -1 )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,282,break;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,285,"write( buffer, 0, numRead );"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,290,* Writes a byte to the current tar archive entry. This method simply calls
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,291,"* read( byte[], int, int )."
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,293,* @param data The byte written.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,294,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,296,public void write( final int data )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,297,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,299,m_oneBuf[ 0 ] = (byte)data;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,301,"write( m_oneBuf, 0, 1 );"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,305,* Writes bytes to the current tar archive entry. This method simply calls
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,306,"* write( byte[], int, int )."
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,308,* @param buffer The buffer to write to the archive.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,309,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,311,public void write( final byte[] buffer )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,312,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,314,"write( buffer, 0, buffer.length );"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,318,* Writes bytes to the current tar archive entry. This method is aware of
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,319,* the current entry and will throw an exception if you attempt to write
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,320,* bytes past the length specified for the current entry. The method is also
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,321,"* (painfully) aware of the record buffering required by TarBuffer, and"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,322,"* manages buffers that are not a multiple of recordsize in length,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,323,* including assembling records from small buffers.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,325,* @param buffer The buffer to write to the archive.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,326,* @param offset The offset in the buffer from which to get bytes.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,327,* @param count The number of bytes to write.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,328,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,330,"public void write( final byte[] buffer,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,331,"final int offset,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,332,final int count )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,333,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,335,int position = offset;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,336,int numToWrite = count;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,337,if( ( m_currBytes + numToWrite ) > m_currSize )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,339,"final String message = ""request to write '"" + numToWrite +"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,340,"""' bytes exceeds size in header of '"" + m_currSize + ""' bytes"";"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,341,throw new IOException( message );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,343,// We have to deal with assembly!!!
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,344,// The programmer can be writing little 32 byte chunks for all
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,345,"// we know, and we must assemble complete records for writing."
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,346,// REVIEW Maybe this should be in TarBuffer? Could that help to
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,347,// eliminate some of the buffer copying.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,351,if( m_assemLen > 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,353,if( ( m_assemLen + numToWrite ) >= m_recordBuf.length )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,355,final int length = m_recordBuf.length - m_assemLen;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,357,"System.arraycopy( m_assemBuf, 0, m_recordBuf, 0,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,358,m_assemLen );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,359,"System.arraycopy( buffer, position, m_recordBuf,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,360,"m_assemLen, length );"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,361,m_buffer.writeRecord( m_recordBuf );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,363,m_currBytes += m_recordBuf.length;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,364,position += length;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,365,numToWrite -= length;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,366,m_assemLen = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,368,else
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,370,"System.arraycopy( buffer, position, m_assemBuf, m_assemLen,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,371,numToWrite );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,373,position += numToWrite;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,374,m_assemLen += numToWrite;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,375,numToWrite -= numToWrite;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,380,// When we get here we have EITHER:
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,381,"// o An empty ""assemble"" buffer."
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,382,// o No bytes to write (numToWrite == 0)
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,384,while( numToWrite > 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,386,if( numToWrite < m_recordBuf.length )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,388,"System.arraycopy( buffer, position, m_assemBuf, m_assemLen,"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,389,numToWrite );
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,391,m_assemLen += numToWrite;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,393,break;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,396,"m_buffer.writeRecord( buffer, position );"
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,398,int num = m_recordBuf.length;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,400,m_currBytes += num;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,401,numToWrite -= num;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,402,position += num;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,407,* Write an EOF (end of archive) record to the tar archive. An EOF record
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,408,* consists of a record of all zeros.
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,410,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,412,private void writeEOFRecord()
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,413,throws IOException
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,415,for( int i = 0; i < m_recordBuf.length; ++i )
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,417,m_recordBuf[ i ] = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,src/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java,420,m_buffer.writeRecord( m_recordBuf );
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,16,package org.apache.commons.compress.archivers.tar;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,19,* This class provides static utility methods to work with byte streams.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,21,"* @author <a href=""mailto:time@ice.com"">Timothy Gerard Endres</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,22,"* @author <a href=""mailto:stefano@apache.org"">Stefano Mazzocchi</a>"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,23,* @version $Revision: 155439 $ $Date$
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,25,public class TarUtils
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,28,* Parse the checksum octal integer from a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,30,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,31,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,32,* @param value Description of Parameter
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,33,* @param buf Description of Parameter
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,34,* @return The integer value of the entry's checksum.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,36,"public static int getCheckSumOctalBytes( final long value,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,37,"final byte[] buf,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,38,"final int offset,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,39,final int length )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,41,"getOctalBytes( value, buf, offset, length );"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,43,buf[ offset + length - 1 ] = (byte)' ';
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,44,buf[ offset + length - 2 ] = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,46,return offset + length;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,50,* Parse an octal long integer from a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,52,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,53,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,54,* @param value Description of Parameter
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,55,* @param buf Description of Parameter
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,56,* @return The long value of the octal bytes.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,58,"public static int getLongOctalBytes( final long value,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,59,"final byte[] buf,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,60,"final int offset,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,61,final int length )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,63,byte[] temp = new byte[ length + 1 ];
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,65,"getOctalBytes( value, temp, 0, length + 1 );"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,66,"System.arraycopy( temp, 0, buf, offset, length );"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,68,return offset + length;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,72,* Determine the number of bytes in an entry name.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,74,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,75,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,76,* @param name Description of Parameter
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,77,* @param buffer Description of Parameter
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,78,* @return The number of bytes in a header's entry name.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,80,"public static int getNameBytes( final StringBuffer name,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,81,"final byte[] buffer,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,82,"final int offset,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,83,final int length )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,85,int i;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,87,for( i = 0; i < length && i < name.length(); ++i )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,89,buffer[ offset + i ] = (byte)name.charAt( i );
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,92,for( ; i < length; ++i )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,94,buffer[ offset + i ] = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,97,return offset + length;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,101,* Parse an octal integer from a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,103,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,104,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,105,* @return The integer value of the octal bytes.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,107,"public static int getOctalBytes( final long value,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,108,"final byte[] buffer,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,109,"final int offset,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,110,final int length )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,112,int idx = length - 1;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,114,buffer[ offset + idx ] = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,115,--idx;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,116,buffer[ offset + idx ] = (byte)' ';
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,117,--idx;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,119,if( value == 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,121,buffer[ offset + idx ] = (byte)'0';
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,122,--idx;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,124,else
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,126,long val = value;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,127,while( idx >= 0 && val > 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,129,buffer[ offset + idx ] = (byte)( (byte)'0' + (byte)( val & 7 ) );
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,130,val = val >> 3;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,131,idx--;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,135,while( idx >= 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,137,buffer[ offset + idx ] = (byte)' ';
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,138,idx--;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,141,return offset + length;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,145,* Compute the checksum of a tar entry header.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,147,* @param buffer The tar entry's header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,148,* @return The computed checksum.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,150,public static long computeCheckSum( final byte[] buffer )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,152,long sum = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,154,for( int i = 0; i < buffer.length; ++i )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,156,sum += 255 & buffer[ i ];
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,159,return sum;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,163,* Parse an entry name from a header buffer.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,165,* @param header The header buffer from which to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,166,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,167,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,168,* @return The header's entry name.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,170,"public static StringBuffer parseName( final byte[] header,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,171,"final int offset,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,172,final int length )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,174,StringBuffer result = new StringBuffer( length );
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,175,int end = offset + length;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,177,for( int i = offset; i < end; ++i )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,179,if( header[ i ] == 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,181,break;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,184,result.append( (char)header[ i ] );
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,187,return result;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,191,* Parse an octal string from a header buffer. This is used for the file
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,192,* permission mode value.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,194,* @param header The header buffer from which to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,195,* @param offset The offset into the buffer from which to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,196,* @param length The number of header bytes to parse.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,197,* @return The long value of the octal string.
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,199,"public static long parseOctal( final byte[] header,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,200,"final int offset,"
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,201,final int length )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,203,long result = 0;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,204,boolean stillPadding = true;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,205,int end = offset + length;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,207,for( int i = offset; i < end; ++i )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,209,if( header[ i ] == 0 )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,211,break;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,214,if( header[ i ] == (byte)' ' || header[ i ] == '0' )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,216,if( stillPadding )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,218,continue;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,221,if( header[ i ] == (byte)' ' )
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,223,break;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,227,stillPadding = false;
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,228,result = ( result << 3 ) + ( header[ i ] - '0' );
True,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,src/java/org/apache/commons/compress/archivers/tar/TarUtils.java,231,return result;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,16,package org.apache.commons.compress.archivers.zip;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,18,import java.util.zip.CRC32;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,19,import java.util.zip.ZipException;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,22,* Adds Unix file permission and UID/GID fields as well as symbolic link
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,23,* handling. <p>
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,25,* This class uses the ASi extra field in the format: <pre>
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,26,*         Value         Size            Description
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,28,* (Unix3) 0x756e        Short           tag for this extra block type
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,29,*         TSize         Short           total data size for this block
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,30,*         CRC           Long            CRC-32 of the remaining data
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,31,*         Mode          Short           file permissions
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,32,*         SizDev        Long            symlink'd size OR major/minor dev num
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,33,*         UID           Short           user ID
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,34,*         GID           Short           group ID
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,35,*         (var.)        variable        symbolic link filename
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,36,"* </pre> taken from appnote.iz (Info-ZIP note, 981119) found at <a"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,37,"* href=""ftp://ftp.uu.net/pub/archiving/zip/doc/"">"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,38,* ftp://ftp.uu.net/pub/archiving/zip/doc/</a> </p> <p>
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,40,"* Short is two bytes and Long is four bytes in big endian byte and word order,"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,41,* device numbers are currently not supported.</p>
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,43,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,44,* @version $Revision: 155439 $
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,46,public class AsiExtraField
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,47,"implements ZipExtraField, UnixStat, Cloneable"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,49,private static final ZipShort HEADER_ID = new ZipShort( 0x756E );
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,52,* Standard Unix stat(2) file mode.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,54,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,56,private int m_mode;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,59,* User ID.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,61,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,63,private int m_uid;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,66,* Group ID.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,68,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,70,private int m_gid;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,73,"* File this entry points to, if it is a symbolic link. <p>"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,75,* empty string - if entry is not a symbolic link.</p>
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,77,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,79,"private String m_link = """";"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,82,* Is this an entry for a directory?
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,84,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,86,private boolean m_dirFlag;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,89,* Instance used to calculate checksums.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,91,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,93,private CRC32 m_crc = new CRC32();
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,96,* Indicate whether this entry is a directory.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,98,* @param dirFlag The new Directory value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,99,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,101,public void setDirectory( final boolean dirFlag )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,103,m_dirFlag = dirFlag;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,104,m_mode = getMode( m_mode );
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,108,* Set the group id.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,110,* @param gid The new GroupId value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,111,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,113,public void setGroupId( int gid )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,115,m_gid = gid;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,119,* Indicate that this entry is a symbolic link to the given filename.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,121,"* @param name Name of the file this entry links to, empty String if it is"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,122,*      not a symbolic link.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,123,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,125,public void setLinkedFile( final String name )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,127,m_link = name;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,128,m_mode = getMode( m_mode );
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,132,* File mode of this file.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,134,* @param mode The new Mode value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,135,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,137,public void setMode( final int mode )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,139,m_mode = getMode( mode );
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,143,* Set the user id.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,145,* @param uid The new UserId value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,146,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,147,* @deprecated Use setUserID(int)
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,148,* @see #setUserID(int)
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,150,public void setUserId( final int uid )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,152,m_uid = uid;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,156,* Set the user id.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,158,* @param uid The new UserId value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,160,public void setUserID( final int uid )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,162,m_uid = uid;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,166,* Delegate to local file data.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,168,* @return The CentralDirectoryData value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,169,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,171,public byte[] getCentralDirectoryData()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,173,return getLocalFileDataData();
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,177,* Delegate to local file data.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,179,* @return The CentralDirectoryLength value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,180,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,182,public ZipShort getCentralDirectoryLength()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,184,return getLocalFileDataLength();
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,188,* Get the group id.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,190,* @return The GroupId value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,191,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,193,public int getGroupID()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,195,return m_gid;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,199,* Get the group id.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,201,* @return The GroupId value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,202,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,203,* @deprecated Use getGroupID() instead
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,204,* @see #getGroupID()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,206,public int getGroupId()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,208,return m_gid;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,212,* The Header-ID.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,214,* @return The HeaderId value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,215,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,217,public ZipShort getHeaderID()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,219,return HEADER_ID;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,223,* Name of linked file
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,225,"* @return name of the file this entry links to if it is a symbolic link,"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,226,*      the empty string otherwise.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,227,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,229,public String getLinkedFile()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,231,return m_link;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,235,* The actual data to put into local file data - without Header-ID or length
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,236,* specifier.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,238,* @return The LocalFileDataData value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,239,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,241,public byte[] getLocalFileDataData()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,243,// CRC will be added later
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,244,byte[] data = new byte[ getLocalFileDataLength().getValue() - 4 ];
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,245,"System.arraycopy( ( new ZipShort( getMode() ) ).getBytes(), 0, data, 0, 2 );"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,247,byte[] linkArray = getLinkedFile().getBytes();
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,248,"System.arraycopy( ( new ZipLong( linkArray.length ) ).getBytes(),"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,249,"0, data, 2, 4 );"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,251,"System.arraycopy( ( new ZipShort( getUserID() ) ).getBytes(),"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,252,"0, data, 6, 2 );"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,253,"System.arraycopy( ( new ZipShort( getGroupID() ) ).getBytes(),"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,254,"0, data, 8, 2 );"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,256,"System.arraycopy( linkArray, 0, data, 10, linkArray.length );"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,258,m_crc.reset();
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,259,m_crc.update( data );
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,260,long checksum = m_crc.getValue();
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,262,byte[] result = new byte[ data.length + 4 ];
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,263,"System.arraycopy( ( new ZipLong( checksum ) ).getBytes(), 0, result, 0, 4 );"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,264,"System.arraycopy( data, 0, result, 4, data.length );"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,265,return result;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,269,* Length of the extra field in the local file data - without Header-ID or
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,270,* length specifier.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,272,* @return The LocalFileDataLength value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,273,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,275,public ZipShort getLocalFileDataLength()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,277,return new ZipShort( 4 + // CRC
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,278,2 + // Mode
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,279,4 + // SizDev
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,280,2 + // UID
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,281,2 + // GID
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,282,getLinkedFile().getBytes().length );
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,286,* File mode of this file.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,288,* @return The Mode value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,289,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,291,public int getMode()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,293,return m_mode;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,297,* Get the user id.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,299,* @return The UserId value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,300,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,301,* @deprecated Use getUserID()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,302,* @see #getUserID()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,304,public int getUserId()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,306,return m_uid;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,310,* Get the user id.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,312,* @return The UserID value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,314,public int getUserID()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,316,return m_uid;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,320,* Is this entry a directory?
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,322,* @return The Directory value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,323,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,325,public boolean isDirectory()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,327,return m_dirFlag && !isLink();
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,331,* Is this entry a symbolic link?
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,333,* @return The Link value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,334,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,336,public boolean isLink()
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,338,return getLinkedFile().length() != 0;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,342,* Populate data from this array as if it was in local file data.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,344,* @param buffer the buffer
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,345,* @param offset the offset into buffer
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,346,* @param length the length of data in buffer
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,347,* @throws ZipException on error
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,348,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,350,"public void parseFromLocalFileData( final byte[] buffer,"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,351,"final int offset,"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,352,final int length )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,353,throws ZipException
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,356,"long givenChecksum = ( new ZipLong( buffer, offset ) ).getValue();"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,357,byte[] tmp = new byte[ length - 4 ];
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,358,"System.arraycopy( buffer, offset + 4, tmp, 0, length - 4 );"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,359,m_crc.reset();
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,360,m_crc.update( tmp );
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,361,long realChecksum = m_crc.getValue();
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,362,if( givenChecksum != realChecksum )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,364,"throw new ZipException( ""bad CRC checksum "" + Long.toHexString( givenChecksum ) +"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,365,""" instead of "" + Long.toHexString( realChecksum ) );"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,368,"int newMode = ( new ZipShort( tmp, 0 ) ).getValue();"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,369,"byte[] linkArray = new byte[ (int)( new ZipLong( tmp, 2 ) ).getValue() ];"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,370,"m_uid = ( new ZipShort( tmp, 6 ) ).getValue();"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,371,"m_gid = ( new ZipShort( tmp, 8 ) ).getValue();"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,373,if( linkArray.length == 0 )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,375,"m_link = """";"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,377,else
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,379,"System.arraycopy( tmp, 10, linkArray, 0, linkArray.length );"
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,380,m_link = new String( linkArray );
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,382,setDirectory( ( newMode & DIR_FLAG ) != 0 );
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,383,setMode( newMode );
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,387,* Get the file mode for given permissions with the correct file type.
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,389,* @param mode Description of Parameter
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,390,* @return The Mode value
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,391,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,393,protected int getMode( final int mode )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,395,int type = FILE_FLAG;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,396,if( isLink() )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,398,type = LINK_FLAG;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,400,else if( isDirectory() )
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,402,type = DIR_FLAG;
True,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,src/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java,404,return type | ( mode & PERM_MASK );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,16,package org.apache.commons.compress.archivers.zip;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,18,import java.util.ArrayList;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,19,import java.util.Hashtable;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,20,import java.util.zip.ZipException;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,23,* ZipExtraField related methods
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,25,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,26,* @version $Revision: 155439 $
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,28,public class ExtraFieldUtils
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,31,* Static registry of known extra fields.
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,33,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,35,private static final Hashtable c_implementations;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,37,static
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,39,c_implementations = new Hashtable();
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,40,register( AsiExtraField.class );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,44,"* Create an instance of the approriate ExtraField, falls back to {@link"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,45,* UnrecognizedExtraField UnrecognizedExtraField}.
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,47,* Throws java.lang.IllegalAccessException if cant create implementation.
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,49,* @param headerID the header ID
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,50,* @return the extra field implementation
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,51,* @throws InstantiationException if cant create implementation
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,52,* @throws IllegalAccessException if cant create implementation
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,53,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,55,public static ZipExtraField createExtraField( final ZipShort headerID )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,56,"throws InstantiationException, IllegalAccessException"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,58,final Class clazz =
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,59,(Class)c_implementations.get( headerID );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,60,if( clazz != null )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,62,return (ZipExtraField)clazz.newInstance();
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,64,final UnrecognizedExtraField unrecognized = new UnrecognizedExtraField();
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,65,unrecognized.setHeaderID( headerID );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,66,return unrecognized;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,70,* Merges the central directory fields of the given ZipExtraFields.
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,72,* @param data the central directory data
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,73,* @return the merged data
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,74,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,76,public static byte[] mergeCentralDirectoryData( final ZipExtraField[] data )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,78,int sum = 4 * data.length;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,79,for( int i = 0; i < data.length; i++ )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,81,sum += data[ i ].getCentralDirectoryLength().getValue();
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,83,byte[] result = new byte[ sum ];
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,84,int start = 0;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,85,for( int i = 0; i < data.length; i++ )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,87,"System.arraycopy( data[ i ].getHeaderID().getBytes(),"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,88,"0, result, start, 2 );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,89,"System.arraycopy( data[ i ].getCentralDirectoryLength().getBytes(),"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,90,"0, result, start + 2, 2 );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,91,byte[] local = data[ i ].getCentralDirectoryData();
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,92,"System.arraycopy( local, 0, result, start + 4, local.length );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,93,start += ( local.length + 4 );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,95,return result;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,99,* Merges the local file data fields of the given ZipExtraFields.
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,101,* @param data the data
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,102,* @return the merged data
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,103,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,105,public static byte[] mergeLocalFileDataData( final ZipExtraField[] data )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,107,int sum = 4 * data.length;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,108,for( int i = 0; i < data.length; i++ )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,110,sum += data[ i ].getLocalFileDataLength().getValue();
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,112,byte[] result = new byte[ sum ];
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,113,int start = 0;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,114,for( int i = 0; i < data.length; i++ )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,116,"System.arraycopy( data[ i ].getHeaderID().getBytes(),"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,117,"0, result, start, 2 );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,118,"System.arraycopy( data[ i ].getLocalFileDataLength().getBytes(),"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,119,"0, result, start + 2, 2 );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,120,byte[] local = data[ i ].getLocalFileDataData();
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,121,"System.arraycopy( local, 0, result, start + 4, local.length );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,122,start += ( local.length + 4 );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,124,return result;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,128,* Split the array into ExtraFields and populate them with the give data.
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,130,* @param data the data to parse
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,131,* @return the parsed fields
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,132,* @exception ZipException on error
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,133,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,135,public static ZipExtraField[] parse( final byte[] data )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,136,throws ZipException
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,138,ArrayList v = new ArrayList();
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,139,int start = 0;
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,140,while( start <= data.length - 4 )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,142,"final ZipShort headerID = new ZipShort( data, start );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,143,"int length = ( new ZipShort( data, start + 2 ) ).getValue();"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,144,if( start + 4 + length > data.length )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,146,"throw new ZipException( ""data starting at "" + start + "" is in unknown format"" );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,148,try
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,150,ZipExtraField ze = createExtraField( headerID );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,151,"ze.parseFromLocalFileData( data, start + 4, length );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,152,v.add( ze );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,154,catch( InstantiationException ie )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,156,throw new ZipException( ie.getMessage() );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,158,catch( IllegalAccessException iae )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,160,throw new ZipException( iae.getMessage() );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,162,start += ( length + 4 );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,164,if( start != data.length )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,165,{// array not exhausted
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,166,"throw new ZipException( ""data starting at "" + start + "" is in unknown format"" );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,169,final ZipExtraField[] result = new ZipExtraField[ v.size() ];
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,170,return (ZipExtraField[])v.toArray( result );
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,174,* Register a ZipExtraField implementation. <p>
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,176,* The given class must have a no-arg constructor and implement the {@link
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,177,* ZipExtraField ZipExtraField interface}.</p>
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,179,* @param clazz The Class for particular implementation
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,180,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,182,public static void register( final Class clazz )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,184,try
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,186,ZipExtraField ze = (ZipExtraField)clazz.newInstance();
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,187,"c_implementations.put( ze.getHeaderID(), clazz );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,189,catch( ClassCastException cc )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,191,throw new RuntimeException( clazz +
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,192,""" doesn\'t implement ZipExtraField"" );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,194,catch( InstantiationException ie )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,196,"throw new RuntimeException( clazz + "" is not a concrete class"" );"
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,198,catch( IllegalAccessException ie )
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,200,throw new RuntimeException( clazz +
True,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,src/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java,201,"""\'s no-arg constructor is not public"" );"
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,16,package org.apache.commons.compress.archivers.zip;
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,19,* Constants from stat.h on Unix systems.
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,21,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,22,* @version $Revision: 155439 $
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,24,public interface UnixStat
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,27,* Bits used for permissions (and sticky bit)
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,29,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,31,int PERM_MASK = 07777;
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,33,* Indicates symbolic links.
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,35,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,37,int LINK_FLAG = 0120000;
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,39,* Indicates plain files.
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,41,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,43,int FILE_FLAG = 0100000;
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,45,* Indicates directories.
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,47,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,49,int DIR_FLAG = 040000;
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,52,// somewhat arbitrary choices that are quite common for shared
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,53,// installations
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,57,* Default permissions for symbolic links.
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,59,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,61,int DEFAULT_LINK_PERM = 0777;
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,64,* Default permissions for directories.
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,66,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,68,int DEFAULT_DIR_PERM = 0755;
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,71,* Default permissions for plain files.
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,73,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,src/java/org/apache/commons/compress/archivers/zip/UnixStat.java,75,int DEFAULT_FILE_PERM = 0644;
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,16,package org.apache.commons.compress.archivers.zip;
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,19,* Simple placeholder for all those extra fields we don't want to deal with. <p>
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,21,* Assumes local file data and central directory entries are identical - unless
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,22,* told the opposite.</p>
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,24,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,25,* @version $Revision: 155439 $
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,27,public class UnrecognizedExtraField
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,28,implements ZipExtraField
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,31,* Extra field data in central directory - without Header-ID or length
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,32,* specifier.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,34,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,36,private byte[] m_centralData;
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,39,* The Header-ID.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,41,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,43,private ZipShort m_headerID;
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,46,* Extra field data in local file data - without Header-ID or length
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,47,* specifier.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,49,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,51,private byte[] m_localData;
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,54,* Set the central directory data
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,56,* @param centralData the central directory data
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,58,public void setCentralDirectoryData( final byte[] centralData )
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,60,m_centralData = centralData;
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,64,* Set the header ID.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,66,* @param headerID the header ID
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,68,public void setHeaderID( final ZipShort headerID )
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,70,m_headerID = headerID;
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,74,* Set the local file data.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,76,* @param localData the local file data
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,78,public void setLocalFileDataData( final byte[] localData )
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,80,m_localData = localData;
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,84,* Get the central directory data.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,86,* @return the central directory data.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,88,public byte[] getCentralDirectoryData()
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,90,if( m_centralData != null )
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,92,return m_centralData;
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,94,return getLocalFileDataData();
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,98,* Get the length of the central directory in bytes.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,100,* @return the length of the central directory in bytes.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,102,public ZipShort getCentralDirectoryLength()
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,104,if( m_centralData != null )
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,106,return new ZipShort( m_centralData.length );
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,108,return getLocalFileDataLength();
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,112,* Get the HeaderID.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,114,* @return the HeaderID
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,116,public ZipShort getHeaderID()
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,118,return m_headerID;
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,122,* Get the local file data.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,124,* @return the local file data
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,126,public byte[] getLocalFileDataData()
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,128,return m_localData;
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,132,* Get the length of local file data in bytes.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,134,* @return the length of local file data in bytes
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,136,public ZipShort getLocalFileDataLength()
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,138,return new ZipShort( m_localData.length );
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,142,* Parse LocalFiledata out of supplied buffer.
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,144,* @param buffer the buffer to use
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,145,* @param offset the offset into buffer
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,146,* @param length then length of data
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,148,"public void parseFromLocalFileData( final byte[] buffer,"
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,149,"final int offset,"
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,150,final int length )
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,152,final byte[] fileData = new byte[ length ];
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,153,"System.arraycopy( buffer, offset, fileData, 0, length );"
True,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,src/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java,154,setLocalFileDataData( fileData );
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,16,package org.apache.commons.compress.archivers.zip;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,18,import java.io.BufferedInputStream;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,19,import java.io.BufferedOutputStream;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,20,import java.io.File;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,21,import java.io.FileInputStream;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,22,import java.io.FileNotFoundException;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,23,import java.io.FileOutputStream;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,24,import java.io.IOException;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,25,import java.io.InputStream;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,26,import java.util.Iterator;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,27,import java.util.zip.ZipInputStream;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,29,import org.apache.commons.compress.AbstractArchive;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,30,import org.apache.commons.compress.ArchiveEntry;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,31,import org.apache.commons.compress.ArchiveException;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,32,import org.apache.commons.compress.UnpackException;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,35,* Archive-Implementation for Zip.
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,37,public class ZipArchive extends AbstractArchive {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,39,/* Buffer for the file operations */
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,40,private static final int BUFFER = 2048;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,43,* HEADER Field for this archiver.
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,45,"private static final byte[] HEADER = { 0x50, 0x4b, 0x03, 0x04 };"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,48,* DEFAULT_FILE_EXTENSION Field for this archiver.
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,50,"private static String DEFAULT_FILE_EXTENSION = ""zip"";"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,53,* ARCHIVER_NAME Field for this archiver.
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,55,"private static final String ARCHIVER_NAME = ""zip"";"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,58,* This Archive should be instantiated in the Archive-Interface.
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,60,public ZipArchive() {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,61,// Empty
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,64,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,65,* @see org.apache.commons.compress.Archive#unpack()
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,67,protected void doUnpack(File unpackDir) throws UnpackException {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,68,BufferedOutputStream destination = null;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,69,FileInputStream fInputStream = null;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,71,try {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,72,fInputStream = new FileInputStream(this.getArchive());
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,73,} catch(FileNotFoundException e) {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,74,"throw new UnpackException(""SourceFile could not be found."", e);"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,76,ZipInputStream zInputStream = null;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,77,try {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,78,"// TODO: we have no ZipInputStream yet, so we need the sun implementation"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,79,zInputStream = new ZipInputStream(new BufferedInputStream(fInputStream));
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,80,java.util.zip.ZipEntry entry;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,82,while((entry = zInputStream.getNextEntry()) != null) {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,83,int count;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,84,byte data[] = new byte[BUFFER];
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,86,String fosString = unpackDir.getAbsolutePath() + File.separator + entry.getName();
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,87,FileOutputStream fos = new FileOutputStream(fosString);
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,88,"destination = new BufferedOutputStream(fos, BUFFER);"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,90,"while((count = zInputStream.read(data, 0, BUFFER))!= -1) {"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,91,"destination.write(data, 0, count);"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,93,destination.flush();
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,94,destination.close();
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,96,} catch(IOException e) {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,97,"throw new UnpackException(""Exception while unpacking."", e);"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,98,} finally {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,99,try {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,100,zInputStream.close();
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,101,} catch (IOException e1) {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,102,"throw new UnpackException(""Exception while unpacking."", e1);"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,107,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,108,* @see org.apache.commons.compress.Archive#pack()
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,110,protected void doSave(FileOutputStream output) throws ArchiveException {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,111,// Stream initializing
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,112,BufferedInputStream origin = null;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,114,//out.setMethod(ZipOutputStream.DEFLATED);
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,115,byte data[] = new byte[BUFFER];
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,117,// get a list of filesStreams from current directory
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,118,// less than one file leads to an exception
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,119,Iterator iterator = this.getEntryIterator();
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,120,if(!iterator.hasNext()) {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,121,"throw new ArchiveException(""There must be at least one file to be pack."");"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,124,// Pack-Operation
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,125,ZipOutputStream out = null;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,126,try {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,127,out = new ZipOutputStream(new BufferedOutputStream(output));
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,128,while(iterator.hasNext()) {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,129,ArchiveEntry archiveEntry = (ArchiveEntry)iterator.next();
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,130,InputStream fInputStream = archiveEntry.getStream();
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,132,"origin = new BufferedInputStream(fInputStream, BUFFER);"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,133,ZipEntry entry = new ZipEntry(archiveEntry.getName());
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,134,out.putNextEntry(entry);
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,136,int count;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,137,"while((count = origin.read(data, 0,	BUFFER)) != -1) {"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,138,"out.write(data, 0, count);"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,140,origin.close();
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,142,} catch (IOException e) {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,143,"throw new ArchiveException(""Creation of this archive failed cause of IOExceptions."", e);"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,144,} finally {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,145,try {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,146,out.close();
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,147,} catch (IOException e1) {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,148,"throw new ArchiveException(""Creation of this archive failed cause of IOExceptions."", e1);"
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,153,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,154,* @see org.apache.commons.compress.Archive#getArchiverName()
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,156,public String getName() {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,157,return ARCHIVER_NAME;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,160,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,161,* @see org.apache.commons.compress.Archive#getDefaultFileExtension()
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,163,public String getDefaultFileExtension() {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,164,return DEFAULT_FILE_EXTENSION;
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,167,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,168,* @see org.apache.commons.compress.Archive#getHeader()
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,170,public byte[] getHeader() {
True,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,src/java/org/apache/commons/compress/archivers/zip/ZipArchive.java,171,return HEADER;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,16,package org.apache.commons.compress.archivers.zip;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,18,import java.lang.reflect.InvocationTargetException;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,19,import java.lang.reflect.Method;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,20,import java.util.ArrayList;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,21,import java.util.zip.ZipException;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,24,* Extension that adds better handling of extra fields and provides access to
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,25,* the internal and external file attributes.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,27,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,28,* @version $Revision: 155439 $
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,30,public class ZipEntry
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,31,extends java.util.zip.ZipEntry
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,34,* Helper for JDK 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,36,* @since 1.2
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,38,private static Method c_setCompressedSizeMethod;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,41,* Helper for JDK 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,43,* @since 1.2
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,45,private static final Object c_lockReflection = new Object();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,48,* Helper for JDK 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,50,* @since 1.2
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,52,private static boolean c_triedToGetMethod;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,54,private final ArrayList m_extraFields = new ArrayList();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,56,private int m_internalAttributes;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,57,private long m_externalAttributes;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,60,* Helper for JDK 1.1 <-> 1.2 incompatibility.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,62,* @since 1.2
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,64,private Long m_compressedSize;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,67,* Creates a new zip entry with the specified name.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,69,* @param name the name of entry
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,70,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,72,public ZipEntry( final String name )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,74,super( name );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,78,* Creates a new zip entry with fields taken from the specified zip entry.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,80,* @param entry the JDK ZipEntry to adapt
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,81,* @exception ZipException if can not create entry
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,82,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,84,public ZipEntry( java.util.zip.ZipEntry entry )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,85,throws ZipException
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,88,"* REVISIT: call super(entry) instead of this stuff in Ant2,"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,89,"* ""copy constructor"" has not been available in JDK 1.1"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,91,super( entry.getName() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,93,setComment( entry.getComment() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,94,setMethod( entry.getMethod() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,95,setTime( entry.getTime() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,97,final long size = entry.getSize();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,98,if( size > 0 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,100,setSize( size );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,103,final long cSize = entry.getCompressedSize();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,104,if( cSize > 0 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,106,setComprSize( cSize );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,109,final long crc = entry.getCrc();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,110,if( crc > 0 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,112,setCrc( crc );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,115,final byte[] extra = entry.getExtra();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,116,if( extra != null )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,118,setExtraFields( ExtraFieldUtils.parse( extra ) );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,120,else
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,122,// initializes extra data to an empty byte array
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,123,setExtra();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,128,* Creates a new zip entry with fields taken from the specified zip entry.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,130,* @param entry the entry to adapt
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,131,* @exception ZipException if can not create entry
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,132,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,134,public ZipEntry( final ZipEntry entry )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,135,throws ZipException
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,137,this( (java.util.zip.ZipEntry)entry );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,138,setInternalAttributes( entry.getInternalAttributes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,139,setExternalAttributes( entry.getExternalAttributes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,140,setExtraFields( entry.getExtraFields() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,144,* Try to get a handle to the setCompressedSize method.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,146,* @since 1.2
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,148,private static void checkSCS()
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,150,if( !c_triedToGetMethod )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,152,synchronized( c_lockReflection )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,154,c_triedToGetMethod = true;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,155,try
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,157,c_setCompressedSizeMethod =
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,158,"java.util.zip.ZipEntry.class.getMethod( ""setCompressedSize"","
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,159,new Class[]{Long.TYPE} );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,161,catch( NoSuchMethodException nse )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,169,* Are we running JDK 1.2 or higher?
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,171,* @return Description of the Returned Value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,172,* @since 1.2
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,174,private static boolean haveSetCompressedSize()
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,176,checkSCS();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,177,return c_setCompressedSizeMethod != null;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,181,* Invoke setCompressedSize via reflection.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,183,* @param entry Description of Parameter
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,184,* @param size Description of Parameter
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,185,* @since 1.2
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,187,"private static void performSetCompressedSize( final ZipEntry entry,"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,188,final long size )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,190,final Long[] s = {new Long( size )};
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,191,try
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,193,"c_setCompressedSizeMethod.invoke( entry, s );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,195,catch( final InvocationTargetException ite )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,197,final Throwable nested = ite.getTargetException();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,198,"final String message = ""Exception setting the compressed size "" +"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,199,"""of "" + entry + "": "" + nested.getMessage();"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,200,throw new RuntimeException( message );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,202,catch( final Throwable t )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,204,"final String message = ""Exception setting the compressed size "" +"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,205,"""of "" + entry + "": "" + t.getMessage();"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,206,throw new RuntimeException( message );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,211,* Make this class work in JDK 1.1 like a 1.2 class. <p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,213,* This either stores the size for later usage or invokes setCompressedSize
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,214,* via reflection.</p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,216,* @param size The new ComprSize value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,217,* @since 1.2
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,219,public void setComprSize( final long size )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,221,if( haveSetCompressedSize() )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,223,"performSetCompressedSize( this, size );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,225,else
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,227,m_compressedSize = new Long( size );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,232,* Sets the external file attributes.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,234,* @param externalAttributes The new ExternalAttributes value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,235,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,237,public void setExternalAttributes( final long externalAttributes )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,239,m_externalAttributes = externalAttributes;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,243,* Throws an Exception if extra data cannot be parsed into extra fields.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,245,* @param extra The new Extra value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,246,* @throws RuntimeException if fail to set extra data
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,247,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,249,public void setExtra( final byte[] extra )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,250,throws RuntimeException
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,252,try
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,254,setExtraFields( ExtraFieldUtils.parse( extra ) );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,256,catch( final Exception e )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,258,throw new RuntimeException( e.getMessage() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,263,* Replaces all currently attached extra fields with the new array.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,265,* @param fields The new ExtraFields value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,266,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,268,public void setExtraFields( final ZipExtraField[] fields )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,270,m_extraFields.clear();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,271,for( int i = 0; i < fields.length; i++ )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,273,m_extraFields.add( fields[ i ] );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,275,setExtra();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,279,* Sets the internal file attributes.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,281,* @param value The new InternalAttributes value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,282,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,284,public void setInternalAttributes( final int value )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,286,m_internalAttributes = value;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,290,* Retrieves the extra data for the central directory.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,292,* @return The CentralDirectoryExtra value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,293,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,295,public byte[] getCentralDirectoryExtra()
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,297,return ExtraFieldUtils.mergeCentralDirectoryData( getExtraFields() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,301,* Override to make this class work in JDK 1.1 like a 1.2 class.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,303,* @return The CompressedSize value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,304,* @since 1.2
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,306,public long getCompressedSize()
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,308,if( m_compressedSize != null )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,310,// has been set explicitly and we are running in a 1.1 VM
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,311,return m_compressedSize.longValue();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,313,return super.getCompressedSize();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,317,* Retrieves the external file attributes.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,319,* @return The ExternalAttributes value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,320,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,322,public long getExternalAttributes()
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,324,return m_externalAttributes;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,328,* Retrieves extra fields.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,330,* @return The ExtraFields value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,331,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,333,public ZipExtraField[] getExtraFields()
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,335,final ZipExtraField[] result = new ZipExtraField[ m_extraFields.size() ];
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,336,return (ZipExtraField[])m_extraFields.toArray( result );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,340,* Retrieves the internal file attributes.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,342,* @return The InternalAttributes value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,343,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,345,public int getInternalAttributes()
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,347,return m_internalAttributes;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,351,* Retrieves the extra data for the local file data.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,353,* @return The LocalFileDataExtra value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,354,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,356,public byte[] getLocalFileDataExtra()
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,358,byte[] extra = getExtra();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,359,return extra != null ? extra : new byte[ 0 ];
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,363,* Adds an extra fields - replacing an already present extra field of the
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,364,* same type.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,366,* @param extraField The feature to be added to the ExtraField attribute
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,367,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,369,public void addExtraField( final ZipExtraField extraField )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,371,final ZipShort type = extraField.getHeaderID();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,372,boolean done = false;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,373,for( int i = 0; !done && i < m_extraFields.size(); i++ )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,375,final ZipExtraField other = (ZipExtraField)m_extraFields.get( i );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,376,if( other.getHeaderID().equals( type ) )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,378,"m_extraFields.set( i, extraField );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,379,done = true;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,382,if( !done )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,384,m_extraFields.add( extraField );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,386,setExtra();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,390,* Overwrite clone
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,392,* @return Description of the Returned Value
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,393,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,395,public Object clone()
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,397,ZipEntry entry = null;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,398,try
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,400,entry = new ZipEntry( (java.util.zip.ZipEntry)super.clone() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,402,catch( final Exception e )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,404,// impossible as extra data is in correct format
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,405,e.printStackTrace();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,406,return null;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,409,entry.setInternalAttributes( getInternalAttributes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,410,entry.setExternalAttributes( getExternalAttributes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,411,entry.setExtraFields( getExtraFields() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,412,return entry;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,416,* Remove an extra fields.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,418,* @param type Description of Parameter
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,419,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,421,public void removeExtraField( final ZipShort type )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,423,boolean done = false;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,424,for( int i = 0; !done && i < m_extraFields.size(); i++ )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,426,if( ( (ZipExtraField)m_extraFields.get( i ) ).getHeaderID().equals( type ) )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,428,m_extraFields.remove( i );
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,429,done = true;
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,432,if( !done )
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,434,throw new java.util.NoSuchElementException();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,436,setExtra();
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,440,* Unfortunately {@link java.util.zip.ZipOutputStream
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,441,"* java.util.zip.ZipOutputStream} seems to access the extra data directly,"
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,442,* so overriding getExtra doesn't help - we need to modify super's data
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,443,* directly.
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,445,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,447,protected void setExtra()
True,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,src/java/org/apache/commons/compress/archivers/zip/ZipEntry.java,449,super.setExtra( ExtraFieldUtils.mergeLocalFileDataData( getExtraFields() ) );
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,16,package org.apache.commons.compress.archivers.zip;
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,18,import java.util.zip.ZipException;
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,21,* General format of extra field data. <p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,23,"* Extra fields usually appear twice per file, once in the local file data and"
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,24,"* once in the central directory. Usually they are the same, but they don't have"
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,25,* to be. {@link java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream}
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,26,* will only use the local file data in both places.</p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,28,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,29,* @version $Revision: 155439 $
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,31,public interface ZipExtraField
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,34,* The Header-ID.
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,36,* @return The HeaderId value
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,37,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,39,ZipShort getHeaderID();
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,42,* Length of the extra field in the local file data - without Header-ID or
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,43,* length specifier.
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,45,* @return The LocalFileDataLength value
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,46,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,48,ZipShort getLocalFileDataLength();
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,51,* Length of the extra field in the central directory - without Header-ID or
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,52,* length specifier.
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,54,* @return The CentralDirectoryLength value
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,55,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,57,ZipShort getCentralDirectoryLength();
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,60,* The actual data to put into local file data - without Header-ID or length
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,61,* specifier.
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,63,* @return The LocalFileDataData value
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,64,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,66,byte[] getLocalFileDataData();
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,69,* The actual data to put central directory - without Header-ID or length
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,70,* specifier.
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,72,* @return The CentralDirectoryData value
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,73,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,75,byte[] getCentralDirectoryData();
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,78,* Populate data from this array as if it was in local file data.
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,80,* @param buffer the buffer to read data from
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,81,* @param offset offset into buffer to read data
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,82,* @param length the length of data
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,83,* @exception ZipException on error
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,84,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,86,"void parseFromLocalFileData( byte[] buffer, int offset, int length )"
True,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,src/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java,87,throws ZipException;
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,16,package org.apache.commons.compress.archivers.zip;
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,19,* Utility class that represents a four byte integer with conversion rules for
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,20,* the big endian byte order of ZIP files.
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,22,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,23,* @version $Revision: 155439 $
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,25,public final class ZipLong implements Cloneable
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,27,private long m_value;
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,30,* Create instance from a number.
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,32,* @param value the value
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,33,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,35,public ZipLong( final long value )
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,37,m_value = value;
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,41,* Create instance from bytes.
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,43,* @param buffer the buffer to read data from
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,44,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,46,public ZipLong( final byte[] buffer )
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,48,"this( buffer, 0 );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,52,* Create instance from the four bytes starting at offset.
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,54,* @param buffer buffer to read data from
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,55,* @param offset offset into buffer
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,56,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,58,"public ZipLong( final byte[] buffer, final int offset )"
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,60,m_value = ( buffer[ offset + 3 ] << 24 ) & 0xFF000000l;
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,61,m_value += ( buffer[ offset + 2 ] << 16 ) & 0xFF0000;
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,62,m_value += ( buffer[ offset + 1 ] << 8 ) & 0xFF00;
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,63,m_value += ( buffer[ offset ] & 0xFF );
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,67,* Get value as two bytes in big endian byte order.
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,69,* @return The value as bytes
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,70,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,72,public byte[] getBytes()
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,74,byte[] result = new byte[ 4 ];
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,75,result[ 0 ] = (byte)( ( m_value & 0xFF ) );
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,76,result[ 1 ] = (byte)( ( m_value & 0xFF00 ) >> 8 );
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,77,result[ 2 ] = (byte)( ( m_value & 0xFF0000 ) >> 16 );
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,78,result[ 3 ] = (byte)( ( m_value & 0xFF000000l ) >> 24 );
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,79,return result;
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,83,* Get value as Java int.
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,85,* @return The value
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,86,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,88,public long getValue()
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,90,return m_value;
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,94,* Override to make two instances with same value equal.
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,96,* @param o the object to compare against
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,97,"* @return true if equyal, false otherwise"
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,98,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,100,public boolean equals( final Object o )
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,102,if( o == null || !( o instanceof ZipLong ) )
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,104,return false;
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,106,return m_value == ( (ZipLong)o ).getValue();
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,110,* Override to make two instances with same value equal.
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,112,* @return the hashcode
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,113,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,115,public int hashCode()
True,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,src/java/org/apache/commons/compress/archivers/zip/ZipLong.java,117,return (int)m_value;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,16,package org.apache.commons.compress.archivers.zip;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,18,import java.io.IOException;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,19,import java.io.OutputStream;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,20,import java.io.UnsupportedEncodingException;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,21,import java.util.ArrayList;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,22,import java.util.Date;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,23,import java.util.Calendar;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,24,import java.util.Hashtable;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,25,import java.util.zip.CRC32;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,26,import java.util.zip.Deflater;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,27,import java.util.zip.DeflaterOutputStream;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,28,import java.util.zip.ZipException;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,31,* Reimplementation of {@link java.util.zip.ZipOutputStream
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,32,* java.util.zip.ZipOutputStream} that does handle the extended functionality of
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,33,"* this package, especially internal/external file attributes and extra fields"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,34,* with different layouts for local file data and central directory entries. <p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,36,* This implementation will use a Data Descriptor to store size and CRC
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,37,"* information for DEFLATED entries, this means, you don't need to calculate"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,38,"* them yourself. Unfortunately this is not possible for the STORED method, here"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,39,* setting the CRC and uncompressed size information is required before {@link
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,40,* #putNextEntry putNextEntry} will be called.</p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,42,"* @author <a href=""stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,43,* @version $Revision: 155439 $
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,45,class ZipOutputStream
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,46,extends DeflaterOutputStream
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,49,"* Helper, a 0 as ZipShort."
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,51,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,53,"private static final byte[] ZERO = {0, 0};"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,56,"* Helper, a 0 as ZipLong."
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,58,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,60,"private static final byte[] LZERO = {0, 0, 0, 0};"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,63,* Compression method for deflated entries.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,65,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,67,public static final int DEFLATED = ZipEntry.DEFLATED;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,70,* Compression method for deflated entries.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,72,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,74,public static final int STORED = ZipEntry.STORED;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,77,* Various ZIP constants
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,80,* local file header signature
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,82,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,84,protected static final ZipLong LFH_SIG = new ZipLong( 0X04034B50L );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,86,* data descriptor signature
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,88,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,90,protected static final ZipLong DD_SIG = new ZipLong( 0X08074B50L );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,92,* central file header signature
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,94,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,96,protected static final ZipLong CFH_SIG = new ZipLong( 0X02014B50L );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,98,* end of central dir signature
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,100,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,102,protected static final ZipLong EOCD_SIG = new ZipLong( 0X06054B50L );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,105,* Smallest date/time ZIP can handle.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,107,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,109,private static final ZipLong DOS_TIME_MIN = new ZipLong( 0x00002100L );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,112,* The file comment.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,114,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,116,"private String m_comment = """";"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,119,* Compression level for next entry.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,121,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,123,private int m_level = Deflater.DEFAULT_COMPRESSION;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,126,* Default compression method for next entry.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,128,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,130,private int m_method = DEFLATED;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,133,* List of ZipEntries written so far.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,135,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,137,private final ArrayList m_entries = new ArrayList();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,140,* CRC instance to avoid parsing DEFLATED data twice.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,142,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,144,private final CRC32 m_crc = new CRC32();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,147,* Count the bytes written to out.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,149,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,151,private long m_written;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,154,* Data for current entry started here.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,156,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,158,private long m_dataStart;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,161,* Start of central directory.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,163,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,165,private ZipLong m_cdOffset = new ZipLong( 0 );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,168,* Length of central directory.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,170,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,172,private ZipLong m_cdLength = new ZipLong( 0 );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,175,* Holds the offsets of the LFH starts for each entry
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,177,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,179,private final Hashtable m_offsets = new Hashtable();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,182,* The encoding to use for filenames and the file comment. <p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,184,* For a list of possible values see <a
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,185,"* href=""http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html"">"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,186,* http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,187,* </a>. Defaults to the platform's default character encoding.</p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,189,* @since 1.3
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,191,private String m_encoding;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,194,* Current entry.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,196,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,198,private ZipEntry m_entry;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,201,* Creates a new ZIP OutputStream filtering the underlying stream.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,203,* @param output the output stream to write to
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,204,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,206,public ZipOutputStream( final OutputStream output )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,208,"super( output, new Deflater( Deflater.DEFAULT_COMPRESSION, true ) );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,212,* Convert a Date object to a DOS date/time field. <p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,214,* Stolen from InfoZip's <code>fileio.c</code></p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,216,* @param time Description of Parameter
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,217,* @return Description of the Returned Value
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,218,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,220,protected static ZipLong toDosTime( Date time )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,222,Calendar cal = Calendar.getInstance();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,223,cal.setTime( time );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,224,int year = cal.get(Calendar.YEAR);
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,225,int month = cal.get(Calendar.MONTH) + 1;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,226,if( year < 1980 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,228,return DOS_TIME_MIN;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,230,long value = ( ( year - 1980 ) << 25 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,231,| ( month << 21 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,232,| ( cal.get(Calendar.DAY_OF_MONTH) << 16 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,233,| ( cal.get(Calendar.HOUR_OF_DAY) << 11 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,234,| ( cal.get(Calendar.MINUTE) << 5 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,235,| ( cal.get(Calendar.SECOND) >> 1 );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,237,byte[] result = new byte[ 4 ];
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,238,result[ 0 ] = (byte)( ( value & 0xFF ) );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,239,result[ 1 ] = (byte)( ( value & 0xFF00 ) >> 8 );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,240,result[ 2 ] = (byte)( ( value & 0xFF0000 ) >> 16 );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,241,result[ 3 ] = (byte)( ( value & 0xFF000000l ) >> 24 );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,242,return new ZipLong( result );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,246,* Set the file comment.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,248,* @param comment The new Comment value
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,249,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,251,public void setComment( String comment )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,253,m_comment = comment;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,257,* The encoding to use for filenames and the file comment. <p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,259,* For a list of possible values see <a
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,260,"* href=""http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html"">"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,261,* http://java.sun.com/products/jdk/1.2/docs/guide/internat/encoding.doc.html
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,262,* </a>. Defaults to the platform's default character encoding.</p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,264,* @param encoding The new Encoding value
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,265,* @since 1.3
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,267,public void setEncoding( String encoding )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,269,m_encoding = encoding;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,273,* Sets the compression level for subsequent entries. <p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,275,* Default is Deflater.DEFAULT_COMPRESSION.</p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,277,* @param level The new Level value
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,278,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,280,public void setLevel( int level )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,282,m_level = level;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,286,* Sets the default compression method for subsequent entries. <p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,288,* Default is DEFLATED.</p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,290,* @param method The new Method value
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,291,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,293,public void setMethod( final int method )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,295,m_method = method;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,299,* The encoding to use for filenames and the file comment.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,301,* @return null if using the platform's default character encoding.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,302,* @since 1.3
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,304,public String getEncoding()
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,306,return m_encoding;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,310,* Writes all necessary data for this entry.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,312,* @throws IOException if an IO failure causes operation to fail
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,313,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,315,public void closeEntry()
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,316,throws IOException
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,318,if( m_entry == null )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,320,return;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,323,long realCrc = m_crc.getValue();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,324,m_crc.reset();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,326,if( m_entry.getMethod() == DEFLATED )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,328,def.finish();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,329,while( !def.finished() )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,331,deflate();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,334,m_entry.setSize( def.getTotalIn() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,335,m_entry.setComprSize( def.getTotalOut() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,336,m_entry.setCrc( realCrc );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,338,def.reset();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,340,m_written += m_entry.getCompressedSize();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,342,else
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,344,if( m_entry.getCrc() != realCrc )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,346,"throw new ZipException( ""bad CRC checksum for entry """
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,347,"+ m_entry.getName() + "": """
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,348,+ Long.toHexString( m_entry.getCrc() )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,349,"+ "" instead of """
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,350,+ Long.toHexString( realCrc ) );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,353,if( m_entry.getSize() != m_written - m_dataStart )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,355,"throw new ZipException( ""bad size for entry """
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,356,"+ m_entry.getName() + "": """
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,357,+ m_entry.getSize()
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,358,"+ "" instead of """
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,359,+ ( m_written - m_dataStart ) );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,364,writeDataDescriptor( m_entry );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,365,m_entry = null;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,369,"* Found out by experiment, that DeflaterOutputStream.close()"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,370,* will call finish() - so we don't need to override close
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,371,* ourselves.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,374,* Finishs writing the contents and closes this as well as the underlying
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,375,* stream.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,377,* @throws IOException if an IO failure causes operation to fail
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,378,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,380,public void finish()
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,381,throws IOException
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,383,closeEntry();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,384,m_cdOffset = new ZipLong( m_written );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,385,final int size = m_entries.size();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,386,for( int i = 0; i < size; i++ )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,388,final ZipEntry entry = (ZipEntry)m_entries.get( i );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,389,writeCentralFileHeader( entry );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,391,m_cdLength = new ZipLong( m_written - m_cdOffset.getValue() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,392,writeCentralDirectoryEnd();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,393,m_offsets.clear();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,394,m_entries.clear();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,398,* Begin writing next entry.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,400,* @param entry the entry
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,401,* @throws IOException if an IO failure causes operation to fail
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,402,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,404,public void putNextEntry( final ZipEntry entry )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,405,throws IOException
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,407,closeEntry();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,409,m_entry = entry;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,410,m_entries.add( m_entry );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,412,if( m_entry.getMethod() == -1 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,413,{// not specified
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,414,m_entry.setMethod( m_method );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,417,if( m_entry.getTime() == -1 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,418,{// not specified
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,419,m_entry.setTime( System.currentTimeMillis() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,422,if( m_entry.getMethod() == STORED )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,424,if( m_entry.getSize() == -1 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,426,"throw new ZipException( ""uncompressed size is required for STORED method"" );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,428,if( m_entry.getCrc() == -1 )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,430,"throw new ZipException( ""crc checksum is required for STORED method"" );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,432,m_entry.setComprSize( m_entry.getSize() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,434,else
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,436,def.setLevel( m_level );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,438,writeLocalFileHeader( m_entry );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,442,* Writes bytes to ZIP entry. <p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,444,"* Override is necessary to support STORED entries, as well as calculationg"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,445,* CRC automatically for DEFLATED entries.</p>
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,447,* @param buffer the buffer to write to
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,448,* @param offset the offset to write to
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,449,* @param length the length of data to write
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,450,* @exception IOException if an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,452,"public void write( final byte[] buffer,"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,453,"final int offset,"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,454,final int length )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,455,throws IOException
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,457,if( m_entry.getMethod() == DEFLATED )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,459,"super.write( buffer, offset, length );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,461,else
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,463,"out.write( buffer, offset, length );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,464,m_written += length;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,466,"m_crc.update( buffer, offset, length );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,470,* Retrieve the bytes for the given String in the encoding set for this
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,471,* Stream.
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,473,* @param name the name to decode
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,474,* @return the bytes for string
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,475,* @exception ZipException if fail to retrieve bytes for specified string
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,476,* @since 1.3
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,478,protected byte[] getBytes( String name )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,479,throws ZipException
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,481,if( m_encoding == null )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,483,return name.getBytes();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,485,else
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,487,try
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,489,return name.getBytes( m_encoding );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,491,catch( UnsupportedEncodingException uee )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,493,throw new ZipException( uee.getMessage() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,499,* Writes the &quot;End of central dir record&quot;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,501,* @exception IOException when an IO erro causes operation to fail
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,502,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,504,protected void writeCentralDirectoryEnd()
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,505,throws IOException
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,507,out.write( EOCD_SIG.getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,509,// disk numbers
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,510,out.write( ZERO );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,511,out.write( ZERO );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,513,// number of entries
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,514,byte[] num = ( new ZipShort( m_entries.size() ) ).getBytes();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,515,out.write( num );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,516,out.write( num );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,518,// length and location of CD
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,519,out.write( m_cdLength.getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,520,out.write( m_cdOffset.getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,522,// ZIP file comment
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,523,byte[] data = getBytes( m_comment );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,524,out.write( ( new ZipShort( data.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,525,out.write( data );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,529,* Writes the central file header entry
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,531,* @param entry the zip entry
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,532,* @throws IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,533,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,535,protected void writeCentralFileHeader( final ZipEntry entry )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,536,throws IOException
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,538,out.write( CFH_SIG.getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,539,m_written += 4;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,541,// version made by
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,542,out.write( ( new ZipShort( 20 ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,543,m_written += 2;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,545,// version needed to extract
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,546,// general purpose bit flag
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,547,if( entry.getMethod() == DEFLATED )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,549,// requires version 2 as we are going to store length info
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,550,// in the data descriptor
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,551,out.write( ( new ZipShort( 20 ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,553,"// bit3 set to signal, we use a data descriptor"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,554,out.write( ( new ZipShort( 8 ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,556,else
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,558,out.write( ( new ZipShort( 10 ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,559,out.write( ZERO );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,561,m_written += 4;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,563,// compression method
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,564,out.write( ( new ZipShort( entry.getMethod() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,565,m_written += 2;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,567,// last mod. time and date
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,568,out.write( toDosTime( new Date( entry.getTime() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,569,m_written += 4;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,571,// CRC
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,572,// compressed length
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,573,// uncompressed length
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,574,out.write( ( new ZipLong( entry.getCrc() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,575,out.write( ( new ZipLong( entry.getCompressedSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,576,out.write( ( new ZipLong( entry.getSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,577,m_written += 12;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,579,// file name length
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,580,byte[] name = getBytes( entry.getName() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,581,out.write( ( new ZipShort( name.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,582,m_written += 2;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,584,// extra field length
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,585,byte[] extra = entry.getCentralDirectoryExtra();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,586,out.write( ( new ZipShort( extra.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,587,m_written += 2;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,589,// file comment length
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,590,String comm = entry.getComment();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,591,if( comm == null )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,593,"comm = """";"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,595,byte[] comment = getBytes( comm );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,596,out.write( ( new ZipShort( comment.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,597,m_written += 2;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,599,// disk number start
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,600,out.write( ZERO );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,601,m_written += 2;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,603,// internal file attributes
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,604,out.write( ( new ZipShort( entry.getInternalAttributes() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,605,m_written += 2;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,607,// external file attributes
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,608,out.write( ( new ZipLong( entry.getExternalAttributes() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,609,m_written += 4;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,611,// relative offset of LFH
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,612,out.write( ( (ZipLong)m_offsets.get( entry ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,613,m_written += 4;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,615,// file name
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,616,out.write( name );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,617,m_written += name.length;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,619,// extra field
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,620,out.write( extra );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,621,m_written += extra.length;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,623,// file comment
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,624,out.write( comment );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,625,m_written += comment.length;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,629,* Writes the data descriptor entry
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,631,* @param ze Description of Parameter
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,632,* @throws IOException if an IO failure causes operation to fail
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,633,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,635,protected void writeDataDescriptor( ZipEntry ze )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,636,throws IOException
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,638,if( ze.getMethod() != DEFLATED )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,640,return;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,642,out.write( DD_SIG.getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,643,out.write( ( new ZipLong( m_entry.getCrc() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,644,out.write( ( new ZipLong( m_entry.getCompressedSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,645,out.write( ( new ZipLong( m_entry.getSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,646,m_written += 16;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,650,* Writes the local file header entry
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,652,* @param entry the zip entry
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,653,* @exception IOException when an IO error causes operation to fail
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,654,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,656,protected void writeLocalFileHeader( final ZipEntry entry )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,657,throws IOException
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,659,"m_offsets.put( entry, new ZipLong( m_written ) );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,661,out.write( LFH_SIG.getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,662,m_written += 4;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,664,// version needed to extract
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,665,// general purpose bit flag
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,666,if( entry.getMethod() == DEFLATED )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,668,// requires version 2 as we are going to store length info
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,669,// in the data descriptor
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,670,out.write( ( new ZipShort( 20 ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,672,"// bit3 set to signal, we use a data descriptor"
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,673,out.write( ( new ZipShort( 8 ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,675,else
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,677,out.write( ( new ZipShort( 10 ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,678,out.write( ZERO );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,680,m_written += 4;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,682,// compression method
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,683,out.write( ( new ZipShort( entry.getMethod() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,684,m_written += 2;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,686,// last mod. time and date
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,687,out.write( toDosTime( new Date( entry.getTime() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,688,m_written += 4;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,690,// CRC
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,691,// compressed length
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,692,// uncompressed length
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,693,if( entry.getMethod() == DEFLATED )
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,695,out.write( LZERO );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,696,out.write( LZERO );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,697,out.write( LZERO );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,699,else
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,701,out.write( ( new ZipLong( entry.getCrc() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,702,out.write( ( new ZipLong( entry.getSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,703,out.write( ( new ZipLong( entry.getSize() ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,705,m_written += 12;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,707,// file name length
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,708,byte[] name = getBytes( entry.getName() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,709,out.write( ( new ZipShort( name.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,710,m_written += 2;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,712,// extra field length
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,713,byte[] extra = entry.getLocalFileDataExtra();
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,714,out.write( ( new ZipShort( extra.length ) ).getBytes() );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,715,m_written += 2;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,717,// file name
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,718,out.write( name );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,719,m_written += name.length;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,721,// extra field
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,722,out.write( extra );
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,723,m_written += extra.length;
True,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,src/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java,725,m_dataStart = m_written;
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,16,package org.apache.commons.compress.archivers.zip;
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,19,* Utility class that represents a two byte integer with conversion rules for
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,20,* the big endian byte order of ZIP files.
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,22,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,23,* @version $Revision: 155439 $
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,25,public final class ZipShort implements Cloneable
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,27,private int m_value;
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,30,* Create instance from a number.
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,32,* @param value Description of Parameter
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,33,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,35,public ZipShort( int value )
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,37,this.m_value = value;
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,41,* Create instance from bytes.
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,43,* @param bytes Description of Parameter
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,44,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,46,public ZipShort( byte[] bytes )
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,48,"this( bytes, 0 );"
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,52,* Create instance from the two bytes starting at offset.
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,54,* @param bytes Description of Parameter
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,55,* @param offset Description of Parameter
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,56,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,58,"public ZipShort( byte[] bytes, int offset )"
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,60,m_value = ( bytes[ offset + 1 ] << 8 ) & 0xFF00;
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,61,m_value += ( bytes[ offset ] & 0xFF );
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,65,* Get value as two bytes in big endian byte order.
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,67,* @return The Bytes value
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,68,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,70,public byte[] getBytes()
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,72,byte[] result = new byte[ 2 ];
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,73,result[ 0 ] = (byte)( m_value & 0xFF );
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,74,result[ 1 ] = (byte)( ( m_value & 0xFF00 ) >> 8 );
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,75,return result;
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,79,* Get value as Java int.
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,81,* @return The Value value
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,82,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,84,public int getValue()
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,86,return m_value;
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,90,* Override to make two instances with same value equal.
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,92,* @param o Description of Parameter
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,93,* @return Description of the Returned Value
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,94,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,96,public boolean equals( Object o )
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,98,if( o == null || !( o instanceof ZipShort ) )
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,100,return false;
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,102,return m_value == ( (ZipShort)o ).getValue();
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,106,* Override to make two instances with same value equal.
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,108,* @return Description of the Returned Value
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,109,* @since 1.1
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,111,public int hashCode()
True,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,src/java/org/apache/commons/compress/archivers/zip/ZipShort.java,113,return m_value;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,16,package org.apache.commons.compress.compressors.bzip2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,18,import java.io.FileInputStream;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,19,import java.io.FileNotFoundException;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,20,import java.io.FileOutputStream;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,21,import java.io.IOException;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,22,import java.io.InputStream;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,23,import java.io.OutputStream;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,25,import org.apache.commons.compress.AbstractCompressor;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,26,import org.apache.commons.compress.CompressException;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,27,import org.apache.commons.compress.CompressUtils;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,29,* Implementation of the Compressor Interface for BZip2.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,31,* @author christian.grobmeier
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,33,public class BZip2Compressor extends AbstractCompressor {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,34,/* Header BZ as byte-Array */
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,35,"private static final byte[] HEADER = new byte[]{(byte)'B', (byte)'Z'};"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,36,/* Name of this implementation */
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,37,"private static final String NAME = ""bz2"";"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,38,/* Default file extension*/
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,39,"private static String DEFAULT_FILE_EXTENSION = ""bz2"";"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,42,* Constructor.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,44,public BZip2Compressor() {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,45,super();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,48,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,49,"* @see org.apache.commons.compress.Compressor#compress(java.io.FileInputStream, java.io.FileOutputStream)"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,51,"public void compressTo(FileInputStream inputStream, FileOutputStream outputStream) throws CompressException {"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,52,BZip2OutputStream outputBZStream = null;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,53,try {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,54,outputBZStream = getPackedOutput( outputStream );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,55,"CompressUtils.copy( inputStream, outputBZStream );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,56,} catch (FileNotFoundException e) {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,57,"throw new CompressException(""File could not be found"", e);"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,58,} catch (IOException e) {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,59,"throw new CompressException(""An IO Exception occured"", e);"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,60,} finally {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,61,try {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,62,outputBZStream.close();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,63,} catch (IOException e1) {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,64,"throw new CompressException(""An IO Exception occured while closing the streams"", e1);"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,70,* This decompress method uses a special InputStream Class for BZ2
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,71,"* @see org.apache.commons.compress.Compressor#decompress(java.io.FileInputStream, java.io.FileOutputStream)"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,73,"public void decompressTo(FileInputStream input, FileOutputStream outputStream)"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,74,throws CompressException {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,75,BZip2InputStream inputStream = null;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,76,try {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,77,inputStream = getPackedInput( input );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,78,"CompressUtils.copy( inputStream, outputStream );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,79,} catch (IOException e) {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,80,"throw new CompressException(""An I/O Exception has occured"", e);"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,85,* Skips the 'BZ' header bytes. required by the BZip2InputStream class.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,86,* @param input input stream
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,87,* @return {@link BZip2InputStream} instance
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,88,* @throws IOException if an IO error occurs
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,90,private BZip2InputStream getPackedInput( final InputStream input )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,91,throws IOException {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,92,// skips the 'BZ' header bytes required by the BZip2InputStream class
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,93,final int b1 = input.read();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,94,final int b2 = input.read();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,95,return new BZip2InputStream( input );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,99,"* Writes a 'BZ' header to the output stream, and creates a"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,100,"* BZip2OutputStream object ready for use, as required by the"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,101,* BZip2OutputStream class.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,103,* @param output {@link Output} stream to add a header to
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,104,* @return {@link BZip2OutputStream} ready to write to
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,105,* @throws IOException if an IO error occurs
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,107,private BZip2OutputStream getPackedOutput( final OutputStream output )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,108,throws IOException {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,109,output.write( HEADER );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,110,return new BZip2OutputStream( output );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,113,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,114,* @see org.apache.commons.compress.Compressor#getHeader()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,116,public byte[] getHeader() {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,117,return HEADER;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,120,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,121,* @see org.apache.commons.compress.Compressor#getName()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,123,public String getName() {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,124,return NAME;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,127,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,128,* @see org.apache.commons.compress.AbstractCompressor#getDefaultFileExtension()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,130,public String getDefaultFileExtension() {
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java,131,return DEFAULT_FILE_EXTENSION;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,17,package org.apache.commons.compress.compressors.bzip2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,20,"* This package is based on the work done by Keiron Liddle, Aftex Software"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,21,* <keiron@aftexsw.com> to whom the Ant project is very grateful for his
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,22,* great code.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,26,"* Base class for both the compress and decompress classes. Holds common arrays,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,27,* and static data.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,29,"* @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,31,interface BZip2Constants
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,33,int BASE_BLOCK_SIZE = 100000;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,34,int MAX_ALPHA_SIZE = 258;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,35,int MAX_CODE_LEN = 23;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,36,int RUNA = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,37,int RUNB = 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,38,int N_GROUPS = 6;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,39,int G_SIZE = 50;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,40,int N_ITERS = 4;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,41,int MAX_SELECTORS = ( 2 + ( 900000 / G_SIZE ) );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,42,int NUM_OVERSHOOT_BYTES = 20;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,44,int[] RAND_NUMS = new int[]
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,46,"619, 720, 127, 481, 931, 816, 813, 233, 566, 247,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,47,"985, 724, 205, 454, 863, 491, 741, 242, 949, 214,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,48,"733, 859, 335, 708, 621, 574, 73, 654, 730, 472,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,49,"419, 436, 278, 496, 867, 210, 399, 680, 480, 51,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,50,"878, 465, 811, 169, 869, 675, 611, 697, 867, 561,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,51,"862, 687, 507, 283, 482, 129, 807, 591, 733, 623,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,52,"150, 238, 59, 379, 684, 877, 625, 169, 643, 105,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,53,"170, 607, 520, 932, 727, 476, 693, 425, 174, 647,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,54,"73, 122, 335, 530, 442, 853, 695, 249, 445, 515,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,55,"909, 545, 703, 919, 874, 474, 882, 500, 594, 612,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,56,"641, 801, 220, 162, 819, 984, 589, 513, 495, 799,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,57,"161, 604, 958, 533, 221, 400, 386, 867, 600, 782,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,58,"382, 596, 414, 171, 516, 375, 682, 485, 911, 276,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,59,"98, 553, 163, 354, 666, 933, 424, 341, 533, 870,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,60,"227, 730, 475, 186, 263, 647, 537, 686, 600, 224,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,61,"469, 68, 770, 919, 190, 373, 294, 822, 808, 206,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,62,"184, 943, 795, 384, 383, 461, 404, 758, 839, 887,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,63,"715, 67, 618, 276, 204, 918, 873, 777, 604, 560,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,64,"951, 160, 578, 722, 79, 804, 96, 409, 713, 940,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,65,"652, 934, 970, 447, 318, 353, 859, 672, 112, 785,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,66,"645, 863, 803, 350, 139, 93, 354, 99, 820, 908,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,67,"609, 772, 154, 274, 580, 184, 79, 626, 630, 742,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,68,"653, 282, 762, 623, 680, 81, 927, 626, 789, 125,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,69,"411, 521, 938, 300, 821, 78, 343, 175, 128, 250,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,70,"170, 774, 972, 275, 999, 639, 495, 78, 352, 126,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,71,"857, 956, 358, 619, 580, 124, 737, 594, 701, 612,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,72,"669, 112, 134, 694, 363, 992, 809, 743, 168, 974,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,73,"944, 375, 748, 52, 600, 747, 642, 182, 862, 81,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,74,"344, 805, 988, 739, 511, 655, 814, 334, 249, 515,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,75,"897, 955, 664, 981, 649, 113, 974, 459, 893, 228,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,76,"433, 837, 553, 268, 926, 240, 102, 654, 459, 51,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,77,"686, 754, 806, 760, 493, 403, 415, 394, 687, 700,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,78,"946, 670, 656, 610, 738, 392, 760, 799, 887, 653,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,79,"978, 321, 576, 617, 626, 502, 894, 679, 243, 440,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,80,"680, 879, 194, 572, 640, 724, 926, 56, 204, 700,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,81,"707, 151, 457, 449, 797, 195, 791, 558, 945, 679,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,82,"297, 59, 87, 824, 713, 663, 412, 693, 342, 606,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,83,"134, 108, 571, 364, 631, 212, 174, 643, 304, 329,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,84,"343, 97, 430, 751, 497, 314, 983, 374, 822, 928,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,85,"140, 206, 73, 263, 980, 736, 876, 478, 430, 305,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,86,"170, 514, 364, 692, 829, 82, 855, 953, 676, 246,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,87,"369, 970, 294, 750, 807, 827, 150, 790, 288, 923,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,88,"804, 378, 215, 828, 592, 281, 565, 555, 710, 82,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,89,"896, 831, 547, 261, 524, 462, 293, 465, 502, 56,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,90,"661, 821, 976, 991, 658, 869, 905, 758, 745, 193,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,91,"768, 550, 608, 933, 378, 286, 215, 979, 792, 961,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,92,"61, 688, 793, 644, 986, 403, 106, 366, 905, 644,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,93,"372, 567, 466, 434, 645, 210, 389, 550, 919, 135,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,94,"780, 773, 635, 389, 707, 100, 626, 958, 165, 504,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,95,"920, 176, 193, 713, 857, 265, 203, 50, 668, 108,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,96,"645, 990, 626, 197, 510, 357, 358, 850, 858, 364,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java,97,"936, 638"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,16,package org.apache.commons.compress.compressors.bzip2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,18,import java.io.IOException;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,19,import java.io.InputStream;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,23,"* This package is based on the work done by Keiron Liddle, Aftex Software"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,24,* <keiron@aftexsw.com> to whom the Ant project is very grateful for his
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,25,* great code.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,29,* An input stream that decompresses from the BZip2 format (without the file
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,30,* header chars) to be read as any other stream.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,32,"* @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,34,public class BZip2InputStream
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,35,extends InputStream
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,36,implements BZip2Constants
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,38,private static final int START_BLOCK_STATE = 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,39,private static final int RAND_PART_A_STATE = 2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,40,private static final int RAND_PART_B_STATE = 3;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,41,private static final int RAND_PART_C_STATE = 4;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,42,private static final int NO_RAND_PART_A_STATE = 5;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,43,private static final int NO_RAND_PART_B_STATE = 6;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,44,private static final int NO_RAND_PART_C_STATE = 7;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,46,private CRC m_crc = new CRC();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,47,private boolean[] m_inUse = new boolean[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,48,private char[] m_seqToUnseq = new char[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,49,private char[] m_unseqToSeq = new char[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,50,private char[] m_selector = new char[ MAX_SELECTORS ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,51,private char[] m_selectorMtf = new char[ MAX_SELECTORS ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,54,* freq table collected to save a pass over the data
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,55,* during decompression.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,57,private int[] m_unzftab = new int[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,59,private int[][] m_limit = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,60,private int[][] m_base = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,61,private int[][] m_perm = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,62,private int[] m_minLens = new int[ N_GROUPS ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,64,private boolean m_streamEnd;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,65,private int m_currentChar = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,67,private int m_currentState = START_BLOCK_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,68,private int m_rNToGo;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,69,private int m_rTPos;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,70,private int m_tPos;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,72,private int i2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,73,private int count;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,74,private int chPrev;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,75,private int ch2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,76,private int j2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,77,private char z;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,79,private boolean m_blockRandomised;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,82,* always: in the range 0 .. 9.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,83,* The current block size is 100000 * this number.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,85,private int m_blockSize100k;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,86,private int m_bsBuff;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,87,private int m_bsLive;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,89,private InputStream m_input;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,91,private int m_computedBlockCRC;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,92,private int m_computedCombinedCRC;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,95,"* index of the last char in the block, so"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,96,* the block size == last + 1.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,98,private int m_last;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,99,private char[] m_ll8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,100,private int m_nInUse;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,103,* index in zptr[] of original string after sorting.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,105,private int m_origPtr;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,107,private int m_storedBlockCRC;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,108,private int m_storedCombinedCRC;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,109,private int[] m_tt;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,112,* Initializes ein CBZip2 InputStream with the give
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,113,* InputStream
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,114,* @param input the InputStream to initialize with
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,116,public BZip2InputStream( final InputStream input )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,118,bsSetStream( input );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,119,initialize();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,120,initBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,121,setupBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,124,private static void badBlockHeader()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,126,cadvise();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,129,private static void blockOverrun()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,131,cadvise();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,134,private static void cadvise()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,136,"System.out.println( ""CRC Error"" );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,137,//throw new CCoruptionError();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,140,private static void compressedStreamEOF()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,142,cadvise();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,145,private static void crcError()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,147,cadvise();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,150,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,151,* @see java.io.InputStream#read()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,153,public int read()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,155,if( m_streamEnd )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,157,return -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,159,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,161,int retChar = m_currentChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,162,switch( m_currentState )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,164,case START_BLOCK_STATE:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,165,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,166,case RAND_PART_A_STATE:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,167,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,168,case RAND_PART_B_STATE:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,169,setupRandPartB();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,170,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,171,case RAND_PART_C_STATE:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,172,setupRandPartC();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,173,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,174,case NO_RAND_PART_A_STATE:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,175,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,176,case NO_RAND_PART_B_STATE:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,177,setupNoRandPartB();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,178,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,179,case NO_RAND_PART_C_STATE:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,180,setupNoRandPartC();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,181,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,182,default:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,183,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,185,return retChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,189,private void setDecompressStructureSizes( int newSize100k )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,191,if( !( 0 <= newSize100k && newSize100k <= 9 && 0 <= m_blockSize100k
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,192,&& m_blockSize100k <= 9 ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,194,"// throw new IOException(""Invalid block size"");"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,197,m_blockSize100k = newSize100k;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,199,if( newSize100k == 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,201,return;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,204,int n = BASE_BLOCK_SIZE * newSize100k;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,205,m_ll8 = new char[ n ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,206,m_tt = new int[ n ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,209,private void setupBlock()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,211,int[] cftab = new int[ 257 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,212,char ch;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,214,cftab[ 0 ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,215,for( int i = 1; i <= 256; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,217,cftab[ i ] = m_unzftab[ i - 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,219,for( int i = 1; i <= 256; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,221,cftab[ i ] += cftab[ i - 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,224,for( int i = 0; i <= m_last; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,226,ch = m_ll8[ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,227,m_tt[ cftab[ ch ] ] = i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,228,cftab[ ch ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,230,cftab = null;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,232,m_tPos = m_tt[ m_origPtr ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,234,count = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,235,i2 = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,236,ch2 = 256;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,238,* not a char and not EOF
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,240,if( m_blockRandomised )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,242,m_rNToGo = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,243,m_rTPos = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,244,setupRandPartA();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,246,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,248,setupNoRandPartA();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,252,private void setupNoRandPartA()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,254,if( i2 <= m_last )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,256,chPrev = ch2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,257,ch2 = m_ll8[ m_tPos ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,258,m_tPos = m_tt[ m_tPos ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,259,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,261,m_currentChar = ch2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,262,m_currentState = NO_RAND_PART_B_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,263,m_crc.updateCRC( ch2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,265,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,267,endBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,268,initBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,269,setupBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,273,private void setupNoRandPartB()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,275,if( ch2 != chPrev )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,277,m_currentState = NO_RAND_PART_A_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,278,count = 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,279,setupNoRandPartA();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,281,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,283,count++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,284,if( count >= 4 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,286,z = m_ll8[ m_tPos ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,287,m_tPos = m_tt[ m_tPos ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,288,m_currentState = NO_RAND_PART_C_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,289,j2 = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,290,setupNoRandPartC();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,292,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,294,m_currentState = NO_RAND_PART_A_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,295,setupNoRandPartA();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,300,private void setupNoRandPartC()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,302,if( j2 < z )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,304,m_currentChar = ch2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,305,m_crc.updateCRC( ch2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,306,j2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,308,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,310,m_currentState = NO_RAND_PART_A_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,311,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,312,count = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,313,setupNoRandPartA();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,317,private void setupRandPartA()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,319,if( i2 <= m_last )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,321,chPrev = ch2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,322,ch2 = m_ll8[ m_tPos ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,323,m_tPos = m_tt[ m_tPos ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,324,if( m_rNToGo == 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,326,m_rNToGo = RAND_NUMS[ m_rTPos ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,327,m_rTPos++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,328,if( m_rTPos == 512 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,330,m_rTPos = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,333,m_rNToGo--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,334,ch2 ^= ( ( m_rNToGo == 1 ) ? 1 : 0 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,335,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,337,m_currentChar = ch2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,338,m_currentState = RAND_PART_B_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,339,m_crc.updateCRC( ch2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,341,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,343,endBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,344,initBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,345,setupBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,349,private void setupRandPartB()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,351,if( ch2 != chPrev )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,353,m_currentState = RAND_PART_A_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,354,count = 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,355,setupRandPartA();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,357,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,359,count++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,360,if( count >= 4 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,362,z = m_ll8[ m_tPos ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,363,m_tPos = m_tt[ m_tPos ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,364,if( m_rNToGo == 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,366,m_rNToGo = RAND_NUMS[ m_rTPos ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,367,m_rTPos++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,368,if( m_rTPos == 512 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,370,m_rTPos = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,373,m_rNToGo--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,374,z ^= ( ( m_rNToGo == 1 ) ? 1 : 0 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,375,j2 = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,376,m_currentState = RAND_PART_C_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,377,setupRandPartC();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,379,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,381,m_currentState = RAND_PART_A_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,382,setupRandPartA();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,387,private void setupRandPartC()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,389,if( j2 < z )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,391,m_currentChar = ch2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,392,m_crc.updateCRC( ch2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,393,j2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,395,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,397,m_currentState = RAND_PART_A_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,398,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,399,count = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,400,setupRandPartA();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,404,private void getAndMoveToFrontDecode()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,406,int nextSym;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,408,int limitLast = BASE_BLOCK_SIZE * m_blockSize100k;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,409,m_origPtr = readVariableSizedInt( 24 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,411,recvDecodingTables();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,412,int EOB = m_nInUse + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,413,int groupNo = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,414,int groupPos = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,417,* Setting up the unzftab entries here is not strictly
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,418,"* necessary, but it does save having to do it later"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,419,"* in a separate pass, and so saves a block's worth of"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,420,* cache misses.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,422,for( int i = 0; i <= 255; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,424,m_unzftab[ i ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,427,final char[] yy = new char[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,428,for( int i = 0; i <= 255; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,430,yy[ i ] = (char)i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,433,m_last = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,434,int zt;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,435,int zn;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,436,int zvec;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,437,int zj;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,438,groupNo++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,439,groupPos = G_SIZE - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,441,zt = m_selector[ groupNo ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,442,zn = m_minLens[ zt ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,443,zvec = bsR( zn );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,444,while( zvec > m_limit[ zt ][ zn ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,446,zn++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,448,while( m_bsLive < 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,450,int zzi;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,451,char thech = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,452,try
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,454,thech = (char)m_input.read();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,456,catch( IOException e )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,458,compressedStreamEOF();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,460,if( thech == -1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,462,compressedStreamEOF();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,464,zzi = thech;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,465,m_bsBuff = ( m_bsBuff << 8 ) | ( zzi & 0xff );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,466,m_bsLive += 8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,469,zj = ( m_bsBuff >> ( m_bsLive - 1 ) ) & 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,470,m_bsLive--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,472,zvec = ( zvec << 1 ) | zj;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,474,nextSym = m_perm[ zt ][ zvec - m_base[ zt ][ zn ] ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,476,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,478,if( nextSym == EOB )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,480,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,483,if( nextSym == RUNA || nextSym == RUNB )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,485,char ch;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,486,int s = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,487,int N = 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,488,do
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,490,if( nextSym == RUNA )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,492,s = s + ( 0 + 1 ) * N;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,494,else// if( nextSym == RUNB )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,496,s = s + ( 1 + 1 ) * N;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,498,N = N * 2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,500,if( groupPos == 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,502,groupNo++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,503,groupPos = G_SIZE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,505,groupPos--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,506,zt = m_selector[ groupNo ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,507,zn = m_minLens[ zt ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,508,zvec = bsR( zn );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,509,while( zvec > m_limit[ zt ][ zn ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,511,zn++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,513,while( m_bsLive < 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,515,int zzi;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,516,char thech = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,517,try
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,519,thech = (char)m_input.read();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,521,catch( IOException e )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,523,compressedStreamEOF();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,525,if( thech == -1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,527,compressedStreamEOF();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,529,zzi = thech;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,530,m_bsBuff = ( m_bsBuff << 8 ) | ( zzi & 0xff );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,531,m_bsLive += 8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,534,zj = ( m_bsBuff >> ( m_bsLive - 1 ) ) & 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,535,m_bsLive--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,536,zvec = ( zvec << 1 ) | zj;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,539,nextSym = m_perm[ zt ][ zvec - m_base[ zt ][ zn ] ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,541,} while( nextSym == RUNA || nextSym == RUNB );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,543,s++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,544,ch = m_seqToUnseq[ yy[ 0 ] ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,545,m_unzftab[ ch ] += s;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,547,while( s > 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,549,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,550,m_ll8[ m_last ] = ch;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,551,s--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,554,if( m_last >= limitLast )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,556,blockOverrun();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,558,continue;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,560,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,562,char tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,563,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,564,if( m_last >= limitLast )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,566,blockOverrun();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,569,tmp = yy[ nextSym - 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,570,m_unzftab[ m_seqToUnseq[ tmp ] ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,571,m_ll8[ m_last ] = m_seqToUnseq[ tmp ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,574,"* This loop is hammered during decompression,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,575,* hence the unrolling.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,576,* for (j = nextSym-1; j > 0; j--) yy[j] = yy[j-1];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,578,int j = nextSym - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,579,for( ; j > 3; j -= 4 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,581,yy[ j ] = yy[ j - 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,582,yy[ j - 1 ] = yy[ j - 2 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,583,yy[ j - 2 ] = yy[ j - 3 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,584,yy[ j - 3 ] = yy[ j - 4 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,586,for( ; j > 0; j-- )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,588,yy[ j ] = yy[ j - 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,591,yy[ 0 ] = tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,593,if( groupPos == 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,595,groupNo++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,596,groupPos = G_SIZE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,598,groupPos--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,599,zt = m_selector[ groupNo ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,600,zn = m_minLens[ zt ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,601,zvec = bsR( zn );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,602,while( zvec > m_limit[ zt ][ zn ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,604,zn++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,606,while( m_bsLive < 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,608,char ch = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,609,try
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,611,ch = (char)m_input.read();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,613,catch( IOException e )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,615,compressedStreamEOF();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,618,m_bsBuff = ( m_bsBuff << 8 ) | ( ch & 0xff );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,619,m_bsLive += 8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,622,zj = ( m_bsBuff >> ( m_bsLive - 1 ) ) & 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,623,m_bsLive--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,625,zvec = ( zvec << 1 ) | zj;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,627,nextSym = m_perm[ zt ][ zvec - m_base[ zt ][ zn ] ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,629,continue;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,634,private void bsFinishedWithStream()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,636,if (m_input != null)
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,638,try
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,640,m_input.close();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,642,catch ( IOException e )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,646,m_input = null;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,649,private int readVariableSizedInt( final int numBits )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,651,return bsR( numBits );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,654,private char readUnsignedChar()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,656,return (char)bsR( 8 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,659,private int readInt()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,661,int u = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,662,u = ( u << 8 ) | bsR( 8 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,663,u = ( u << 8 ) | bsR( 8 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,664,u = ( u << 8 ) | bsR( 8 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,665,u = ( u << 8 ) | bsR( 8 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,666,return u;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,669,private int bsR( final int n )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,671,while( m_bsLive < n )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,673,char ch = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,674,try
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,676,ch = (char)m_input.read();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,678,catch( final IOException ioe )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,680,compressedStreamEOF();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,683,if( ch == -1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,685,compressedStreamEOF();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,688,m_bsBuff = ( m_bsBuff << 8 ) | ( ch & 0xff );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,689,m_bsLive += 8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,692,final int result = ( m_bsBuff >> ( m_bsLive - n ) ) & ( ( 1 << n ) - 1 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,693,m_bsLive -= n;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,694,return result;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,697,private void bsSetStream( final InputStream input )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,699,m_input = input;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,700,m_bsLive = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,701,m_bsBuff = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,704,private void complete()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,706,m_storedCombinedCRC = readInt();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,707,if( m_storedCombinedCRC != m_computedCombinedCRC )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,709,crcError();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,712,bsFinishedWithStream();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,713,m_streamEnd = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,716,private void endBlock()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,718,m_computedBlockCRC = m_crc.getFinalCRC();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,720,* A bad CRC is considered a fatal error.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,722,if( m_storedBlockCRC != m_computedBlockCRC )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,724,crcError();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,727,m_computedCombinedCRC = ( m_computedCombinedCRC << 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,728,| ( m_computedCombinedCRC >>> 31 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,729,m_computedCombinedCRC ^= m_computedBlockCRC;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,732,"private void hbCreateDecodeTables( final int[] limit,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,733,"final int[] base,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,734,"final int[] perm,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,735,"final char[] length,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,736,"final int minLen,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,737,"final int maxLen,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,738,final int alphaSize )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,740,int pp = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,741,for( int i = minLen; i <= maxLen; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,743,for( int j = 0; j < alphaSize; j++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,745,if( length[ j ] == i )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,747,perm[ pp ] = j;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,748,pp++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,753,for( int i = 0; i < MAX_CODE_LEN; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,755,base[ i ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,758,for( int i = 0; i < alphaSize; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,760,base[ length[ i ] + 1 ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,763,for( int i = 1; i < MAX_CODE_LEN; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,765,base[ i ] += base[ i - 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,768,for( int i = 0; i < MAX_CODE_LEN; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,770,limit[ i ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,773,int vec = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,774,for( int i = minLen; i <= maxLen; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,776,vec += ( base[ i + 1 ] - base[ i ] );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,777,limit[ i ] = vec - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,778,vec <<= 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,781,for( int i = minLen + 1; i <= maxLen; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,783,base[ i ] = ( ( limit[ i - 1 ] + 1 ) << 1 ) - base[ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,787,private void initBlock()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,789,final char magic1 = readUnsignedChar();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,790,final char magic2 = readUnsignedChar();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,791,final char magic3 = readUnsignedChar();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,792,final char magic4 = readUnsignedChar();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,793,final char magic5 = readUnsignedChar();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,794,final char magic6 = readUnsignedChar();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,795,if( magic1 == 0x17 && magic2 == 0x72 && magic3 == 0x45 &&
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,796,magic4 == 0x38 && magic5 == 0x50 && magic6 == 0x90 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,798,complete();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,799,return;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,802,if( magic1 != 0x31 || magic2 != 0x41 || magic3 != 0x59 ||
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,803,magic4 != 0x26 || magic5 != 0x53 || magic6 != 0x59 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,805,badBlockHeader();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,806,m_streamEnd = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,807,return;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,810,m_storedBlockCRC = readInt();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,812,if( bsR( 1 ) == 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,814,m_blockRandomised = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,816,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,818,m_blockRandomised = false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,821,//        currBlockNo++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,822,getAndMoveToFrontDecode();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,824,m_crc.initialiseCRC();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,825,m_currentState = START_BLOCK_STATE;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,828,private void initialize()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,830,final char magic3 = readUnsignedChar();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,831,final char magic4 = readUnsignedChar();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,832,if( magic3 != 'h' || magic4 < '1' || magic4 > '9' )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,834,bsFinishedWithStream();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,835,m_streamEnd = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,836,return;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,839,setDecompressStructureSizes( magic4 - '0' );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,840,m_computedCombinedCRC = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,843,private void makeMaps()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,845,m_nInUse = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,846,for( int i = 0; i < 256; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,848,if( m_inUse[ i ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,850,m_seqToUnseq[ m_nInUse ] = (char)i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,851,m_unseqToSeq[ i ] = (char)m_nInUse;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,852,m_nInUse++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,857,private void recvDecodingTables()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,859,buildInUseTable();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,860,makeMaps();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,861,final int alphaSize = m_nInUse + 2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,864,* Now the selectors
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,866,final int groupCount = bsR( 3 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,867,final int selectorCount = bsR( 15 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,868,for( int i = 0; i < selectorCount; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,870,int run = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,871,while( bsR( 1 ) == 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,873,run++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,875,m_selectorMtf[ i ] = (char)run;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,879,* Undo the MTF values for the selectors.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,881,final char[] pos = new char[ N_GROUPS ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,882,for( char v = 0; v < groupCount; v++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,884,pos[ v ] = v;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,887,for( int i = 0; i < selectorCount; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,889,int v = m_selectorMtf[ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,890,final char tmp = pos[ v ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,891,while( v > 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,893,pos[ v ] = pos[ v - 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,894,v--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,896,pos[ 0 ] = tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,897,m_selector[ i ] = tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,900,final char[][] len = new char[ N_GROUPS ][ MAX_ALPHA_SIZE ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,902,* Now the coding tables
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,904,for( int i = 0; i < groupCount; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,906,int curr = bsR( 5 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,907,for( int j = 0; j < alphaSize; j++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,909,while( bsR( 1 ) == 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,911,if( bsR( 1 ) == 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,913,curr++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,915,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,917,curr--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,920,len[ i ][ j ] = (char)curr;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,925,* Create the Huffman decoding tables
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,927,for( int k = 0; k < groupCount; k++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,929,int minLen = 32;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,930,int maxLen = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,931,for( int i = 0; i < alphaSize; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,933,if( len[ k ][ i ] > maxLen )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,935,maxLen = len[ k ][ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,937,if( len[ k ][ i ] < minLen )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,939,minLen = len[ k ][ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,942,"hbCreateDecodeTables( m_limit[ k ], m_base[ k ], m_perm[ k ], len[ k ], minLen,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,943,"maxLen, alphaSize );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,944,m_minLens[ k ] = minLen;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,948,private void buildInUseTable()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,950,final boolean[] inUse16 = new boolean[ 16 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,953,* Receive the mapping table
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,955,for( int i = 0; i < 16; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,957,if( bsR( 1 ) == 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,959,inUse16[ i ] = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,961,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,963,inUse16[ i ] = false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,967,for( int i = 0; i < 256; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,969,m_inUse[ i ] = false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,972,for( int i = 0; i < 16; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,974,if( inUse16[ i ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,976,for( int j = 0; j < 16; j++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,978,if( bsR( 1 ) == 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,980,m_inUse[ i * 16 + j ] = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,987,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,988,* @see java.io.InputStream#close()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,990,public void close() throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2InputStream.java,992,bsFinishedWithStream();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,16,package org.apache.commons.compress.compressors.bzip2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,18,import java.io.IOException;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,19,import java.io.OutputStream;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,21,"* This package is based on the work done by Keiron Liddle, Aftex Software"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,22,* <keiron@aftexsw.com> to whom the Ant project is very grateful for his
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,23,* great code.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,26,* An output stream that compresses into the BZip2 format (without the file
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,27,* header chars) into another stream. TODO: Update to BZip2 1.0.1
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,29,"* @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,31,public class BZip2OutputStream
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,32,extends OutputStream
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,33,implements BZip2Constants
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,35,private static final int LOWER_BYTE_MASK = 0x000000ff;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,36,private static final int UPPER_BYTE_MASK = 0xffffff00;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,37,private static final int SETMASK = ( 1 << 21 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,38,private static final int CLEARMASK = ( ~SETMASK );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,39,private static final int GREATER_ICOST = 15;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,40,private static final int LESSER_ICOST = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,41,private static final int SMALL_THRESH = 20;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,42,private static final int DEPTH_THRESH = 10;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,45,* If you are ever unlucky/improbable enough
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,46,"* to get a stack overflow whilst sorting,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,47,* increase the following constant and try
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,48,* again.  In practice I have never seen the
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,49,"* stack go above 27 elems, so the following"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,50,* limit seems very generous.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,52,private static final int QSORT_STACK_SIZE = 1000;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,54,private CRC m_crc = new CRC();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,56,private boolean[] m_inUse = new boolean[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,58,private char[] m_seqToUnseq = new char[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,59,private char[] m_unseqToSeq = new char[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,61,private char[] m_selector = new char[ MAX_SELECTORS ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,62,private char[] m_selectorMtf = new char[ MAX_SELECTORS ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,64,private int[] m_mtfFreq = new int[ MAX_ALPHA_SIZE ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,66,private int m_currentChar = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,67,private int m_runLength;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,69,private boolean m_closed;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,72,* Knuth's increments seem to work better
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,73,* than Incerpi-Sedgewick here.  Possibly
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,74,* because the number of elems to sort is
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,75,"* usually small, typically <= 20."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,77,private int[] m_incs = new int[]
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,79,"1, 4, 13, 40, 121, 364, 1093, 3280,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,80,"9841, 29524, 88573, 265720,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,81,"797161, 2391484"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,84,private boolean m_blockRandomised;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,87,* always: in the range 0 .. 9.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,88,* The current block size is 100000 * this number.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,90,private int m_blockSize100k;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,91,private int m_bsBuff;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,92,private int m_bsLive;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,95,"* index of the last char in the block, so"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,96,* the block size == last + 1.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,98,private int m_last;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,101,* index in zptr[] of original string after sorting.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,103,private int m_origPtr;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,105,private int m_allowableBlockSize;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,107,private char[] m_block;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,109,private int m_blockCRC;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,110,private int m_combinedCRC;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,112,private OutputStream m_bsStream;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,113,private boolean m_firstAttempt;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,114,private int[] m_ftab;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,115,private int m_nInUse;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,117,private int m_nMTF;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,118,private int[] m_quadrant;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,119,private short[] m_szptr;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,120,private int m_workDone;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,123,* Used when sorting.  If too many long comparisons
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,124,"* happen, we stop sorting, randomise the block"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,125,"* slightly, and try again."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,127,private int m_workFactor;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,128,private int m_workLimit;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,129,private int[] m_zptr;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,131,public BZip2OutputStream( final OutputStream output )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,132,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,134,"this( output, 9 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,137,"public BZip2OutputStream( final OutputStream output, final int blockSize )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,138,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,140,bsSetStream( output );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,141,m_workFactor = 50;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,143,int outBlockSize = blockSize;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,144,if( outBlockSize > 9 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,146,outBlockSize = 9;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,148,if( outBlockSize < 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,150,outBlockSize = 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,152,m_blockSize100k = outBlockSize;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,153,allocateCompressStructures();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,154,initialize();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,155,initBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,158,"private static void hbMakeCodeLengths( char[] len, int[] freq,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,159,"int alphaSize, int maxLen )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,162,* Nodes and heap entries run from 1.  Entry 0
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,163,* for both the heap and nodes is a sentinel.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,165,int nNodes;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,167,* Nodes and heap entries run from 1.  Entry 0
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,168,* for both the heap and nodes is a sentinel.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,170,int nHeap;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,172,* Nodes and heap entries run from 1.  Entry 0
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,173,* for both the heap and nodes is a sentinel.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,175,int n1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,177,* Nodes and heap entries run from 1.  Entry 0
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,178,* for both the heap and nodes is a sentinel.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,180,int n2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,182,* Nodes and heap entries run from 1.  Entry 0
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,183,* for both the heap and nodes is a sentinel.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,185,int i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,187,* Nodes and heap entries run from 1.  Entry 0
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,188,* for both the heap and nodes is a sentinel.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,190,int j;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,192,* Nodes and heap entries run from 1.  Entry 0
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,193,* for both the heap and nodes is a sentinel.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,195,int k;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,196,boolean tooLong;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,198,int[] heap = new int[ MAX_ALPHA_SIZE + 2 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,199,int[] weights = new int[ MAX_ALPHA_SIZE * 2 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,200,int[] parent = new int[ MAX_ALPHA_SIZE * 2 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,202,for( i = 0; i < alphaSize; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,204,weights[ i + 1 ] = ( freq[ i ] == 0 ? 1 : freq[ i ] ) << 8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,207,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,209,nNodes = alphaSize;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,210,nHeap = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,212,heap[ 0 ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,213,weights[ 0 ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,214,parent[ 0 ] = -2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,216,for( i = 1; i <= alphaSize; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,218,parent[ i ] = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,219,nHeap++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,220,heap[ nHeap ] = i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,222,int zz;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,223,int tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,224,zz = nHeap;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,225,tmp = heap[ zz ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,226,while( weights[ tmp ] < weights[ heap[ zz >> 1 ] ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,228,heap[ zz ] = heap[ zz >> 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,229,zz >>= 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,231,heap[ zz ] = tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,234,if( !( nHeap < ( MAX_ALPHA_SIZE + 2 ) ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,236,panic();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,239,while( nHeap > 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,241,n1 = heap[ 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,242,heap[ 1 ] = heap[ nHeap ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,243,nHeap--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,245,int zz = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,246,int yy = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,247,int tmp = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,248,zz = 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,249,tmp = heap[ zz ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,250,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,252,yy = zz << 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,253,if( yy > nHeap )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,255,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,257,if( yy < nHeap &&
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,258,weights[ heap[ yy + 1 ] ] < weights[ heap[ yy ] ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,260,yy++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,262,if( weights[ tmp ] < weights[ heap[ yy ] ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,264,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,266,heap[ zz ] = heap[ yy ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,267,zz = yy;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,269,heap[ zz ] = tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,271,n2 = heap[ 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,272,heap[ 1 ] = heap[ nHeap ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,273,nHeap--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,275,int zz = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,276,int yy = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,277,int tmp = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,278,zz = 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,279,tmp = heap[ zz ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,280,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,282,yy = zz << 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,283,if( yy > nHeap )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,285,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,287,if( yy < nHeap &&
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,288,weights[ heap[ yy + 1 ] ] < weights[ heap[ yy ] ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,290,yy++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,292,if( weights[ tmp ] < weights[ heap[ yy ] ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,294,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,296,heap[ zz ] = heap[ yy ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,297,zz = yy;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,299,heap[ zz ] = tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,301,nNodes++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,302,parent[ n1 ] = nNodes;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,303,parent[ n2 ] = nNodes;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,305,final int v1 = weights[ n1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,306,final int v2 = weights[ n2 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,307,"final int weight = calculateWeight( v1, v2 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,308,weights[ nNodes ] = weight;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,310,parent[ nNodes ] = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,311,nHeap++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,312,heap[ nHeap ] = nNodes;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,314,int zz = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,315,int tmp = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,316,zz = nHeap;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,317,tmp = heap[ zz ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,318,while( weights[ tmp ] < weights[ heap[ zz >> 1 ] ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,320,heap[ zz ] = heap[ zz >> 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,321,zz >>= 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,323,heap[ zz ] = tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,326,if( !( nNodes < ( MAX_ALPHA_SIZE * 2 ) ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,328,panic();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,331,tooLong = false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,332,for( i = 1; i <= alphaSize; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,334,j = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,335,k = i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,336,while( parent[ k ] >= 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,338,k = parent[ k ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,339,j++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,341,len[ i - 1 ] = (char)j;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,342,if( j > maxLen )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,344,tooLong = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,348,if( !tooLong )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,350,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,353,for( i = 1; i < alphaSize; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,355,j = weights[ i ] >> 8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,356,j = 1 + ( j / 2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,357,weights[ i ] = j << 8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,362,"private static int calculateWeight( final int v1, final int v2 )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,364,final int upper = ( v1 & UPPER_BYTE_MASK ) + ( v2 & UPPER_BYTE_MASK );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,365,final int v1Lower = ( v1 & LOWER_BYTE_MASK );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,366,final int v2Lower = ( v2 & LOWER_BYTE_MASK );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,367,final int nnnn = ( v1Lower > v2Lower ) ? v1Lower : v2Lower;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,368,return upper | ( 1 + nnnn );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,371,private static void panic()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,373,"System.out.println( ""panic"" );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,374,//throw new CError();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,377,public void close()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,378,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,380,if( m_closed )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,382,return;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,385,if( m_runLength > 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,387,writeRun();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,389,m_currentChar = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,390,endBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,391,endCompression();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,392,m_closed = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,393,super.close();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,394,m_bsStream.close();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,397,public void finalize()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,398,throws Throwable
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,400,close();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,403,public void flush()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,404,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,406,super.flush();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,407,m_bsStream.flush();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,411,"* modified by Oliver Merkel, 010128"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,413,* @param bv Description of Parameter
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,414,* @exception java.io.IOException Description of Exception
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,416,/* (non-Javadoc)
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,417,* @see java.io.OutputStream#write(int)
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,419,public void write( int bv )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,420,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,422,int b = ( 256 + bv ) % 256;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,423,if( m_currentChar != -1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,425,if( m_currentChar == b )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,427,m_runLength++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,428,if( m_runLength > 254 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,430,writeRun();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,431,m_currentChar = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,432,m_runLength = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,435,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,437,writeRun();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,438,m_runLength = 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,439,m_currentChar = b;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,442,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,444,m_currentChar = b;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,445,m_runLength++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,449,private void allocateCompressStructures()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,451,int n = BASE_BLOCK_SIZE * m_blockSize100k;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,452,m_block = new char[ ( n + 1 + NUM_OVERSHOOT_BYTES ) ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,453,m_quadrant = new int[ ( n + NUM_OVERSHOOT_BYTES ) ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,454,m_zptr = new int[ n ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,455,m_ftab = new int[ 65537 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,457,if( m_block == null || m_quadrant == null || m_zptr == null
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,458,|| m_ftab == null )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,460,//int totalDraw = (n + 1 + NUM_OVERSHOOT_BYTES) + (n + NUM_OVERSHOOT_BYTES) + n + 65537;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,461,"//compressOutOfMemory ( totalDraw, n );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,465,* The back end needs a place to store the MTF values
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,466,* whilst it calculates the coding tables.  We could
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,467,"* put them in the zptr array.  However, these values"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,468,"* will fit in a short, so we overlay szptr at the"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,469,"* start of zptr, in the hope of reducing the number"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,470,* of cache misses induced by the multiple traversals
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,471,* of the MTF values when calculating coding tables.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,472,* Seems to improve compression speed by about 1%.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,474,//    szptr = zptr;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,476,m_szptr = new short[ 2 * n ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,479,private void bsFinishedWithStream()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,480,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,482,while( m_bsLive > 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,484,int ch = ( m_bsBuff >> 24 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,485,try
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,487,m_bsStream.write( ch );// write 8-bit
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,489,catch( IOException e )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,491,throw e;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,493,m_bsBuff <<= 8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,494,m_bsLive -= 8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,498,"private void bsPutIntVS( int numBits, int c )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,499,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,501,"bsW( numBits, c );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,504,private void bsPutUChar( int c )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,505,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,507,"bsW( 8, c );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,510,private void bsPutint( int u )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,511,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,513,"bsW( 8, ( u >> 24 ) & 0xff );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,514,"bsW( 8, ( u >> 16 ) & 0xff );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,515,"bsW( 8, ( u >> 8 ) & 0xff );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,516,"bsW( 8, u & 0xff );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,519,private void bsSetStream( OutputStream f )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,521,m_bsStream = f;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,522,m_bsLive = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,523,m_bsBuff = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,526,"private void bsW( int n, int v )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,527,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,529,while( m_bsLive >= 8 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,531,int ch = ( m_bsBuff >> 24 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,532,try
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,534,m_bsStream.write( ch );// write 8-bit
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,536,catch( IOException e )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,538,throw e;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,540,m_bsBuff <<= 8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,541,m_bsLive -= 8;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,543,m_bsBuff |= ( v << ( 32 - m_bsLive - n ) );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,544,m_bsLive += n;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,547,private void doReversibleTransformation()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,549,int i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,551,m_workLimit = m_workFactor * m_last;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,552,m_workDone = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,553,m_blockRandomised = false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,554,m_firstAttempt = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,556,mainSort();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,558,if( m_workDone > m_workLimit && m_firstAttempt )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,560,randomiseBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,561,m_workLimit = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,562,m_workDone = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,563,m_blockRandomised = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,564,m_firstAttempt = false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,565,mainSort();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,568,m_origPtr = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,569,for( i = 0; i <= m_last; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,571,if( m_zptr[ i ] == 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,573,m_origPtr = i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,574,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,579,if( m_origPtr == -1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,581,panic();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,585,private void endBlock()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,586,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,588,m_blockCRC = m_crc.getFinalCRC();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,589,m_combinedCRC = ( m_combinedCRC << 1 ) | ( m_combinedCRC >>> 31 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,590,m_combinedCRC ^= m_blockCRC;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,593,* sort the block and establish posn of original string
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,595,doReversibleTransformation();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,598,"* A 6-byte block header, the value chosen arbitrarily"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,599,* as 0x314159265359 :-).  A 32 bit value does not really
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,600,* give a strong enough guarantee that the value will not
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,601,* appear by chance in the compressed datastream.  Worst-case
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,602,"* probability of this event, for a 900k block, is about"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,603,"* 2.0e-3 for 32 bits, 1.0e-5 for 40 bits and 4.0e-8 for 48 bits."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,604,* For a compressed file of size 100Gb -- about 100000 blocks --
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,605,* only a 48-bit marker will do.  NB: normal compression/
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,606,* decompression do *not* rely on these statistical properties.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,607,* They are only important when trying to recover blocks from
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,608,* damaged files.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,610,bsPutUChar( 0x31 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,611,bsPutUChar( 0x41 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,612,bsPutUChar( 0x59 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,613,bsPutUChar( 0x26 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,614,bsPutUChar( 0x53 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,615,bsPutUChar( 0x59 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,618,"* Now the block's CRC, so it is in a known place."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,620,bsPutint( m_blockCRC );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,623,* Now a single bit indicating randomisation.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,625,if( m_blockRandomised )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,627,"bsW( 1, 1 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,629,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,631,"bsW( 1, 0 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,635,"* Finally, block's contents proper."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,637,moveToFrontCodeAndSend();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,640,private void endCompression()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,641,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,644,"* Now another magic 48-bit number, 0x177245385090, to"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,645,"* indicate the end of the last block.  (sqrt(pi), if"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,646,"* you want to know.  I did want to use e, but it contains"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,647,* too much repetition -- 27 18 28 18 28 46 -- for me
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,648,* to feel statistically comfortable.  Call me paranoid.)
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,650,bsPutUChar( 0x17 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,651,bsPutUChar( 0x72 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,652,bsPutUChar( 0x45 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,653,bsPutUChar( 0x38 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,654,bsPutUChar( 0x50 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,655,bsPutUChar( 0x90 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,657,bsPutint( m_combinedCRC );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,659,bsFinishedWithStream();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,662,"private boolean fullGtU( int i1, int i2 )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,664,int k;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,665,char c1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,666,char c2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,667,int s1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,668,int s2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,670,c1 = m_block[ i1 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,671,c2 = m_block[ i2 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,672,if( c1 != c2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,674,return ( c1 > c2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,676,i1++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,677,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,679,c1 = m_block[ i1 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,680,c2 = m_block[ i2 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,681,if( c1 != c2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,683,return ( c1 > c2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,685,i1++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,686,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,688,c1 = m_block[ i1 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,689,c2 = m_block[ i2 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,690,if( c1 != c2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,692,return ( c1 > c2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,694,i1++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,695,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,697,c1 = m_block[ i1 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,698,c2 = m_block[ i2 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,699,if( c1 != c2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,701,return ( c1 > c2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,703,i1++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,704,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,706,c1 = m_block[ i1 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,707,c2 = m_block[ i2 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,708,if( c1 != c2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,710,return ( c1 > c2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,712,i1++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,713,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,715,c1 = m_block[ i1 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,716,c2 = m_block[ i2 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,717,if( c1 != c2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,719,return ( c1 > c2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,721,i1++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,722,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,724,k = m_last + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,726,do
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,728,c1 = m_block[ i1 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,729,c2 = m_block[ i2 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,730,if( c1 != c2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,732,return ( c1 > c2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,734,s1 = m_quadrant[ i1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,735,s2 = m_quadrant[ i2 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,736,if( s1 != s2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,738,return ( s1 > s2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,740,i1++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,741,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,743,c1 = m_block[ i1 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,744,c2 = m_block[ i2 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,745,if( c1 != c2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,747,return ( c1 > c2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,749,s1 = m_quadrant[ i1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,750,s2 = m_quadrant[ i2 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,751,if( s1 != s2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,753,return ( s1 > s2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,755,i1++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,756,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,758,c1 = m_block[ i1 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,759,c2 = m_block[ i2 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,760,if( c1 != c2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,762,return ( c1 > c2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,764,s1 = m_quadrant[ i1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,765,s2 = m_quadrant[ i2 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,766,if( s1 != s2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,768,return ( s1 > s2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,770,i1++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,771,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,773,c1 = m_block[ i1 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,774,c2 = m_block[ i2 + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,775,if( c1 != c2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,777,return ( c1 > c2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,779,s1 = m_quadrant[ i1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,780,s2 = m_quadrant[ i2 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,781,if( s1 != s2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,783,return ( s1 > s2 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,785,i1++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,786,i2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,788,if( i1 > m_last )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,790,i1 -= m_last;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,791,i1--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,794,if( i2 > m_last )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,796,i2 -= m_last;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,797,i2--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,801,k -= 4;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,802,m_workDone++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,803,} while( k >= 0 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,805,return false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,808,private void generateMTFValues()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,810,char[] yy = new char[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,811,int i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,812,int j;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,813,char tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,814,char tmp2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,815,int zPend;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,816,int wr;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,817,int EOB;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,819,makeMaps();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,820,EOB = m_nInUse + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,822,for( i = 0; i <= EOB; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,824,m_mtfFreq[ i ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,827,wr = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,828,zPend = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,829,for( i = 0; i < m_nInUse; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,831,yy[ i ] = (char)i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,834,for( i = 0; i <= m_last; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,836,char ll_i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,838,ll_i = m_unseqToSeq[ m_block[ m_zptr[ i ] ] ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,840,j = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,841,tmp = yy[ j ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,842,while( ll_i != tmp )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,844,j++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,845,tmp2 = tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,846,tmp = yy[ j ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,847,yy[ j ] = tmp2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,850,yy[ 0 ] = tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,852,if( j == 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,854,zPend++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,856,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,858,if( zPend > 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,860,zPend--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,861,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,863,switch( zPend % 2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,865,case 0:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,866,m_szptr[ wr ] = (short)RUNA;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,867,wr++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,868,m_mtfFreq[ RUNA ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,869,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,870,case 1:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,871,m_szptr[ wr ] = (short)RUNB;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,872,wr++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,873,m_mtfFreq[ RUNB ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,874,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,877,if( zPend < 2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,879,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,881,zPend = ( zPend - 2 ) / 2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,884,zPend = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,886,m_szptr[ wr ] = (short)( j + 1 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,887,wr++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,888,m_mtfFreq[ j + 1 ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,892,if( zPend > 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,894,zPend--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,895,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,897,switch( zPend % 2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,899,case 0:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,900,m_szptr[ wr ] = (short)RUNA;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,901,wr++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,902,m_mtfFreq[ RUNA ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,903,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,904,case 1:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,905,m_szptr[ wr ] = (short)RUNB;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,906,wr++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,907,m_mtfFreq[ RUNB ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,908,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,910,if( zPend < 2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,912,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,914,zPend = ( zPend - 2 ) / 2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,918,m_szptr[ wr ] = (short)EOB;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,919,wr++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,920,m_mtfFreq[ EOB ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,922,m_nMTF = wr;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,925,"private void hbAssignCodes( int[] code, char[] length, int minLen,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,926,"int maxLen, int alphaSize )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,928,int n;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,929,int vec;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,930,int i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,932,vec = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,933,for( n = minLen; n <= maxLen; n++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,935,for( i = 0; i < alphaSize; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,937,if( length[ i ] == n )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,939,code[ i ] = vec;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,940,vec++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,944,vec <<= 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,948,private void initBlock()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,950,//        blockNo++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,951,m_crc.initialiseCRC();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,952,m_last = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,953,//        ch = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,955,for( int i = 0; i < 256; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,957,m_inUse[ i ] = false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,961,* 20 is just a paranoia constant
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,963,m_allowableBlockSize = BASE_BLOCK_SIZE * m_blockSize100k - 20;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,966,private void initialize()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,967,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,970,"* Write `magic' bytes h indicating file-format == huffmanised,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,971,* followed by a digit indicating blockSize100k.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,973,bsPutUChar( 'h' );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,974,bsPutUChar( '0' + m_blockSize100k );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,976,m_combinedCRC = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,979,private void mainSort()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,981,int i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,982,int j;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,983,int ss;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,984,int sb;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,985,int[] runningOrder = new int[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,986,int[] copy = new int[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,987,boolean[] bigDone = new boolean[ 256 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,988,int c1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,989,int c2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,992,"* In the various block-sized structures, live data runs"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,993,"* from 0 to last+NUM_OVERSHOOT_BYTES inclusive.  First,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,994,* set up the overshoot area for block.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,996,"//   if (verbosity >= 4) fprintf ( stderr, ""        sort initialise ...\n"" );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,997,for( i = 0; i < NUM_OVERSHOOT_BYTES; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,999,m_block[ m_last + i + 2 ] = m_block[ ( i % ( m_last + 1 ) ) + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1001,for( i = 0; i <= m_last + NUM_OVERSHOOT_BYTES; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1003,m_quadrant[ i ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1006,m_block[ 0 ] = m_block[ m_last + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1008,if( m_last < 4000 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1011,"* Use simpleSort(), since the full sorting mechanism"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1012,* has quite a large constant overhead.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1014,for( i = 0; i <= m_last; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1016,m_zptr[ i ] = i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1018,m_firstAttempt = false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1019,m_workDone = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1020,m_workLimit = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1021,"simpleSort( 0, m_last, 0 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1023,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1025,for( i = 0; i <= 255; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1027,bigDone[ i ] = false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1030,for( i = 0; i <= 65536; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1032,m_ftab[ i ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1035,c1 = m_block[ 0 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1036,for( i = 0; i <= m_last; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1038,c2 = m_block[ i + 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1039,m_ftab[ ( c1 << 8 ) + c2 ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1040,c1 = c2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1043,for( i = 1; i <= 65536; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1045,m_ftab[ i ] += m_ftab[ i - 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1048,c1 = m_block[ 1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1049,for( i = 0; i < m_last; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1051,c2 = m_block[ i + 2 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1052,j = ( c1 << 8 ) + c2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1053,c1 = c2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1054,m_ftab[ j ]--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1055,m_zptr[ m_ftab[ j ] ] = i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1058,j = ( ( m_block[ m_last + 1 ] ) << 8 ) + ( m_block[ 1 ] );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1059,m_ftab[ j ]--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1060,m_zptr[ m_ftab[ j ] ] = m_last;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1063,* Now ftab contains the first loc of every small bucket.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1064,"* Calculate the running order, from smallest to largest"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1065,* big bucket.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1067,for( i = 0; i <= 255; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1069,runningOrder[ i ] = i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1072,int vv;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1073,int h = 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1074,do
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1076,h = 3 * h + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1077,} while( h <= 256 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1078,do
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1080,h = h / 3;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1081,for( i = h; i <= 255; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1083,vv = runningOrder[ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1084,j = i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1085,while( ( m_ftab[ ( ( runningOrder[ j - h ] ) + 1 ) << 8 ]
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1086,- m_ftab[ ( runningOrder[ j - h ] ) << 8 ] ) >
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1087,( m_ftab[ ( ( vv ) + 1 ) << 8 ] - m_ftab[ ( vv ) << 8 ] ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1089,runningOrder[ j ] = runningOrder[ j - h ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1090,j = j - h;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1091,if( j <= ( h - 1 ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1093,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1096,runningOrder[ j ] = vv;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1098,} while( h != 1 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1102,* The main sorting loop.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1104,for( i = 0; i <= 255; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1108,"* Process big buckets, starting with the least full."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1110,ss = runningOrder[ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1113,* Complete the big bucket [ss] by quicksorting
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1114,"* any unsorted small buckets [ss, j].  Hopefully"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1115,* previous pointer-scanning phases have already
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1116,"* completed many of the small buckets [ss, j], so"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1117,* we don't have to sort them at all.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1119,for( j = 0; j <= 255; j++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1121,sb = ( ss << 8 ) + j;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1122,if( !( ( m_ftab[ sb ] & SETMASK ) == SETMASK ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1124,int lo = m_ftab[ sb ] & CLEARMASK;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1125,int hi = ( m_ftab[ sb + 1 ] & CLEARMASK ) - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1126,if( hi > lo )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1128,"qSort3( lo, hi, 2 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1129,if( m_workDone > m_workLimit && m_firstAttempt )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1131,return;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1134,m_ftab[ sb ] |= SETMASK;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1139,"* The ss big bucket is now done.  Record this fact,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1140,* and update the quadrant descriptors.  Remember to
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1141,"* update quadrants in the overshoot area too, if"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1142,"* necessary.  The ""if (i < 255)"" test merely skips"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1143,"* this updating for the last bucket processed, since"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1144,* updating for the last bucket is pointless.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1146,bigDone[ ss ] = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1148,if( i < 255 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1150,int bbStart = m_ftab[ ss << 8 ] & CLEARMASK;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1151,int bbSize = ( m_ftab[ ( ss + 1 ) << 8 ] & CLEARMASK ) - bbStart;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1152,int shifts = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1154,while( ( bbSize >> shifts ) > 65534 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1156,shifts++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1159,for( j = 0; j < bbSize; j++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1161,int a2update = m_zptr[ bbStart + j ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1162,int qVal = ( j >> shifts );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1163,m_quadrant[ a2update ] = qVal;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1164,if( a2update < NUM_OVERSHOOT_BYTES )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1166,m_quadrant[ a2update + m_last + 1 ] = qVal;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1170,if( !( ( ( bbSize - 1 ) >> shifts ) <= 65535 ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1172,panic();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1177,* Now scan this big bucket so as to synthesise the
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1178,"* sorted order for small buckets [t, ss] for all t != ss."
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1180,for( j = 0; j <= 255; j++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1182,copy[ j ] = m_ftab[ ( j << 8 ) + ss ] & CLEARMASK;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1185,for( j = m_ftab[ ss << 8 ] & CLEARMASK;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1186,j < ( m_ftab[ ( ss + 1 ) << 8 ] & CLEARMASK ); j++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1188,c1 = m_block[ m_zptr[ j ] ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1189,if( !bigDone[ c1 ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1191,m_zptr[ copy[ c1 ] ] = m_zptr[ j ] == 0 ? m_last : m_zptr[ j ] - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1192,copy[ c1 ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1196,for( j = 0; j <= 255; j++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1198,m_ftab[ ( j << 8 ) + ss ] |= SETMASK;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1204,private void makeMaps()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1206,int i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1207,m_nInUse = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1208,for( i = 0; i < 256; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1210,if( m_inUse[ i ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1212,m_seqToUnseq[ m_nInUse ] = (char)i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1213,m_unseqToSeq[ i ] = (char)m_nInUse;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1214,m_nInUse++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1219,"private char med3( char a, char b, char c )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1221,char t;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1222,if( a > b )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1224,t = a;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1225,a = b;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1226,b = t;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1228,if( b > c )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1230,t = b;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1231,b = c;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1232,c = t;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1234,if( a > b )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1236,b = a;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1238,return b;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1241,private void moveToFrontCodeAndSend()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1242,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1244,"bsPutIntVS( 24, m_origPtr );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1245,generateMTFValues();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1246,sendMTFValues();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1249,"private void qSort3( int loSt, int hiSt, int dSt )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1251,int unLo;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1252,int unHi;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1253,int ltLo;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1254,int gtHi;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1255,int med;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1256,int n;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1257,int m;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1258,int sp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1259,int lo;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1260,int hi;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1261,int d;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1262,StackElem[] stack = new StackElem[ QSORT_STACK_SIZE ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1263,for( int count = 0; count < QSORT_STACK_SIZE; count++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1265,stack[ count ] = new StackElem();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1268,sp = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1270,stack[ sp ].m_ll = loSt;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1271,stack[ sp ].m_hh = hiSt;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1272,stack[ sp ].m_dd = dSt;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1273,sp++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1275,while( sp > 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1277,if( sp >= QSORT_STACK_SIZE )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1279,panic();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1282,sp--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1283,lo = stack[ sp ].m_ll;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1284,hi = stack[ sp ].m_hh;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1285,d = stack[ sp ].m_dd;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1287,if( hi - lo < SMALL_THRESH || d > DEPTH_THRESH )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1289,"simpleSort( lo, hi, d );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1290,if( m_workDone > m_workLimit && m_firstAttempt )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1292,return;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1294,continue;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1297,"med = med3( m_block[ m_zptr[ lo ] + d + 1 ],"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1298,"m_block[ m_zptr[ hi ] + d + 1 ],"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1299,m_block[ m_zptr[ ( lo + hi ) >> 1 ] + d + 1 ] );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1301,unLo = lo;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1302,ltLo = lo;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1303,unHi = hi;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1304,gtHi = hi;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1306,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1308,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1310,if( unLo > unHi )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1312,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1314,n = m_block[ m_zptr[ unLo ] + d + 1 ] - med;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1315,if( n == 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1317,int temp = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1318,temp = m_zptr[ unLo ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1319,m_zptr[ unLo ] = m_zptr[ ltLo ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1320,m_zptr[ ltLo ] = temp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1321,ltLo++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1322,unLo++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1323,continue;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1326,if( n > 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1328,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1330,unLo++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1332,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1334,if( unLo > unHi )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1336,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1338,n = m_block[ m_zptr[ unHi ] + d + 1 ] - med;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1339,if( n == 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1341,int temp = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1342,temp = m_zptr[ unHi ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1343,m_zptr[ unHi ] = m_zptr[ gtHi ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1344,m_zptr[ gtHi ] = temp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1345,gtHi--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1346,unHi--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1347,continue;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1350,if( n < 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1352,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1354,unHi--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1356,if( unLo > unHi )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1358,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1360,int temp = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1361,temp = m_zptr[ unLo ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1362,m_zptr[ unLo ] = m_zptr[ unHi ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1363,m_zptr[ unHi ] = temp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1364,unLo++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1365,unHi--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1368,if( gtHi < ltLo )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1370,stack[ sp ].m_ll = lo;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1371,stack[ sp ].m_hh = hi;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1372,stack[ sp ].m_dd = d + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1373,sp++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1374,continue;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1377,n = ( ( ltLo - lo ) < ( unLo - ltLo ) ) ? ( ltLo - lo ) : ( unLo - ltLo );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1378,"vswap( lo, unLo - n, n );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1379,m = ( ( hi - gtHi ) < ( gtHi - unHi ) ) ? ( hi - gtHi ) : ( gtHi - unHi );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1380,"vswap( unLo, hi - m + 1, m );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1382,n = lo + unLo - ltLo - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1383,m = hi - ( gtHi - unHi ) + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1385,stack[ sp ].m_ll = lo;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1386,stack[ sp ].m_hh = n;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1387,stack[ sp ].m_dd = d;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1388,sp++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1390,stack[ sp ].m_ll = n + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1391,stack[ sp ].m_hh = m - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1392,stack[ sp ].m_dd = d + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1393,sp++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1395,stack[ sp ].m_ll = m;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1396,stack[ sp ].m_hh = hi;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1397,stack[ sp ].m_dd = d;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1398,sp++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1402,private void randomiseBlock()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1404,int i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1405,int rNToGo = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1406,int rTPos = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1407,for( i = 0; i < 256; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1409,m_inUse[ i ] = false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1412,for( i = 0; i <= m_last; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1414,if( rNToGo == 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1416,rNToGo = (char)RAND_NUMS[ rTPos ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1417,rTPos++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1418,if( rTPos == 512 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1420,rTPos = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1423,rNToGo--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1424,m_block[ i + 1 ] ^= ( ( rNToGo == 1 ) ? 1 : 0 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1425,// handle 16 bit signed numbers
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1426,m_block[ i + 1 ] &= 0xFF;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1428,m_inUse[ m_block[ i + 1 ] ] = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1432,private void sendMTFValues()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1433,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1435,char[][] len = new char[ N_GROUPS ][ MAX_ALPHA_SIZE ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1437,int v;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1439,int t;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1441,int i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1443,int j;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1445,int gs;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1447,int ge;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1449,int bt;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1451,int bc;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1453,int iter;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1454,int nSelectors = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1455,int alphaSize;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1456,int minLen;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1457,int maxLen;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1458,int selCtr;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1459,int nGroups;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1461,alphaSize = m_nInUse + 2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1462,for( t = 0; t < N_GROUPS; t++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1464,for( v = 0; v < alphaSize; v++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1466,len[ t ][ v ] = (char)GREATER_ICOST;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1471,* Decide how many coding tables to use
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1473,if( m_nMTF <= 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1475,panic();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1478,if( m_nMTF < 200 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1480,nGroups = 2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1482,else if( m_nMTF < 600 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1484,nGroups = 3;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1486,else if( m_nMTF < 1200 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1488,nGroups = 4;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1490,else if( m_nMTF < 2400 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1492,nGroups = 5;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1494,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1496,nGroups = 6;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1500,* Generate an initial set of coding tables
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1502,int nPart;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1503,int remF;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1504,int tFreq;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1505,int aFreq;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1507,nPart = nGroups;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1508,remF = m_nMTF;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1509,gs = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1510,while( nPart > 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1512,tFreq = remF / nPart;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1513,ge = gs - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1514,aFreq = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1515,while( aFreq < tFreq && ge < alphaSize - 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1517,ge++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1518,aFreq += m_mtfFreq[ ge ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1521,if( ge > gs && nPart != nGroups && nPart != 1
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1522,&& ( ( nGroups - nPart ) % 2 == 1 ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1524,aFreq -= m_mtfFreq[ ge ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1525,ge--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1528,for( v = 0; v < alphaSize; v++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1530,if( v >= gs && v <= ge )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1532,len[ nPart - 1 ][ v ] = (char)LESSER_ICOST;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1534,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1536,len[ nPart - 1 ][ v ] = (char)GREATER_ICOST;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1540,nPart--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1541,gs = ge + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1542,remF -= aFreq;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1546,int[][] rfreq = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1547,int[] fave = new int[ N_GROUPS ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1548,short[] cost = new short[ N_GROUPS ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1550,* Iterate up to N_ITERS times to improve the tables.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1552,for( iter = 0; iter < N_ITERS; iter++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1554,for( t = 0; t < nGroups; t++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1556,fave[ t ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1559,for( t = 0; t < nGroups; t++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1561,for( v = 0; v < alphaSize; v++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1563,rfreq[ t ][ v ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1567,nSelectors = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1568,gs = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1569,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1573,* Set group start & end marks.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1575,if( gs >= m_nMTF )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1577,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1579,ge = gs + G_SIZE - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1580,if( ge >= m_nMTF )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1582,ge = m_nMTF - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1586,* Calculate the cost of this group as coded
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1587,* by each of the coding tables.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1589,for( t = 0; t < nGroups; t++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1591,cost[ t ] = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1594,if( nGroups == 6 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1596,short cost0 = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1597,short cost1 = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1598,short cost2 = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1599,short cost3 = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1600,short cost4 = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1601,short cost5 = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1603,for( i = gs; i <= ge; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1605,short icv = m_szptr[ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1606,cost0 += len[ 0 ][ icv ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1607,cost1 += len[ 1 ][ icv ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1608,cost2 += len[ 2 ][ icv ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1609,cost3 += len[ 3 ][ icv ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1610,cost4 += len[ 4 ][ icv ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1611,cost5 += len[ 5 ][ icv ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1613,cost[ 0 ] = cost0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1614,cost[ 1 ] = cost1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1615,cost[ 2 ] = cost2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1616,cost[ 3 ] = cost3;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1617,cost[ 4 ] = cost4;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1618,cost[ 5 ] = cost5;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1620,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1622,for( i = gs; i <= ge; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1624,short icv = m_szptr[ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1625,for( t = 0; t < nGroups; t++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1627,cost[ t ] += len[ t ][ icv ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1633,"* Find the coding table which is best for this group,"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1634,* and record its identity in the selector table.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1636,bc = 999999999;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1637,bt = -1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1638,for( t = 0; t < nGroups; t++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1640,if( cost[ t ] < bc )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1642,bc = cost[ t ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1643,bt = t;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1647,fave[ bt ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1648,m_selector[ nSelectors ] = (char)bt;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1649,nSelectors++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1652,* Increment the symbol frequencies for the selected table.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1654,for( i = gs; i <= ge; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1656,rfreq[ bt ][ m_szptr[ i ] ]++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1659,gs = ge + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1663,* Recompute the tables based on the accumulated frequencies.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1665,for( t = 0; t < nGroups; t++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1667,"hbMakeCodeLengths( len[ t ], rfreq[ t ], alphaSize, 20 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1671,rfreq = null;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1672,fave = null;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1673,cost = null;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1675,if( !( nGroups < 8 ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1677,panic();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1679,if( !( nSelectors < 32768 && nSelectors <= ( 2 + ( 900000 / G_SIZE ) ) ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1681,panic();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1685,* Compute MTF values for the selectors.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1687,char[] pos = new char[ N_GROUPS ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1688,char ll_i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1689,char tmp2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1690,char tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1691,for( i = 0; i < nGroups; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1693,pos[ i ] = (char)i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1695,for( i = 0; i < nSelectors; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1697,ll_i = m_selector[ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1698,j = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1699,tmp = pos[ j ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1700,while( ll_i != tmp )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1702,j++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1703,tmp2 = tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1704,tmp = pos[ j ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1705,pos[ j ] = tmp2;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1707,pos[ 0 ] = tmp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1708,m_selectorMtf[ i ] = (char)j;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1712,int[][] code = new int[ N_GROUPS ][ MAX_ALPHA_SIZE ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1715,* Assign actual codes for the tables.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1717,for( t = 0; t < nGroups; t++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1719,minLen = 32;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1720,maxLen = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1721,for( i = 0; i < alphaSize; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1723,if( len[ t ][ i ] > maxLen )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1725,maxLen = len[ t ][ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1727,if( len[ t ][ i ] < minLen )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1729,minLen = len[ t ][ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1732,if( maxLen > 20 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1734,panic();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1736,if( minLen < 1 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1738,panic();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1740,"hbAssignCodes( code[ t ], len[ t ], minLen, maxLen, alphaSize );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1744,* Transmit the mapping table.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1746,boolean[] inUse16 = new boolean[ 16 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1747,for( i = 0; i < 16; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1749,inUse16[ i ] = false;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1750,for( j = 0; j < 16; j++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1752,if( m_inUse[ i * 16 + j ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1754,inUse16[ i ] = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1759,for( i = 0; i < 16; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1761,if( inUse16[ i ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1763,"bsW( 1, 1 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1765,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1767,"bsW( 1, 0 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1771,for( i = 0; i < 16; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1773,if( inUse16[ i ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1775,for( j = 0; j < 16; j++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1777,if( m_inUse[ i * 16 + j ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1779,"bsW( 1, 1 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1781,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1783,"bsW( 1, 0 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1792,* Now the selectors.
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1794,"bsW( 3, nGroups );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1795,"bsW( 15, nSelectors );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1796,for( i = 0; i < nSelectors; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1798,for( j = 0; j < m_selectorMtf[ i ]; j++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1800,"bsW( 1, 1 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1802,"bsW( 1, 0 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1805,for( t = 0; t < nGroups; t++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1807,int curr = len[ t ][ 0 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1808,"bsW( 5, curr );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1809,for( i = 0; i < alphaSize; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1811,while( curr < len[ t ][ i ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1813,"bsW( 2, 2 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1814,curr++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1816,* 10
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1819,while( curr > len[ t ][ i ] )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1821,"bsW( 2, 3 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1822,curr--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1824,* 11
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1827,"bsW( 1, 0 );"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1832,"* And finally, the block data proper"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1834,selCtr = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1835,gs = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1836,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1838,if( gs >= m_nMTF )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1840,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1842,ge = gs + G_SIZE - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1843,if( ge >= m_nMTF )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1845,ge = m_nMTF - 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1847,for( i = gs; i <= ge; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1849,"bsW( len[ m_selector[ selCtr ] ][ m_szptr[ i ] ],"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1850,code[ m_selector[ selCtr ] ][ m_szptr[ i ] ] );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1853,gs = ge + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1854,selCtr++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1856,if( !( selCtr == nSelectors ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1858,panic();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1862,"private void simpleSort( int lo, int hi, int d )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1864,int i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1865,int j;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1866,int h;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1867,int bigN;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1868,int hp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1869,int v;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1871,bigN = hi - lo + 1;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1872,if( bigN < 2 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1874,return;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1877,hp = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1878,while( m_incs[ hp ] < bigN )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1880,hp++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1882,hp--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1884,for( ; hp >= 0; hp-- )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1886,h = m_incs[ hp ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1888,i = lo + h;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1889,while( true )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1892,* copy 1
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1894,if( i > hi )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1896,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1898,v = m_zptr[ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1899,j = i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1900,"while( fullGtU( m_zptr[ j - h ] + d, v + d ) )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1902,m_zptr[ j ] = m_zptr[ j - h ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1903,j = j - h;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1904,if( j <= ( lo + h - 1 ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1906,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1909,m_zptr[ j ] = v;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1910,i++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1913,* copy 2
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1915,if( i > hi )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1917,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1919,v = m_zptr[ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1920,j = i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1921,"while( fullGtU( m_zptr[ j - h ] + d, v + d ) )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1923,m_zptr[ j ] = m_zptr[ j - h ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1924,j = j - h;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1925,if( j <= ( lo + h - 1 ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1927,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1930,m_zptr[ j ] = v;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1931,i++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1934,* copy 3
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1936,if( i > hi )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1938,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1940,v = m_zptr[ i ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1941,j = i;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1942,"while( fullGtU( m_zptr[ j - h ] + d, v + d ) )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1944,m_zptr[ j ] = m_zptr[ j - h ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1945,j = j - h;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1946,if( j <= ( lo + h - 1 ) )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1948,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1951,m_zptr[ j ] = v;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1952,i++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1954,if( m_workDone > m_workLimit && m_firstAttempt )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1956,return;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1962,"private void vswap( int p1, int p2, int n )"
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1964,int temp = 0;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1965,while( n > 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1967,temp = m_zptr[ p1 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1968,m_zptr[ p1 ] = m_zptr[ p2 ];
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1969,m_zptr[ p2 ] = temp;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1970,p1++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1971,p2++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1972,n--;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1976,private void writeRun()
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1977,throws IOException
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1979,if( m_last < m_allowableBlockSize )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1981,m_inUse[ m_currentChar ] = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1982,for( int i = 0; i < m_runLength; i++ )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1984,m_crc.updateCRC( (char)m_currentChar );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1986,switch( m_runLength )
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1988,case 1:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1989,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1990,m_block[ m_last + 1 ] = (char)m_currentChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1991,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1992,case 2:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1993,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1994,m_block[ m_last + 1 ] = (char)m_currentChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1995,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1996,m_block[ m_last + 1 ] = (char)m_currentChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1997,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1998,case 3:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,1999,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2000,m_block[ m_last + 1 ] = (char)m_currentChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2001,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2002,m_block[ m_last + 1 ] = (char)m_currentChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2003,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2004,m_block[ m_last + 1 ] = (char)m_currentChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2005,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2006,default:
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2007,m_inUse[ m_runLength - 4 ] = true;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2008,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2009,m_block[ m_last + 1 ] = (char)m_currentChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2010,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2011,m_block[ m_last + 1 ] = (char)m_currentChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2012,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2013,m_block[ m_last + 1 ] = (char)m_currentChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2014,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2015,m_block[ m_last + 1 ] = (char)m_currentChar;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2016,m_last++;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2017,m_block[ m_last + 1 ] = (char)( m_runLength - 4 );
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2018,break;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2021,else
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2023,endBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2024,initBlock();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2025,writeRun();
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2029,private static class StackElem
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2031,int m_dd;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2032,int m_hh;
True,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,src/java/org/apache/commons/compress/compressors/bzip2/BZip2OutputStream.java,2033,int m_ll;
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,5,* you may not use this file except in compliance with the License.
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,6,* You may obtain a copy of the License at
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,13,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,14,* limitations under the License.
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,16,package org.apache.commons.compress.compressors.bzip2;
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,19,"* This package is based on the work done by Keiron Liddle, Aftex Software"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,20,* <keiron@aftexsw.com> to whom the Ant project is very grateful for his
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,21,* great code.
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,25,* A simple class the hold and calculate the CRC for sanity checking of the
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,26,* data.
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,28,"* @author <a href=""mailto:keiron@aftexsw.com"">Keiron Liddle</a>"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,30,class CRC
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,32,private static int[] CRC32_TABLE = new int[]
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,34,"0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,35,"0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,36,"0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,37,"0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,38,"0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,39,"0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,40,"0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,41,"0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,42,"0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,43,"0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,44,"0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,45,"0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,46,"0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,47,"0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,48,"0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,49,"0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,50,"0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,51,"0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,52,"0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,53,"0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,54,"0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,55,"0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,56,"0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,57,"0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,58,"0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,59,"0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,60,"0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,61,"0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,62,"0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,63,"0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,64,"0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,65,"0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,66,"0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,67,"0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,68,"0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,69,"0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,70,"0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,71,"0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,72,"0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,73,"0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,74,"0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,75,"0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,76,"0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,77,"0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,78,"0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,79,"0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,80,"0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,81,"0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,82,"0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,83,"0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,84,"0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,85,"0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,86,"0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,87,"0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,88,"0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,89,"0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,90,"0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,91,"0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,92,"0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,93,"0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,94,"0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,95,"0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,96,"0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,97,"0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4"
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,100,private int m_globalCrc;
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,102,protected CRC()
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,104,initialiseCRC();
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,107,int getFinalCRC()
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,109,return ~m_globalCrc;
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,112,void initialiseCRC()
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,114,m_globalCrc = 0xffffffff;
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,117,void updateCRC( final int inCh )
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,119,int temp = ( m_globalCrc >> 24 ) ^ inCh;
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,120,if( temp < 0 )
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,122,temp = 256 + temp;
True,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,src/java/org/apache/commons/compress/compressors/bzip2/CRC.java,124,m_globalCrc = ( m_globalCrc << 8 ) ^ CRC32_TABLE[ temp ];
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,14,* limitations under the License.
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,16,package org.apache.commons.compress;
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,18,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,21,* Test for Compress Utils
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,22,* @author christian.grobmeier
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,24,public class CompressUtilsTest extends TestCase {
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,26,public void testCompareByteArrays() {
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,27,"byte[] source = { 0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0 };"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,28,"byte[] match = { 0x0, 0x0, 0x0, 0x0, 0x0 };"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,30,"assertTrue(CompressUtils.compareByteArrays(source, match));"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,32,"byte[] match2 = { 0x0, 0x0, 0x0, 0x0, 0x10 };"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,33,"assertFalse(CompressUtils.compareByteArrays(source, match2));"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,35,"byte[] source3 = { 0x50, 0x4b, 0x03, 0x04, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0 };"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,36,"byte[] match3 = { 0x50, 0x4b, 0x03, 0x04};"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,37,"assertTrue(CompressUtils.compareByteArrays(source3, match3));"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,39,"byte[] source4 = { 0x50, 0x4b, 0x03, 0x04, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0,0x0, 0x0, 0x0, 0x0, 0x0 };"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,40,"byte[] match4 = { 0x52, 0x4b, 0x03, 0x04};"
True,src/test/org/apache/commons/compress/CompressUtilsTest.java,src/test/org/apache/commons/compress/CompressUtilsTest.java,41,"assertFalse(CompressUtils.compareByteArrays(source4, match4));"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,14,* limitations under the License.
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,17,package org.apache.commons.compress.archivers.tar;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,19,import java.io.BufferedInputStream;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,20,import java.io.File;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,21,import java.io.FileInputStream;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,22,import java.io.FileOutputStream;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,23,import java.io.IOException;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,24,import java.io.InputStream;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,25,import java.io.OutputStream;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,27,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,29,import org.apache.commons.compress.archivers.tar.TarEntry;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,30,import org.apache.commons.compress.archivers.tar.TarInputStream;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,33,* Test case for all tar resources.
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,35,* @todo Find V7 tar and do tests against it
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,36,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,37,* @version $Revision: 155439 $ $Date$
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,39,public final class TarTestCase
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,40,extends TestCase
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,42,private static final char SP = File.separatorChar;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,43,"private static final String BASE_DATA_NAME = ""data.txt"";"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,44,"private static final String LFN_PART = ""a-b-c-d-e-f-g-h-i-j/"";"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,45,private static final String LONG_FILE_NAME =
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,46,"LFN_PART + LFN_PART + LFN_PART + LFN_PART + LFN_PART + ""a"";"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,48,private static final String BASEDIR = calcBaseDir();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,50,private static final File BASEDIR_FILE = new File( BASEDIR );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,51,private static final File POSIX_TAR_FILE =
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,52,"new File( BASEDIR_FILE, ""posix.tar"" );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,53,//    private static final File V7_TAR_FILE =
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,54,"//        new File( BASEDIR_FILE, ""v7.tar"" );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,55,private static final File GNU_TAR_FILE =
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,56,"new File( BASEDIR_FILE, ""gnu.tar"" );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,57,private static final File DATA_FILE1 =
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,58,"new File( BASEDIR_FILE, BASE_DATA_NAME );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,59,"private static final String USER_NAME = ""avalon"";"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,60,"private static final String GROUP_NAME = ""excalibur"";"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,61,private static final long SIZE = DATA_FILE1.length();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,62,private static final int GROUP_ID = 0;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,63,private static final int USER_ID = 0;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,64,private static final int MODE = 0100000;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,65,private static final int MOD_TIME = 0;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,67,public TarTestCase()
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,69,"this( ""Tar Test Case"" );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,72,public TarTestCase( String name )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,74,super( name );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,77,private static String calcBaseDir()
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,79,final String name = TarTestCase.class.getName();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,80,final int size = name.length();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,81,final String filename =
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,82,"name.substring( 0, size - 11 ).replace( '.', SP );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,83,"return ""src"" + SP + ""test"" + SP +"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,84,SP + filename + SP;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,87,public void testReadPosixTar()
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,88,throws Exception
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,90,"compareTar( BASE_DATA_NAME, POSIX_TAR_FILE );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,93,public void testReadGnuTar()
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,94,throws Exception
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,96,"compareTar( LONG_FILE_NAME, GNU_TAR_FILE );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,99,public void testWritePosixTar()
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,100,throws Exception
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,102,"//final File temp = new File( BASEDIR_FILE, ""posix2.tar"" );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,103,"final File temp = File.createTempFile( ""delete-me"", ""tar"" );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,104,final FileOutputStream fileOutput = new FileOutputStream( temp );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,105,final TarOutputStream output = new TarOutputStream( fileOutput );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,106,//output.setBufferDebug( true );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,107,final TarEntry entry = new TarEntry( BASE_DATA_NAME );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,108,setupEntry( entry );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,109,output.putNextEntry( entry );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,111,final FileInputStream fileInput = new FileInputStream( DATA_FILE1 );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,112,output.copyEntryContents( fileInput );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,113,output.closeEntry();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,114,shutdownStream( fileInput );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,115,shutdownStream( output );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,116,shutdownStream( fileOutput );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,118,"assertTrue( ""Tar files Equal"", contentEquals( temp, POSIX_TAR_FILE ) );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,119,temp.delete();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,122,public void testWriteGnuTar()
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,123,throws Exception
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,125,"//final File temp = new File( BASEDIR_FILE, ""gnu2.tar"" );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,126,"final File temp = File.createTempFile( ""delete-me"", ""tar"" );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,127,final FileOutputStream fileOutput = new FileOutputStream( temp );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,128,final TarOutputStream output = new TarOutputStream( fileOutput );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,129,//output.setBufferDebug( true );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,130,output.setLongFileMode( TarOutputStream.LONGFILE_GNU );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,131,final TarEntry entry = new TarEntry( LONG_FILE_NAME );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,132,setupEntry( entry );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,133,output.putNextEntry( entry );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,135,final FileInputStream fileInput = new FileInputStream( DATA_FILE1 );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,136,output.copyEntryContents( fileInput );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,137,output.closeEntry();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,138,shutdownStream( fileInput );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,139,shutdownStream( output );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,140,shutdownStream( fileOutput );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,142,//Have to compare it this way as the contents will differ
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,143,//due to entry created for second part of name
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,144,"compareTar( LONG_FILE_NAME, temp );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,145,temp.delete();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,148,private void setupEntry( final TarEntry entry )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,150,entry.setModTime( MOD_TIME );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,151,entry.setSize( SIZE );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,152,entry.setUserID( USER_ID );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,153,entry.setGroupID( GROUP_ID );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,154,entry.setUserName( USER_NAME );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,155,entry.setGroupName( GROUP_NAME );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,156,entry.setMode( MODE );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,159,private void checkEntry( final TarEntry entry )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,161,"assertEquals( ""Entry size"", SIZE, entry.getSize() );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,162,"assertEquals( ""Entry User ID"", USER_ID, entry.getUserID() );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,163,"assertEquals( ""Entry Group ID"", GROUP_ID, entry.getGroupID() );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,164,"assertEquals( ""Entry User name"", USER_NAME, entry.getUserName() );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,165,"assertEquals( ""Entry group name"", GROUP_NAME, entry.getGroupName() );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,166,"assertEquals( ""Entry mode"", MODE, entry.getMode() );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,167,"assertEquals( ""Entry mode"", MOD_TIME, entry.getModTime().getTime() / 1000 );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,171,* Read tar entry with specified name from tar file1 and compare
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,172,* against data file DATA_FILE1.
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,174,* @param entryName the expected name of entry
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,175,* @param file1 the tar file comparing
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,176,* @throws IOException if an error occurs
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,178,"private void compareTar( final String entryName,"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,179,final File file1 )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,180,throws IOException
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,182,final FileInputStream fileInput = new FileInputStream( file1 );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,183,final TarInputStream input = new TarInputStream( fileInput );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,184,//input.setDebug( true );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,185,final TarEntry entry = input.getNextEntry();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,187,"assertEquals( ""Entry name"", entryName, entry.getName() );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,188,checkEntry( entry );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,190,"final File temp = new File( BASEDIR_FILE, entryName.length() + ""data.txt"" );//File.createTempFile( ""delete-me"", ""tar"" );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,191,final FileOutputStream output = new FileOutputStream( temp );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,192,input.copyEntryContents( output );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,193,shutdownStream( output );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,195,"assertNull( ""Next Entry"", input.getNextEntry() );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,197,shutdownStream( input );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,199,"assertTrue( ""Data Equals"", contentEquals( temp, DATA_FILE1 ) );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,200,temp.delete();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,204,* Compare the contents of two files to determine if they are equal or not.
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,206,* @param file1 the first file
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,207,* @param file2 the second file
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,208,"* @return true if the content of the files are equal or they both don't exist, false otherwise"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,210,"private boolean contentEquals( final File file1, final File file2 )"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,211,throws IOException
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,213,final boolean file1Exists = file1.exists();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,214,if( file1Exists != file2.exists() )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,216,return false;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,219,if( !file1Exists )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,221,// two not existing files are equal
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,222,return true;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,225,if( file1.isDirectory() || file2.isDirectory() )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,227,// don't want to compare directory contents
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,228,return false;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,231,InputStream input1 = null;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,232,InputStream input2 = null;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,233,try
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,235,input1 = new FileInputStream( file1 );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,236,input2 = new FileInputStream( file2 );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,237,"return contentEquals( input1, input2 );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,240,finally
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,242,shutdownStream( input1 );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,243,shutdownStream( input2 );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,248,* Compare the contents of two Streams to determine if they are equal or not.
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,250,* @param input1 the first stream
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,251,* @param input2 the second stream
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,252,"* @return true if the content of the streams are equal or they both don't exist, false otherwise"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,254,"private boolean contentEquals( final InputStream input1,"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,255,final InputStream input2 )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,256,throws IOException
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,258,final InputStream bufferedInput1 = new BufferedInputStream( input1 );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,259,final InputStream bufferedInput2 = new BufferedInputStream( input2 );
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,261,int count = 0;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,262,int ch = bufferedInput1.read();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,263,while( -1 != ch )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,265,final int ch2 = bufferedInput2.read();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,266,count++;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,267,if( ch != ch2 )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,269,"System.out.println( ""count = "" + count );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,270,"System.out.println( ""ch2 = "" + ch2 );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,271,"System.out.println( ""ch = "" + ch );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,272,return false;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,274,ch = bufferedInput1.read();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,277,final int ch2 = bufferedInput2.read();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,278,if( -1 != ch2 )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,280,return false;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,282,else
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,284,return true;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,288,private void shutdownStream( final InputStream input )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,290,if( null == input )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,292,return;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,295,try
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,297,input.close();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,299,catch( final IOException ioe )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,304,private void shutdownStream( final OutputStream output )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,306,if( null == output )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,308,return;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,311,try
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,313,output.close();
True,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java,315,catch( final IOException ioe )
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,14,* limitations under the License.
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,17,package org.apache.commons.compress.archivers.tar;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,19,import junit.framework.Test;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,20,import junit.framework.TestSuite;
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,23,* A basic test suite that tests all the tar package.
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,25,public class TarTestSuite
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,27,public static Test suite()
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,29,"final TestSuite suite = new TestSuite( ""Tar Utilities"" );"
True,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,src/test/org/apache/commons/compress/archivers/tar/TarTestSuite.java,30,return suite;
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,14,* limitations under the License.
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,17,package org.apache.commons.compress.archivers.zip;
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,19,import java.util.zip.ZipException;
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,21,import org.apache.commons.compress.archivers.zip.AsiExtraField;
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,22,import org.apache.commons.compress.archivers.zip.UnixStat;
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,24,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,27,* JUnit testcases AsiExtraField.
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,29,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,31,public class AsiExtraFieldTestCase
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,32,extends TestCase
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,33,implements UnixStat
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,35,public AsiExtraFieldTestCase( final String name )
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,37,super( name );
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,41,* Test file mode magic.
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,43,public void testModes()
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,45,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,46,field.setMode( 0123 );
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,47,"assertEquals( ""plain file"", 0100123, field.getMode() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,48,field.setDirectory( true );
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,49,"assertEquals( ""directory"", 040123, field.getMode() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,50,"field.setLinkedFile( ""test"" );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,51,"assertEquals( ""symbolic link"", 0120123, field.getMode() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,54,private AsiExtraField createField()
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,56,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,57,field.setMode( 0123 );
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,58,field.setUserID( 5 );
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,59,field.setGroupId( 6 );
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,60,return field;
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,63,public void testContent1()
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,65,final AsiExtraField field = createField();
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,66,final byte[] data = field.getLocalFileDataData();
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,68,"// CRC manually calculated, sorry"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,69,"final byte[] expect = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, // CRC"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,70,"0123, (byte)0x80, // mode"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,71,"0, 0, 0, 0, // link length"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,72,"5, 0, 6, 0};                        // uid, gid"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,73,"assertEquals( ""no link"", expect.length, data.length );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,74,for( int i = 0; i < expect.length; i++ )
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,76,"assertEquals( ""no link, byte "" + i, expect[ i ], data[ i ] );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,79,"field.setLinkedFile( ""test"" );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,82,public void testContent2()
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,84,final AsiExtraField field = createField();
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,85,"field.setLinkedFile( ""test"" );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,87,final byte[] data = field.getLocalFileDataData();
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,88,"final byte[] expect = new byte[]{0x75, (byte)0x8E, 0x41, (byte)0xFD, // CRC"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,89,"0123, (byte)0xA0, // mode"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,90,"4, 0, 0, 0, // link length"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,91,"5, 0, 6, 0, // uid, gid"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,92,"(byte)'t', (byte)'e', (byte)'s', (byte)'t'};"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,93,"assertEquals( ""no link"", expect.length, data.length );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,94,for( int i = 0; i < expect.length; i++ )
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,96,"assertEquals( ""no link, byte "" + i, expect[ i ], data[ i ] );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,101,public void testReparse1()
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,102,throws ZipException
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,104,"// CRC manually calculated, sorry"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,105,"final byte[] data = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, // CRC"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,106,"0123, (byte)0x80, // mode"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,107,"0, 0, 0, 0, // link length"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,108,"5, 0, 6, 0};                        // uid, gid"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,109,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,110,"field.parseFromLocalFileData( data, 0, data.length );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,112,"assertEquals( ""length plain file"", data.length,"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,113,field.getLocalFileDataLength().getValue() );
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,114,"assertTrue( ""plain file, no link"", !field.isLink() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,115,"assertTrue( ""plain file, no dir"", !field.isDirectory() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,116,"assertEquals( ""mode plain file"", FILE_FLAG | 0123, field.getMode() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,117,"assertEquals( ""uid plain file"", 5, field.getUserID() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,118,"assertEquals( ""gid plain file"", 6, field.getGroupID() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,121,public void testReparse2()
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,122,throws ZipException
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,124,"final byte[] data = new byte[]{0x75, (byte)0x8E, 0x41, (byte)0xFD, // CRC"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,125,"0123, (byte)0xA0, // mode"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,126,"4, 0, 0, 0, // link length"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,127,"5, 0, 6, 0, // uid, gid"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,128,"(byte)'t', (byte)'e', (byte)'s', (byte)'t'};"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,129,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,130,"field.parseFromLocalFileData( data, 0, data.length );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,131,"assertEquals( ""length link"", data.length,"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,132,field.getLocalFileDataLength().getValue() );
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,133,"assertTrue( ""link, is link"", field.isLink() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,134,"assertTrue( ""link, no dir"", !field.isDirectory() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,135,"assertEquals( ""mode link"", LINK_FLAG | 0123, field.getMode() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,136,"assertEquals( ""uid link"", 5, field.getUserID() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,137,"assertEquals( ""gid link"", 6, field.getGroupID() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,138,"assertEquals( ""test"", field.getLinkedFile() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,141,public void testReparse3()
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,142,throws ZipException
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,144,"final byte[] data = new byte[]{(byte)0x8E, 0x01, (byte)0xBF, (byte)0x0E, // CRC"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,145,"0123, (byte)0x40, // mode"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,146,"0, 0, 0, 0, // link"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,147,"5, 0, 6, 0};                          // uid, gid"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,148,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,149,"field.parseFromLocalFileData( data, 0, data.length );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,150,"assertEquals( ""length dir"", data.length,"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,151,field.getLocalFileDataLength().getValue() );
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,152,"assertTrue( ""dir, no link"", !field.isLink() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,153,"assertTrue( ""dir, is dir"", field.isDirectory() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,154,"assertEquals( ""mode dir"", DIR_FLAG | 0123, field.getMode() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,155,"assertEquals( ""uid dir"", 5, field.getUserID() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,156,"assertEquals( ""gid dir"", 6, field.getGroupID() );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,159,public void testReparse4()
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,160,throws Exception
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,162,"final byte[] data = new byte[]{0, 0, 0, 0, // bad CRC"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,163,"0123, (byte)0x40, // mode"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,164,"0, 0, 0, 0, // link"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,165,"5, 0, 6, 0};                          // uid, gid"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,166,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,167,try
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,169,"field.parseFromLocalFileData( data, 0, data.length );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,170,"fail( ""should raise bad CRC exception"" );"
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,172,catch( Exception e )
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,174,"assertEquals( ""bad CRC checksum 0 instead of ebf018e"","
True,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,src/test/org/apache/commons/compress/archivers/zip/AsiExtraFieldTestCase.java,175,e.getMessage() );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,14,* limitations under the License.
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,17,package org.apache.commons.compress.archivers.zip;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,19,import org.apache.commons.compress.archivers.zip.AsiExtraField;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,20,import org.apache.commons.compress.archivers.zip.ExtraFieldUtils;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,21,import org.apache.commons.compress.archivers.zip.UnixStat;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,22,import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,23,import org.apache.commons.compress.archivers.zip.ZipExtraField;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,24,import org.apache.commons.compress.archivers.zip.ZipShort;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,26,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,29,* JUnit testcases ExtraFieldUtils.
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,31,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,33,public class ExtraFieldUtilsTestCase
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,34,extends TestCase
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,35,implements UnixStat
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,37,private AsiExtraField m_field;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,38,private UnrecognizedExtraField m_dummy;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,39,private byte[] m_data;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,40,private byte[] m_local;
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,42,public ExtraFieldUtilsTestCase( final String name )
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,44,super( name );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,47,public void setUp()
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,49,m_field = new AsiExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,50,m_field.setMode( 0755 );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,51,m_field.setDirectory( true );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,52,m_dummy = new UnrecognizedExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,53,m_dummy.setHeaderID( new ZipShort( 1 ) );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,54,m_dummy.setLocalFileDataData( new byte[ 0 ] );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,55,m_dummy.setCentralDirectoryData( new byte[]{0} );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,57,m_local = m_field.getLocalFileDataData();
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,58,final byte[] dummyLocal = m_dummy.getLocalFileDataData();
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,59,m_data = new byte[ 4 + m_local.length + 4 + dummyLocal.length ];
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,60,"System.arraycopy( m_field.getHeaderID().getBytes(), 0, m_data, 0, 2 );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,61,"System.arraycopy( m_field.getLocalFileDataLength().getBytes(), 0, m_data, 2, 2 );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,62,"System.arraycopy( m_local, 0, m_data, 4, m_local.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,63,"System.arraycopy( m_dummy.getHeaderID().getBytes(), 0, m_data,"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,64,"4 + m_local.length, 2 );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,65,"System.arraycopy( m_dummy.getLocalFileDataLength().getBytes(), 0, m_data,"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,66,"4 + m_local.length + 2, 2 );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,67,"System.arraycopy( dummyLocal, 0, m_data,"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,68,"4 + m_local.length + 4, dummyLocal.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,73,* test parser.
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,75,public void testParse() throws Exception
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,77,final ZipExtraField[] extraField = ExtraFieldUtils.parse( m_data );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,78,"assertEquals( ""number of fields"", 2, extraField.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,79,"assertTrue( ""type field 1"", extraField[ 0 ] instanceof AsiExtraField );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,80,"assertEquals( ""mode field 1"", 040755,"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,81,( (AsiExtraField)extraField[ 0 ] ).getMode() );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,82,"assertTrue( ""type field 2"", extraField[ 1 ] instanceof UnrecognizedExtraField );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,83,"assertEquals( ""data length field 2"", 0,"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,84,extraField[ 1 ].getLocalFileDataLength().getValue() );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,86,final byte[] data2 = new byte[ m_data.length - 1 ];
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,87,"System.arraycopy( m_data, 0, data2, 0, data2.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,88,try
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,90,ExtraFieldUtils.parse( data2 );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,91,"fail( ""data should be invalid"" );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,93,catch( Exception e )
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,95,"assertEquals( ""message"","
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,96,"""data starting at "" + ( 4 + m_local.length ) + "" is in unknown format"","
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,97,e.getMessage() );
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,102,* Test merge methods
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,104,public void testMerge()
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,106,final byte[] local =
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,107,"ExtraFieldUtils.mergeLocalFileDataData( new ZipExtraField[]{m_field, m_dummy} );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,108,"assertEquals( ""local length"", m_data.length, local.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,109,for( int i = 0; i < local.length; i++ )
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,111,"assertEquals( ""local byte "" + i, m_data[ i ], local[ i ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,114,final byte[] dummyCentral = m_dummy.getCentralDirectoryData();
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,115,final byte[] data2 = new byte[ 4 + m_local.length + 4 + dummyCentral.length ];
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,116,"System.arraycopy( m_data, 0, data2, 0, 4 + m_local.length + 2 );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,117,"System.arraycopy( m_dummy.getCentralDirectoryLength().getBytes(), 0,"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,118,"data2, 4 + m_local.length + 2, 2 );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,119,"System.arraycopy( dummyCentral, 0, data2,"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,120,"4 + m_local.length + 4, dummyCentral.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,122,final byte[] central =
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,123,"ExtraFieldUtils.mergeCentralDirectoryData( new ZipExtraField[]{m_field, m_dummy} );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,124,"assertEquals( ""central length"", data2.length, central.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,125,for( int i = 0; i < central.length; i++ )
True,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTestCase.java,127,"assertEquals( ""central byte "" + i, data2[ i ], central[ i ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,14,* limitations under the License.
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,17,package org.apache.commons.compress.archivers.zip;
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,19,import java.util.NoSuchElementException;
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,21,import org.apache.commons.compress.archivers.zip.AsiExtraField;
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,22,import org.apache.commons.compress.archivers.zip.UnrecognizedExtraField;
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,23,import org.apache.commons.compress.archivers.zip.ZipEntry;
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,24,import org.apache.commons.compress.archivers.zip.ZipExtraField;
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,25,import org.apache.commons.compress.archivers.zip.ZipShort;
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,27,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,30,* JUnit testcases ZipEntry.
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,32,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,34,public class ZipEntryTestCase
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,35,extends TestCase
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,37,public ZipEntryTestCase( final String name )
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,39,super( name );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,43,* test handling of extra fields
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,45,public void testExtraFields()
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,47,final AsiExtraField field = createField();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,48,final UnrecognizedExtraField extraField = createExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,50,"final ZipEntry entry = new ZipEntry( ""test/"" );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,51,"entry.setExtraFields( new ZipExtraField[]{field, extraField} );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,52,final byte[] data1 = entry.getExtra();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,53,ZipExtraField[] result = entry.getExtraFields();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,54,"assertEquals( ""first pass"", 2, result.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,55,"assertSame( field, result[ 0 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,56,"assertSame( extraField, result[ 1 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,58,UnrecognizedExtraField u2 = new UnrecognizedExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,59,u2.setHeaderID( new ZipShort( 1 ) );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,60,u2.setLocalFileDataData( new byte[]{1} );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,62,entry.addExtraField( u2 );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,63,byte[] data2 = entry.getExtra();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,64,result = entry.getExtraFields();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,65,"assertEquals( ""second pass"", 2, result.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,66,"assertSame( field, result[ 0 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,67,"assertSame( u2, result[ 1 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,68,"assertEquals( ""length second pass"", data1.length + 1, data2.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,70,UnrecognizedExtraField u3 = new UnrecognizedExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,71,u3.setHeaderID( new ZipShort( 2 ) );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,72,u3.setLocalFileDataData( new byte[]{1} );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,73,entry.addExtraField( u3 );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,74,result = entry.getExtraFields();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,75,"assertEquals( ""third pass"", 3, result.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,77,entry.removeExtraField( new ZipShort( 1 ) );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,78,byte[] data3 = entry.getExtra();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,79,result = entry.getExtraFields();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,80,"assertEquals( ""fourth pass"", 2, result.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,81,"assertSame( field, result[ 0 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,82,"assertSame( u3, result[ 1 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,83,"assertEquals( ""length fourth pass"", data2.length, data3.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,85,try
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,87,entry.removeExtraField( new ZipShort( 1 ) );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,88,"fail( ""should be no such element"" );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,90,catch( final NoSuchElementException nse )
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,95,private UnrecognizedExtraField createExtraField()
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,97,UnrecognizedExtraField extraField = new UnrecognizedExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,98,extraField.setHeaderID( new ZipShort( 1 ) );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,99,extraField.setLocalFileDataData( new byte[ 0 ] );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,100,return extraField;
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,103,private AsiExtraField createField()
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,105,final AsiExtraField field = new AsiExtraField();
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,106,field.setDirectory( true );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,107,field.setMode( 0755 );
True,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipEntryTestCase.java,108,return field;
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,14,* limitations under the License.
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,17,package org.apache.commons.compress.archivers.zip;
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,19,import org.apache.commons.compress.archivers.zip.ZipLong;
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,24,* JUnit 3 testcases for org.apache.tools.zip.ZipLong.
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,26,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,28,public class ZipLongTestCase
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,29,extends TestCase
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,32,public ZipLongTestCase( final String name )
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,34,super( name );
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,38,* Test conversion to bytes.
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,40,public void testToBytes()
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,42,final ZipLong zipLong = new ZipLong( 0x12345678 );
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,43,final byte[] result = zipLong.getBytes();
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,44,"assertEquals( ""length getBytes"", 4, result.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,45,"assertEquals( ""first byte getBytes"", 0x78, result[ 0 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,46,"assertEquals( ""second byte getBytes"", 0x56, result[ 1 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,47,"assertEquals( ""third byte getBytes"", 0x34, result[ 2 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,48,"assertEquals( ""fourth byte getBytes"", 0x12, result[ 3 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,52,* Test conversion from bytes.
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,54,public void testFromBytes()
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,56,"final byte[] value = new byte[]{0x78, 0x56, 0x34, 0x12};"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,57,final ZipLong zipLong = new ZipLong( value );
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,58,"assertEquals( ""value from bytes"", 0x12345678, zipLong.getValue() );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,62,* Test the contract of the equals method.
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,64,public void testEquals()
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,66,final ZipLong zipLong1 = new ZipLong( 0x12345678 );
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,67,final ZipLong zipLong2 = new ZipLong( 0x12345678 );
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,68,final ZipLong zipLong3 = new ZipLong( 0x87654321 );
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,70,"assertTrue( ""reflexive"", zipLong1.equals( zipLong1 ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,72,"assertTrue( ""works"", zipLong1.equals( zipLong2 ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,73,"assertTrue( ""works, part two"", !zipLong1.equals( zipLong3 ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,75,"assertTrue( ""symmetric"", zipLong2.equals( zipLong1 ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,77,"assertTrue( ""null handling"", !zipLong1.equals( null ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,78,"assertTrue( ""non ZipLong handling"", !zipLong1.equals( new Integer( 0x1234 ) ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,82,* Test sign handling.
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,84,public void testSign()
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,86,final ZipLong zipLong =
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,87,"new ZipLong( new byte[]{(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF} );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipLongTestCase.java,88,"assertEquals( 0x00000000FFFFFFFFl, zipLong.getValue() );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,14,* limitations under the License.
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,17,package org.apache.commons.compress.archivers.zip;
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,19,import org.apache.commons.compress.archivers.zip.ZipShort;
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,24,* JUnit 3 testcases for org.apache.tools.zip.ZipShort.
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,26,"* @author <a href=""mailto:stefan.bodewig@epost.de"">Stefan Bodewig</a>"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,28,public class ZipShortTestCase
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,29,extends TestCase
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,31,public ZipShortTestCase( String name )
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,33,super( name );
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,37,* Test conversion to bytes.
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,39,public void testToBytes()
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,41,final ZipShort zipShort = new ZipShort( 0x1234 );
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,42,byte[] result = zipShort.getBytes();
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,43,"assertEquals( ""length getBytes"", 2, result.length );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,44,"assertEquals( ""first byte getBytes"", 0x34, result[ 0 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,45,"assertEquals( ""second byte getBytes"", 0x12, result[ 1 ] );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,49,* Test conversion from bytes.
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,51,public void testFromBytes()
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,53,"byte[] val = new byte[]{0x34, 0x12};"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,54,final ZipShort zipShort = new ZipShort( val );
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,55,"assertEquals( ""value from bytes"", 0x1234, zipShort.getValue() );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,59,* Test the contract of the equals method.
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,61,public void testEquals()
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,63,final ZipShort zipShort = new ZipShort( 0x1234 );
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,64,final ZipShort zipShort2 = new ZipShort( 0x1234 );
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,65,final ZipShort zipShort3 = new ZipShort( 0x5678 );
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,67,"assertTrue( ""reflexive"", zipShort.equals( zipShort ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,69,"assertTrue( ""works"", zipShort.equals( zipShort2 ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,70,"assertTrue( ""works, part two"", !zipShort.equals( zipShort3 ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,72,"assertTrue( ""symmetric"", zipShort2.equals( zipShort ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,74,"assertTrue( ""null handling"", !zipShort.equals( null ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,75,"assertTrue( ""non ZipShort handling"", !zipShort.equals( new Integer( 0x1234 ) ) );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,79,* Test sign handling.
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,81,public void testSign()
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,83,"final ZipShort zipShort = new ZipShort( new byte[]{(byte)0xFF, (byte)0xFF} );"
True,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,src/test/org/apache/commons/compress/archivers/zip/ZipShortTestCase.java,84,"assertEquals( 0x0000FFFF, zipShort.getValue() );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,2,"* Copyright 2002,2004 The Apache Software Foundation."
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,5,* you may not use this file except in compliance with the License.
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,6,* You may obtain a copy of the License at
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,8,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,13,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,14,* limitations under the License.
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,17,package org.apache.commons.compress.compressors.bzip2;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,19,import java.io.BufferedInputStream;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,20,import java.io.File;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,21,import java.io.FileInputStream;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,22,import java.io.FileOutputStream;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,23,import java.io.IOException;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,24,import java.io.InputStream;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,25,import java.io.OutputStream;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,26,import junit.framework.TestCase;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,28,import org.apache.commons.compress.CompressUtils;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,29,import org.apache.commons.compress.compressors.bzip2.BZip2InputStream;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,30,import org.apache.commons.compress.compressors.bzip2.BZip2OutputStream;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,33,* A test the stress tested the BZip implementation to verify
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,34,* that it behaves correctly.
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,36,"* @author <a href=""mailto:peter@apache.org"">Peter Donald</a>"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,37,* @version $Revision: 280140 $ $Date$
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,39,public class BzipTestCase
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,40,extends TestCase
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,42,"private static final byte[] HEADER = new byte[]{(byte)'B', (byte)'Z'};"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,44,public BzipTestCase( final String name )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,46,super( name );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,49,public void testBzipOutputStream()
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,50,throws Exception
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,52,"final InputStream input = getInputStream( ""asf-logo-huge.tar"" );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,53,"final File outputFile = getOutputFile( "".tar.bz2"" );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,54,final OutputStream output = new FileOutputStream( outputFile );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,55,final BZip2OutputStream packedOutput = getPackedOutput( output );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,56,"CompressUtils.copy( input, packedOutput );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,57,shutdownStream( input );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,58,shutdownStream( packedOutput );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,59,shutdownStream( output );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,60,"compareContents( ""asf-logo-huge.tar.bz2"", outputFile );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,61,forceDelete( outputFile );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,64,private void forceDelete( final File outputFile ) throws IOException
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,66,if( !outputFile.delete() )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,68,"final String message = ""File "" + outputFile + "" unable to be deleted."";"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,69,throw new IOException( message );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,73,public void testBzipInputStream()
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,74,throws Exception
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,76,"final InputStream input = getInputStream( ""asf-logo-huge.tar.bz2"" );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,77,"final File outputFile = getOutputFile( "".tar"" );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,78,final OutputStream output = new FileOutputStream( outputFile );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,79,final BZip2InputStream packedInput = getPackedInput( input );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,80,"CompressUtils.copy( packedInput, output );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,81,shutdownStream( input );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,82,shutdownStream( packedInput );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,83,shutdownStream( output );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,84,"compareContents( ""asf-logo-huge.tar"", outputFile );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,85,forceDelete( outputFile );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,88,public void testCBZip2InputStreamClose()
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,89,throws Exception
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,91,"final InputStream input = getInputStream( ""asf-logo-huge.tar.bz2"" );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,92,"final File outputFile = getOutputFile( "".tar.bz2"" );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,93,final OutputStream output = new FileOutputStream( outputFile );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,94,"CompressUtils.copy( input, output );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,95,shutdownStream( input );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,96,shutdownStream( output );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,97,"assertTrue( ""Check output file exists."" , outputFile.exists() );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,98,final InputStream input2 = new FileInputStream( outputFile );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,99,final InputStream packedInput = getPackedInput( input2 );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,100,shutdownStream( packedInput );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,101,try
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,103,input2.read();
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,104,"assertTrue(""Source input stream is still opened."", false);"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,105,} catch ( Exception e )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,107,// Read closed stream.
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,109,forceDelete( outputFile );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,113,* Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,115,"private void copy( final InputStream input,"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,116,final OutputStream output )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,117,throws IOException
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,119,final byte[] buffer = new byte[ 8024 ];
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,120,int n = 0;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,121,while( -1 != ( n = input.read( buffer ) ) )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,123,"output.write( buffer, 0, n );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,127,"private void compareContents( final String initial, final File generated )"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,128,throws Exception
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,130,final InputStream input1 = getInputStream( initial );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,131,final InputStream input2 = new FileInputStream( generated );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,132,"final boolean test = contentEquals( input1, input2 );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,133,shutdownStream( input1 );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,134,shutdownStream( input2 );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,135,"assertTrue( ""Contents of "" + initial + "" matches generated version "" + generated, test );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,138,private BZip2InputStream getPackedInput( final InputStream input )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,139,throws IOException
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,141,final int b1 = input.read();
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,142,final int b2 = input.read();
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,143,"assertEquals( ""Equal header byte1"", b1, 'B' );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,144,"assertEquals( ""Equal header byte2"", b2, 'Z' );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,145,return new BZip2InputStream( input );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,148,private BZip2OutputStream getPackedOutput( final OutputStream output )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,149,throws IOException
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,151,output.write( HEADER );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,152,return new BZip2OutputStream( output );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,155,private File getOutputFile( final String postfix )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,156,throws IOException
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,158,"final File cwd = new File( ""."" );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,159,"return File.createTempFile( ""ant-test"", postfix, cwd );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,162,private InputStream getInputStream( final String resource )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,163,throws Exception
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,165,final String filename =
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,166,"""src"" + File.separator + ""test"" + File.separator +"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,167,"getClass().getName().replace( '.', File.separatorChar );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,168,final String path = getPath( filename );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,169,"final File input = new File( path, resource );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,170,return new FileInputStream( input );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,171,//        final ClassLoader loader = getClass().getClassLoader();
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,172,//        return loader.getResourceAsStream( resource );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,176,* Compare the contents of two Streams to determine if they are equal or not.
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,178,* @param input1 the first stream
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,179,* @param input2 the second stream
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,180,"* @return true if the content of the streams are equal or they both don't exist, false otherwise"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,182,"private boolean contentEquals( final InputStream input1,"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,183,final InputStream input2 )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,184,throws IOException
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,186,final InputStream bufferedInput1 = new BufferedInputStream( input1 );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,187,final InputStream bufferedInput2 = new BufferedInputStream( input2 );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,189,int ch = bufferedInput1.read();
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,190,while( -1 != ch )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,192,final int ch2 = bufferedInput2.read();
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,193,if( ch != ch2 )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,195,return false;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,197,ch = bufferedInput1.read();
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,200,final int ch2 = bufferedInput2.read();
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,201,if( -1 != ch2 )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,203,return false;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,205,else
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,207,return true;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,211,private String getPath( final String filepath )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,213,final int index = filepath.lastIndexOf( File.separatorChar );
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,214,if( -1 == index )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,216,"return """";"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,218,else
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,220,"return filepath.substring( 0, index );"
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,225,* Unconditionally close an <code>OutputStream</code>.
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,226,"* Equivalent to {@link java.io.OutputStream#close()}, except any exceptions will be ignored."
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,227,* @param output A (possibly null) OutputStream
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,229,private static void shutdownStream( final OutputStream output )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,231,if( null == output )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,233,return;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,236,try
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,238,output.close();
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,240,catch( final IOException ioe )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,246,* Unconditionally close an <code>InputStream</code>.
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,247,"* Equivalent to {@link InputStream#close()}, except any exceptions will be ignored."
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,248,* @param input A (possibly null) InputStream
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,250,private static void shutdownStream( final InputStream input )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,252,if( null == input )
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,254,return;
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,257,try
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,259,input.close();
True,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java,261,catch( final IOException ioe )

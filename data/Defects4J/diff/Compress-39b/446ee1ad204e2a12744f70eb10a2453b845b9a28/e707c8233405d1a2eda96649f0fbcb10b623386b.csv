is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,33,"nputStream decode(final InputStream in, long uncompressedLength,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,33,"InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,49,"hrow new IOException(""Salt size + IV size too long"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,49,"throw new IOException(""Salt size + IV size too long in "" + archiveName);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,57,hrow new PasswordRequiredException();
True,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java,57,throw new PasswordRequiredException(archiveName);
False,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,67,"bstract InputStream decode(final InputStream in, long uncomressedLength,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,67,"abstract InputStream decode(final String archiveName,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java,68,"final InputStream in, long uncomressedLength,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,70,"tatic InputStream addDecoder(final InputStream is, long uncompressedLength,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,70,"static InputStream addDecoder(final String archiveName, final InputStream is, long uncompressedLength,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,75,rrays.toString(coder.decompressionMethodId));
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,75,Arrays.toString(coder.decompressionMethodId)
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,76,"+ "" used in "" + archiveName);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,77,"eturn cb.decode(is, uncompressedLength, coder, password);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,78,"return cb.decode(archiveName, is, uncompressedLength, coder, password);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,91,"nputStream decode(final InputStream in, long uncompressedLength,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,92,"InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,103,"nputStream decode(final InputStream in, long uncompressedLength,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,104,"InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,111,"hrow new IOException(""Dictionary larger than 4GiB maximum size"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,112,"throw new IOException(""Dictionary larger than 4GiB maximum size used in "" + archiveName);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,124,"nputStream decode(final InputStream in, long uncompressedLength,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,125,"InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,129,"OException ex = new IOException(""BCJ filter needs XZ for Java > 1.4 - see """
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,130,"IOException ex = new IOException(""BCJ filter used in "" + archiveName"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,131,"+ "" needs XZ for Java > 1.4 - see """
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,152,"nputStream decode(final InputStream in, long uncompressedLength,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,154,"InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,171,"nputStream decode(final InputStream in, long uncompressedLength,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java,173,"InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,33,"nputStream decode(final InputStream in, long uncompressedLength,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java,33,"InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,35,"nputStream decode(final InputStream in, long uncompressedLength,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java,35,"InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java,src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java,29,ublic PasswordRequiredException() {
False,src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java,src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java,30,"uper(""Cannot read encrypted files without a password"");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java,src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java,29,public PasswordRequiredException(String archiveName) {
True,src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java,src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java,30,"super(""Cannot read encrypted archive "" + archiveName + "" without a password."");"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,70,private final String fileName;
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,95,this.fileName = filename.getAbsolutePath();
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,279,"nputStreamStack = Coders.addDecoder(inputStreamStack, folder.getUnpackSizeForCoder(coder),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,280,"oder, password);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,281,"inputStreamStack = Coders.addDecoder(fileName, inputStreamStack,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,282,"folder.getUnpackSizeForCoder(coder), coder, password);"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,862,"nputStreamStack = Coders.addDecoder(inputStreamStack, folder.getUnpackSizeForCoder(coder),"
False,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,863,"oder, password);"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,864,"inputStreamStack = Coders.addDecoder(fileName, inputStreamStack,"
True,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java,865,"folder.getUnpackSizeForCoder(coder), coder, password);"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,63,ublic void test7zDecryptUnarchiveWithoutPassword() throws Exception {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,64,ry {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,65,"est7zUnarchive(getFile(""bla.encrypted.7z""), SevenZMethod.LZMA);"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,66,"ail(""Expected a PasswordRequiredException"");"
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,67, catch (PasswordRequiredException ex) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,68,/ expected
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,80, catch (IOException ex) {
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,81,"ssertEquals(""Cannot read encrypted files without a password"","
False,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,82,x.getMessage());
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,71,} catch (PasswordRequiredException ex) {
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,72,String msg = ex.getMessage();
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,73,"assertTrue(""Should start with whining about being unable to decrypt"","
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,74,"msg.startsWith(""Cannot read encrypted archive ""));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,75,"assertTrue(""Should finish the sentence properly"","
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,76,"msg.endsWith("" without a password.""));"
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,77,"assertTrue(""Should contain archive's name"","
True,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,78,"msg.contains(""bla.encrypted.7z""));"

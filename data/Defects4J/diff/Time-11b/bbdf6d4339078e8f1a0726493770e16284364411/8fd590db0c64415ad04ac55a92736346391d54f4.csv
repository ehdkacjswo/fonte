is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,61,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,446,* Gets a copy of this date with the specified field set to a new value.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,447,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,448,"* For example, if the field type is <code>minuteOfHour</code> then the day"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,449,* would be changed in the returned instance.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,450,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,451,* These three lines are equivalent:
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,452,* <pre>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,453,"* TimeOfDay updated = tod.withField(DateTimeFieldType.minuteOfHour(), 6);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,454,* TimeOfDay updated = tod.minuteOfHour().setCopy(6);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,455,* TimeOfDay updated = tod.property(DateTimeFieldType.minuteOfHour()).setCopy(6);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,456,* </pre>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,458,"* @param fieldType  the field type to set, not null"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,459,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,460,* @return a copy of this instance with the field set
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,461,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,463,"public TimeOfDay withField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,464,if (value == 0) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,465,return this;
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,467,int index = indexOfSupported(fieldType);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,468,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,469,"newValues = getField(index).set(this, index, newValues, value);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,470,"return new TimeOfDay(this, newValues);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,474,* Gets a copy of this date with the value of the specified field increased.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,475,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,476,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,477,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,478,* These three lines are equivalent:
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,479,* <pre>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,480,"* TimeOfDay added = tod.withField(DateTimeFieldType.minuteOfHour(), 6);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,481,* TimeOfDay added = tod.minuteOfHour().addToCopy(6);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,482,* TimeOfDay added = tod.property(DateTimeFieldType.minuteOfHour()).addToCopy(6);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,483,* </pre>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,485,"* @param fieldType  the field type to add to, not null"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,486,* @param amount  the amount to add
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,487,* @return a copy of this instance with the field updated
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,488,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,489,* @throws ArithmeticException if the new datetime exceeds the capacity
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,491,"public TimeOfDay withFieldAdded(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,492,if (amount == 0) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,493,return this;
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,495,int index = indexOfSupported(fieldType);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,496,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,497,"newValues = getField(index).add(this, index, newValues, amount);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,498,"return new TimeOfDay(this, newValues);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,502,* Gets a copy of this date with the specified period added.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,503,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,504,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,505,* Fields in the period that aren't present in the partial are ignored.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,506,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,507,* To add or subtract on a single field see
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,508,"* {@link #withFieldAdded(DurationFieldType, int)}."
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,510,"* @param period  the period to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,511,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,512,* @return a copy of this instance with the period added
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,513,* @throws ArithmeticException if the new datetime exceeds the capacity
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,515,"public TimeOfDay withPeriodAdded(ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,516,if (period == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,517,return this;
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,519,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,520,for (int i = 0; i < period.size(); i++) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,521,DurationFieldType fieldType = period.getFieldType(i);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,522,int index = indexOf(fieldType);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,523,if (index >= 0) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,524,"newValues = getField(index).add(this, index, newValues,"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,525,"FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,528,"return new TimeOfDay(this, newValues);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,532,* Gets a copy of this instance with the specified period added.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,533,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,534,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,535,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,536,* The following two lines are identical in effect:
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,537,* <pre>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,538,* TimeOfDay added = tod.minuteOfHour().addToCopy(6);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,539,* TimeOfDay added = tod.plus(Period.days(6));
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,540,* </pre>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,542,"* @param period  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,543,* @return a copy of this instance with the period added
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,544,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,546,public TimeOfDay plus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,547,"return withPeriodAdded(period, 1);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,551,* Gets a copy of this instance with the specified period take away.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,552,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,553,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,554,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,555,* The following lines are identical in effect:
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,556,* <pre>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,557,* TimeOfDay added = tod.minuteOfHour().addToCopy(-6);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,558,* TimeOfDay added = tod.minus(Period.days(6));
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,559,* TimeOfDay added = tod.plus(Period.days(-6));
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,560,* </pre>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,562,* @param period  the period to reduce this instant by
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,563,* @return a copy of this instance with the period taken away
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,564,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,566,public TimeOfDay minus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,567,"return withPeriodAdded(period, -1);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,583,* Converts this partial to a full datetime using the default time zone
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,584,* setting the time fields from this instance and the date fields from
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,585,* the current time.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,587,* @return this date as a datetime with the time as the current time
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,589,public DateTime toDateTimeToday() {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,590,return toDateTimeToday(null);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,594,* Converts this partial to a full datetime using the specified time zone
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,595,* setting the time fields from this instance and the date fields from
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,596,* the current time.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,597,* <p>
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,598,* This method uses the chronology from this instance plus the time zone
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,599,* specified.
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,601,"* @param zone  the zone to use, null means default"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,602,* @return this date as a datetime with the time as the current time
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,604,public DateTime toDateTimeToday(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,605,Chronology chrono = getChronology().withZone(zone);
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,606,long instantMillis = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,607,"long resolved = chrono.set(this, instantMillis);"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,608,"return new DateTime(resolved, chrono);"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,584,ublic ReadablePartial getReadablePartial() {
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,740,protected ReadablePartial getReadablePartial() {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,61,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,338,* Gets a copy of this date with the specified field set to a new value.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,339,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,340,"* For example, if the field type is <code>dayOfMonth</code> then the day"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,341,* would be changed in the returned instance.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,342,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,343,* These three lines are equivalent:
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,344,* <pre>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,345,"* YearMonthDay updated = ymd.withField(DateTimeFieldType.dayOfMonth(), 6);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,346,* YearMonthDay updated = ymd.dayOfMonth().setCopy(6);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,347,* YearMonthDay updated = ymd.property(DateTimeFieldType.dayOfMonth()).setCopy(6);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,348,* </pre>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,350,"* @param fieldType  the field type to set, not null"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,351,* @param value  the value to set
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,352,* @return a copy of this instance with the field set
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,353,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,355,"public YearMonthDay withField(DateTimeFieldType fieldType, int value) {"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,356,if (value == 0) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,357,return this;
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,359,int index = indexOfSupported(fieldType);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,360,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,361,"newValues = getField(index).set(this, index, newValues, value);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,362,"return new YearMonthDay(this, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,366,* Gets a copy of this date with the value of the specified field increased.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,367,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,368,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,369,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,370,* These three lines are equivalent:
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,371,* <pre>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,372,"* YearMonthDay added = ymd.withField(DateTimeFieldType.dayOfMonth(), 6);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,373,* YearMonthDay added = ymd.dayOfMonth().addToCopy(6);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,374,* YearMonthDay added = ymd.property(DateTimeFieldType.dayOfMonth()).addToCopy(6);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,375,* </pre>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,377,"* @param fieldType  the field type to add to, not null"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,378,* @param amount  the amount to add
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,379,* @return a copy of this instance with the field updated
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,380,* @throws IllegalArgumentException if the value is null or invalid
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,381,* @throws ArithmeticException if the new datetime exceeds the capacity
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,383,"public YearMonthDay withFieldAdded(DurationFieldType fieldType, int amount) {"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,384,if (amount == 0) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,385,return this;
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,387,int index = indexOfSupported(fieldType);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,388,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,389,"newValues = getField(index).add(this, index, newValues, amount);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,390,"return new YearMonthDay(this, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,394,* Gets a copy of this date with the specified period added.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,395,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,396,"* If the addition is zero, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,397,* Fields in the period that aren't present in the partial are ignored.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,398,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,399,* To add or subtract on a single field see
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,400,"* {@link #withFieldAdded(DurationFieldType, int)}."
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,402,"* @param period  the period to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,403,"* @param scalar  the amount of times to add, such as -1 to subtract once"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,404,* @return a copy of this instance with the period added
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,405,* @throws ArithmeticException if the new datetime exceeds the capacity
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,407,"public YearMonthDay withPeriodAdded(ReadablePeriod period, int scalar) {"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,408,if (period == null || scalar == 0) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,409,return this;
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,411,int[] newValues = getValues();
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,412,for (int i = 0; i < period.size(); i++) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,413,DurationFieldType fieldType = period.getFieldType(i);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,414,int index = indexOf(fieldType);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,415,if (index >= 0) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,416,"newValues = getField(index).add(this, index, newValues,"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,417,"FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,420,"return new YearMonthDay(this, newValues);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,424,* Gets a copy of this instance with the specified period added.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,425,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,426,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,427,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,428,* The following two lines are identical in effect:
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,429,* <pre>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,430,* YearMonthDay added = ymd.dayOfMonth().addToCopy(6);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,431,* YearMonthDay added = ymd.plus(Period.days(6));
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,432,* </pre>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,434,"* @param period  the duration to add to this one, null means zero"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,435,* @return a copy of this instance with the period added
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,436,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,438,public YearMonthDay plus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,439,"return withPeriodAdded(period, 1);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,443,* Gets a copy of this instance with the specified period take away.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,444,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,445,"* If the amount is zero or null, then <code>this</code> is returned."
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,446,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,447,* The following lines are identical in effect:
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,448,* <pre>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,449,* YearMonthDay added = ymd.dayOfMonth().addToCopy(-6);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,450,* YearMonthDay added = ymd.minus(Period.days(6));
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,451,* YearMonthDay added = ymd.plus(Period.days(-6));
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,452,* </pre>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,454,* @param period  the period to reduce this instant by
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,455,* @return a copy of this instance with the period taken away
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,456,* @throws ArithmeticException if the new datetime exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,458,public YearMonthDay minus(ReadablePeriod period) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,459,"return withPeriodAdded(period, -1);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,475,* Converts this YearMonthDay to a full datetime at midnight using the
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,476,* default time zone.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,478,* @return this date as a datetime at midnight
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,480,public DateTime toDateTimeAtMidnight() {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,481,return toDateTimeAtMidnight(null);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,485,* Converts this YearMonthDay to a full datetime at midnight using the
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,486,* specified time zone.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,487,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,488,* This method uses the chronology from this instance plus the time zone
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,489,* specified.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,491,"* @param zone  the zone to use, null means default"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,492,* @return this date as a datetime at midnight
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,494,public DateTime toDateTimeAtMidnight(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,495,Chronology chrono = getChronology().withZone(zone);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,496,"return new DateTime(getYear(), getMonthOfYear(), getDayOfMonth(), 0, 0, 0, 0, chrono);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,501,* Converts this partial to a full datetime using the default time zone
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,502,* setting the date fields from this instance and the time fields from
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,503,* the current time.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,505,* @return this date as a datetime with the time as the current time
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,507,public DateTime toDateTimeAtCurrentTime() {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,508,return toDateTimeAtCurrentTime(null);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,512,* Converts this partial to a full datetime using the specified time zone
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,513,* setting the date fields from this instance and the time fields from
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,514,* the current time.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,515,* <p>
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,516,* This method uses the chronology from this instance plus the time zone
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,517,* specified.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,519,"* @param zone  the zone to use, null means default"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,520,* @return this date as a datetime with the time as the current time
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,522,public DateTime toDateTimeAtCurrentTime(DateTimeZone zone) {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,523,Chronology chrono = getChronology().withZone(zone);
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,524,long instantMillis = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,525,"long resolved = chrono.set(this, instantMillis);"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,526,"return new DateTime(resolved, chrono);"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,488, Output the time in the ISO8601 format YYYY-MM-DD.
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,670,* Output the date in the ISO8601 format YYYY-MM-DD.
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,541,ublic ReadablePartial getReadablePartial() {
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,723,protected ReadablePartial getReadablePartial() {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,61,mport org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,61,import org.joda.time.DurationFieldType;
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,216," @param type  the type to check, may be null which returns -1"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,217," @return the index of the field, -1 if unsupported"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,216,"* @param type  the type to check, not null"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,217,* @return the index of the field
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,230, Converts this partial to a full datetime using the specified time zone and
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,231, filing in any gaps using the current datetime.
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,232, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,233," This method obtains the current datetime, creates a chronology from that"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,234," on this instance plus the time zone specified, and then sets the fields"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,235, from this instant on top.
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,236, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,237," For example, if this partial represents a time, then the result of this"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,238, method will be the datetime from the specified base instant plus the
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,239, time from this partial.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,229,"* Gets the index of the first fields to have the specified duration,"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,230,* or -1 if the field is unsupported.
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,241," @param zone  the zone to use, null means default"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,242, @return the combined datetime
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,232,"* @param type  the type to check, may be null which returns -1"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,233,"* @return the index of the field, -1 if unsupported"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,244,ublic DateTime toDateTime(DateTimeZone zone) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,245,hronology chrono = getChronology().withZone(zone);
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,246,ong instantMillis = DateTimeUtils.currentTimeMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,247,"ong resolved = chrono.set(this, instantMillis);"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,248,"eturn new DateTime(resolved, chrono);"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,235,protected int indexOf(DurationFieldType type) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,236,"for (int i = 0, isize = size(); i < isize; i++) {"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,237,if (getFieldType(i).getDurationType() == type) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,238,return i;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,241,return -1;
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,245,"* Gets the index of the first fields to have the specified duration,"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,246,* throwing an exception if the field is unsupported.
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,248,"* @param type  the type to check, not null"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,249,* @return the index of the field
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,250,* @throws IllegalArgumentException if the field is null or not supported
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,252,protected int indexOfSupported(DurationFieldType type) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,253,int index = indexOf(type);
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,254,if (index == -1) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,255,"throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,257,return index;
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,57,import java.util.Locale;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,59,mport org.joda.time.DateTime;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,62,mport org.joda.time.DateTimeZone;
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,65,import org.joda.time.format.DateTimeFormat;
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,287, Converts this object to a DateTime using the current date to fill in the
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,288, missing fields and using the default time zone.
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,287,* Output the date using the specified format pattern.
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,290, @return the DateTime instance
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,289,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,290,* @see org.joda.time.format.DateTimeFormat
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,292,ublic DateTime toDateTime() {
False,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,293,eturn toDateTime((DateTimeZone) null);
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,292,public String toString(String pattern) {
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,293,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,294,return toString();
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,296,return DateTimeFormat.getInstance().forPattern(pattern).print(this);
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,300,* Output the date using the specified format pattern.
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,302,"* @param pattern  the pattern specification, null means use <code>toString</code>"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,303,"* @param locale  Locale to use, null means default"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,304,* @see org.joda.time.format.DateTimeFormat
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,306,"public String toString(String pattern, Locale locale) throws IllegalArgumentException {"
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,307,if (pattern == null) {
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,308,return toString();
True,JodaTime/src/java/org/joda/time/base/BasePartial.java,JodaTime/src/java/org/joda/time/base/BasePartial.java,310,return DateTimeFormat.getInstance(locale).forPattern(pattern).print(this);
False,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,115,ublic abstract ReadablePartial getReadablePartial();
True,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java,115,protected abstract ReadablePartial getReadablePartial();
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,141,"ssertSame(test, test.era().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,162,"ssertSame(test, test.yearOfEra().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,180,"ssertSame(test, test.centuryOfEra().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,198,"ssertSame(test, test.yearOfCentury().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,216,"ssertSame(test, test.weekyear().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,234,"ssertSame(test, test.year().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,280,"ssertSame(test, test.monthOfYear().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,341,"ssertSame(test, test.dayOfMonth().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,391,"ssertSame(test, test.dayOfYear().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,449,"ssertSame(test, test.weekOfWeekyear().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,494,"ssertSame(test, test.dayOfWeek().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,563,"ssertSame(test, test.hourOfDay().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,644,"ssertSame(test, test.minuteOfHour().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,662,"ssertSame(test, test.minuteOfDay().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,680,"ssertSame(test, test.secondOfMinute().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,698,"ssertSame(test, test.secondOfDay().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,716,"ssertSame(test, test.millisOfSecond().getReadableInstant());"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,734,"ssertSame(test, test.millisOfDay().getReadableInstant());"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,61,import java.util.Locale;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,304,ublic void testToDateTime() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,305,public void testToDateTimeToday() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,309,ateTime test = base.toDateTime();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,310,DateTime test = base.toDateTimeToday();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,320,ublic void testToDateTime_Zone() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,321,public void testToDateTimeToday_Zone() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,325,ateTime test = base.toDateTime(TOKYO);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,326,DateTime test = base.toDateTimeToday(TOKYO);
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,335,ublic void testToDateTime_nullZone() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,336,public void testToDateTimeToday_nullZone() {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,340,ateTime test = base.toDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,341,DateTime test = base.toDateTimeToday((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,565,public void testToString_String() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,566,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,567,"assertEquals("" 10"", test.toString(""yyyy HH""));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,568,"assertEquals(""T10:20:30.040"", test.toString(null));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,572,public void testToString_String_Locale() {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,573,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,574,"assertEquals(""10 20"", test.toString(""H m"", Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,575,"assertEquals(""T10:20:30.040"", test.toString(null, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,576,"assertEquals(""10 20"", test.toString(""H m"", null));"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,577,"assertEquals(""T10:20:30.040"", test.toString(null, null));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,61,import java.util.Locale;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,289,ublic void testToDateTime() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,290,public void testToDateTimeAtMidnight() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,291,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,293,DateTime test = base.toDateTimeAtMidnight();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,294,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,295,"assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,299,public void testToDateTimeAtMidnight_Zone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,300,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,302,DateTime test = base.toDateTimeAtMidnight(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,303,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,304,"assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_TOKYO), test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,307,public void testToDateTimeAtMidnight_nullZone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,308,"YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,310,DateTime test = base.toDateTimeAtMidnight((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,311,"check(base, 2005, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,312,"assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,316,public void testToDateTimeAtCurrentTime() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,294,ateTime test = base.toDateTime();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,321,DateTime test = base.toDateTimeAtCurrentTime();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,304,ublic void testToDateTime_Zone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,331,public void testToDateTimeAtCurrentTime_Zone() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,309,ateTime test = base.toDateTime(TOKYO);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,336,DateTime test = base.toDateTimeAtCurrentTime(TOKYO);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,318,ublic void testToDateTime_nullZone() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,345,public void testToDateTimeAtCurrentTime_nullZone() {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,323,ateTime test = base.toDateTime((DateTimeZone) null);
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,350,DateTime test = base.toDateTimeAtCurrentTime((DateTimeZone) null);
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,507,"earMonthDay test = new YearMonthDay(1972, 6, 9);"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,508,"ssertEquals(""1972-06-09"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,534,"YearMonthDay test = new YearMonthDay(2002, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,535,"assertEquals(""2002-06-09"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,539,public void testToString_String() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,540,"YearMonthDay test = new YearMonthDay(2002, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,541,"assertEquals(""2002 "", test.toString(""yyyy HH""));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,542,"assertEquals(""2002-06-09"", test.toString(null));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,546,public void testToString_String_Locale() {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,547,"YearMonthDay test = new YearMonthDay(2002, 6, 9);"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,548,"assertEquals(""Sun 9/6"", test.toString(""EEE d/M"", Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,549,"assertEquals(""dim. 9/6"", test.toString(""EEE d/M"", Locale.FRENCH));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,550,"assertEquals(""2002-06-09"", test.toString(null, Locale.ENGLISH));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,551,"assertEquals(""Sun 9/6"", test.toString(""EEE d/M"", null));"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,552,"assertEquals(""2002-06-09"", test.toString(null, null));"

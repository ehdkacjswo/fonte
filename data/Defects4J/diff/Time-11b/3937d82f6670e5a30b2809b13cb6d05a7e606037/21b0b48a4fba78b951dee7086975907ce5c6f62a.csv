is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,19,import java.util.ArrayList;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,21,import java.util.HashMap;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,22,import java.util.List;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,23,import java.util.Map;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,55,/** Cache of all the known types. */
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,56,private static final Map cTypes = new HashMap(32);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,493,* Gets a period type that contains the duration types of the array.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,494,* <p>
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,495,* Only the 8 standard duration field types are supported.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,497,* @param types  the types to include in the array.
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,498,* @return the period type
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,500,public static synchronized PeriodType forFields(DurationFieldType[] types) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,501,if (types == null || types.length == 0) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,502,"throw new IllegalArgumentException(""Types array must not be null or empty"");"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,504,for (int i = 0; i < types.length; i++) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,505,if (types[i] == null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,506,"throw new IllegalArgumentException(""Types array must not contain null"");"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,509,Map cache = cTypes;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,510,if (cTypes.isEmpty()) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,511,"cache.put(standard(), standard());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,512,"cache.put(yearMonthDayTime(), yearMonthDayTime());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,513,"cache.put(yearMonthDay(), yearMonthDay());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,514,"cache.put(yearWeekDayTime(), yearWeekDayTime());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,515,"cache.put(yearWeekDay(), yearWeekDay());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,516,"cache.put(yearDayTime(), yearDayTime());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,517,"cache.put(yearDay(), yearDay());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,518,"cache.put(dayTime(), dayTime());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,519,"cache.put(time(), time());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,520,"cache.put(years(), years());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,521,"cache.put(months(), months());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,522,"cache.put(weeks(), weeks());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,523,"cache.put(days(), days());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,524,"cache.put(hours(), hours());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,525,"cache.put(minutes(), minutes());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,526,"cache.put(seconds(), seconds());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,527,"cache.put(millis(), millis());"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,529,"PeriodType inPartType = new PeriodType(null, types, null);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,530,Object cached = cache.get(inPartType);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,531,if (cached instanceof PeriodType) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,532,return (PeriodType) cached;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,534,if (cached != null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,535,"throw new IllegalArgumentException(""PeriodType does not support fields: "" + cached);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,537,PeriodType type = standard();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,538,List list = new ArrayList(Arrays.asList(types));
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,539,if (list.remove(DurationFieldType.years()) == false) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,540,type = type.withYearsRemoved();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,542,if (list.remove(DurationFieldType.months()) == false) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,543,type = type.withMonthsRemoved();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,545,if (list.remove(DurationFieldType.weeks()) == false) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,546,type = type.withWeeksRemoved();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,548,if (list.remove(DurationFieldType.days()) == false) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,549,type = type.withDaysRemoved();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,551,if (list.remove(DurationFieldType.hours()) == false) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,552,type = type.withHoursRemoved();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,554,if (list.remove(DurationFieldType.minutes()) == false) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,555,type = type.withMinutesRemoved();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,557,if (list.remove(DurationFieldType.seconds()) == false) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,558,type = type.withSecondsRemoved();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,560,if (list.remove(DurationFieldType.millis()) == false) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,561,type = type.withMillisRemoved();
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,563,if (list.size() > 0) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,564,"cache.put(inPartType, list);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,565,"throw new IllegalArgumentException(""PeriodType does not support fields: "" + list);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,567,// recheck cache in case initial array order was wrong
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,568,"PeriodType checkPartType = new PeriodType(null, type.iTypes, null);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,569,PeriodType checkedType = (PeriodType) cache.get(checkPartType);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,570,if (checkedType != null) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,571,"cache.put(inPartType, checkedType);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,572,return checkedType;
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,574,"cache.put(inPartType, type);"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,575,return type;
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,448,public void testForFields1() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,449,PeriodType type = PeriodType.forFields(new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,450,"DurationFieldType.years(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,452,"assertSame(PeriodType.years(), type);"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,453,type = PeriodType.forFields(new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,454,"DurationFieldType.months(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,456,"assertSame(PeriodType.months(), type);"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,457,type = PeriodType.forFields(new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,458,"DurationFieldType.weeks(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,460,"assertSame(PeriodType.weeks(), type);"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,461,type = PeriodType.forFields(new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,462,"DurationFieldType.days(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,464,"assertSame(PeriodType.days(), type);"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,465,type = PeriodType.forFields(new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,466,"DurationFieldType.hours(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,468,"assertSame(PeriodType.hours(), type);"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,469,type = PeriodType.forFields(new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,470,"DurationFieldType.minutes(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,472,"assertSame(PeriodType.minutes(), type);"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,473,type = PeriodType.forFields(new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,474,"DurationFieldType.seconds(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,476,"assertSame(PeriodType.seconds(), type);"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,477,type = PeriodType.forFields(new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,478,"DurationFieldType.millis(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,480,"assertSame(PeriodType.millis(), type);"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,483,public void testForFields2() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,484,DurationFieldType[] types = new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,485,"DurationFieldType.years(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,486,"DurationFieldType.hours(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,488,PeriodType type = PeriodType.forFields(types);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,489,"assertEquals(2, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,490,"assertEquals(DurationFieldType.years(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,491,"assertEquals(DurationFieldType.hours(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,492,"assertEquals(""StandardNoMonthsNoWeeksNoDaysNoMinutesNoSecondsNoMillis"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,493,"assertEquals(""PeriodType[StandardNoMonthsNoWeeksNoDaysNoMinutesNoSecondsNoMillis]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,494,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,495,"assertEquals(true, type == PeriodType.forFields(types));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,496,"assertEquals(false, type.equals(PeriodType.millis()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,497,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,498,"assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,499,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,500,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,503,public void testForFields3() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,504,DurationFieldType[] types = new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,505,"DurationFieldType.months(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,506,"DurationFieldType.weeks(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,508,PeriodType type = PeriodType.forFields(types);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,509,"assertEquals(2, type.size());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,510,"assertEquals(DurationFieldType.months(), type.getFieldType(0));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,511,"assertEquals(DurationFieldType.weeks(), type.getFieldType(1));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,512,"assertEquals(""StandardNoYearsNoDaysNoHoursNoMinutesNoSecondsNoMillis"", type.getName());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,513,"assertEquals(""PeriodType[StandardNoYearsNoDaysNoHoursNoMinutesNoSecondsNoMillis]"", type.toString());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,514,"assertEquals(true, type.equals(type));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,515,"assertEquals(true, type == PeriodType.forFields(types));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,516,"assertEquals(false, type.equals(PeriodType.millis()));"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,517,"assertEquals(true, type.hashCode() == type.hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,518,"assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,519,"assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,520,assertSameAfterSerialization(type);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,523,public void testForFields4() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,524,DurationFieldType[] types = new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,525,"DurationFieldType.weeks(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,526,"DurationFieldType.months(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,528,DurationFieldType[] types2 = new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,529,"DurationFieldType.months(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,530,"DurationFieldType.weeks(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,532,PeriodType type = PeriodType.forFields(types);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,533,PeriodType type2 = PeriodType.forFields(types2);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,534,"assertEquals(true, type == type2);"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,537,public void testForFields5() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,538,DurationFieldType[] types = new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,539,"DurationFieldType.centuries(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,540,"DurationFieldType.months(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,542,try {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,543,PeriodType.forFields(types);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,544,fail();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,545,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,546,// expected
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,548,try {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,549,PeriodType.forFields(types);  // repeated for test coverage of cache
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,550,fail();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,551,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,552,// expected
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,556,public void testForFields6() throws Exception {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,557,DurationFieldType[] types = null;
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,558,try {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,559,PeriodType.forFields(types);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,560,fail();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,561,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,562,// expected
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,565,types = new DurationFieldType[0];
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,566,try {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,567,PeriodType.forFields(types);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,568,fail();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,569,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,570,// expected
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,573,types = new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,574,"null,"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,575,"DurationFieldType.months(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,577,try {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,578,PeriodType.forFields(types);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,579,fail();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,580,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,581,// expected
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,584,types = new DurationFieldType[] {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,585,"DurationFieldType.months(),"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,586,"null,"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,588,try {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,589,PeriodType.forFields(types);
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,590,fail();
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,591,} catch (IllegalArgumentException ex) {
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,592,// expected

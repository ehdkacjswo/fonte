is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,20,import java.util.Collections;
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,21,import java.util.HashMap;
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,22,import java.util.LinkedHashMap;
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,24,import java.util.Map;
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,42,/** The millisecond provider currently in use. */
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,43,"private static volatile Map<String, DateTimeZone> cZoneNames;"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,44,static {
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,45,// names from RFC-822 / JDK
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,46,"// this is all very US-centric and dubious, but perhaps it will help some"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,47,"Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,48,"map.put(""UT"", DateTimeZone.UTC);"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,49,"map.put(""UTC"", DateTimeZone.UTC);"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,50,"map.put(""GMT"", DateTimeZone.UTC);"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,51,"put(map, ""EST"", ""America/New_York"");"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,52,"put(map, ""EDT"", ""America/New_York"");"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,53,"put(map, ""CST"", ""America/Chigaco"");"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,54,"put(map, ""CDT"", ""America/Chigaco"");"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,55,"put(map, ""MST"", ""America/Denver"");"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,56,"put(map, ""MDT"", ""America/Denver"");"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,57,"put(map, ""PST"", ""America/Los_Angeles"");"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,58,"put(map, ""PDT"", ""America/Los_Angeles"");"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,59,cZoneNames = Collections.unmodifiableMap(map);
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,61,"private static void put(Map<String, DateTimeZone> map, String name, String id) {"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,62,try {
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,63,"map.put(name, DateTimeZone.forID(id));"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,64,} catch (RuntimeException ex) {
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,65,// ignore
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,404,* Gets the default map of time zone names.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,405,* <p>
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,406,* This can be changed by {@link #setDefaultTimeZoneNames}.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,408,"* @return the unmodifiable map of abbreviations to zones, not null"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,409,* @since 2.2
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,411,"public static final Map<String, DateTimeZone> getDefaultTimeZoneNames() {"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,412,return cZoneNames;
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,416,* Sets the default map of time zone names.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,417,* <p>
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,418,* The map is copied before storage.
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,420,"* @param names  the map of abbreviations to zones, not null"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,421,* @since 2.2
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,423,"public static final void setDefaultTimeZoneNames(Map<String, DateTimeZone> names) {"
True,src/main/java/org/joda/time/DateTimeUtils.java,src/main/java/org/joda/time/DateTimeUtils.java,424,"cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));"
False,src/main/java/org/joda/time/format/DateTimeFormat.java,src/main/java/org/joda/time/format/DateTimeFormat.java,536,uilder.appendTimeZoneShortName();
True,src/main/java/org/joda/time/format/DateTimeFormat.java,src/main/java/org/joda/time/format/DateTimeFormat.java,536,builder.appendTimeZoneShortName(null);
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,32,import org.joda.time.DateTimeUtils;
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1015," @param parseLookup  the table of names, not null"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,1016,"* @param parseLookup  the table of names, null to use the {@link DateTimeUtils#getDefaultTimeZoneNames() default names}"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2487,"Map<String, DateTimeZone> parseLookup = iParseLookup;"
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2488,parseLookup = (parseLookup != null ? parseLookup : DateTimeUtils.getDefaultTimeZoneNames());
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2487,or (String name : iParseLookup.keySet()) {
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2490,for (String name : parseLookup.keySet()) {
False,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2489,ucket.setZone(iParseLookup.get(name));
True,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java,2492,bucket.setZone(parseLookup.get(name));
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,41,"private static final DateTimeZone NEW_YORK = DateTimeZone.forID(""America/New_York"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,42,"private static final DateTimeZone LOS_ANGELES = DateTimeZone.forID(""America/Los_Angeles"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,510,public void test_printParseShortNameWithAutoLookup() {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,511,DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,512,".appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneShortName(null);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,513,DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,515,"assertEquals(true, f.isPrinter());"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,516,"assertEquals(true, f.isParser());"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,517,"DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, NEW_YORK);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,518,"assertEquals(""2011-01-04 12:30 EST"", f.print(dt1));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,519,"DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, NEW_YORK);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,520,"assertEquals(""2011-07-04 12:30 EDT"", f.print(dt2));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,521,"DateTime dt3 = new DateTime(2011, 1, 4, 12, 30, 0, LOS_ANGELES);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,522,"assertEquals(""2011-01-04 12:30 PST"", f.print(dt3));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,523,"DateTime dt4 = new DateTime(2011, 7, 4, 12, 30, 0, LOS_ANGELES);"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,524,"assertEquals(""2011-07-04 12:30 PDT"", f.print(dt4));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,526,"assertEquals(dt1.getZone() + "" "" + f.parseDateTime(""2011-01-04 12:30 EST"").getZone(), dt1, f.parseDateTime(""2011-01-04 12:30 EST""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,527,"assertEquals(dt2, f.parseDateTime(""2011-07-04 12:30 EDT""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,528,"assertEquals(dt3, f.parseDateTime(""2011-01-04 12:30 PST""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,529,"assertEquals(dt4, f.parseDateTime(""2011-07-04 12:30 PDT""));"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,530,try {
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,531,"f.parseDateTime(""2007-03-04 12:30 PPP"");"
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,532,fail();
True,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,533,} catch (IllegalArgumentException e) {

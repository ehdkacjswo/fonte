is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,48,"ublic class DateTimeComparator implements Comparator, Serializable {"
True,JodaTime/src/java/org/joda/time/DateTimeComparator.java,JodaTime/src/java/org/joda/time/DateTimeComparator.java,48,"public class DateTimeComparator implements Comparator<Object>, Serializable {"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,62, The folowing definitions of time are generally used:
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,62,* The following definitions of time are generally used:
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,101,rivate static Set cAvailableIDs;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,101,private static Set<String> cAvailableIDs;
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,108,rivate static Map iFixedOffsetCache;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,108,"private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,111,rivate static Map cZoneIdConversion;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,111,"private static Map<String, String> cZoneIdConversion;"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,222," If constructed with the values (-2, 30), the resultiong zone is '-02:30'."
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,222,"* If constructed with the values (-2, 30), the resulting zone is '-02:30'."
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,329,FixedOffsetCache = new HashMap();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,329,"iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,332,eference ref = (Reference) iFixedOffsetCache.get(id);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,332,Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,334,one = (DateTimeZone) ref.get();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,334,zone = ref.get();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,340,"FixedOffsetCache.put(id, new SoftReference(zone));"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,340,"iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,349,ublic static Set getAvailableIDs() {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,349,public static Set<String> getAvailableIDs() {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,394,et ids = provider.getAvailableIDs();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,394,Set<String> ids = provider.getAvailableIDs();
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,535,ap map = cZoneIdConversion;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,535,"Map<String, String> map = cZoneIdConversion;"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,538,ap = new HashMap();
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,538,"map = new HashMap<String, String>();"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,573,eturn (String) map.get(id);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,573,return map.get(id);
False,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,30,ublic abstract class DurationField implements Comparable {
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,30,public abstract class DurationField implements Comparable<DurationField> {
False,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,282,ublic abstract int compareTo(Object durationField);
True,JodaTime/src/java/org/joda/time/DurationField.java,JodaTime/src/java/org/joda/time/DurationField.java,282,public abstract int compareTo(DurationField durationField);
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,2,  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,91,rivate static final Set DATE_DURATION_TYPES = new HashSet();
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,91,private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();
False,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,563,ublic int compareTo(Object partial) {
True,JodaTime/src/java/org/joda/time/LocalDate.java,JodaTime/src/java/org/joda/time/LocalDate.java,563,public int compareTo(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,2,  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,603,ublic int compareTo(Object partial) {
True,JodaTime/src/java/org/joda/time/LocalDateTime.java,JodaTime/src/java/org/joda/time/LocalDateTime.java,603,public int compareTo(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,2,  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,92,rivate static final Set TIME_DURATION_TYPES = new HashSet();
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,92,private static final Set<DurationFieldType> TIME_DURATION_TYPES = new HashSet<DurationFieldType>();
False,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,626,ublic int compareTo(Object partial) {
True,JodaTime/src/java/org/joda/time/LocalTime.java,JodaTime/src/java/org/joda/time/LocalTime.java,626,public int compareTo(ReadablePartial partial) {
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,711,ist list = new ArrayList(Arrays.asList(iTypes));
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,711,List<DateTimeFieldType> list = new ArrayList<DateTimeFieldType>(Arrays.asList(iTypes));
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,56,rivate static final Map cTypes = new HashMap(32);
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,56,"private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);"
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,510,ap cache = cTypes;
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,511,f (cTypes.isEmpty()) {
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,510,"Map<PeriodType, Object> cache = cTypes;"
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,511,if (cache.isEmpty()) {
False,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,539,ist list = new ArrayList(Arrays.asList(types));
True,JodaTime/src/java/org/joda/time/PeriodType.java,JodaTime/src/java/org/joda/time/PeriodType.java,539,List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,33,ublic interface ReadableDuration extends Comparable {
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,33,public interface ReadableDuration extends Comparable<ReadableDuration> {
False,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,85,nt compareTo(Object obj);
True,JodaTime/src/java/org/joda/time/ReadableDuration.java,JodaTime/src/java/org/joda/time/ReadableDuration.java,85,int compareTo(ReadableDuration obj);
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,32,ublic interface ReadableInstant extends Comparable {
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,32,public interface ReadableInstant extends Comparable<ReadableInstant> {
False,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,103,nt compareTo(Object readableInstant);
True,JodaTime/src/java/org/joda/time/ReadableInstant.java,JodaTime/src/java/org/joda/time/ReadableInstant.java,103,int compareTo(ReadableInstant readableInstant);
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,2,*  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,21,import org.joda.time.ReadableInstant;
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,85, @param obj  a duration to check against
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,86,* @param other  a duration to check against
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,90,ublic int compareTo(Object obj) {
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,91,/ Comparable contract means we cannot handle null or other types gracefully
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,92,eadableDuration thisDuration = (ReadableDuration) this;
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,93,eadableDuration otherDuration = (ReadableDuration) obj;
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,95,ong thisMillis = thisDuration.getMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,96,ong otherMillis = otherDuration.getMillis();
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,91,public int compareTo(ReadableDuration other) {
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,92,long thisMillis = this.getMillis();
True,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,JodaTime/src/java/org/joda/time/base/AbstractDuration.java,93,long otherMillis = other.getMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,289, @param instant  a readable instant to check against
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,289,* @param other  a readable instant to check against
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,294,ublic int compareTo(Object instant) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,295,f (this == instant) {
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,294,public int compareTo(ReadableInstant other) {
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,295,if (this == other) {
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,299,eadableInstant otherInstant = (ReadableInstant) instant;
False,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,301,ong otherMillis = otherInstant.getMillis();
True,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,JodaTime/src/java/org/joda/time/base/AbstractInstant.java,299,long otherMillis = other.getMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,47,"mplements ReadablePartial, Comparable {"
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,47,"implements ReadablePartial, Comparable<ReadablePartial> {"
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,308, @param partial  an object to check against
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,308,* @param other  an object to check against
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,315,ublic int compareTo(Object partial) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,316,f (this == partial) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,315,public int compareTo(ReadablePartial other) {
True,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,316,if (this == other) {
False,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,JodaTime/src/java/org/joda/time/base/AbstractPartial.java,319,eadablePartial other = (ReadablePartial) partial;
False,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,47,"mplements ReadablePeriod, Comparable, Serializable {"
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,47,"implements ReadablePeriod, Comparable<BaseSingleFieldPeriod>, Serializable {"
False,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,329,ublic int compareTo(Object other) {
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,329,public int compareTo(BaseSingleFieldPeriod other) {
False,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,333,nt otherValue = ((BaseSingleFieldPeriod) other).getValue();
True,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java,333,int otherValue = other.getValue();
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,71,rivate static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,71,"private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();"
False,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,107,uddhistChronology chrono = (BuddhistChronology) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java,107,BuddhistChronology chrono = cCache.get(zone);
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,72,rivate static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,72,"private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();"
False,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,124,opticChronology[] chronos = (CopticChronology[]) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,JodaTime/src/java/org/joda/time/chrono/CopticChronology.java,124,CopticChronology[] chronos = cCache.get(zone);
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,72,rivate static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,72,"private static final Map<DateTimeZone, EthiopicChronology[]> cCache = new HashMap<DateTimeZone, EthiopicChronology[]>();"
False,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,124,thiopicChronology[] chronos = (EthiopicChronology[]) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java,124,EthiopicChronology[] chronos = cCache.get(zone);
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,108,rivate static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,108,"private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();"
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,199,rrayList chronos = (ArrayList)cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,199,ArrayList<GJChronology> chronos = cCache.get(zone);
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,201,hronos = new ArrayList(2);
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,201,chronos = new ArrayList<GJChronology>(2);
False,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,205,hrono = (GJChronology)chronos.get(i);
True,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,JodaTime/src/java/org/joda/time/chrono/GJChronology.java,205,chrono = chronos.get(i);
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,39,rivate static WeakHashMap cCache = new WeakHashMap();
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,39,"private static WeakHashMap<Locale, GJLocaleSymbols> cCache = new WeakHashMap<Locale, GJLocaleSymbols>();"
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,51,ymbols = (GJLocaleSymbols) cCache.get(locale);
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,51,symbols = cCache.get(locale);
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,77,"rivate static void addSymbols(TreeMap map, String[] symbols, Integer[] integers) {"
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,77,"private static void addSymbols(TreeMap<String, Integer> map, String[] symbols, Integer[] integers) {"
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,86,"rivate static void addNumerals(TreeMap map, int start, int end, Integer[] integers) {"
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,86,"private static void addNumerals(TreeMap<String, Integer> map, int start, int end, Integer[] integers) {"
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,106,rivate final WeakReference iLocale;
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,106,private final WeakReference<Locale> iLocale;
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,115,/ These map Strings to Integers.
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,116,rivate final TreeMap iParseEras;
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,117,rivate final TreeMap iParseDaysOfWeek;
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,118,rivate final TreeMap iParseMonths;
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,115,"private final TreeMap<String, Integer> iParseEras;"
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,116,"private final TreeMap<String, Integer> iParseDaysOfWeek;"
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,117,"private final TreeMap<String, Integer> iParseMonths;"
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,131,Locale = new WeakReference(locale);
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,130,iLocale = new WeakReference<Locale>(locale);
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,147,ParseEras = new TreeMap(String.CASE_INSENSITIVE_ORDER);
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,146,"iParseEras = new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER);"
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,157,ParseDaysOfWeek = new TreeMap(String.CASE_INSENSITIVE_ORDER);
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,156,"iParseDaysOfWeek = new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER);"
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,162,ParseMonths = new TreeMap(String.CASE_INSENSITIVE_ORDER);
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,161,"iParseMonths = new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER);"
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,180,nteger era = (Integer) iParseEras.get(text);
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,179,Integer era = iParseEras.get(text);
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,200,nteger month = (Integer) iParseMonths.get(text);
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,199,Integer month = iParseMonths.get(text);
False,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,224,nteger day = (Integer) iParseDaysOfWeek.get(text);
True,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java,223,Integer day = iParseDaysOfWeek.get(text);
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,68,rivate static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,68,"private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();"
False,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,116,regorianChronology[] chronos = (GregorianChronology[]) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java,116,GregorianChronology[] chronos = cCache.get(zone);
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,63,rivate static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,63,"private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();"
False,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,105,hrono = (ISOChronology) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,JodaTime/src/java/org/joda/time/chrono/ISOChronology.java,105,chrono = cCache.get(zone);
False,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,142,rivate static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,142,"private static final Map<DateTimeZone, IslamicChronology[]> cCache = new HashMap<DateTimeZone, IslamicChronology[]>();"
False,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,197,slamicChronology[] chronos = (IslamicChronology[]) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java,197,IslamicChronology[] chronos = cCache.get(zone);
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,71,rivate static final Map cCache = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,71,"private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();"
False,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,130,ulianChronology[] chronos = (JulianChronology[]) cCache.get(zone);
True,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,JodaTime/src/java/org/joda/time/chrono/JulianChronology.java,130,JulianChronology[] chronos = cCache.get(zone);
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,209,ashMap converted = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,209,"HashMap<Object, Object> converted = new HashMap<Object, Object>();"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,255,"rivate DurationField convertField(DurationField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,255,"private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {"
False,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,267,"rivate DateTimeField convertField(DateTimeField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,JodaTime/src/java/org/joda/time/chrono/LimitChronology.java,267,"private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,2,  Copyright 2001-2008 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,153,ashMap converted = new HashMap();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,153,"HashMap<Object, Object> converted = new HashMap<Object, Object>();"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,199,"rivate DurationField convertField(DurationField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,199,"private DurationField convertField(DurationField field, HashMap<Object, Object> converted) {"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,211,"rivate DateTimeField convertField(DateTimeField field, HashMap converted) {"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,211,"private DateTimeField convertField(DateTimeField field, HashMap<Object, Object> converted) {"
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,131,ublic Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,131,public Class<?> getSupportedType() {
False,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,31,lass getSupportedType();
True,JodaTime/src/java/org/joda/time/convert/Converter.java,JodaTime/src/java/org/joda/time/convert/Converter.java,32,Class<?> getSupportedType();
False,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,47,onverter select(Class type) throws IllegalStateException {
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,47,Converter select(Class<?> type) throws IllegalStateException {
False,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,242,"rivate static Converter selectSlow(ConverterSet set, Class type) {"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,242,"private static Converter selectSlow(ConverterSet set, Class<?> type) {"
False,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,249,lass supportedType = converter.getSupportedType();
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,249,Class<?> supportedType = converter.getSupportedType();
False,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,279,lass supportedType = converter.getSupportedType();
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,279,Class<?> supportedType = converter.getSupportedType();
False,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,307,lass supportedType = converter.getSupportedType();
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,307,Class<?> supportedType = converter.getSupportedType();
False,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,319,inal Class iType;
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,319,final Class<?> iType;
False,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,322,"ntry(Class type, Converter converter) {"
True,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,JodaTime/src/java/org/joda/time/convert/ConverterSet.java,322,"Entry(Class<?> type, Converter converter) {"
False,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,65,ublic Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/DateConverter.java,JodaTime/src/java/org/joda/time/convert/DateConverter.java,65,public Class<?> getSupportedType() {
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,76,ublic Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/LongConverter.java,JodaTime/src/java/org/joda/time/convert/LongConverter.java,76,public Class<?> getSupportedType() {
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,94,ublic Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/NullConverter.java,JodaTime/src/java/org/joda/time/convert/NullConverter.java,94,public Class<?> getSupportedType() {
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,87,ublic Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java,87,public Class<?> getSupportedType() {
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,109,ublic Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java,109,public Class<?> getSupportedType() {
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,112,ublic Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java,112,public Class<?> getSupportedType() {
False,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,103,ublic Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java,103,public Class<?> getSupportedType() {
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,80,ublic Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,JodaTime/src/java/org/joda/time/convert/ReadablePeriodConverter.java,80,public Class<?> getSupportedType() {
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,240,ublic Class getSupportedType() {
True,JodaTime/src/java/org/joda/time/convert/StringConverter.java,JodaTime/src/java/org/joda/time/convert/StringConverter.java,240,public Class<?> getSupportedType() {
False,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,144,ublic int compareTo(Object durationField) {
False,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,145,urationField otherField = (DurationField) durationField;
True,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,JodaTime/src/java/org/joda/time/field/BaseDurationField.java,145,public int compareTo(DurationField otherField) {
False,JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java,148,ublic int compareTo(Object durationField) {
True,JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java,JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java,149,public int compareTo(DurationField durationField) {
False,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,133,ublic int compareTo(Object durationField) {
False,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,134,urationField otherField = (DurationField) durationField;
True,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,JodaTime/src/java/org/joda/time/field/MillisDurationField.java,133,public int compareTo(DurationField otherField) {
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,40,rivate static HashMap cCache;
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,40,"private static HashMap<DateTimeFieldType, UnsupportedDateTimeField> cCache;"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,56,Cache = new HashMap(7);
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,56,"cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,59,ield = (UnsupportedDateTimeField)cCache.get(type);
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,59,field = cCache.get(type);
False,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,37,rivate static HashMap cCache;
True,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,38,"private static HashMap<DurationFieldType, UnsupportedDurationField> cCache;"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,49,Cache = new HashMap(7);
True,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,50,"cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);"
False,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,52,ield = (UnsupportedDurationField) cCache.get(type);
True,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,53,field = cCache.get(type);
False,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,225,ublic int compareTo(Object durationField) {
True,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java,226,public int compareTo(DurationField durationField) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,147,rivate static final Map cPatternedCache = new HashMap(7);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,147,"private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,679,ormatter = (DateTimeFormatter) cPatternedCache.get(pattern);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,679,formatter = cPatternedCache.get(pattern);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,767,rivate static final Map cCache = new HashMap();  // manual sync
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,767,"private static final Map<String, DateTimeFormatter> cCache = new HashMap<String, DateTimeFormatter>();  // manual sync"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,822, = (DateTimeFormatter) cCache.get(key);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,JodaTime/src/java/org/joda/time/format/DateTimeFormat.java,822,f = cCache.get(key);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,74,rivate ArrayList iElementPairs;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,74,private ArrayList<Object> iElementPairs;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,84,ElementPairs = new ArrayList();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,84,iElementPairs = new ArrayList<Object>();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1647,rivate static Map cParseCache = new HashMap();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1647,"private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache ="
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1648,"new HashMap<Locale, Map<DateTimeFieldType, Object[]>>();"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1724,"@SuppressWarnings(""unchecked"")"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1727,et validValues = null;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1729,Set<String> validValues = null;
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1730,ap innerMap = (Map) cParseCache.get(locale);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1732,"Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1732,nnerMap = new HashMap();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1734,"innerMap = new HashMap<DateTimeFieldType, Object[]>();"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1735,bject[] array = (Object[]) innerMap.get(iFieldType);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1737,Object[] array = innerMap.get(iFieldType);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1737,alidValues = new HashSet(32);
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1739,validValues = new HashSet<String>(32);
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1766,alidValues = (Set) array[0];
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,1768,validValues = (Set<String>) array[0];
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2428,omposite(List elementPairs) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2430,Composite(List<Object> elementPairs) {
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2431,ist printerList = new ArrayList();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2432,ist parserList = new ArrayList();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2433,List<Object> printerList = new ArrayList<Object>();
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2434,List<Object> parserList = new ArrayList<Object>();
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2572,"rivate void decompose(List elementPairs, List printerList, List parserList) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2574,"private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2595,"rivate void addArrayToList(List list, Object[] array) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java,2597,"private void addArrayToList(List<Object> list, Object[] array) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,354, The end result is much greater performace when computeMillis is called.
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,354,* The end result is much greater performance when computeMillis is called.
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,361,"rivate static void sort(Comparable[] array, int high) {"
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,361,"private static void sort(SavedField[] array, int high) {"
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,367,omparable t = array[j];
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,367,SavedField t = array[j];
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,407,tatic class SavedField implements Comparable {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,407,static class SavedField implements Comparable<SavedField> {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,444,ublic int compareTo(Object obj) {
False,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,445,ateTimeField other = ((SavedField)obj).iField;
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,444,public int compareTo(SavedField obj) {
True,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java,445,DateTimeField other = obj.iField;
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,2,"  Copyright 2001-2006,2008 Stephen Colebourne"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,227,"ollection fields,"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,227,"Collection<DateTimeFieldType> fields,"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,234,et workingFields = new HashSet(fields);
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,234,Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,290,"ollection fields,"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,290,"Collection<DateTimeFieldType> fields,"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,358,"ollection fields,"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,358,"Collection<DateTimeFieldType> fields,"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,395,"ollection fields,"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,395,"Collection<DateTimeFieldType> fields,"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,465,"ollection fields,"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,465,"Collection<DateTimeFieldType> fields,"
False,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,535,"rivate static void checkNotStrictISO(Collection fields, boolean strictISO) {"
True,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java,535,"private static void checkNotStrictISO(Collection<DateTimeFieldType> fields, boolean strictISO) {"
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,92,rivate List iElementPairs;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,92,private List<Object> iElementPairs;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,177,ElementPairs = new ArrayList();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,177,iElementPairs = new ArrayList<Object>();
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,737,ist pairs = iElementPairs;
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,737,List<Object> pairs = iElementPairs;
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,794,"rivate static PeriodFormatter toFormatter(List elementPairs, boolean notPrinter, boolean notParser) {"
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,794,"private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {"
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,815,rivate static Object[] createComposite(List elementPairs) {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,815,private static Object[] createComposite(List<Object> elementPairs) {
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1603,reeSet parsedSet = new TreeSet(String.CASE_INSENSITIVE_ORDER);
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1603,TreeSet<String> parsedSet = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1611,rrayList parsedList = new ArrayList(parsedSet);
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1611,ArrayList<String> parsedList = new ArrayList<String>(parsedSet);
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1613,ParsedForms = (String[]) parsedList.toArray(new String[parsedList.size()]);
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1613,iParsedForms = parsedList.toArray(new String[parsedList.size()]);
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1764,omposite(List elementPairs) {
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1765,ist printerList = new ArrayList();
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1766,ist parserList = new ArrayList();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1764,Composite(List<Object> elementPairs) {
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1765,List<Object> printerList = new ArrayList<Object>();
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1766,List<Object> parserList = new ArrayList<Object>();
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1773,Printers = (PeriodPrinter[]) printerList.toArray(
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1773,iPrinters = printerList.toArray(
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1780,Parsers = (PeriodParser[]) parserList.toArray(
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1780,iParsers = parserList.toArray(
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1834,"rivate void decompose(List elementPairs, List printerList, List parserList) {"
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1834,"private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {"
False,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1857,"rivate void addArrayToList(List list, Object[] array) {"
True,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java,1857,"private void addArrayToList(List<Object> list, Object[] array) {"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,223,rivate final ArrayList iRuleSets;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,223,private final ArrayList<RuleSet> iRuleSets;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,226,RuleSets = new ArrayList(10);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,226,iRuleSets = new ArrayList<RuleSet>(10);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,255,uleSet lastRuleSet = (RuleSet)iRuleSets.get(iRuleSets.size() - 1);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,255,RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,323,eturn (RuleSet)iRuleSets.get(iRuleSets.size() - 1);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,323,return iRuleSets.get(iRuleSets.size() - 1);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,339,rrayList transitions = new ArrayList();
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,339,ArrayList<Transition> transitions = new ArrayList<Transition>();
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,350,uleSet rs = (RuleSet)iRuleSets.get(i);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,350,RuleSet rs = iRuleSets.get(i);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,391,ransition tr = (Transition)transitions.get(0);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,391,Transition tr = transitions.get(0);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,403,"rivate boolean addTransition(ArrayList transitions, Transition tr) {"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,403,"private boolean addTransition(ArrayList<Transition> transitions, Transition tr) {"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,410,ransition last = (Transition)transitions.get(size - 1);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,410,Transition last = transitions.get(size - 1);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,419,ffsetForLast = ((Transition)transitions.get(size - 2)).getWallOffset();
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,419,offsetForLast = transitions.get(size - 2).getWallOffset();
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,953,rivate ArrayList iRules;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,953,private ArrayList<Rule> iRules;
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,964,Rules = new ArrayList(10);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,964,iRules = new ArrayList<Rule>(10);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,973,Rules = new ArrayList(rs.iRules);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,973,iRules = new ArrayList<Rule>(rs.iRules);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1018,rrayList copy = new ArrayList(iRules);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1018,ArrayList<Rule> copy = new ArrayList<Rule>(iRules);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1042,terator it = copy.iterator();
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1042,Iterator<Rule> it = copy.iterator();
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1044,ule rule = (Rule)it.next();
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1044,Rule rule = it.next();
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1090,terator it = iRules.iterator();
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1090,Iterator<Rule> it = iRules.iterator();
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1092,ule rule = (Rule)it.next();
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1092,Rule rule = it.next();
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1144,ule startRule = (Rule)iRules.get(0);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1145,ule endRule = (Rule)iRules.get(1);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1144,Rule startRule = iRules.get(0);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1145,Rule endRule = iRules.get(1);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1389,"tatic PrecalculatedZone create(String id, boolean outputID, ArrayList transitions,"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1389,"static PrecalculatedZone create(String id, boolean outputID, ArrayList<Transition> transitions,"
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1403,ransition tr = (Transition)transitions.get(i);
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1403,Transition tr = transitions.get(i);
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1639,et poolSet = new HashSet();
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1639,Set<String> poolSet = new HashSet<String>();
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1649,terator it = poolSet.iterator();
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1649,Iterator<String> it = poolSet.iterator();
False,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1651,ool[i] = (String)it.next();
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1651,pool[i] = it.next();
False,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,2,*  Copyright 2001-2009 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,21,import java.util.Map;
True,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,34,"@SuppressWarnings(""unchecked"")"
False,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,35,rivate HashMap iByLocaleCache = createCache();
True,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,37,"private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();"
False,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,55,ashMap byIdCache = (HashMap)iByLocaleCache.get(locale);
True,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,57,"Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);"
False,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,60,ashMap byNameKeyCache = (HashMap)byIdCache.get(id);
True,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java,62,"Map<String, Object> byNameKeyCache = byIdCache.get(id);"
False,JodaTime/src/java/org/joda/time/tz/Provider.java,JodaTime/src/java/org/joda/time/tz/Provider.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/tz/Provider.java,JodaTime/src/java/org/joda/time/tz/Provider.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/tz/Provider.java,JodaTime/src/java/org/joda/time/tz/Provider.java,40,et getAvailableIDs();
True,JodaTime/src/java/org/joda/time/tz/Provider.java,JodaTime/src/java/org/joda/time/tz/Provider.java,42,Set<String> getAvailableIDs();
False,JodaTime/src/java/org/joda/time/tz/UTCProvider.java,JodaTime/src/java/org/joda/time/tz/UTCProvider.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/tz/UTCProvider.java,JodaTime/src/java/org/joda/time/tz/UTCProvider.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/tz/UTCProvider.java,JodaTime/src/java/org/joda/time/tz/UTCProvider.java,53,ublic Set getAvailableIDs() {
True,JodaTime/src/java/org/joda/time/tz/UTCProvider.java,JodaTime/src/java/org/joda/time/tz/UTCProvider.java,54,public Set<String> getAvailableIDs() {
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,29,mport java.util.Iterator;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,34,import java.util.Map.Entry;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,143,"tatic void writeZoneInfoMap(DataOutputStream dout, Map zimap) throws IOException {"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,143,"static void writeZoneInfoMap(DataOutputStream dout, Map<String, DateTimeZone> zimap) throws IOException {"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,145,ap idToIndex = new HashMap(zimap.size());
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,146,reeMap indexToId = new TreeMap();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,145,"Map<String, Short> idToIndex = new HashMap<String, Short>(zimap.size());"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,146,"TreeMap<Short, String> indexToId = new TreeMap<Short, String>();"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,148,terator it = zimap.entrySet().iterator();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,150,hile (it.hasNext()) {
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,151,ap.Entry entry = (Map.Entry)it.next();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,149,"for (Entry<String, DateTimeZone> entry : zimap.entrySet()) {"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,154,hort index = new Short(count);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,152,Short index = Short.valueOf(count);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,163,hort index = new Short(count);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,161,Short index = Short.valueOf(count);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,174,t = indexToId.values().iterator();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,175,hile (it.hasNext()) {
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,176,out.writeUTF((String)it.next());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,172,for (String id : indexToId.values()) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,173,dout.writeUTF(id);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,181,t = zimap.entrySet().iterator();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,182,hile (it.hasNext()) {
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,183,ap.Entry entry = (Map.Entry)it.next();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,184,tring id = (String)entry.getKey();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,185,out.writeShort(((Short)idToIndex.get(id)).shortValue());
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,186,d = ((DateTimeZone)entry.getValue()).getID();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,187,out.writeShort(((Short)idToIndex.get(id)).shortValue());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,178,"for (Entry<String, DateTimeZone> entry : zimap.entrySet()) {"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,179,String id = entry.getKey();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,180,dout.writeShort(idToIndex.get(id).shortValue());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,181,id = entry.getValue().getID();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,182,dout.writeShort(idToIndex.get(id).shortValue());
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,265,ist transitions = new ArrayList();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,260,List<Long> transitions = new ArrayList<Long>();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,294,ransitions.add(new Long(millis));
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,289,transitions.add(Long.valueOf(millis));
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,313,ong trans = ((Long)transitions.get(i)).longValue();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,308,long trans = transitions.get(i).longValue();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,330,rivate Map iRuleSets;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,325,"private Map<String, RuleSet> iRuleSets;"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,333,rivate List iZones;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,328,private List<Zone> iZones;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,336,rivate List iLinks;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,331,private List<String> iLinks;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,339,RuleSets = new HashMap();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,340,Zones = new ArrayList();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,341,Links = new ArrayList();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,334,"iRuleSets = new HashMap<String, RuleSet>();"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,335,iZones = new ArrayList<Zone>();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,336,iLinks = new ArrayList<String>();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,350,"ublic Map compile(File outputDir, File[] sources) throws IOException {"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,345,"public Map<String, DateTimeZone> compile(File outputDir, File[] sources) throws IOException {"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,368,ap map = new TreeMap();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,363,"Map<String, DateTimeZone> map = new TreeMap<String, DateTimeZone>();"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,371,one zone = (Zone)iZones.get(i);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,366,Zone zone = iZones.get(i);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,403,tring id = (String)iLinks.get(i);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,404,tring alias = (String)iLinks.get(i + 1);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,405,ateTimeZone tz = (DateTimeZone)map.get(id);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,398,String id = iLinks.get(i);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,399,String alias = iLinks.get(i + 1);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,400,DateTimeZone tz = map.get(id);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,427,ap zimap = new TreeMap(String.CASE_INSENSITIVE_ORDER);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,422,"Map<String, DateTimeZone> zimap = new TreeMap<String, DateTimeZone>(String.CASE_INSENSITIVE_ORDER);"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,471,uleSet rs = (RuleSet)iRuleSets.get(r.iName);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,466,RuleSet rs = iRuleSets.get(r.iName);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,678,rivate List iRules;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,673,private List<Rule> iRules;
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,681,Rules = new ArrayList();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,676,iRules = new ArrayList<Rule>();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,686,f (!(rule.iName.equals(((Rule)iRules.get(0)).iName))) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,681,if (!(rule.iName.equals(iRules.get(0).iName))) {
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,697,ule rule = (Rule)iRules.get(i);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,692,Rule rule = iRules.get(i);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,756,"ublic void addToBuilder(DateTimeZoneBuilder builder, Map ruleSets) {"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,751,"public void addToBuilder(DateTimeZoneBuilder builder, Map<String, RuleSet> ruleSets) {"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,762,ap ruleSets)
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,757,"Map<String, RuleSet> ruleSets)"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,776,uleSet rs = (RuleSet)ruleSets.get(zone.iRules);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java,771,RuleSet rs = ruleSets.get(zone.iRules);
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,49,rivate final Map iZoneInfoMap;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,49,"private final Map<String, Object> iZoneInfoMap;"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,150,f (obj instanceof SoftReference) {
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,151,ateTimeZone tz = (DateTimeZone)((SoftReference)obj).get();
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,150,if (obj instanceof SoftReference<?>) {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,151,"@SuppressWarnings(""unchecked"")"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,152,SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,153,DateTimeZone tz = ref.get();
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,168,ublic synchronized Set getAvailableIDs() {
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,170,public synchronized Set<String> getAvailableIDs() {
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,172,eturn new TreeSet(iZoneInfoMap.keySet());
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,174,return new TreeSet<String>(iZoneInfoMap.keySet());
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,226,"ZoneInfoMap.put(id, new SoftReference(tz));"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,228,"iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,249,rivate static Map loadZoneInfoMap(InputStream in) throws IOException {
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,250,ap map = new TreeMap(String.CASE_INSENSITIVE_ORDER);
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,251,"private static Map<String, Object> loadZoneInfoMap(InputStream in) throws IOException {"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,252,"Map<String, Object> map = new TreeMap<String, Object>(String.CASE_INSENSITIVE_ORDER);"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,260,"ap.put(""UTC"", new SoftReference(DateTimeZone.UTC));"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,262,"map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));"
False,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,270,"rivate static void readZoneInfoMap(DataInputStream din, Map zimap) throws IOException {"
True,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java,272,"private static void readZoneInfoMap(DataInputStream din, Map<String, Object> zimap) throws IOException {"
False,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,244,ry {
False,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,245,"est1.compareTo(""Hello"");"
False,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,246,ail();
False,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,247, catch (ClassCastException ex) {
False,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,248,/ expected
False,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,250,ry {
False,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,251,"est1.compareTo(new Period(0, 0, 0, 21, 0, 0, 0, 0, PeriodType.days()));"
False,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,252,ail();
False,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,253, catch (ClassCastException ex) {
False,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,254,/ expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,244,//        try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,245,"//            test1.compareTo(""Hello"");"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,246,//            fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,247,//        } catch (ClassCastException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,248,//            // expected
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,250,//        try {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,251,"//            test1.compareTo(new Period(0, 0, 0, 21, 0, 0, 0, 0, PeriodType.days()));"
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,252,//            fail();
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,253,//        } catch (ClassCastException ex) {
True,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java,254,//            // expected
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,324,ry {
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,325,est1.compareTo(new Date());
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,326,ail();
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,327, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,324,//        try {
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,325,//            test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,326,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,327,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,362,ry {
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,363,est1.compareTo(new Date());
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,364,ail();
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,365, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,362,//        try {
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,363,//            test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,364,//            fail();
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,365,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,174,ry {
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,175,est1.compareTo(new Long(123L));
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,176,ail();
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,177, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,174,//        try {
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,175,//            test1.compareTo(new Long(123L));
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,176,//            fail();
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,177,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,243,ry {
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,244,est1.compareTo(new Date());
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,245,ail();
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,246, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,243,//        try {
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,244,//            test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,245,//            fail();
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,246,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,2,  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,23,mport java.util.Date;
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,354,ry {
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,355,est1.compareTo(new Date());
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,356,ail();
False,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,357, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,353,//        try {
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,354,//            test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,355,//            fail();
True,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java,356,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,2,  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,23,mport java.util.Date;
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,328,ry {
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,329,est1.compareTo(new Date());
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,330,ail();
False,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,331, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,327,//        try {
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,328,//            test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,329,//            fail();
True,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java,330,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,2,  Copyright 2001-2007 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,23,mport java.util.Date;
False,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,342,ry {
False,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,343,est1.compareTo(new Date());
False,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,344,ail();
False,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,345, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,341,//        try {
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,342,//            test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,343,//            fail();
True,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java,344,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,305,ry {
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,306,est1.compareTo(new Date());
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,307,ail();
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,308, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,305,//        try {
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,306,//            test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,307,//            fail();
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,308,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,23,mport java.util.Date;
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,244,ry {
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,245,est1.compareTo(new Date());
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,246,ail();
False,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,247, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,243,//        try {
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,244,//            test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,245,//            fail();
True,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,JodaTime/src/test/org/joda/time/TestPartial_Basics.java,246,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,23,mport java.util.Date;
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,280,ry {
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,281,est1.compareTo(new Date());
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,282,ail();
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,283, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,279,//        try {
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,280,//            test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,281,//            fail();
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,282,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,2,  Copyright 2001-2006 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,23,mport java.util.Date;
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,264,ry {
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,265,est1.compareTo(new Date());
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,266,ail();
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,267, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,263,//        try {
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,264,//            test1.compareTo(new Date());
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,265,//            fail();
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,266,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,188,ry {
False,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,189,"illisDurationField.INSTANCE.compareTo("""");"
False,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,190,ail();
False,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,191, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,188,//        try {
True,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,189,"//            MillisDurationField.INSTANCE.compareTo("""");"
True,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,190,//            fail();
True,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java,191,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,247,ry {
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,248,"Field.compareTo("""");"
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,249,ail();
False,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,250, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,247,//        try {
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,248,"//            iField.compareTo("""");"
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,249,//            fail();
True,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java,250,//        } catch (ClassCastException ex) {}
False,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,2,  Copyright 2001-2005 Stephen Colebourne
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,2,*  Copyright 2001-2009 Stephen Colebourne
False,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,264,ry {
False,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,265,"Field.compareTo("""");"
False,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,266,ail();
False,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,267, catch (ClassCastException ex) {}
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,264,//        try {
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,265,"//            iField.compareTo("""");"
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,266,//            fail();
True,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java,267,//        } catch (ClassCastException ex) {}

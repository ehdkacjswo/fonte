is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,928,if (nextLocal == (instantLocal - offsetLocal)) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,929,nextLocal = Long.MAX_VALUE;
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,932,if (nextAdjusted == (instantLocal - offset)) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,933,nextAdjusted = Long.MAX_VALUE;
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,21,import org.joda.time.tz.DateTimeZoneBuilder;
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1032,public void test_DateTime_JustAfterLastEverOverlap() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1033,// based on America/Argentina/Catamarca in file 2009s
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1034,DateTimeZone zone = new DateTimeZoneBuilder()
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1035,.setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR)
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1036,".addRecurringSavings(""SUMMER"", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008,"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1037,"'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR)"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1038,".addRecurringSavings(""WINTER"", 0, 2000, 2008,"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1039,"'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR)"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1040,".toDateTimeZone(""Zone"", false);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1042,"LocalDate date = new LocalDate(2008, 8, 10);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1043,"assertEquals(""2008-08-10"", date.toString());"
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1045,DateTime dt = date.toDateTimeAtStartOfDay(zone);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1046,System.out.println(dt);
True,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java,1047,"assertEquals(""2008-08-10T00:00:00.000-03:00"", dt.toString());"

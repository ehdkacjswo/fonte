is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,182," This method returns the amount of the overlap, only if the"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,183, intervals do overlap.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,182,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,183,* An interval overlaps another if it shares some common part of the
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,184,"* datetime continuum. This method returns the amount of the overlap,"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,185,* only if the intervals actually do overlap.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,188,* When two intervals are compared the result is one of three states:
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,189,"* (a) they abut, (b) there is a gap between them, (c) they overlap."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,190,"* The abuts state takes precedence over the other two, thus a zero duration"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,191,* interval at the start of a larger interval abuts and does not overlap.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,192,* <p>
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,210, This method returns the amount of the gap only if the
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,211, intervals do actually have a gap between them.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,217,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,218,* An interval has a gap to another interval if there is a non-zero
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,219,* duration between them. This method returns the amount of the gap only
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,220,* if the intervals do actually have a gap between them.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,223,* When two intervals are compared the result is one of three states:
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,224,"* (a) they abut, (b) there is a gap between them, (c) they overlap."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,225,"* The abuts state takes precedence over the other two, thus a zero duration"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,226,* interval at the start of a larger interval abuts and does not overlap.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,227,* <p>
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,242," An interval abuts if it starts immediately after, or"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,243, ends immediately before this interval without overlap.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,244, Thus this method returns true if
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,245, <code>thisStart == otherEnd || thisEnd == otherStart </code>.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,246, <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,256,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,257,"* An interval abuts if it starts immediately after, or ends immediately"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,258,* before this interval without overlap.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,261,* When two intervals are compared the result is one of three states:
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,262,"* (a) they abut, (b) there is a gap between them, (c) they overlap."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,263,"* The abuts state takes precedence over the other two, thus a zero duration"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,264,* interval at the start of a larger interval abuts and does not overlap.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,265,* <p>
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,84, Does this time interval contain or equal the specified instant.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,84,* Does this time interval contain the specified instant.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,86, Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,87, The instant is contained if it is at the start or middle of this interval
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,88, but not at the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,89, <p>
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,90, A zero duration interval represents the smallest possible interval
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,91, and only contains the instant equal to its start and end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,86,* Non-zero duration intervals are inclusive of the start instant and
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,87,* exclusive of the end. A zero duration interval cannot contain anything.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,101, [14:00 to 14:00) contains 14:00  = true (equal)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,97,* [14:00 to 14:00) contains 14:00  = false (zero duration contains nothing)
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,103, Passng in a <code>null</code> parameter will have the same effect as
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,104, calling {@link #containsNow()}.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,112, Does this time interval contain or equal the specified time interval.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,106,* Does this time interval contain the specified time interval.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,114, Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,115," The other interval is contained if this interval wholly contains, starts,"
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,116, finishes or equals it.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,108,* Non-zero duration intervals are inclusive of the start instant and
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,109,* exclusive of the end. The other interval is contained if this interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,110,"* wholly contains, starts, finishes or equals it."
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,111,* A zero duration interval cannot contain anything.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,118, A zero duration interval represents the smallest possible interval
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,119, and will contain itself (because it is equal to itself). It will also
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,120," be contained by a larger interval at the start, middle but not the end."
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,113,* When two intervals are compared the result is one of three states:
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,114,"* (a) they abut, (b) there is a gap between them, (c) they overlap."
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,115,* The <code>contains</code> method is not related to these states.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,116,"* In particular, a zero duration interval is contained at the start of"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,117,"* a larger interval, but does not overlap (it abuts instead)."
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,134, [14:00 to 14:00) contains [14:00 to 14:00)  = true (equal)
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,131,* [14:00 to 14:00) contains [14:00 to 14:00)  = false (zero duration contains nothing)
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,136, Passng in a <code>null</code> parameter will have the same effect as
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,137, calling {@link #containsNow()}.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,139," @param interval  the time interval to compare to, null means a zero length interval now"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,134,"* @param interval  the time interval to compare to, null means a zero duration interval now"
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,147, Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,148, The intervals overlap if at least some of the time interval is in common.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,142,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,143,* An interval overlaps another if it shares some common part of the
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,144,* datetime continuum.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,150, A zero duration interval represents the smallest possible interval
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,151, and will overlap itself and larger intervals. The size of the overlap will
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,152, be a zero duration interval equal to the original zero duration interval.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,146,* When two intervals are compared the result is one of three states:
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,147,"* (a) they abut, (b) there is a gap between them, (c) they overlap."
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,148,"* The abuts state takes precedence over the other two, thus a zero duration"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,149,* interval at the start of a larger interval abuts and does not overlap.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,162, [09:00 to 10:00) overlaps [09:00 to 09:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,159,* [09:00 to 10:00) overlaps [09:00 to 09:00)  = false (abuts before)
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,176, [14:00 to 14:00) overlaps [14:00 to 14:00)  = true
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,173,* [14:00 to 14:00) overlaps [14:00 to 14:00)  = false (abuts before and after)
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,88, Does this time interval contain or equal the specified millisecond instant.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,88,* Does this time interval contain the specified millisecond instant.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,90, Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,91, A zero duration intervals only contains the instant equal to its start and end.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,92, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,93," NOTE: From v1.3, comparing a zero duration interval to an instant"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,94, with the same value will return true because they are equal
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,90,* Non-zero duration intervals are inclusive of the start instant and
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,91,* exclusive of the end. A zero duration interval cannot contain anything.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,103,eturn (millisInstant >= thisStart && millisInstant < thisEnd) ||
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,104,thisStart == millisInstant && thisEnd == millisInstant);
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,100,return (millisInstant >= thisStart && millisInstant < thisEnd);
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,108, Does this time interval contain or equal the current instant.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,109, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,110, Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,111, A zero duration intervals only contains the instant equal to its start and end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,104,* Does this time interval contain the current instant.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,113," NOTE: From v1.3, comparing a zero duration interval to an instant"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,114, with the same value will return true because they are equal
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,106,* Non-zero duration intervals are inclusive of the start instant and
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,107,* exclusive of the end. A zero duration interval cannot contain anything.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,123, Does this time interval contain or equal the specified instant.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,116,* Does this time interval contain the specified instant.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,125, Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,126, The instant is contained if it is at the start or middle of this interval
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,127, but not at the end.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,128, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,129, A zero duration interval represents the smallest possible interval
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,130, and only contains the instant equal to its start and end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,118,* Non-zero duration intervals are inclusive of the start instant and
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,119,* exclusive of the end. A zero duration interval cannot contain anything.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,140, [14:00 to 14:00) contains 14:00  = true (equal)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,129,* [14:00 to 14:00) contains 14:00  = false (zero duration contains nothing)
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,144, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,145," NOTE: From v1.3, comparing a zero duration interval to an instant"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,146, with the same value will return true because they are equal
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,159, Does this time interval contain or equal the specified time interval.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,145,* Does this time interval contain the specified time interval.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,161, Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,162," The other interval is contained if this interval wholly contains, starts,"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,163, finishes or equals it.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,147,* Non-zero duration intervals are inclusive of the start instant and
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,148,* exclusive of the end. The other interval is contained if this interval
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,149,"* wholly contains, starts, finishes or equals it."
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,150,* A zero duration interval cannot contain anything.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,165, A zero duration interval represents the smallest possible interval
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,166, and will contain itself (because it is equal to itself). It will also
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,167," be contained by a larger interval at the start, middle but not the end."
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,152,* When two intervals are compared the result is one of three states:
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,153,"* (a) they abut, (b) there is a gap between them, (c) they overlap."
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,154,* The <code>contains</code> method is not related to these states.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,155,"* In particular, a zero duration interval is contained at the start of"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,156,"* a larger interval, but does not overlap (it abuts instead)."
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,181, [14:00 to 14:00) contains [14:00 to 14:00)  = true (equal)
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,170,* [14:00 to 14:00) contains [14:00 to 14:00)  = false (zero duration contains nothing)
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,185, <p>
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,186," NOTE: From v1.3, comparing a zero duration interval to itself"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,187, will return true because they are equal
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,200,eturn (thisStart <= otherStart && otherStart < thisEnd && otherEnd <= thisEnd) ||
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,201,thisStart == otherStart && thisEnd == otherEnd);
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,186,return (thisStart <= otherStart && otherStart < thisEnd && otherEnd <= thisEnd);
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,207, Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,208, The intervals overlap if at least some of the time interval is in common.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,192,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,193,* An interval overlaps another if it shares some common part of the
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,194,* datetime continuum.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,210, A zero duration interval represents the smallest possible interval
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,211, and will overlap itself and larger intervals. The size of the overlap will
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,212, be a zero duration interval equal to the original zero duration interval.
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,196,* When two intervals are compared the result is one of three states:
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,197,"* (a) they abut, (b) there is a gap between them, (c) they overlap."
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,198,"* The abuts state takes precedence over the other two, thus a zero duration"
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,199,* interval at the start of a larger interval abuts and does not overlap.
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,222, [09:00 to 10:00) overlaps [09:00 to 09:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,209,* [09:00 to 10:00) overlaps [09:00 to 09:00)  = false (abuts before)
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,236, [14:00 to 14:00) overlaps [14:00 to 14:00)  = true
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,223,* [14:00 to 14:00) overlaps [14:00 to 14:00)  = false (abuts before and after)
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,239," NOTE: From v1.3, comparing a zero duration interval at the start of"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,240," another interval will now return true, and comparing a zero duration"
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,241, interval to itself will return true
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,247,f (interval == null) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,248,eturn containsNow();
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,250,ong otherStart = interval.getStartMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,251,ong otherEnd = interval.getEndMillis();
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,255,eturn (thisStart < otherEnd && otherStart < thisEnd) ||
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,256,thisStart == otherStart &&
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,257,thisStart == thisEnd || otherStart == otherEnd));
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,233,if (interval == null) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,234,long now = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,235,return (thisStart < now && now < thisEnd);
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,236,}  else {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,237,long otherStart = interval.getStartMillis();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,238,long otherEnd = interval.getEndMillis();
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,239,return (thisStart < otherEnd && otherStart < thisEnd);
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,324,"/ [10,10) [10,20) - abuts and contains-one-way and overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,324,"// [10,10) [10,20) - abuts and contains-one-way"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,328,"ssertEquals(true,  test1020.overlaps(interval));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,328,"assertEquals(false, test1020.overlaps(interval));  // abuts, so can't overlap"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,332,"ssertEquals(true,  interval.overlaps(test1020));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,332,"assertEquals(false, interval.overlaps(test1020));  // abuts, so can't overlap"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,388,"/ [10,10) [10,10) - abuts and overlaps"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,388,"// [10,10) [10,10) - abuts"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,391,"ssertEquals(true,  test1010.overlaps(test1010));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,392,"ssertEquals(true,  test1010.contains(test1010));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,391,"assertEquals(false, test1010.overlaps(test1010));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,392,"assertEquals(false, test1010.contains(test1010));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,408,"ssertEquals(true,  interval33.contains(3));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,408,"assertEquals(false, interval33.contains(3));  // zero length duration contains nothing"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,430,"ssertEquals(true,  interval33.containsNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,430,"assertEquals(false, interval33.containsNow());  // zero length duration contains nothing"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,463,"ssertEquals(true,  interval33.contains(new Instant(3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,463,"assertEquals(false, interval33.contains(new Instant(3)));  // zero length duration contains nothing"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,520,"ssertEquals(true,  interval33.contains(interval33));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,520,"assertEquals(false, interval33.contains(interval33));  // zero length duration contains nothing"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,530,"ssertEquals(true,  interval33.contains((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,530,"assertEquals(false, interval33.contains((ReadableInterval) null));  // zero length duration contains nothing"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,541,"ssertEquals(true,  interval37.overlaps(new Interval(3, 3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,541,"assertEquals(false, interval37.overlaps(new Interval(3, 3)));  // abuts before"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,576,"ssertEquals(true,  interval37.overlaps((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,576,"assertEquals(false, interval37.overlaps((ReadableInterval) null));  // abuts before"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,587,"ssertEquals(true,  interval33.overlaps((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,587,"assertEquals(false, interval33.overlaps((ReadableInterval) null));  // abuts before and after"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,591,"ssertEquals(true,  interval33.overlaps(interval33));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,592,"ssertEquals(true,  interval33.overlaps(interval37));"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,593,"ssertEquals(true,  interval37.overlaps(interval33));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,591,"assertEquals(false, interval33.overlaps(interval33));  // abuts before and after"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,592,"assertEquals(false, interval33.overlaps(interval37));  // abuts before"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,593,"assertEquals(false, interval37.overlaps(interval33));  // abuts before"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,605,"ssertEquals(new Interval(3, 3), interval37.overlap(new Interval(3, 3)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,605,"assertEquals(null, interval37.overlap(new Interval(3, 3)));  // abuts before"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,631,"ssertEquals(new Interval(3, 3), interval37.overlap((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,631,"assertEquals(null, interval37.overlap((ReadableInterval) null));  // abuts before"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,642,"ssertEquals(new Interval(3, 3), interval33.overlap((ReadableInterval) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,642,"assertEquals(null, interval33.overlap((ReadableInterval) null));  // abuts before and after"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,266,"ssertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,266,"assertEquals(false, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,292,"ssertEquals(true, empty.overlaps(empty));"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,293,"ssertEquals(true, empty.overlaps(test));"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,294,"ssertEquals(true, test.overlaps(empty));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,292,"assertEquals(false, empty.overlaps(empty));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,293,"assertEquals(false, empty.overlaps(test));"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,294,"assertEquals(false, test.overlaps(empty));"

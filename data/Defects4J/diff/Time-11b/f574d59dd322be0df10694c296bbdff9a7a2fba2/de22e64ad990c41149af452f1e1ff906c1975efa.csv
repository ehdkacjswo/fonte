is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,237,"nt hoursInMinutes = FieldUtils.safeMultiplyToInt(hoursOffset, 60);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,237,"int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,243,"ffset = FieldUtils.safeMultiplyToInt(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,243,"offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);"
False,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,597,"ieldUtils.safeMultiplyToInt(period.getValue(i), scalar));"
True,JodaTime/src/java/org/joda/time/Partial.java,JodaTime/src/java/org/joda/time/Partial.java,597,"FieldUtils.safeMultiply(period.getValue(i), scalar));"
False,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,513,"ieldUtils.safeMultiplyToInt(period.getValue(i), scalar));"
True,JodaTime/src/java/org/joda/time/TimeOfDay.java,JodaTime/src/java/org/joda/time/TimeOfDay.java,513,"FieldUtils.safeMultiply(period.getValue(i), scalar));"
False,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,399,"ieldUtils.safeMultiplyToInt(period.getValue(i), scalar));"
True,JodaTime/src/java/org/joda/time/YearMonthDay.java,JodaTime/src/java/org/joda/time/YearMonthDay.java,399,"FieldUtils.safeMultiply(period.getValue(i), scalar));"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,116,* @since 1.2
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,117,"ublic static long safeMultiply(long val1, long val2) {"
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,118,f (val1 == 0 || val2 == 0) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,118,"public static int safeMultiply(int val1, int val2) {"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,119,long total = (long) val1 * (long) val2;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,120,if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,121,throw new ArithmeticException
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,122,"(""The calculation caused an overflow: "" + val1 + "" * "" + val2);"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,124,return (int) total;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,128,* Multiply two values throwing an exception if overflow occurs.
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,130,* @param val1  the first value
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,131,* @param scalar  the second value
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,132,* @return the new total
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,133,* @throws ArithmeticException if the value is too big or too small
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,134,* @since 1.2
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,136,"public static long safeMultiply(long val1, int scalar) {"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,137,switch (scalar) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,138,case -1:
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,139,return -val1;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,140,case 0:
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,142,case 1:
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,143,return val1;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,145,long total = val1 * scalar;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,146,if (total / scalar != val1) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,147,throw new ArithmeticException
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,148,"(""The calculation caused an overflow: "" + val1 + "" * "" + scalar);"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,150,return total;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,154,* Multiply two values throwing an exception if overflow occurs.
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,156,* @param val1  the first value
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,157,* @param val2  the second value
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,158,* @return the new total
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,159,* @throws ArithmeticException if the value is too big or too small
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,161,"public static long safeMultiply(long val1, long val2) {"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,162,if (val2 == 1) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,163,return val1;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,165,if (val2 == 0) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,166,return 0;

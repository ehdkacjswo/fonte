is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,165,Chronology = ISOChronology.getInstance(DateTimeZone.getInstance(id));
True,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,JodaTime/src/example/org/joda/example/time/AgeCalculator.java,165,iChronology = ISOChronology.getInstance(DateTimeZone.forID(id));
False,JodaTime/src/example/org/joda/example/time/TimeZoneTable.java,JodaTime/src/example/org/joda/example/time/TimeZoneTable.java,49,"ones[i++] = new ZoneData(id, DateTimeZone.getInstance(id));"
True,JodaTime/src/example/org/joda/example/time/TimeZoneTable.java,JodaTime/src/example/org/joda/example/time/TimeZoneTable.java,49,"zones[i++] = new ZoneData(id, DateTimeZone.forID(id));"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,29,import java.util.TimeZone;
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,117,"Default = getInstance(System.getProperty(""user.timezone""));"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,118,"cDefault = forID(System.getProperty(""user.timezone""));"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,122,Default = getInstance(java.util.TimeZone.getDefault());
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,123,cDefault = forTimeZone(TimeZone.getDefault());
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,161, Get the time zone by id.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,164,* Gets a time zone instance for the specified time zone id.
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,175,ublic static DateTimeZone getInstance(String id) throws IllegalArgumentException {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,178,public static DateTimeZone forID(String id) {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,200, Get the time zone by the number of hours difference from UTC.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,203,* Gets a time zone instance for the specified offset to UTC in hours.
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,209,ublic static DateTimeZone getInstance(int hoursOffset) throws IllegalArgumentException {
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,210,"eturn getInstance(hoursOffset, 0);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,212,public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,213,"return forOffsetHoursMinutes(hoursOffset, 0);"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,214, Get the time zone by the number of hours and minutes difference from UTC.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,217,* Gets a time zone instance for the specified offset to UTC in hours and minutes.
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,226,"ublic static DateTimeZone getInstance(int hoursOffset, int minutesOffset) throws IllegalArgumentException {"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,229,"public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {"
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,245,tring id = printOffset(offset);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,246,"eturn fixedOffsetZone(id, offset);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,248,return forOffsetMillis(offset);
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,250, Get the time zone by Java TimeZone.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,252,* Gets a time zone instance for the specified offset to UTC in milliseconds.
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,254,* @param millisOffset  the offset in millis from UTC
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,255,* @return the DateTimeZone object for the offset
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,257,public static DateTimeZone forOffsetMillis(int millisOffset) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,258,String id = printOffset(millisOffset);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,259,"return fixedOffsetZone(id, millisOffset);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,263,* Gets a time zone instance for a JDK TimeZone.
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,261,ublic static DateTimeZone getInstance(java.util.TimeZone zone) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,274,public static DateTimeZone forTimeZone(TimeZone zone) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,316,"* Deprecated, use {@link #forID(String)}."
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,318,* @deprecated use forID(String)
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,320,public static DateTimeZone getInstance(String id) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,321,return forID(id);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,325,"* Deprecated, use {@link #forOffsetHours(int)}."
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,327,* @deprecated use forOffsetHours(int)
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,329,public static DateTimeZone getInstance(int hours) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,330,return forOffsetHours(hours);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,334,"* Deprecated, use {@link #forOffsetHoursMinutes(int, int)}."
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,336,"* @deprecated use forOffsetHoursMinutes(int,int)"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,338,"public static DateTimeZone getInstance(int hours, int mins) {"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,339,"return forOffsetHoursMinutes(hours, mins);"
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,343,"* Deprecated, use {@link #forTimeZone(TimeZone)}."
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,345,* @deprecated use forTimeZone(TimeZone)
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,347,public static DateTimeZone getInstance(TimeZone jdkZone) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,348,return forTimeZone(jdkZone);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,360,if (offset == 0) {
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,361,return DateTimeZone.UTC;
False,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,928,eturn getInstance(iID);
True,JodaTime/src/java/org/joda/time/DateTimeZone.java,JodaTime/src/java/org/joda/time/DateTimeZone.java,982,return forID(iID);
False,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,71,one = DateTimeZone.getInstance(cal.getTimeZone());
True,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,JodaTime/src/java/org/joda/time/convert/CalendarConverter.java,71,zone = DateTimeZone.forTimeZone(cal.getTimeZone());
False,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,31,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,JodaTime/src/test/org/joda/time/TestAbstractPartial.java,31,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,30,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestBasePartial.java,JodaTime/src/test/org/joda/time/TestBasePartial.java,30,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,40,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,41,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,40,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestChronology.java,JodaTime/src/test/org/joda/time/TestChronology.java,41,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,47,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,48,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,49,"rivate static final DateTimeZone NEWYORK = DateTimeZone.getInstance(""America/New_York"");"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,47,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,48,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java,49,"private static final DateTimeZone NEWYORK = DateTimeZone.forID(""America/New_York"");"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,38,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,39,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,38,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java,39,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,32,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,33,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,32,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java,33,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,56,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,57,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,56,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,JodaTime/src/test/org/joda/time/TestDateTimeUtils.java,57,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,67,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,68,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,67,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,68,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,187,ublic void testGetInstance_String() {
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,188,"ssertEquals(DateTimeZone.getDefault(), DateTimeZone.getInstance((String) null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,187,public void testForID_String() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,188,"assertEquals(DateTimeZone.getDefault(), DateTimeZone.forID((String) null));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,190,"ateTimeZone zone = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,190,"DateTimeZone zone = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,193,"one = DateTimeZone.getInstance(""UTC"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,193,"zone = DateTimeZone.forID(""UTC"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,196,"one = DateTimeZone.getInstance(""+00:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,196,"zone = DateTimeZone.forID(""+00:00"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,199,"one = DateTimeZone.getInstance(""+00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,199,"zone = DateTimeZone.forID(""+00"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,202,"one = DateTimeZone.getInstance(""+01:23"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,202,"zone = DateTimeZone.forID(""+01:23"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,207,"one = DateTimeZone.getInstance(""-02:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,207,"zone = DateTimeZone.forID(""-02:00"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,213,"ateTimeZone.getInstance(""SST"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,213,"DateTimeZone.forID(""SST"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,217,"ateTimeZone.getInstance(""Europe/UK"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,217,"DateTimeZone.forID(""Europe/UK"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,221,"ateTimeZone.getInstance(""+"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,221,"DateTimeZone.forID(""+"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,225,"ateTimeZone.getInstance(""+0"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,225,"DateTimeZone.forID(""+0"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,231,ublic void testGetInstance_int() {
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,232,"ssertEquals(DateTimeZone.UTC, DateTimeZone.getInstance(0));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,233,"ssertEquals(DateTimeZone.getInstance(""+03:00""), DateTimeZone.getInstance(3));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,234,"ssertEquals(DateTimeZone.getInstance(""-02:00""), DateTimeZone.getInstance(-2));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,231,public void testForOffsetHours_int() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,232,"assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,233,"assertEquals(DateTimeZone.forID(""+03:00""), DateTimeZone.forOffsetHours(3));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,234,"assertEquals(DateTimeZone.forID(""-02:00""), DateTimeZone.forOffsetHours(-2));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,236,ateTimeZone.getInstance(999999);
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,236,DateTimeZone.forOffsetHours(999999);
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,242,ublic void testGetInstance_int_int() {
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,243,"ssertEquals(DateTimeZone.UTC, DateTimeZone.getInstance(0));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,244,"ssertEquals(DateTimeZone.getInstance(""+03:15""), DateTimeZone.getInstance(3, 15));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,245,"ssertEquals(DateTimeZone.getInstance(""-02:00""), DateTimeZone.getInstance(-2, 0));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,246,"ssertEquals(DateTimeZone.getInstance(""-02:30""), DateTimeZone.getInstance(-2, 30));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,242,public void testForOffsetHoursMinutes_int_int() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,243,"assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,244,"assertEquals(DateTimeZone.forID(""+03:15""), DateTimeZone.forOffsetHoursMinutes(3, 15));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,245,"assertEquals(DateTimeZone.forID(""-02:00""), DateTimeZone.forOffsetHoursMinutes(-2, 0));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,246,"assertEquals(DateTimeZone.forID(""-02:30""), DateTimeZone.forOffsetHoursMinutes(-2, 30));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,248,"ateTimeZone.getInstance(2, 60);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,248,"DateTimeZone.forOffsetHoursMinutes(2, 60);"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,252,"ateTimeZone.getInstance(-2, 60);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,252,"DateTimeZone.forOffsetHoursMinutes(-2, 60);"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,256,"ateTimeZone.getInstance(2, -1);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,256,"DateTimeZone.forOffsetHoursMinutes(2, -1);"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,260,"ateTimeZone.getInstance(-2, -1);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,260,"DateTimeZone.forOffsetHoursMinutes(-2, -1);"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,264,"ateTimeZone.getInstance(999999, 0);"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,264,"DateTimeZone.forOffsetHoursMinutes(999999, 0);"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,270,ublic void testGetInstance_TimeZone() {
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,271,"ssertEquals(DateTimeZone.getDefault(), DateTimeZone.getInstance((TimeZone) null));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,270,public void testForOffsetMillis_int() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,271,"assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,272,"assertEquals(DateTimeZone.forID(""+03:00""), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,273,"assertEquals(DateTimeZone.forID(""-02:00""), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,274,"assertEquals(DateTimeZone.forID(""+04:45:17.045""),"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,275,DateTimeZone.forOffsetMillis(
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,276,4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45));
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,280,public void testForTimeZone_TimeZone() {
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,281,"assertEquals(DateTimeZone.getDefault(), DateTimeZone.forTimeZone((TimeZone) null));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,273,"ateTimeZone zone = DateTimeZone.getInstance(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,283,"DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(""Europe/London""));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,275,"ssertSame(DateTimeZone.UTC, DateTimeZone.getInstance(TimeZone.getTimeZone(""UTC"")));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,285,"assertSame(DateTimeZone.UTC, DateTimeZone.forTimeZone(TimeZone.getTimeZone(""UTC"")));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,277,"one = DateTimeZone.getInstance(TimeZone.getTimeZone(""+00:00""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,287,"zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(""+00:00""));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,280,"one = DateTimeZone.getInstance(TimeZone.getTimeZone(""GMT+00:00""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,290,"zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(""GMT+00:00""));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,283,"one = DateTimeZone.getInstance(TimeZone.getTimeZone(""GMT+00:00""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,293,"zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(""GMT+00:00""));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,286,"one = DateTimeZone.getInstance(TimeZone.getTimeZone(""GMT+00""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,296,"zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(""GMT+00""));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,289,"one = DateTimeZone.getInstance(TimeZone.getTimeZone(""GMT+01:23""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,299,"zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(""GMT+01:23""));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,294,"one = DateTimeZone.getInstance(TimeZone.getTimeZone(""GMT-02:00""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,304,"zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(""GMT-02:00""));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,298,"one = DateTimeZone.getInstance(TimeZone.getTimeZone(""EST""));"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,308,"zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(""EST""));"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,546,"ateTimeZone zone = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,556,"DateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,551,"ateTimeZone zone = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,561,"DateTimeZone zone = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,557,"ateTimeZone zone = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,567,"DateTimeZone zone = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,576,"ateTimeZone zone = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,586,"DateTimeZone zone = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,624,"ateTimeZone zone = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,634,"DateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,641,"ateTimeZone zone = DateTimeZone.getInstance(""+01:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,651,"DateTimeZone zone = DateTimeZone.forID(""+01:00"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,676,"ateTimeZone zone = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,686,"DateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,683,"ateTimeZone zone = DateTimeZone.getInstance(""+01:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,693,"DateTimeZone zone = DateTimeZone.forID(""+01:00"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,692,"ateTimeZone zone = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,702,"DateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,699,"ateTimeZone zone1 = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,700,"ateTimeZone zone2 = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,709,"DateTimeZone zone1 = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,710,"DateTimeZone zone2 = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,707,"ateTimeZone zone3 = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,717,"DateTimeZone zone3 = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,716,"ateTimeZone zone4 = DateTimeZone.getInstance(""+01:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,726,"DateTimeZone zone4 = DateTimeZone.forID(""+01:00"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,727,"ateTimeZone zone5 = DateTimeZone.getInstance(""+02:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,737,"DateTimeZone zone5 = DateTimeZone.forID(""+02:00"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,743,"ateTimeZone zone = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,753,"DateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,750,"ateTimeZone zone = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,760,"DateTimeZone zone = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,768,"ateTimeZone zone = DateTimeZone.getInstance(""+01:00"");"
True,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,JodaTime/src/test/org/joda/time/TestDateTimeZone.java,778,"DateTimeZone zone = DateTimeZone.forID(""+01:00"");"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,48,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,49,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,48,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestDateTime_Basics.java,49,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,38,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,39,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,38,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java,39,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,32,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,33,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,32,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestDateTime_Properties.java,33,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,40,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,41,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,40,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,JodaTime/src/test/org/joda/time/TestDuration_Basics.java,41,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,33,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,34,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,33,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,JodaTime/src/test/org/joda/time/TestDuration_Constructors.java,34,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,43,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,44,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,43,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,JodaTime/src/test/org/joda/time/TestInstant_Basics.java,44,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,34,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,35,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,JodaTime/src/test/org/joda/time/TestInstant_Constructors.java,35,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,39,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,40,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,39,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,40,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,37,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,38,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,35,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,36,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,35,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java,36,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,45,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,46,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,45,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java,46,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,38,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,39,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,38,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java,39,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,32,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,33,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,32,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java,33,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,37,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,38,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,39,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,40,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,39,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java,40,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,37,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,38,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,35,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,36,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,35,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java,36,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,39,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,40,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,39,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java,40,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,33,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,34,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,33,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java,34,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,33,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,34,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,33,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java,34,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,318, = DateTimeZone.getInstance(str);
True,JodaTime/src/test/org/joda/time/TestParseISO.java,JodaTime/src/test/org/joda/time/TestParseISO.java,318,z = DateTimeZone.forID(str);
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,37,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,38,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestPeriodType.java,JodaTime/src/test/org/joda/time/TestPeriodType.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,40,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,41,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,40,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,JodaTime/src/test/org/joda/time/TestPeriod_Basics.java,41,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,33,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,34,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,33,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java,34,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,37,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,38,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,39,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java,39,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,33,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,34,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,33,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java,34,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,30,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,31,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,30,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java,31,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,37,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,38,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,39,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java,39,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,30,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,31,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,30,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java,31,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,30,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java,30,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,41,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,42,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,43,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,41,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,42,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java,43,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,40,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,41,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,42,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,40,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,41,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java,42,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,37,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,38,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,39,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java,39,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,35,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,36,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,37,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,35,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,36,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java,37,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,35,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,36,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,37,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,35,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,36,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java,37,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,35,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,36,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,37,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,35,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,36,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java,37,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,47,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,48,"rivate static final DateTimeZone MOSCOW = DateTimeZone.getInstance(""Europe/Moscow"");"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,47,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java,48,"private static final DateTimeZone MOSCOW = DateTimeZone.forID(""Europe/Moscow"");"
False,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,41,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,JodaTime/src/test/org/joda/time/convert/TestDateConverter.java,41,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,40,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,JodaTime/src/test/org/joda/time/convert/TestLongConverter.java,40,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,54,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,54,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,81,"ateTimeZone.setDefault(DateTimeZone.getInstance(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,JodaTime/src/test/org/joda/time/convert/TestNullConverter.java,81,"DateTimeZone.setDefault(DateTimeZone.forID(""Europe/London""));"
False,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,43,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java,43,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,44,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java,44,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,43,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java,43,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,45,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java,45,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,42,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java,42,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,44,rivate static final DateTimeZone ONE_HOUR = DateTimeZone.getInstance(1);
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,45,rivate static final DateTimeZone SIX = DateTimeZone.getInstance(6);
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,46,rivate static final DateTimeZone SEVEN = DateTimeZone.getInstance(7);
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,47,rivate static final DateTimeZone EIGHT = DateTimeZone.getInstance(8);
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,44,private static final DateTimeZone ONE_HOUR = DateTimeZone.forOffsetHours(1);
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,45,private static final DateTimeZone SIX = DateTimeZone.forOffsetHours(6);
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,46,private static final DateTimeZone SEVEN = DateTimeZone.forOffsetHours(7);
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,47,private static final DateTimeZone EIGHT = DateTimeZone.forOffsetHours(8);
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,49,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,50,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,49,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,JodaTime/src/test/org/joda/time/convert/TestStringConverter.java,50,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,37,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,38,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,39,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,40,"rivate static final DateTimeZone NEWYORK = DateTimeZone.getInstance(""America/New_York"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,39,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java,40,"private static final DateTimeZone NEWYORK = DateTimeZone.forID(""America/New_York"");"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,37,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,38,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,39,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,37,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,38,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java,39,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,44,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,45,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,46,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,44,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,45,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java,46,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,44,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,45,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,46,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,44,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,45,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java,46,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,44,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,45,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,46,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,44,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,45,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java,46,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,44,"rivate static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,45,"rivate static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
False,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,46,"rivate static final DateTimeZone TOKYO = DateTimeZone.getInstance(""Asia/Tokyo"");"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,44,"private static final DateTimeZone PARIS = DateTimeZone.forID(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,45,"private static final DateTimeZone LONDON = DateTimeZone.forID(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java,46,"private static final DateTimeZone TOKYO = DateTimeZone.forID(""Asia/Tokyo"");"
False,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,37,"ateTimeZone.getInstance(""Europe/Paris""),"
False,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,38,"ateTimeZone.getInstance(""Europe/London""),"
False,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,39,"ateTimeZone.getInstance(""Asia/Tokyo""),"
False,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,40,"ateTimeZone.getInstance(""America/Los_Angeles""),"
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,37,"DateTimeZone.forID(""Europe/Paris""),"
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,38,"DateTimeZone.forID(""Europe/London""),"
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,39,"DateTimeZone.forID(""Asia/Tokyo""),"
True,JodaTime/src/test/org/joda/time/format/TestTextFields.java,JodaTime/src/test/org/joda/time/format/TestTextFields.java,40,"DateTimeZone.forID(""America/Los_Angeles""),"

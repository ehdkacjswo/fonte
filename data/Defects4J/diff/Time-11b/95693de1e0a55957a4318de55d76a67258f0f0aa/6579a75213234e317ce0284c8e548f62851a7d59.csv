is_addition,old_file_path,new_file_path,line_num,content
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,115,"checkInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,128,"checkInterval(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,162,"checkInterval(iStartMillis, iEndMillis);"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,185,Duration = duration.toDuration();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,188,if (duration instanceof Duration) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,189,iDuration = (Duration) duration;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,192,"checkInterval(iStartMillis, iEndMillis);"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,212,Duration = duration.toDuration();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,218,if (duration instanceof Duration) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,219,iDuration = (Duration) duration;
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,222,"checkInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,252,"checkInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,282,"checkInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,287,* Validates an interval.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,289,* @param start  the start instant in milliseconds
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,290,* @param end  the end instant in milliseconds
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,291,* @throws IllegalArgumentException if the interval is invalid
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,293,"private void checkInterval(long start, long end) {"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,294,if (end < start) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,295,"throw new IllegalArgumentException(""The end instant must be greater or equal to the start"");"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,276, Gets the start of this interval as the number of milliseconds elapsed
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,277, since 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,301,* Gets the start of this time interval which is inclusive.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,279, @return the start of the interval
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,303,"* @return the start of the time interval,"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,304,*  millisecond instant from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,286, Gets the start of this time interval as an Instant.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,311,"* Gets the start of this time interval, which is inclusive, as an Instant."
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,298, Gets the end of this interval as the number of milliseconds elapsed
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,299, since 1970-01-01T00:00:00Z.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,323,* Gets the end of this time interval which is exclusive.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,301, @return the start of the interval
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,325,"* @return the end of the time interval,"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,326,*  millisecond instant from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,308, Gets the end of this time interval as an Instant.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,333,"* Gets the end of this time interval, which is exclusive, as an Instant."
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,323, The duration returned will always be precise because it is relative to
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,324, a known date.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,348,* The duration is equal to the end millis minus the start millis.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,336, If this interval was constructed using a precise duration then that object will
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,337, be returned. Otherwise a new Duration instance using the MillisType is returned.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,360,* If this interval was constructed using a Duration then that object will
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,361,* be returned. Otherwise a new Duration instance is returned.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,339, @return the precise duration of the time interval
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,363,* @return the millisecond duration of the time interval
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,344,f (iStartMillis == iEndMillis) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,368,long durMillis = getDurationMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,369,if (durMillis == 0) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,347,"Duration = new Duration(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,372,iDuration = new Duration(durMillis);
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,381,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,382,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,362,eturn (millisInstant >= getStartMillis() && millisInstant <= getEndMillis());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,389,long thisStart = getStartMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,390,long thisEnd = getEndMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,391,return (millisInstant >= thisStart && millisInstant < thisEnd);
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,395,* Does this time interval contain the current instant.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,396,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,397,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,399,* @return true if this time interval contains the current instant
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,401,public final boolean containsNow() {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,402,return contains(DateTimeUtils.currentTimeMillis());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,407,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,408,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,422,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,423,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,382, @return true if this interval contains the time interval
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,426,* @return true if this time interval contains the time interval
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,391,eturn
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,392,otherStart >= getStartMillis() && otherStart <= getEndMillis())
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,393,& (otherEnd >= getStartMillis() && otherEnd <= getEndMillis());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,435,long thisStart = getStartMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,436,long thisEnd = getEndMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,437,return (otherStart >= thisStart && otherStart < thisEnd && otherEnd <= thisEnd);
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,444,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,411,eturn
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,412,otherStart >= getStartMillis() && otherStart <= getEndMillis())
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,413,| (otherEnd >= getStartMillis() && otherEnd <= getEndMillis());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,456,long thisStart = getStartMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,457,long thisEnd = getEndMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,458,return (thisStart < otherEnd && otherStart < thisEnd);
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,464,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,465,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,425,eturn (getStartMillis() < millisInstant && getEndMillis() < millisInstant);
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,472,return (getEndMillis() <= millisInstant);
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,476,* Is this time interval before the current instant.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,477,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,478,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,480,* @return true if this time interval is before the current instant
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,482,public final boolean isBeforeNow() {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,483,return isBefore(DateTimeUtils.currentTimeMillis());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,488,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,489,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,503,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,504,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,449,eturn (getStartMillis() > millisInstant && getEndMillis() > millisInstant);
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,511,return (getStartMillis() > millisInstant);
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,515,* Is this time interval after the current instant.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,516,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,517,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,519,* @return true if this time interval is after the current instant
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,521,public final boolean isAfterNow() {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,522,return isAfter(DateTimeUtils.currentTimeMillis());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,527,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,528,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,467, Get the object as an Interval.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,469, @return an immutable interval object
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,542,* Get this interval as an <code>Interval</code> object.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,543,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,544,"* This will either typecast this instance, or create a new <code>Interval</code>."
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,546,* @return the interval as an Interval object
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,479, Get the object as a MutableInterval always returning a new instance.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,481, @return a mutable interval object
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,556,* Get this time interval as a <code>MutableInterval</code> object.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,557,* <p>
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,558,* This will always return a new <code>MutableInterval</code> with the same interval.
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,560,* @return the time interval as a MutableInterval object
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,489, Converts the duration of the interval to a time period using the
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,568,* Converts the duration of the interval to a <code>Period</code> using the
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,504, Converts the duration of the interval to a time period using the
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,583,* Converts the duration of the interval to a <code>Period</code> using the
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,512," @param type  the requested type of the period, null means AllType"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,591,"* @param type  the requested type of the duration, null means AllType"
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,627,long start = getStartMillis();
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,628,long end = getEndMillis();
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,549,esult = 31 * result + ((int) (getStartMillis() ^ (getStartMillis() >>> 32)));
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,550,esult = 31 * result + ((int) (getEndMillis() ^ (getEndMillis() >>> 32)));
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,630,result = 31 * result + ((int) (start ^ (start >>> 32)));
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,631,result = 31 * result + ((int) (end ^ (end >>> 32)));
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,608, Stores the duration of this time interval.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,609, <p>
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,610, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,611, empty implementation that is protected and final. This also ensures that
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,612, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,614," @param duration  new duration for interval, null means zero length"
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,616,rotected void storeDuration(Duration duration) {
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,617,/ this method exists so that subclasses can block it
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,618,Duration = duration;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,653,toreDuration(duration.toDuration());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,720,if (duration instanceof Duration) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,721,iDuration = (Duration) duration;
False,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,668,toreDuration(duration.toDuration());
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,737,if (duration instanceof Duration) {
True,JodaTime/src/java/org/joda/time/AbstractInterval.java,JodaTime/src/java/org/joda/time/AbstractInterval.java,738,iDuration = (Duration) duration;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,61, The duration of the time interval is always a precise amount of milliseconds
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,62, even if a variable length duration was passed into the constructor.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,61,* A time interval represents a period of time between two instants.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,62,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,63,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,64,* Intervals have a fixed millisecond duration.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,65,* This is the difference between the start and end instants.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,66,* The duration is represented separately by {@link ReadableDuration}.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,67,"* As a result, intervals are not comparable."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,68,"* To compare the length of two intervals, you should compare their durations."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,69,* <p>
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,70,* An interval can also be converted to a {@link ReadablePeriod}.
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,71,* This represents the difference between the start and end points in terms of fields
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,72,* such as years and days.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,174,rotected final void storeDuration(Duration duration) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,184,protected void setDurationAfterStart(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,188,"* Overridden to do nothing, ensuring this class and all subclasses are immutable."
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,190,protected void setDurationBeforeEnd(ReadableDuration duration) {
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,61,* A time interval represents a period of time between two instants.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,62,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,63,* <p>
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,64,* Intervals have a fixed millisecond duration.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,65,* This is the difference between the start and end instants.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,66,* The duration is represented separately by {@link ReadableDuration}.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,67,"* As a result, intervals are not comparable."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,68,"* To compare the length of two intervals, you should compare their durations."
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,69,* <p>
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,70,* An interval can also be converted to a {@link ReadablePeriod}.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,71,* This represents the difference between the start and end points in terms of fields
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,72,* such as years and days.
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,73,* <p>
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,57, Readable interface for a time interval.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,57,* Readable interface for an interval of time between two instants.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,60," This interval has a duration, represented separately by ReadableDuration."
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,60,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,61,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,62,* Intervals have a fixed millisecond duration.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,63,* This is the difference between the start and end instants.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,64,* The duration is represented separately by {@link ReadableDuration}.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,65,"* As a result, intervals are not comparable."
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,66,"* To compare the length of two intervals, you should compare their durations."
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,67,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,68,* An interval can also be converted to a {@link ReadablePeriod}.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,69,* This represents the difference between the start and end points in terms of fields
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,70,* such as years and days.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,70, Gets the start of this time interval.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,80,* Gets the start of this time interval which is inclusive.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,78, Gets the start of this time interval as an Instant.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,88,"* Gets the start of this time interval, which is inclusive, as an Instant."
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,85, Gets the end of this time interval.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,95,* Gets the end of this time interval which is exclusive.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,93, Gets the end of this time interval as an Instant.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,103,"* Gets the end of this time interval, which is exclusive, as an Instant."
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,103, The duration returned will always be precise because it is relative to
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,104, a known date.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,113,* The duration is equal to the end millis minus the start millis.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,114, If this interval was constructed using a precise duration then that object will
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,115, be returned. Otherwise a new Duration instance using the MillisType is returned.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,123,* If this interval was constructed using a Duration then that object will
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,124,* be returned. Otherwise a new Duration instance is returned.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,117, @return the precise duration of the time interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,126,* @return the millisecond duration of the time interval
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,134,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,135,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,130,ublic boolean contains(long millisInstant);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,141,boolean contains(long millisInstant);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,144,* Does this time interval contain the current instant.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,145,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,146,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,148,* @return true if this time interval contains the current instant
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,150,boolean containsNow();
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,154,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,155,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,138,ublic boolean contains(ReadableInstant instant);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,160,boolean contains(ReadableInstant instant);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,164,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,165,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,147,ublic boolean contains(ReadableInterval interval);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,171,boolean contains(ReadableInterval interval);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,177,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,158,ublic boolean overlaps(ReadableInterval interval);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,183,boolean overlaps(ReadableInterval interval);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,188,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,189,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,168,ublic boolean isBefore(long millisInstant);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,195,boolean isBefore(long millisInstant);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,198,* Is this time interval before the current instant.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,199,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,200,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,202,* @return true if this time interval is before the current instant
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,204,boolean isBeforeNow();
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,208,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,209,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,176,ublic boolean isBefore(ReadableInstant instant);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,214,boolean isBefore(ReadableInstant instant);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,218,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,219,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,185,ublic boolean isAfter(long millisInstant);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,225,boolean isAfter(long millisInstant);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,228,* Is this time interval after the current instant.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,229,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,230,* Intervals are inclusive of the start instant and exclusive of the end.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,232,* @return true if this time interval is after the current instant
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,234,boolean isAfterNow();
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,238,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,239,* Intervals are inclusive of the start instant and exclusive of the end.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,193,ublic boolean isAfter(ReadableInstant instant);
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,244,boolean isAfter(ReadableInstant instant);
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,197, Get the value as a simple immutable object. This can be useful if you
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,198," don't trust the implementation of the interface to be well-behaved, or"
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,199, to get a guaranteed immutable object.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,248,* Get this interval as an <code>Interval</code> object.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,249,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,250,"* This will either typecast this instance, or create a new <code>Interval</code>."
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,201, @return the value as an Interval object
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,252,* @return the interval as an Interval object
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,206, Get this time interval as a MutableInterval object.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,257,* Get this time interval as a <code>MutableInterval</code> object.
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,258,* <p>
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,259,* This will always return a new <code>MutableInterval</code> with the same interval.
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,214, Converts the duration of the interval to a time period using the
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,267,* Converts the duration of the interval to a <code>Period</code> using the
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,227, Converts the duration of the interval to a time period using the
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,280,* Converts the duration of the interval to a <code>Period</code> using the
False,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,235," @param type  the requested type of the period, null means AllType"
True,JodaTime/src/java/org/joda/time/ReadableInterval.java,JodaTime/src/java/org/joda/time/ReadableInterval.java,288,"* @param type  the requested type of the duration, null means AllType"
False,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,96,/        suite.addTest(TestInterval_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestAll.java,JodaTime/src/test/org/joda/time/TestAll.java,96,suite.addTest(TestInterval_Basics.suite());
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,6,* All rights reserved.
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,10,* are met:
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,18,*    distribution.
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,33,*    permission of the Joda project.
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,46,* SUCH DAMAGE.
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,54,package org.joda.time;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,56,import java.util.Locale;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,57,import java.util.TimeZone;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,59,import junit.framework.TestCase;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,60,import junit.framework.TestSuite;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,63,* This class is a Junit unit test for Instant.
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,65,* @author Stephen Colebourne
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,67,public class TestInterval_Basics extends TestCase {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,68,// Test in 2002/03 as time zones are more well known
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,69,// (before the late 90's they were all over the place)
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,71,"private static final DateTimeZone PARIS = DateTimeZone.getInstance(""Europe/Paris"");"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,72,"private static final DateTimeZone LONDON = DateTimeZone.getInstance(""Europe/London"");"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,74,long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,75,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,76,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,77,366 + 365;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,78,long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,79,366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 +
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,80,365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,81,366 + 365 + 365;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,83,// 2002-06-09
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,84,private long TEST_TIME_NOW =
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,85,(y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,87,// 2002-04-05
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,88,private long TEST_TIME1 =
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,89,(y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,90,+ 12L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,91,+ 24L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,93,// 2003-05-06
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,94,private long TEST_TIME2 =
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,95,(y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,96,+ 14L * DateTimeConstants.MILLIS_PER_HOUR
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,97,+ 28L * DateTimeConstants.MILLIS_PER_MINUTE;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,99,private DateTimeZone originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,100,private TimeZone originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,101,private Locale originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,103,public static void main(String[] args) {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,104,junit.textui.TestRunner.run(suite());
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,107,public static TestSuite suite() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,108,return new TestSuite(TestInterval_Basics.class);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,111,public TestInterval_Basics(String name) {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,112,super(name);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,115,protected void setUp() throws Exception {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,116,DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,117,originalDateTimeZone = DateTimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,118,originalTimeZone = TimeZone.getDefault();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,119,originalLocale = Locale.getDefault();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,120,DateTimeZone.setDefault(LONDON);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,121,"TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,122,Locale.setDefault(Locale.UK);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,125,protected void tearDown() throws Exception {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,126,DateTimeUtils.setCurrentMillisSystem();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,127,DateTimeZone.setDefault(originalDateTimeZone);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,128,TimeZone.setDefault(originalTimeZone);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,129,Locale.setDefault(originalLocale);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,130,originalDateTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,131,originalTimeZone = null;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,132,originalLocale = null;
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,136,public void testTest() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,137,"assertEquals(""2002-06-09T00:00:00.000Z"", new Instant(TEST_TIME_NOW).toString());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,138,"assertEquals(""2002-04-05T12:24:00.000Z"", new Instant(TEST_TIME1).toString());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,139,"assertEquals(""2003-05-06T14:28:00.000Z"", new Instant(TEST_TIME2).toString());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,143,public void testGetMillis() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,144,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,145,"assertEquals(TEST_TIME1, test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,146,"assertEquals(TEST_TIME1, test.getStartInstant().getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,147,"assertEquals(TEST_TIME2, test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,148,"assertEquals(TEST_TIME2, test.getEndInstant().getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,149,"assertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,150,"assertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,153,public void testGetDuration() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,154,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,155,"assertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,156,"assertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,159,public void testEqualsHashCode() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,160,"Interval test1 = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,161,"Interval test2 = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,162,"assertEquals(true, test1.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,163,"assertEquals(true, test2.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,164,"assertEquals(true, test1.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,165,"assertEquals(true, test2.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,166,"assertEquals(true, test1.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,167,"assertEquals(true, test1.hashCode() == test1.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,168,"assertEquals(true, test2.hashCode() == test2.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,170,"Interval test3 = new Interval(TEST_TIME_NOW, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,171,"assertEquals(false, test1.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,172,"assertEquals(false, test2.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,173,"assertEquals(false, test3.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,174,"assertEquals(false, test3.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,175,"assertEquals(false, test1.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,176,"assertEquals(false, test2.hashCode() == test3.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,178,"MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,179,"assertEquals(true, test1.equals(test4));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,180,"assertEquals(true, test2.equals(test4));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,181,"assertEquals(false, test3.equals(test4));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,182,"assertEquals(true, test4.equals(test1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,183,"assertEquals(true, test4.equals(test2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,184,"assertEquals(false, test4.equals(test3));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,185,"assertEquals(true, test1.hashCode() == test4.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,186,"assertEquals(true, test2.hashCode() == test4.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,187,"assertEquals(false, test3.hashCode() == test4.hashCode());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,189,"assertEquals(false, test1.equals(""Hello""));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,190,"assertEquals(true, test1.equals(new MockInterval()));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,191,"assertEquals(false, test1.equals(new DateTime(TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,194,class MockInterval extends AbstractInterval {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,195,public MockInterval() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,196,"super(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,201,public void testContains_long() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,202,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,203,"assertEquals(true, test.contains(TEST_TIME1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,204,"assertEquals(false, test.contains(TEST_TIME1 - 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,205,"assertEquals(true, test.contains(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,206,"assertEquals(false, test.contains(TEST_TIME2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,207,"assertEquals(true, test.contains(TEST_TIME2 - 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,210,public void testContainsNow() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,211,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,213,DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,214,"assertEquals(true, test.containsNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,215,DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,216,"assertEquals(false, test.containsNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,217,DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,218,"assertEquals(true, test.containsNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,219,DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,220,"assertEquals(false, test.containsNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,221,DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,222,"assertEquals(true, test.containsNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,225,public void testContains_RI() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,226,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,227,"assertEquals(true, test.contains(new Instant(TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,228,"assertEquals(false, test.contains(new Instant(TEST_TIME1 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,229,"assertEquals(true, test.contains(new Instant(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,230,"assertEquals(false, test.contains(new Instant(TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,231,"assertEquals(true, test.contains(new Instant(TEST_TIME2 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,232,"assertEquals(true, test.contains((ReadableInstant) null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,236,public void testContains_RInterval() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,237,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,239,"assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,240,"assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,241,"assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,242,"assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,243,"assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,245,"assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,246,"assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,247,"assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,248,"assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,249,"assertEquals(true, test.contains(new Interval(TEST_TIME2 - 2, TEST_TIME2 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,251,"assertEquals(false, test.contains(new Interval(TEST_TIME1, TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,252,"assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,253,"assertEquals(false, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,254,"assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,255,"assertEquals(false, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,256,"assertEquals(false, test.contains(new Interval(TEST_TIME1 - 2, TEST_TIME1 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,258,try {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,259,test.contains((ReadableInterval) null);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,260,fail();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,261,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,264,public void testOverlaps_RInterval() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,265,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,267,"assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,268,"assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,269,"assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,270,"assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,271,"assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,273,"assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,274,"assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,275,"assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,276,"assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,277,"assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,279,"assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,280,"assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,281,"assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,283,try {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,284,test.overlaps((ReadableInterval) null);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,285,fail();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,286,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,290,public void testIsBefore_long() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,291,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,293,"assertEquals(false, test.isBefore(TEST_TIME1 - 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,294,"assertEquals(false, test.isBefore(TEST_TIME1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,295,"assertEquals(false, test.isBefore(TEST_TIME1 + 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,297,"assertEquals(false, test.isBefore(TEST_TIME2 - 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,298,"assertEquals(true, test.isBefore(TEST_TIME2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,299,"assertEquals(true, test.isBefore(TEST_TIME2 + 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,302,public void testIsBeforeNow() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,303,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,305,DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,306,"assertEquals(false, test.isBeforeNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,307,DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,308,"assertEquals(true, test.isBeforeNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,309,DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 + 1);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,310,"assertEquals(true, test.isBeforeNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,313,public void testIsBefore_RI() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,314,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,316,"assertEquals(false, test.isBefore(new Instant(TEST_TIME1 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,317,"assertEquals(false, test.isBefore(new Instant(TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,318,"assertEquals(false, test.isBefore(new Instant(TEST_TIME1 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,320,"assertEquals(false, test.isBefore(new Instant(TEST_TIME2 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,321,"assertEquals(true, test.isBefore(new Instant(TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,322,"assertEquals(true, test.isBefore(new Instant(TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,324,"assertEquals(false, test.isBefore(null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,328,public void testIsAfter_long() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,329,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,331,"assertEquals(true, test.isAfter(TEST_TIME1 - 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,332,"assertEquals(false, test.isAfter(TEST_TIME1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,333,"assertEquals(false, test.isAfter(TEST_TIME1 + 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,335,"assertEquals(false, test.isAfter(TEST_TIME2 - 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,336,"assertEquals(false, test.isAfter(TEST_TIME2));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,337,"assertEquals(false, test.isAfter(TEST_TIME2 + 1));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,340,public void testIsAfterNow() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,341,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,343,DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,344,"assertEquals(true, test.isAfterNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,345,DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,346,"assertEquals(false, test.isAfterNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,347,DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + 1);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,348,"assertEquals(false, test.isAfterNow());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,351,public void testIsAfter_RI() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,352,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,354,"assertEquals(true, test.isAfter(new Instant(TEST_TIME1 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,355,"assertEquals(false, test.isAfter(new Instant(TEST_TIME1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,356,"assertEquals(false, test.isAfter(new Instant(TEST_TIME1 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,358,"assertEquals(false, test.isAfter(new Instant(TEST_TIME2 - 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,359,"assertEquals(false, test.isAfter(new Instant(TEST_TIME2)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,360,"assertEquals(false, test.isAfter(new Instant(TEST_TIME2 + 1)));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,362,"assertEquals(false, test.isAfter(null));"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,366,public void testToInterval1() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,367,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,368,Interval result = test.toInterval();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,369,"assertSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,372,public void testToInterval2() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,373,"MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,374,Interval result = test.toInterval();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,375,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,379,public void testToMutableInterval1() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,380,"Interval test = new Interval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,381,MutableInterval result = test.toMutableInterval();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,382,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,385,public void testToMutableInterval2() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,386,"MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,387,MutableInterval result = test.toMutableInterval();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,388,"assertEquals(test, result);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,389,"assertNotSame(test, result);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,393,public void testToPeriod() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,394,"DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,395,"DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,396,"Interval test = new Interval(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,398,Period result = test.toPeriod();
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,399,"assertEquals(PeriodType.getAllType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,400,"assertEquals(1, result.getYears());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,401,"assertEquals(2, result.getMonths());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,402,"assertEquals(0, result.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,403,"assertEquals(4, result.getDays());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,404,"assertEquals(5, result.getHours());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,405,"assertEquals(6, result.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,406,"assertEquals(7, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,407,"assertEquals(8, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,411,public void testToPeriod_PeriodType1() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,412,"DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,413,"DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,414,"Interval test = new Interval(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,416,Period result = test.toPeriod(null);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,417,"assertEquals(PeriodType.getAllType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,418,"assertEquals(1, result.getYears());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,419,"assertEquals(2, result.getMonths());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,420,"assertEquals(0, result.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,421,"assertEquals(4, result.getDays());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,422,"assertEquals(5, result.getHours());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,423,"assertEquals(6, result.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,424,"assertEquals(7, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,425,"assertEquals(8, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,428,public void testToPeriod_PeriodType2() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,429,"DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,430,"DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,431,"Interval test = new Interval(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,433,Period result = test.toPeriod(PeriodType.getYearWeekType());
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,434,System.err.println(result);
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,435,"assertEquals(PeriodType.getYearWeekType(), result.getPeriodType());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,436,"assertEquals(1, result.getYears());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,437,"assertEquals(0, result.getMonths());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,438,"assertEquals(9, result.getWeeks());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,439,"assertEquals(2, result.getDays());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,440,"assertEquals(5, result.getHours());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,441,"assertEquals(6, result.getMinutes());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,442,"assertEquals(7, result.getSeconds());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,443,"assertEquals(8, result.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,447,public void testToString() {
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,448,"DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.UTC);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,449,"DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, DateTimeZone.UTC);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,450,"Interval test = new Interval(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,JodaTime/src/test/org/joda/time/TestInterval_Basics.java,451,"assertEquals(""2004-06-09T07:08:09.010/2005-08-13T12:14:16.018"", test.toString());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,148,public void testConstructor_long_long2() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,149,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,150,"Interval test = new Interval(dt1.getMillis(), dt1.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,151,"assertEquals(dt1.getMillis(), test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,152,"assertEquals(dt1.getMillis(), test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,155,public void testConstructor_long_long3() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,156,"DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,157,"DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,158,try {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,159,"new Interval(dt1.getMillis(), dt2.getMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,160,fail();
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,161,} catch (IllegalArgumentException ex) {}
False,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,174,"ateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,190,"DateTime dt1 = new DateTime(2000, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,203,public void testConstructor_RI_RI6() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,204,"DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,205,"Interval test = new Interval(dt1, dt1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,206,"assertEquals(dt1.getMillis(), test.getStartMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,207,"assertEquals(dt1.getMillis(), test.getEndMillis());"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,210,public void testConstructor_RI_RI7() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,211,"DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,212,"DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,213,try {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,214,"new Interval(dt1, dt2);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,215,fail();
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,216,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,296,public void testConstructor_RI_RP8() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,297,DateTime dt = new DateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,298,"Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,299,try {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,300,"new Interval(dt, dur);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,301,fail();
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,302,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,382,public void testConstructor_RP_RI8() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,383,DateTime dt = new DateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,384,"Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,385,try {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,386,"new Interval(dur, dt);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,387,fail();
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,388,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,430,public void testConstructor_RI_RD5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,431,DateTime dt = new DateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,432,Duration dur = new Duration(-1);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,433,try {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,434,"new Interval(dt, dur);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,435,fail();
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,436,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,478,public void testConstructor_RD_RI5() throws Throwable {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,479,DateTime dt = new DateTime(TEST_TIME_NOW);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,480,Duration dur = new Duration(-1);
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,481,try {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,482,"new Interval(dur, dt);"
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,483,fail();
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,484,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,610,public boolean containsNow() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,611,return false;
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,625,public boolean isBeforeNow() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,626,return false;
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,634,public boolean isAfterNow() {
True,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,JodaTime/src/test/org/joda/time/TestInterval_Constructors.java,635,return false;

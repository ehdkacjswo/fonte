is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,302," The value of this field will be set. If the value is invalid, an"
False,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,303, exception if thrown. Other fields are always unaffected.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,302,* The value of this field will be set.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,303,"* If the value is invalid, an exception if thrown."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,304,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,305,"* If setting this field would make other fields invalid, then those fields"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,306,"* may be changed. For example if the current date is the 31st January, and"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,307,"* the month is set to February, the day would be invalid. Instead, the day"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,308,* would be changed to the closest value - the 28th/29th February as appropriate.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,318,* Sets a value using the specified partial instant.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,319,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,320,* The value of this field (specified by the index) will be set.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,321,"* If the value is invalid, an exception if thrown."
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,322,* <p>
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,323,"* If setting this field would make other fields invalid, then those fields"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,324,"* may be changed. For example if the current date is the 31st January, and"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,325,"* the month is set to February, the day would be invalid. Instead, the day"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,326,* would be changed to the closest value - the 28th/29th February as appropriate.
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,328,* @param instant  the partial instant
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,329,* @param fieldIndex  the index of this field in the instant
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,330,"* @param value  the value to set, in the units of the field"
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,331,* @return the updated milliseconds
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,332,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/DateTimeField.java,JodaTime/src/java/org/joda/time/DateTimeField.java,334,"public abstract int[] set(PartialInstant instant, int fieldIndex, int value);"
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,334," The value of this field will be set. If the value is invalid, an"
False,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,335, exception if thrown. Other fields are always unaffected.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,334,* The value of this field will be set.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,335,"* If the value is invalid, an exception if thrown."
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,336,* <p>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,337,"* If setting this field would make other fields invalid, then those fields"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,338,"* may be changed. For example if the current date is the 31st January, and"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,339,"* the month is set to February, the day would be invalid. Instead, the day"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,340,* would be changed to the closest value - the 28th/29th February as appropriate.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,350,* Sets a value using the specified partial instant.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,351,* <p>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,352,* The value of this field (specified by the index) will be set.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,353,"* If the value is invalid, an exception if thrown."
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,354,* <p>
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,355,"* If setting this field would make other fields invalid, then those fields"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,356,"* may be changed. For example if the current date is the 31st January, and"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,357,"* the month is set to February, the day would be invalid. Instead, the day"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,358,* would be changed to the closest value - the 28th/29th February as appropriate.
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,360,* @param instant  the partial instant
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,361,* @param fieldIndex  the index of this field in the instant
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,362,"* @param value  the value to set, in the units of the field"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,363,* @return the updated milliseconds
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,364,* @throws IllegalArgumentException if the value is invalid
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,366,"public int[] set(PartialInstant instant, int fieldIndex, int value) {"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,367,"FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());"
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,368,int[] array = instant.getValues();
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,369,array[fieldIndex] = value;
True,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java,370,return array;
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,196,"public int[] set(PartialInstant instant, int fieldIndex, int value) {"
True,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java,197,"return iField.set(instant, fieldIndex, value);"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,242,* Always throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,244,* @throws UnsupportedOperationException
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,246,"public int[] set(PartialInstant instant, int fieldIndex, int value) {"
True,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java,247,throw unsupported();
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,74,* Gets the number of fields that this instant supports.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,76,* @return the number of fields supported
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,78,int getFieldSize();
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,81,* Gets the field at the specified index.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,83,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,84,* @return the field at the specified index
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,85,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,87,DateTimeField getField(int index);
False,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,78," @return the fields supported, largest to smallest"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,94,"* @return the fields supported (cloned), largest to smallest"
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,96,DateTimeField[] getFields();
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,99,* Gets the value at the specified index.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,101,* @param index  the index to retrieve
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,102,* @return the value of the field at the specified index
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,103,* @throws IndexOutOfBoundsException if the index is invalid
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,105,int getValue(int index);
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,108,* Gets an array of the value of each of the fields that this partial instant supports.
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,109,* <p>
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,110,"* The fields are returned largest to smallest, for example Hour, Minute, Second."
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,111,* Each value corresponds to the same array index as <code>getFields()</code>
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,113,"* @return the current values of each field (cloned), largest to smallest"
False,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,80,ateTimeField[] getSupportedFields();
True,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,JodaTime/src/java/org/joda/time/partial/PartialInstant.java,115,int[] getValues();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,104,rivate static final int HOUR_OF_DAY = 0;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,104,public static final int HOUR_OF_DAY = 0;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,106,rivate static final int MINUTE_OF_HOUR = 1;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,106,public static final int MINUTE_OF_HOUR = 1;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,108,rivate static final int SECOND_OF_MINUTE = 2;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,108,public static final int SECOND_OF_MINUTE = 2;
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,110,rivate static final int MILLIS_OF_SECOND = 3;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,110,public static final int MILLIS_OF_SECOND = 3;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,296,* Gets the number of fields in TimeOfDay.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,298,* @return the field count
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,300,public int getFieldSize() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,301,return 4;
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,309,* @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,301,ateTimeField getField(int index) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,311,public DateTimeField getField(int index) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,312,hrow new IllegalArgumentException();
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,322,throw new IllegalArgumentException(Integer.toString(index));
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,331,* @throws IndexOutOfBoundsException if the index is invalid
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,322,nt getValue(int index) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,333,public int getValue(int index) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,334,if (index < 0 || index > 4) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,335,throw new IllegalArgumentException(Integer.toString(index));
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,332," @return the fields supported, largest to smallest"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,346,"* @return the fields supported (cloned), largest to smallest"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,334,ublic DateTimeField[] getSupportedFields() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,348,public DateTimeField[] getFields() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,358,* Gets an array of the value of each of the fields that this partial instant supports.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,359,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,360,"* The fields are returned largest to smallest, for example Hour, Minute, Second."
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,361,* Each value corresponds to the same array index as <code>getFields()</code>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,363,"* @return the current values of each field (cloned), largest to smallest"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,365,public int[] getValues() {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,366,return (int[]) iValues.clone();
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,650,/         * Sets this field in a copy of the TimeOfDay.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,651,/         * <p>
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,652,/         * The TimeOfDay attached to this property is unchanged by this call.
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,654,/         * @param value  the value to set the field in the copy to
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,655,/         * @return a copy of the TimeOfDay with the field value changed
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,656,/         * @throws IllegalArgumentException if the value isn't valid
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,658,/        public TimeOfDay setCopy(int value) {
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,659,"/            int[] newValues = getField().set(getInstant(), value);"
False,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,660,"/            return new TimeOfDay(getInstant(), newValues);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,676,* Sets this field in a copy of the TimeOfDay.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,677,* <p>
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,678,* The TimeOfDay attached to this property is unchanged by this call.
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,680,* @param value  the value to set the field in the copy to
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,681,* @return a copy of the TimeOfDay with the field value changed
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,682,* @throws IllegalArgumentException if the value isn't valid
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,684,public TimeOfDay setCopy(int value) {
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,685,"int[] newValues = getField().set(iInstant, iFieldIndex, value);"
True,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,JodaTime/src/java/org/joda/time/partial/TimeOfDay.java,686,"return new TimeOfDay(iInstant, newValues);"
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,198,ublic void testGetField() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,198,public void testGet() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,223,ublic void testGetSupportedFields() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,223,public void testGetFieldSize() {
False,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,225,ateTimeField[] fields = test.getSupportedFields();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,225,"assertEquals(4, test.getFieldSize());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,228,public void testGetField() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,229,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,230,"assertSame(ISOChronology.getInstance().hourOfDay(), test.getField(0));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,231,"assertSame(ISOChronology.getInstance().minuteOfHour(), test.getField(1));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,232,"assertSame(ISOChronology.getInstance().secondOfMinute(), test.getField(2));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,233,"assertSame(ISOChronology.getInstance().millisOfSecond(), test.getField(3));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,234,try {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,235,test.getField(-1);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,236,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,237,try {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,238,test.getField(5);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,239,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,242,public void testGetFields() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,243,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,244,DateTimeField[] fields = test.getFields();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,251,public void testGetValue() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,252,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,253,"assertEquals(10, test.getValue(0));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,254,"assertEquals(20, test.getValue(1));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,255,"assertEquals(30, test.getValue(2));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,256,"assertEquals(40, test.getValue(3));"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,257,try {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,258,test.getValue(-1);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,259,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,260,try {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,261,test.getValue(5);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,262,} catch (IllegalArgumentException ex) {}
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,265,public void testGetValues() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,266,TimeOfDay test = new TimeOfDay();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,267,int[] values = test.getValues();
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,268,"assertEquals(10, values[0]);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,269,"assertEquals(20, values[1]);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,270,"assertEquals(30, values[2]);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,271,"assertEquals(40, values[3]);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,357,public void testPropertySet() {
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,358,"TimeOfDay test = new TimeOfDay(10, 20, 30, 40);"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,359,TimeOfDay set = test.hourOfDay().setCopy(12);
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,360,"assertEquals(12, set.getHourOfDay());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,361,"assertEquals(20, set.getMinuteOfHour());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,362,"assertEquals(30, set.getSecondOfMinute());"
True,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java,363,"assertEquals(40, set.getMillisOfSecond());"

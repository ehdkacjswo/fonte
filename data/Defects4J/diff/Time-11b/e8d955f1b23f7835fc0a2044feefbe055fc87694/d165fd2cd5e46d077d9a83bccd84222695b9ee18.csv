is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,58,mport org.joda.time.base.*;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,59,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,60,mport org.joda.time.convert.IntervalConverter;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,61,mport org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,58,import org.joda.time.base.BaseInterval;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,87,ublic class Interval
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,88,xtends AbstractInterval
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,84,public final class Interval
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,85,extends BaseInterval
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,94,** The start of the period */
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,95,rivate final long iStartMillis;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,96,** The end of the period */
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,97,rivate final long iEndMillis;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,107,uper();
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,108,"heckInterval(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,109,StartMillis = startInstant;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,110,EndMillis = endInstant;
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,99,"super(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,121,uper();
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,122,f (start == null && end == null) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,123,StartMillis = iEndMillis = DateTimeUtils.currentTimeMillis();
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,124, else {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,125,StartMillis = DateTimeUtils.getInstantMillis(start);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,126,EndMillis = DateTimeUtils.getInstantMillis(end);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,127,"heckInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,110,"super(start, end);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,140,uper();
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,141,StartMillis = DateTimeUtils.getInstantMillis(start);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,142,ong durationMillis = DateTimeUtils.getDurationMillis(duration);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,143,"EndMillis = FieldUtils.safeAdd(iStartMillis, durationMillis);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,144,"heckInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,122,"super(start, duration);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,156,uper();
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,157,EndMillis = DateTimeUtils.getInstantMillis(end);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,158,ong durationMillis = DateTimeUtils.getDurationMillis(duration);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,159,"StartMillis = FieldUtils.safeAdd(iEndMillis, -durationMillis);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,160,"heckInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,134,"super(duration, end);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,175,uper();
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,176,StartMillis = DateTimeUtils.getInstantMillis(start);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,177,f (period == null) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,178,EndMillis = iStartMillis;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,179, else {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,180,"hronology chrono = DateTimeUtils.getInstantChronology(start, null);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,181,"EndMillis = period.addTo(iStartMillis, 1, chrono);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,183,"heckInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,149,"super(start, period);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,198,uper();
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,199,EndMillis = DateTimeUtils.getInstantMillis(end);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,200,f (period == null) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,201,StartMillis = iEndMillis;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,202, else {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,203,"hronology chrono = DateTimeUtils.getInstantChronology(end, null);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,204,"StartMillis = period.addTo(iEndMillis, -1, chrono);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,206,"heckInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,164,"super(period, end);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,216,uper();
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,217,ntervalConverter converter = ConverterManager.getInstance().getIntervalConverter(interval);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,218,ong[] millis = converter.getIntervalMillis(interval);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,219,StartMillis = millis[0];
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,220,EndMillis = millis[1];
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,221,"heckInterval(iStartMillis, iEndMillis);"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,226, Gets the start of this time interval which is inclusive.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,228," @return the start of the time interval,"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,229,  millisecond instant from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,231,ublic final long getStartMillis() {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,232,eturn iStartMillis;
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,236, Gets the end of this time interval which is exclusive.
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,238," @return the end of the time interval,"
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,239,  millisecond instant from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,241,ublic final long getEndMillis() {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,242,eturn iEndMillis;
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,174,super(interval);
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,253,ublic final Interval withStartMillis(long startInstant) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,185,public Interval withStartMillis(long startInstant) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,267,ublic final Interval withStartInstant(ReadableInstant start) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,199,public Interval withStartInstant(ReadableInstant start) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,279,ublic final Interval withEndMillis(long endInstant) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,211,public Interval withEndMillis(long endInstant) {
False,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,293,ublic final Interval withEndInstant(ReadableInstant end) {
True,JodaTime/src/java/org/joda/time/Interval.java,JodaTime/src/java/org/joda/time/Interval.java,225,public Interval withEndInstant(ReadableInstant end) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,58,mport org.joda.time.base.*;
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,59,mport org.joda.time.convert.ConverterManager;
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,60,mport org.joda.time.convert.IntervalConverter;
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,58,import org.joda.time.base.BaseInterval;
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,91,xtends AbstractInterval
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,89,extends BaseInterval
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,97,** The start of the period */
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,98,rivate long iStartMillis;
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,99,** The end of the period */
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,100,rivate long iEndMillis;
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,106,uper();
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,99,"super(0L, 0L);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,117,uper();
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,118,"heckInterval(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,119,StartMillis = startInstant;
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,120,EndMillis = endInstant;
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,110,"super(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,131,uper();
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,132,f (start == null && end == null) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,133,StartMillis = iEndMillis = DateTimeUtils.currentTimeMillis();
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,134, else {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,135,StartMillis = DateTimeUtils.getInstantMillis(start);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,136,EndMillis = DateTimeUtils.getInstantMillis(end);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,137,"heckInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,121,"super(start, end);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,150,uper();
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,151,StartMillis = DateTimeUtils.getInstantMillis(start);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,152,ong durationMillis = DateTimeUtils.getDurationMillis(duration);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,153,"EndMillis = FieldUtils.safeAdd(iStartMillis, durationMillis);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,154,"heckInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,133,"super(start, duration);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,166,uper();
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,167,EndMillis = DateTimeUtils.getInstantMillis(end);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,168,ong durationMillis = DateTimeUtils.getDurationMillis(duration);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,169,"StartMillis = FieldUtils.safeAdd(iEndMillis, -durationMillis);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,170,"heckInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,145,"super(duration, end);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,185,uper();
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,186,StartMillis = DateTimeUtils.getInstantMillis(start);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,187,f (period == null) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,188,EndMillis = iStartMillis;
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,189, else {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,190,"hronology chrono = DateTimeUtils.getInstantChronology(start, null);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,191,"EndMillis = period.addTo(iStartMillis, 1, chrono);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,193,"heckInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,160,"super(start, period);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,208,uper();
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,209,EndMillis = DateTimeUtils.getInstantMillis(end);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,210,f (period == null) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,211,StartMillis = iEndMillis;
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,212, else {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,213,"hronology chrono = DateTimeUtils.getInstantChronology(end, null);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,214,"StartMillis = period.addTo(iEndMillis, -1, chrono);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,216,"heckInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,175,"super(period, end);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,226,uper();
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,227,ntervalConverter converter = ConverterManager.getInstance().getIntervalConverter(interval);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,228,"onverter.setInto(this, interval);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,229,"heckInterval(iStartMillis, iEndMillis);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,234, Gets the start of this time interval which is inclusive.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,236," @return the start of the time interval,"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,237,  millisecond instant from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,239,ublic long getStartMillis() {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,240,eturn iStartMillis;
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,244, Gets the end of this time interval which is exclusive.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,246," @return the end of the time interval,"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,247,  millisecond instant from 1970-01-01T00:00:00Z
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,249,ublic long getEndMillis() {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,250,eturn iEndMillis;
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,185,super(interval);
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,189,"// NOTE: All updates go via setInterval(long,long), setStartMillis(long)"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,190,// or setEndMillis(long) on this class
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,256, <p>
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,257, All updates ocurr via this method (exclusing the constructors).
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,264,f (startInstant != iStartMillis || endInstant != iEndMillis) {
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,265,"heckInterval(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,266,StartMillis = startInstant;
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,267,EndMillis = endInstant;
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,200,"super.setInterval(startInstant, endInstant);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,296,StartMillis = iEndMillis = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,227,long now = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,228,"setInterval(now, now);"
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,313,"etInterval(startInstant, iEndMillis);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,245,super.setStartMillis(startInstant);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,324,"etInterval(startMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,256,setStartMillis(startMillis);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,330, <p>
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,331, Subclasses that wish to be immutable should override this method with an
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,332, empty implementation that is public and final. This also ensures that
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,333, all lower subclasses are also immutable.
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,340,"etInterval(iStartMillis, endInstant);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,268,super.setEndMillis(endInstant);
False,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,351,"etInterval(iStartMillis, endMillis);"
True,JodaTime/src/java/org/joda/time/MutableInterval.java,JodaTime/src/java/org/joda/time/MutableInterval.java,279,setEndMillis(endMillis);
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,112,ublic final Instant getStartInstant() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,112,public Instant getStartInstant() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,121,ublic final Instant getEndInstant() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,121,public Instant getEndInstant() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,134,ublic final long getDurationMillis() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,134,public long getDurationMillis() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,144,ublic final Duration getDuration() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,144,public Duration getDuration() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,163,ublic final boolean contains(long millisInstant) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,163,public boolean contains(long millisInstant) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,176,ublic final boolean containsNow() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,176,public boolean containsNow() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,188,ublic final boolean contains(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,188,public boolean contains(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,204,ublic final boolean contains(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,204,public boolean contains(ReadableInterval interval) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,225,ublic final boolean overlaps(ReadableInterval interval) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,225,public boolean overlaps(ReadableInterval interval) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,246,ublic final boolean isBefore(long millisInstant) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,246,public boolean isBefore(long millisInstant) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,257,ublic final boolean isBeforeNow() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,257,public boolean isBeforeNow() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,269,ublic final boolean isBefore(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,269,public boolean isBefore(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,285,ublic final boolean isAfter(long millisInstant) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,285,public boolean isAfter(long millisInstant) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,296,ublic final boolean isAfterNow() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,296,public boolean isAfterNow() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,308,ublic final boolean isAfter(ReadableInstant instant) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,308,public boolean isAfter(ReadableInstant instant) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,323,ublic final Interval toInterval() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,323,public Interval toInterval() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,337,ublic final MutableInterval toMutableInterval() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,337,public MutableInterval toMutableInterval() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,353,ublic final Period toPeriod() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,353,public Period toPeriod() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,369,ublic final Period toPeriod(PeriodType type) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,369,public Period toPeriod(PeriodType type) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,384,ublic final boolean equals(Object readableInterval) {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,384,public boolean equals(Object readableInterval) {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,401,ublic final int hashCode() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,401,public int hashCode() {
False,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,415,ublic final String toString() {
True,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,JodaTime/src/java/org/joda/time/base/AbstractInterval.java,415,public String toString() {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,2,"* Joda Software License, Version 1.0"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,5,* Copyright (c) 2001-2004 Stephen Colebourne.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,6,* All rights reserved.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,8,"* Redistribution and use in source and binary forms, with or without"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,9,"* modification, are permitted provided that the following conditions"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,10,* are met:
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,12,* 1. Redistributions of source code must retain the above copyright
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,13,"*    notice, this list of conditions and the following disclaimer."
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,15,* 2. Redistributions in binary form must reproduce the above copyright
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,16,"*    notice, this list of conditions and the following disclaimer in"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,17,*    the documentation and/or other materials provided with the
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,18,*    distribution.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,20,"* 3. The end-user documentation included with the redistribution,"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,21,"*    if any, must include the following acknowledgment:"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,22,"*       ""This product includes software developed by the"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,23,"*        Joda project (http://www.joda.org/)."""
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,24,"*    Alternately, this acknowledgment may appear in the software itself,"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,25,*    if and wherever such third-party acknowledgments normally appear.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,27,"* 4. The name ""Joda"" must not be used to endorse or promote products"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,28,*    derived from this software without prior written permission. For
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,29,"*    written permission, please contact licence@joda.org."
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,31,"* 5. Products derived from this software may not be called ""Joda"","
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,32,"*    nor may ""Joda"" appear in their name, without prior written"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,33,*    permission of the Joda project.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,39,"* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,46,* SUCH DAMAGE.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,49,* This software consists of voluntary contributions made by many
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,50,* individuals on behalf of the Joda project and was originally
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,51,* created by Stephen Colebourne <scolebourne@joda.org>. For more
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,52,"* information on the Joda project, please see <http://www.joda.org/>."
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,54,package org.joda.time.base;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,56,import java.io.Serializable;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,58,import org.joda.time.Chronology;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,59,import org.joda.time.DateTimeUtils;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,60,import org.joda.time.ReadWritableInterval;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,61,import org.joda.time.ReadableDuration;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,62,import org.joda.time.ReadableInstant;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,63,import org.joda.time.ReadableInterval;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,64,import org.joda.time.ReadablePeriod;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,65,import org.joda.time.convert.ConverterManager;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,66,import org.joda.time.convert.IntervalConverter;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,67,import org.joda.time.field.FieldUtils;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,70,* BaseInterval is an abstract implementation of ReadableInterval that stores
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,71,* data in two <code>long</code> millisecond fields.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,72,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,73,* This class should generally not be used directly by API users.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,74,* The {@link ReadableInterval} interface should be used when different
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,75,* kinds of interval objects are to be referenced.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,76,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,77,* BaseInterval subclasses may be mutable and not thread-safe.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,79,* @author Brian S O'Neill
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,80,* @author Sean Geoghegan
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,81,* @author Stephen Colebourne
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,82,* @since 1.0
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,84,public class BaseInterval
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,85,extends AbstractInterval
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,86,"implements ReadableInterval, Serializable {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,88,/** Serialization version */
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,89,private static final long serialVersionUID = 576586928732749278L;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,91,/** The start of the interval */
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,92,private long iStartMillis;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,93,/** The end of the interval */
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,94,private long iEndMillis;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,97,* Constructs an interval from a start and end instant.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,99,"* @param startInstant  start of this interval, as milliseconds from 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,100,"* @param endInstant  end of this interval, as milliseconds from 1970-01-01T00:00:00Z."
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,101,* @throws IllegalArgumentException if the end is before the start
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,103,"public BaseInterval(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,104,super();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,105,"checkInterval(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,106,iStartMillis = startInstant;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,107,iEndMillis = endInstant;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,111,* Constructs an interval from a start and end instant.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,113,"* @param start  start of this interval, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,114,"* @param end  end of this interval, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,115,* @throws IllegalArgumentException if the end is before the start
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,117,"public BaseInterval(ReadableInstant start, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,118,super();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,119,if (start == null && end == null) {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,120,iStartMillis = iEndMillis = DateTimeUtils.currentTimeMillis();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,121,} else {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,122,iStartMillis = DateTimeUtils.getInstantMillis(start);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,123,iEndMillis = DateTimeUtils.getInstantMillis(end);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,124,"checkInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,129,* Constructs an interval from a start instant and a duration.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,131,"* @param start  start of this interval, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,132,"* @param duration  the duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,133,* @throws IllegalArgumentException if the end is before the start
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,134,* @throws ArithmeticException if the end instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,136,"public BaseInterval(ReadableInstant start, ReadableDuration duration) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,137,super();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,138,iStartMillis = DateTimeUtils.getInstantMillis(start);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,139,long durationMillis = DateTimeUtils.getDurationMillis(duration);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,140,"iEndMillis = FieldUtils.safeAdd(iStartMillis, durationMillis);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,141,"checkInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,145,* Constructs an interval from a millisecond duration and an end instant.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,147,"* @param duration  the duration of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,148,"* @param end  end of this interval, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,149,* @throws IllegalArgumentException if the end is before the start
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,150,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,152,"public BaseInterval(ReadableDuration duration, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,153,super();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,154,iEndMillis = DateTimeUtils.getInstantMillis(end);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,155,long durationMillis = DateTimeUtils.getDurationMillis(duration);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,156,"iStartMillis = FieldUtils.safeAdd(iEndMillis, -durationMillis);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,157,"checkInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,161,* Constructs an interval from a start instant and a time period.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,162,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,163,"* When forming the interval, the chronology from the instant is used"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,164,"* if present, otherwise the chronology of the period is used."
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,166,"* @param start  start of this interval, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,167,"* @param period  the period of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,168,* @throws IllegalArgumentException if the end is before the start
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,169,* @throws ArithmeticException if the end instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,171,"public BaseInterval(ReadableInstant start, ReadablePeriod period) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,172,super();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,173,iStartMillis = DateTimeUtils.getInstantMillis(start);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,174,if (period == null) {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,175,iEndMillis = iStartMillis;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,176,} else {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,177,"Chronology chrono = DateTimeUtils.getInstantChronology(start, null);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,178,"iEndMillis = period.addTo(iStartMillis, 1, chrono);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,180,"checkInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,184,* Constructs an interval from a time period and an end instant.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,185,* <p>
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,186,"* When forming the interval, the chronology from the instant is used"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,187,"* if present, otherwise the chronology of the period is used."
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,189,"* @param period  the period of this interval, null means zero length"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,190,"* @param end  end of this interval, null means now"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,191,* @throws IllegalArgumentException if the end is before the start
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,192,* @throws ArithmeticException if the start instant exceeds the capacity of a long
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,194,"public BaseInterval(ReadablePeriod period, ReadableInstant end) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,195,super();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,196,iEndMillis = DateTimeUtils.getInstantMillis(end);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,197,if (period == null) {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,198,iStartMillis = iEndMillis;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,199,} else {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,200,"Chronology chrono = DateTimeUtils.getInstantChronology(end, null);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,201,"iStartMillis = period.addTo(iEndMillis, -1, chrono);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,203,"checkInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,207,* Constructs a time interval as a copy of another.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,209,* @param interval  the time interval to copy
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,210,* @throws IllegalArgumentException if the interval is null or invalid
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,212,public BaseInterval(Object interval) {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,213,super();
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,214,IntervalConverter converter = ConverterManager.getInstance().getIntervalConverter(interval);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,215,if (this instanceof ReadWritableInterval) {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,216,"converter.setInto((ReadWritableInterval) this, interval);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,217,} else {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,218,long[] millis = converter.getIntervalMillis(interval);
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,219,iStartMillis = millis[0];
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,220,iEndMillis = millis[1];
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,222,"checkInterval(iStartMillis, iEndMillis);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,227,* Gets the start of this time interval which is inclusive.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,229,"* @return the start of the time interval,"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,230,*  millisecond instant from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,232,public long getStartMillis() {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,233,return iStartMillis;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,237,* Gets the end of this time interval which is exclusive.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,239,"* @return the end of the time interval,"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,240,*  millisecond instant from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,242,public long getEndMillis() {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,243,return iEndMillis;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,248,* Sets the start of this time interval which is inclusive.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,250,"* @param startInstant  the new start of the time interval,"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,251,*  millisecond instant from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,253,protected void setStartMillis(long startInstant) {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,254,"checkInterval(startInstant, iEndMillis);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,255,iStartMillis = startInstant;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,259,* Sets the end of this time interval which is exclusive.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,261,"* @param endInstant  the new end of the time interval,"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,262,*  millisecond instant from 1970-01-01T00:00:00Z
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,264,protected void setEndMillis(long endInstant) {
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,265,"checkInterval(iStartMillis, endInstant);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,266,iEndMillis = endInstant;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,270,* Sets this interval from two millisecond instants.
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,272,* @param startInstant  the start of the time interval
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,273,* @param endInstant  the start of the time interval
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,274,* @throws IllegalArgumentException if the end is before the start
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,276,"protected void setInterval(long startInstant, long endInstant) {"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,277,"checkInterval(startInstant, endInstant);"
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,278,iStartMillis = startInstant;
True,JodaTime/src/java/org/joda/time/base/BaseInterval.java,JodaTime/src/java/org/joda/time/base/BaseInterval.java,279,iEndMillis = endInstant;

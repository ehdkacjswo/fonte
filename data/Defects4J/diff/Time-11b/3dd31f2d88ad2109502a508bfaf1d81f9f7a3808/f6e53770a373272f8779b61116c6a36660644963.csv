is_addition,old_file_path,new_file_path,line_num,content
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,250,his.iZone = zone;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,250,iZone = zone;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,254,eturn iTimeField ? iField.isPrecise() : iZone.isFixed();
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,254,return iTimeField ? iField.isPrecise() : this.iZone.isFixed();
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,262,"eturn iField.getValue(duration, instant + this.iZone.getOffset(instant));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,262,"return iField.getValue(duration, addOffset(instant));"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,266,"eturn iField.getValueAsLong(duration, instant + this.iZone.getOffset(instant));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,266,"return iField.getValueAsLong(duration, addOffset(instant));"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,270,"eturn iField.getMillis(value, instant + this.iZone.getOffset(instant));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,270,"return iField.getMillis(value, addOffset(instant));"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,274,"eturn iField.getMillis(value, instant + this.iZone.getOffset(instant));"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,274,"return iField.getMillis(value, addOffset(instant));"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,278,nt offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,278,int offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,280,eturn instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,280,return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,284,nt offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,284,int offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,286,eturn instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,286,return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,290,nt offset = this.iZone.getOffset(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,290,int offset = getOffsetToAdd(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,292,"minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,292,"(minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,297,nt offset = this.iZone.getOffset(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,297,int offset = getOffsetToAdd(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,299,"minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,299,"(minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,303,private int getOffsetToAdd(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,304,int offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,305,long sum = instant + offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,306,"// If there is a sign change, but the two values have the same sign..."
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,307,if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,308,"throw new ArithmeticException(""Adding time zone offset caused overflow"");"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,310,return offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,313,private int getOffsetFromLocalToSubtract(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,314,int offset = this.iZone.getOffsetFromLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,315,long diff = instant - offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,316,"// If there is a sign change, but the two values have different signs..."
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,317,if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,318,"throw new ArithmeticException(""Subtracting time zone offset caused overflow"");"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,320,return offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,323,private long addOffset(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,324,int offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,325,long sum = instant + offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,326,"// If there is a sign change, but the two values have the same sign..."
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,327,if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,328,"throw new ArithmeticException(""Adding time zone offset caused overflow"");"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,330,return sum;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,330,his.iZone = zone;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,360,iZone = zone;
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,342,eturn iField.get(instant + this.iZone.getOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,372,return iField.get(addOffset(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,346,"eturn iField.getAsText(instant + this.iZone.getOffset(instant), locale);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,376,"return iField.getAsText(addOffset(instant), locale);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,350,"eturn iField.getAsShortText(instant + this.iZone.getOffset(instant), locale);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,380,"return iField.getAsShortText(addOffset(instant), locale);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,354,nt offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,384,int offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,356,eturn instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,386,return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,360,nt offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,390,int offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,362,eturn instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,392,return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,366,nt offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,396,int offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,368,eturn instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,398,return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,372,ong offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,402,long offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,375,ong offsetFromLocal = this.iZone.getOffsetFromLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,405,long offsetFromLocal = getOffsetFromLocalToSubtract(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,389,"nstant = iField.set(instant + this.iZone.getOffset(instant), text, locale);"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,419,"instant = iField.set(addOffset(instant), text, locale);"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,391,eturn instant - this.iZone.getOffsetFromLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,421,return instant - getOffsetFromLocalToSubtract(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,395,nt offset = this.iZone.getOffset(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,425,int offset = getOffsetToAdd(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,397,"minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,427,"(minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,402,nt offset = this.iZone.getOffset(subtrahendInstant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,432,int offset = getOffsetToAdd(subtrahendInstant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,404,"minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,434,"(minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),"
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,417,eturn iField.isLeap(instant + this.iZone.getOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,447,return iField.isLeap(addOffset(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,421,eturn iField.getLeapAmount(instant + this.iZone.getOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,451,return iField.getLeapAmount(addOffset(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,429,nt offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,459,int offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,431,eturn instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,461,return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,435,nt offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,465,int offset = getOffsetToAdd(instant);
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,437,eturn instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,467,return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,441,eturn iField.remainder(instant + this.iZone.getOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,471,return iField.remainder(addOffset(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,449,eturn iField.getMinimumValue(instant + this.iZone.getOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,479,return iField.getMinimumValue(addOffset(instant));
False,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,465,eturn iField.getMaximumValue(instant + this.iZone.getOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,495,return iField.getMaximumValue(addOffset(instant));
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,514,private int getOffsetToAdd(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,515,int offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,516,long sum = instant + offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,517,"// If there is a sign change, but the two values have the same sign..."
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,518,if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,519,"throw new ArithmeticException(""Adding time zone offset caused overflow"");"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,521,return offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,524,private int getOffsetFromLocalToSubtract(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,525,int offset = this.iZone.getOffsetFromLocal(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,526,long diff = instant - offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,527,"// If there is a sign change, but the two values have different signs..."
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,528,if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,529,"throw new ArithmeticException(""Subtracting time zone offset caused overflow"");"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,531,return offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,534,private long addOffset(long instant) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,535,int offset = this.iZone.getOffset(instant);
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,536,long sum = instant + offset;
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,537,"// If there is a sign change, but the two values have the same sign..."
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,538,if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,539,"throw new ArithmeticException(""Adding time zone offset caused overflow"");"
True,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java,541,return sum;
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,64,ong total = ((long) val1) + ((long) val2);
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,65,f (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,66,"hrow new ArithmeticException(""The calculation caused an overflow: "" + val1 +"" + "" + val2);"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,64,int sum = val1 + val2;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,65,"// If there is a sign change, but the two values have the same sign..."
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,66,if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,67,throw new ArithmeticException
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,68,"(""The calculation caused an overflow: "" + val1 + "" + "" + val2);"
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,68,eturn (int) total;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,70,return sum;
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,80,ong total = val1 + val2;
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,81,f (val1 > 0 && val2 > 0 && total < 0) {
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,82,"hrow new ArithmeticException(""The calculation caused an overflow: "" + val1 +"" + "" + val2);"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,82,long sum = val1 + val2;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,83,"// If there is a sign change, but the two values have the same sign..."
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,84,if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,85,throw new ArithmeticException
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,86,"(""The calculation caused an overflow: "" + val1 + "" + "" + val2);"
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,84,f (val1 < 0 && val2 < 0 && total > 0) {
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,85,"hrow new ArithmeticException(""The calculation caused an overflow: "" + val1 +"" + "" + val2);"
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,87,eturn total;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,88,return sum;
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,99,f (val2 == Long.MIN_VALUE) {
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,100,f (val1 <= 0L) {
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,101,eturn (val1 - val2);
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,103,"hrow new ArithmeticException(""The calculation caused an overflow: "" + val1 +"" - "" + val2);"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,100,long diff = val1 - val2;
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,101,"// If there is a sign change, but the two values have different signs..."
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,102,if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,103,throw new ArithmeticException
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,104,"(""The calculation caused an overflow: "" + val1 + "" - "" + val2);"
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,105,"eturn safeAdd(val1, -val2);"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,106,return diff;
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,117,f (val1 == 0  || val2 == 0) {
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,118,if (val1 == 0 || val2 == 0) {
False,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,122,"hrow new ArithmeticException(""The calculation caused an overflow: "" + val1 +"" * "" + val2);"
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,123,throw new ArithmeticException
True,JodaTime/src/java/org/joda/time/field/FieldUtils.java,JodaTime/src/java/org/joda/time/field/FieldUtils.java,124,"(""The calculation caused an overflow: "" + val1 + "" * "" + val2);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,528,"Printer.printTo(buf, instant + offset, chrono.withUTC(), offset, zone, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,528,long adjustedInstant = instant + offset;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,529,if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,530,"// Time zone offset overflow, so revert to UTC."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,531,adjustedInstant = instant;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,532,offset = 0;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,534,"iPrinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);"
False,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,537,"Printer.printTo(buf, instant + offset, chrono.withUTC(), offset, zone, iLocale);"
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,543,long adjustedInstant = instant + offset;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,544,if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,545,"// Time zone offset overflow, so revert to UTC."
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,546,adjustedInstant = instant;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,547,offset = 0;
True,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java,549,"iPrinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);"
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1200,} catch (ArithmeticException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1201,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1202,start = instant;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1215,} catch (ArithmeticException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1216,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1217,end = instant;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1244,} catch (ArithmeticException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1245,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1246,start = instant;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1259,} catch (ArithmeticException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1260,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1261,end = instant;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1301,} catch (ArithmeticException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1302,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1303,start = instant;
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1312,} catch (ArithmeticException e) {
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1313,// Overflowed.
True,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java,1314,end = instant;
